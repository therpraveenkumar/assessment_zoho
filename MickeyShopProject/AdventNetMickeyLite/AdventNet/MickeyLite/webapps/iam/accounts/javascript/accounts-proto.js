
App = function() {
    var _formprefix = "";
    
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var defaultSubDomain = "";
this.setDefaultSubDomain = function(defaultSubDomain) { 
    this.defaultSubDomain = defaultSubDomain;
    return this;
};
this.getDefaultSubDomain = function() {
    return this.defaultSubDomain;
};
var defaultRoSubDomain = "";
this.setDefaultRoSubDomain = function(defaultRoSubDomain) { 
    this.defaultRoSubDomain = defaultRoSubDomain;
    return this;
};
this.getDefaultRoSubDomain = function() {
    return this.defaultRoSubDomain;
};
var appCode = "";
this.setAppCode = function(appCode) { 
    this.appCode = appCode;
    return this;
};
this.getAppCode = function() {
    return this.appCode;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var aliasName = "";
this.setAliasName = function(aliasName) { 
    this.aliasName = aliasName;
    return this;
};
this.getAliasName = function() {
    return this.aliasName;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var homePage = "";
this.setHomePage = function(homePage) { 
    this.homePage = homePage;
    return this;
};
this.getHomePage = function() {
    return this.homePage;
};
var allowRegistration = "";
this.setAllowRegistration = function(allowRegistration) { 
    this.allowRegistration = allowRegistration;
    return this;
};
this.getAllowRegistration = function() {
    return this.allowRegistration;
};
var autoRegistration = "";
this.setAutoRegistration = function(autoRegistration) { 
    this.autoRegistration = autoRegistration;
    return this;
};
this.getAutoRegistration = function() {
    return this.autoRegistration;
};
var serviceType = "1";
this.setServiceType = function(serviceType) { 
    this.serviceType = serviceType;
    return this;
};
this.getServiceType = function() {
    return this.serviceType;
};
var listingEnabled = "1";
this.setListingEnabled = function(listingEnabled) { 
    this.listingEnabled = listingEnabled;
    return this;
};
this.getListingEnabled = function() {
    return this.listingEnabled;
};
var listingOrder = "1";
this.setListingOrder = function(listingOrder) { 
    this.listingOrder = listingOrder;
    return this;
};
this.getListingOrder = function() {
    return this.listingOrder;
};
var enableSsticket = "0";
this.setEnableSsticket = function(enableSsticket) { 
    this.enableSsticket = enableSsticket;
    return this;
};
this.getEnableSsticket = function() {
    return this.enableSsticket;
};
var logoUrl = "";
this.setLogoUrl = function(logoUrl) { 
    this.logoUrl = logoUrl;
    return this;
};
this.getLogoUrl = function() {
    return this.logoUrl;
};
var isLoginnameRequired = "";
this.setIsLoginnameRequired = function(isLoginnameRequired) { 
    this.isLoginnameRequired = isLoginnameRequired;
    return this;
};
this.getIsLoginnameRequired = function() {
    return this.isLoginnameRequired;
};
var restApiPath = "";
this.setRestApiPath = function(restApiPath) { 
    this.restApiPath = restApiPath;
    return this;
};
this.getRestApiPath = function() {
    return this.restApiPath;
};
var restServer = "";
this.setRestServer = function(restServer) { 
    this.restServer = restServer;
    return this;
};
this.getRestServer = function() {
    return this.restServer;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var service = "Zoho";
this.setService = function(service) { 
    this.service = service;
    return this;
};
this.getService = function() {
    return this.service;
};
var appallowedmethods = undefined;
this.setAppallowedmethodss = function(appallowedmethods) { 
    this.appallowedmethods = appallowedmethods;
    return this;
};
this.getAppallowedmethodss = function() {
    return this.appallowedmethods;
};
this.addAppallowedmethods = function(appallowedmethods) { 
 if(!this.appallowedmethods) this.appallowedmethods = new Array(); 
  this.appallowedmethods.push(appallowedmethods); 
 return this;
};

var appkeystore = undefined;
this.setAppkeystores = function(appkeystore) { 
    this.appkeystore = appkeystore;
    return this;
};
this.getAppkeystores = function() {
    return this.appkeystore;
};
this.addAppkeystore = function(appkeystore) { 
 if(!this.appkeystore) this.appkeystore = new Array(); 
  this.appkeystore.push(appkeystore); 
 return this;
};

var configuration = undefined;
this.setConfigurations = function(configuration) { 
    this.configuration = configuration;
    return this;
};
this.getConfigurations = function() {
    return this.configuration;
};
this.addConfiguration = function(configuration) { 
 if(!this.configuration) this.configuration = new Array(); 
  this.configuration.push(configuration); 
 return this;
};

var role = undefined;
this.setRoles = function(role) { 
    this.role = role;
    return this;
};
this.getRoles = function() {
    return this.role;
};
this.addRole = function(role) { 
 if(!this.role) this.role = new Array(); 
  this.role.push(role); 
 return this;
};

var appsystemrole = undefined;
this.setAppsystemroles = function(appsystemrole) { 
    this.appsystemrole = appsystemrole;
    return this;
};
this.getAppsystemroles = function() {
    return this.appsystemrole;
};
this.addAppsystemrole = function(appsystemrole) { 
 if(!this.appsystemrole) this.appsystemrole = new Array(); 
  this.appsystemrole.push(appsystemrole); 
 return this;
};

var applicense = undefined;
this.setApplicenses = function(applicense) { 
    this.applicense = applicense;
    return this;
};
this.getApplicenses = function() {
    return this.applicense;
};
this.addApplicense = function(applicense) { 
 if(!this.applicense) this.applicense = new Array(); 
  this.applicense.push(applicense); 
 return this;
};

var scope = undefined;
this.setScopes = function(scope) { 
    this.scope = scope;
    return this;
};
this.getScopes = function() {
    return this.scope;
};
this.addScope = function(scope) { 
 if(!this.scope) this.scope = new Array(); 
  this.scope.push(scope); 
 return this;
};

var statement = undefined;
this.setStatements = function(statement) { 
    this.statement = statement;
    return this;
};
this.getStatements = function() {
    return this.statement;
};
this.addStatement = function(statement) { 
 if(!this.statement) this.statement = new Array(); 
  this.statement.push(statement); 
 return this;
};

var appannouncement = undefined;
this.setAppannouncements = function(appannouncement) { 
    this.appannouncement = appannouncement;
    return this;
};
this.getAppannouncements = function() {
    return this.appannouncement;
};
this.addAppannouncement = function(appannouncement) { 
 if(!this.appannouncement) this.appannouncement = new Array(); 
  this.appannouncement.push(appannouncement); 
 return this;
};

var maildetails = undefined;
this.setMaildetailss = function(maildetails) { 
    this.maildetails = maildetails;
    return this;
};
this.getMaildetailss = function() {
    return this.maildetails;
};
this.addMaildetails = function(maildetails) { 
 if(!this.maildetails) this.maildetails = new Array(); 
  this.maildetails.push(maildetails); 
 return this;
};

var mailtypes = undefined;
this.setMailtypess = function(mailtypes) { 
    this.mailtypes = mailtypes;
    return this;
};
this.getMailtypess = function() {
    return this.mailtypes;
};
this.addMailtypes = function(mailtypes) { 
 if(!this.mailtypes) this.mailtypes = new Array(); 
  this.mailtypes.push(mailtypes); 
 return this;
};

var apptemplate = undefined;
this.setApptemplates = function(apptemplate) { 
    this.apptemplate = apptemplate;
    return this;
};
this.getApptemplates = function() {
    return this.apptemplate;
};
this.addApptemplate = function(apptemplate) { 
 if(!this.apptemplate) this.apptemplate = new Array(); 
  this.apptemplate.push(apptemplate); 
 return this;
};

var applanguages = undefined;
this.setApplanguagess = function(applanguages) { 
    this.applanguages = applanguages;
    return this;
};
this.getApplanguagess = function() {
    return this.applanguages;
};
this.addApplanguages = function(applanguages) { 
 if(!this.applanguages) this.applanguages = new Array(); 
  this.applanguages.push(applanguages); 
 return this;
};

var authenticationtokens = undefined;
this.setAuthenticationtokenss = function(authenticationtokens) { 
    this.authenticationtokens = authenticationtokens;
    return this;
};
this.getAuthenticationtokenss = function() {
    return this.authenticationtokens;
};
this.addAuthenticationtokens = function(authenticationtokens) { 
 if(!this.authenticationtokens) this.authenticationtokens = new Array(); 
  this.authenticationtokens.push(authenticationtokens); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppId(json["app_id"]);
		this.setAppName(json["app_name"]);
		this.setDefaultSubDomain(json["default_sub_domain"]);
		this.setDefaultRoSubDomain(json["default_ro_sub_domain"]);
		this.setAppCode(json["app_code"]);
		this.setDisplayName(json["display_name"]);
		this.setAliasName(json["alias_name"]);
		this.setDescription(json["description"]);
		this.setHomePage(json["home_page"]);
		this.setAllowRegistration(json["allow_registration"]);
		this.setAutoRegistration(json["auto_registration"]);
		this.setServiceType(json["service_type"]);
		this.setListingEnabled(json["listing_enabled"]);
		this.setListingOrder(json["listing_order"]);
		this.setEnableSsticket(json["enable_ssticket"]);
		this.setLogoUrl(json["logo_url"]);
		this.setIsLoginnameRequired(json["is_loginname_required"]);
		this.setRestApiPath(json["rest_api_path"]);
		this.setRestServer(json["rest_server"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setService(json["service"]);
		this.setAppallowedmethodss(URI.getResourceArray(json["appAllowedMethods"],"appallowedmethods"));
		this.setAppkeystores(URI.getResourceArray(json["appKeyStore"],"appkeystore"));
		this.setConfigurations(URI.getResourceArray(json["configuration"],"configuration"));
		this.setRoles(URI.getResourceArray(json["role"],"role"));
		this.setAppsystemroles(URI.getResourceArray(json["appSystemRole"],"appsystemrole"));
		this.setApplicenses(URI.getResourceArray(json["appLicense"],"applicense"));
		this.setScopes(URI.getResourceArray(json["scope"],"scope"));
		this.setStatements(URI.getResourceArray(json["statement"],"statement"));
		this.setAppannouncements(URI.getResourceArray(json["appAnnouncement"],"appannouncement"));
		this.setMaildetailss(URI.getResourceArray(json["mailDetails"],"maildetails"));
		this.setMailtypess(URI.getResourceArray(json["mailTypes"],"mailtypes"));
		this.setApptemplates(URI.getResourceArray(json["appTemplate"],"apptemplate"));
		this.setApplanguagess(URI.getResourceArray(json["appLanguages"],"applanguages"));
		this.setAuthenticationtokenss(URI.getResourceArray(json["authenticationTokens"],"authenticationtokens"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getDefaultSubDomain()) json += '"default_sub_domain"' + ":" + '"' + jsonEscape(this.getDefaultSubDomain())  + '",';
		if(this.getDefaultRoSubDomain()) json += '"default_ro_sub_domain"' + ":" + '"' + jsonEscape(this.getDefaultRoSubDomain())  + '",';
		if(this.getAppCode()) json += '"app_code"' + ":" + '"' + jsonEscape(this.getAppCode())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getAliasName()) json += '"alias_name"' + ":" + '"' + jsonEscape(this.getAliasName())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getHomePage()) json += '"home_page"' + ":" + '"' + jsonEscape(this.getHomePage())  + '",';
		if(this.getAllowRegistration()) json += '"allow_registration"' + ":" + '"' + jsonEscape(this.getAllowRegistration())  + '",';
		if(this.getAutoRegistration()) json += '"auto_registration"' + ":" + '"' + jsonEscape(this.getAutoRegistration())  + '",';
		if(this.getServiceType()) json += '"service_type"' + ":" + '"' + jsonEscape(this.getServiceType())  + '",';
		if(this.getListingEnabled()) json += '"listing_enabled"' + ":" + '"' + jsonEscape(this.getListingEnabled())  + '",';
		if(this.getListingOrder()) json += '"listing_order"' + ":" + '"' + jsonEscape(this.getListingOrder())  + '",';
		if(this.getEnableSsticket()) json += '"enable_ssticket"' + ":" + '"' + jsonEscape(this.getEnableSsticket())  + '",';
		if(this.getLogoUrl()) json += '"logo_url"' + ":" + '"' + jsonEscape(this.getLogoUrl())  + '",';
		if(this.getIsLoginnameRequired()) json += '"is_loginname_required"' + ":" + '"' + jsonEscape(this.getIsLoginnameRequired())  + '",';
		if(this.getRestApiPath()) json += '"rest_api_path"' + ":" + '"' + jsonEscape(this.getRestApiPath())  + '",';
		if(this.getRestServer()) json += '"rest_server"' + ":" + '"' + jsonEscape(this.getRestServer())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getService()) json += '"service"' + ":" + '"' + jsonEscape(this.getService())  + '",';
		if(this.getAppallowedmethodss()) json += '"appAllowedMethods"' + ":" + URI.toJSONArray(this.getAppallowedmethodss())  + ',';
		if(this.getAppkeystores()) json += '"appKeyStore"' + ":" + URI.toJSONArray(this.getAppkeystores())  + ',';
		if(this.getConfigurations()) json += '"configuration"' + ":" + URI.toJSONArray(this.getConfigurations())  + ',';
		if(this.getRoles()) json += '"role"' + ":" + URI.toJSONArray(this.getRoles())  + ',';
		if(this.getAppsystemroles()) json += '"appSystemRole"' + ":" + URI.toJSONArray(this.getAppsystemroles())  + ',';
		if(this.getApplicenses()) json += '"appLicense"' + ":" + URI.toJSONArray(this.getApplicenses())  + ',';
		if(this.getScopes()) json += '"scope"' + ":" + URI.toJSONArray(this.getScopes())  + ',';
		if(this.getStatements()) json += '"statement"' + ":" + URI.toJSONArray(this.getStatements())  + ',';
		if(this.getAppannouncements()) json += '"appAnnouncement"' + ":" + URI.toJSONArray(this.getAppannouncements())  + ',';
		if(this.getMaildetailss()) json += '"mailDetails"' + ":" + URI.toJSONArray(this.getMaildetailss())  + ',';
		if(this.getMailtypess()) json += '"mailTypes"' + ":" + URI.toJSONArray(this.getMailtypess())  + ',';
		if(this.getApptemplates()) json += '"appTemplate"' + ":" + URI.toJSONArray(this.getApptemplates())  + ',';
		if(this.getApplanguagess()) json += '"appLanguages"' + ":" + URI.toJSONArray(this.getApplanguagess())  + ',';
		if(this.getAuthenticationtokenss()) json += '"authenticationTokens"' + ":" + URI.toJSONArray(this.getAuthenticationtokenss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(App.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.appId && !(/^[a-zA-Z0-9_\-]+$/).test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.defaultSubDomain && !(/^((ht|f)tp(s?)\:\/\/[-.\w]*)?(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+\*=&%\$;#_@]*)?$/).test(this.defaultSubDomain)) { throw new ValidationError(_formprefix + "default_sub_domain", ValidationError.PATTERN_FAILED);}
if(this.defaultRoSubDomain && !(/^((ht|f)tp(s?)\:\/\/[-.\w]*)?(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+\*=&%\$;#_@]*)?$/).test(this.defaultRoSubDomain)) { throw new ValidationError(_formprefix + "default_ro_sub_domain", ValidationError.PATTERN_FAILED);}
if(this.appCode && !(/^[A-Z]{1,5}$/).test(this.appCode)) { throw new ValidationError(_formprefix + "app_code", ValidationError.PATTERN_FAILED);}
if(this.displayName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.displayName)) { throw new ValidationError(_formprefix + "display_name", ValidationError.PATTERN_FAILED);}
if(this.aliasName && !(/^([a-zA-Z0-9])+$/).test(this.aliasName)) { throw new ValidationError(_formprefix + "alias_name", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.homePage && !(/^((ht|f)tp(s?)\:\/\/[-.\w]*)?(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+\*=&%\$;#_@]*)?$/).test(this.homePage)) { throw new ValidationError(_formprefix + "home_page", ValidationError.PATTERN_FAILED);}
if(this.allowRegistration && !Validator.BOOLEAN.test(this.allowRegistration)) { throw new ValidationError(_formprefix + "allow_registration", ValidationError.PATTERN_FAILED);}
if(this.autoRegistration && !Validator.BOOLEAN.test(this.autoRegistration)) { throw new ValidationError(_formprefix + "auto_registration", ValidationError.PATTERN_FAILED);}
if(this.serviceType && !Validator.INTEGER.test(this.serviceType)) { throw new ValidationError(_formprefix + "service_type", ValidationError.PATTERN_FAILED);}
if(this.listingEnabled && !Validator.INTEGER.test(this.listingEnabled)) { throw new ValidationError(_formprefix + "listing_enabled", ValidationError.PATTERN_FAILED);}
if(this.listingOrder && !Validator.INTEGER.test(this.listingOrder)) { throw new ValidationError(_formprefix + "listing_order", ValidationError.PATTERN_FAILED);}
if(this.enableSsticket && !Validator.INTEGER.test(this.enableSsticket)) { throw new ValidationError(_formprefix + "enable_ssticket", ValidationError.PATTERN_FAILED);}
if(this.logoUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.logoUrl)) { throw new ValidationError(_formprefix + "logo_url", ValidationError.PATTERN_FAILED);}
if(this.isLoginnameRequired && !Validator.BOOLEAN.test(this.isLoginnameRequired)) { throw new ValidationError(_formprefix + "is_loginname_required", ValidationError.PATTERN_FAILED);}
if(this.restApiPath && !(/^([A-Za-z0-9_.\-]+)$/).test(this.restApiPath)) { throw new ValidationError(_formprefix + "rest_api_path", ValidationError.PATTERN_FAILED);}
if(this.restServer && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.restServer)) { throw new ValidationError(_formprefix + "rest_server", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.appallowedmethods) { for(i=0; i < this.appallowedmethods.length; i++ ) { this.appallowedmethods[i].validate(); } }
if(this.appkeystore) { for(i=0; i < this.appkeystore.length; i++ ) { this.appkeystore[i].validate(); } }
if(this.configuration) { for(i=0; i < this.configuration.length; i++ ) { this.configuration[i].validate(); } }
if(this.role) { for(i=0; i < this.role.length; i++ ) { this.role[i].validate(); } }
if(this.appsystemrole) { for(i=0; i < this.appsystemrole.length; i++ ) { this.appsystemrole[i].validate(); } }
if(this.applicense) { for(i=0; i < this.applicense.length; i++ ) { this.applicense[i].validate(); } }
if(this.scope) { for(i=0; i < this.scope.length; i++ ) { this.scope[i].validate(); } }
if(this.statement) { for(i=0; i < this.statement.length; i++ ) { this.statement[i].validate(); } }
if(this.appannouncement) { for(i=0; i < this.appannouncement.length; i++ ) { this.appannouncement[i].validate(); } }
if(this.maildetails) { for(i=0; i < this.maildetails.length; i++ ) { this.maildetails[i].validate(); } }
if(this.mailtypes) { for(i=0; i < this.mailtypes.length; i++ ) { this.mailtypes[i].validate(); } }
if(this.apptemplate) { for(i=0; i < this.apptemplate.length; i++ ) { this.apptemplate[i].validate(); } }
if(this.applanguages) { for(i=0; i < this.applanguages.length; i++ ) { this.applanguages[i].validate(); } }
if(this.authenticationtokens) { for(i=0; i < this.authenticationtokens.length; i++ ) { this.authenticationtokens[i].validate(); } }

	return this;
    }
}
App.path = "app";
App.newBuilder = function() {
    return new App();
};

SAMLParams = function() {
    var _formprefix = "";
    
var requestType = "";
this.setRequestType = function(requestType) { 
    this.requestType = requestType;
    return this;
};
this.getRequestType = function() {
    return this.requestType;
};
var paramName = "";
this.setParamName = function(paramName) { 
    this.paramName = paramName;
    return this;
};
this.getParamName = function() {
    return this.paramName;
};
var paramValue = "";
this.setParamValue = function(paramValue) { 
    this.paramValue = paramValue;
    return this;
};
this.getParamValue = function() {
    return this.paramValue;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRequestType(json["request_type"]);
		this.setParamName(json["param_name"]);
		this.setParamValue(json["param_value"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRequestType()) json += '"request_type"' + ":" + '"' + jsonEscape(this.getRequestType())  + '",';
		if(this.getParamName()) json += '"param_name"' + ":" + '"' + jsonEscape(this.getParamName())  + '",';
		if(this.getParamValue()) json += '"param_value"' + ":" + '"' + jsonEscape(this.getParamValue())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SAMLParams.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	
	return this;
    }
}
SAMLParams.path = "samlparams";
SAMLParams.newBuilder = function() {
    return new SAMLParams();
};

Configuration = function() {
    var _formprefix = "";
    
var configName = "";
this.setConfigName = function(configName) { 
    this.configName = configName;
    return this;
};
this.getConfigName = function() {
    return this.configName;
};
var configValue = "";
this.setConfigValue = function(configValue) { 
    this.configValue = configValue;
    return this;
};
this.getConfigValue = function() {
    return this.configValue;
};
var configRoValue = "";
this.setConfigRoValue = function(configRoValue) { 
    this.configRoValue = configRoValue;
    return this;
};
this.getConfigRoValue = function() {
    return this.configRoValue;
};
var dataType = "";
this.setDataType = function(dataType) { 
    this.dataType = dataType;
    return this;
};
this.getDataType = function() {
    return this.dataType;
};
var defaultValue = "";
this.setDefaultValue = function(defaultValue) { 
    this.defaultValue = defaultValue;
    return this;
};
this.getDefaultValue = function() {
    return this.defaultValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setConfigName(json["config_name"]);
		this.setConfigValue(json["config_value"]);
		this.setConfigRoValue(json["config_ro_value"]);
		this.setDataType(json["data_type"]);
		this.setDefaultValue(json["default_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getConfigName()) json += '"config_name"' + ":" + '"' + jsonEscape(this.getConfigName())  + '",';
		if(this.getConfigValue()) json += '"config_value"' + ":" + '"' + jsonEscape(this.getConfigValue())  + '",';
		if(this.getConfigRoValue()) json += '"config_ro_value"' + ":" + '"' + jsonEscape(this.getConfigRoValue())  + '",';
		if(this.getDataType()) json += '"data_type"' + ":" + '"' + jsonEscape(this.getDataType())  + '",';
		if(this.getDefaultValue()) json += '"default_value"' + ":" + '"' + jsonEscape(this.getDefaultValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Configuration.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.configName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.configName)) { throw new ValidationError(_formprefix + "config_name", ValidationError.PATTERN_FAILED);}
if(this.configValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.configValue)) { throw new ValidationError(_formprefix + "config_value", ValidationError.PATTERN_FAILED);}
if(this.configRoValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.configRoValue)) { throw new ValidationError(_formprefix + "config_ro_value", ValidationError.PATTERN_FAILED);}
if(this.defaultValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.defaultValue)) { throw new ValidationError(_formprefix + "default_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Configuration.path = "configuration";
Configuration.newBuilder = function() {
    return new Configuration();
};

SAMLSpApp = function() {
    var _formprefix = "";
    
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var acsUrl = "";
this.setAcsUrl = function(acsUrl) { 
    this.acsUrl = acsUrl;
    return this;
};
this.getAcsUrl = function() {
    return this.acsUrl;
};
var identifier = "";
this.setIdentifier = function(identifier) { 
    this.identifier = identifier;
    return this;
};
this.getIdentifier = function() {
    return this.identifier;
};
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var nameIdField = "1";
this.setNameIdField = function(nameIdField) { 
    this.nameIdField = nameIdField;
    return this;
};
this.getNameIdField = function() {
    return this.nameIdField;
};
var nameId = "";
this.setNameId = function(nameId) { 
    this.nameId = nameId;
    return this;
};
this.getNameId = function() {
    return this.nameId;
};
var signInUrl = "";
this.setSignInUrl = function(signInUrl) { 
    this.signInUrl = signInUrl;
    return this;
};
this.getSignInUrl = function() {
    return this.signInUrl;
};
var defaultRelayState = "";
this.setDefaultRelayState = function(defaultRelayState) { 
    this.defaultRelayState = defaultRelayState;
    return this;
};
this.getDefaultRelayState = function() {
    return this.defaultRelayState;
};
var publicKey = "";
this.setPublicKey = function(publicKey) { 
    this.publicKey = publicKey;
    return this;
};
this.getPublicKey = function() {
    return this.publicKey;
};
var privateKey = "";
this.setPrivateKey = function(privateKey) { 
    this.privateKey = privateKey;
    return this;
};
this.getPrivateKey = function() {
    return this.privateKey;
};
var certificateExpiryTime = "";
this.setCertificateExpiryTime = function(certificateExpiryTime) { 
    this.certificateExpiryTime = certificateExpiryTime;
    return this;
};
this.getCertificateExpiryTime = function() {
    return this.certificateExpiryTime;
};
var idpModeSupported = "true";
this.setIdpModeSupported = function(idpModeSupported) { 
    this.idpModeSupported = idpModeSupported;
    return this;
};
this.getIdpModeSupported = function() {
    return this.idpModeSupported;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var enableLogout = "false";
this.setEnableLogout = function(enableLogout) { 
    this.enableLogout = enableLogout;
    return this;
};
this.getEnableLogout = function() {
    return this.enableLogout;
};
var logoutUrl = "";
this.setLogoutUrl = function(logoutUrl) { 
    this.logoutUrl = logoutUrl;
    return this;
};
this.getLogoutUrl = function() {
    return this.logoutUrl;
};
var idpIssuer = "";
this.setIdpIssuer = function(idpIssuer) { 
    this.idpIssuer = idpIssuer;
    return this;
};
this.getIdpIssuer = function() {
    return this.idpIssuer;
};
var appType = "1";
this.setAppType = function(appType) { 
    this.appType = appType;
    return this;
};
this.getAppType = function() {
    return this.appType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var oidcapp = undefined;
this.setOidcapps = function(oidcapp) { 
    this.oidcapp = oidcapp;
    return this;
};
this.getOidcapps = function() {
    return this.oidcapp;
};
this.addOidcapp = function(oidcapp) { 
 if(!this.oidcapp) this.oidcapp = new Array(); 
  this.oidcapp.push(oidcapp); 
 return this;
};

var samlspappinfo = undefined;
this.setSamlspappinfo = function(samlspappinfo) { 
    this.samlspappinfo = samlspappinfo;
    return this;
};
this.getSamlspappinfo = function() {
    return this.samlspappinfo;
};
var samlspappattribute = undefined;
this.setSamlspappattributes = function(samlspappattribute) { 
    this.samlspappattribute = samlspappattribute;
    return this;
};
this.getSamlspappattributes = function() {
    return this.samlspappattribute;
};
this.addSamlspappattribute = function(samlspappattribute) { 
 if(!this.samlspappattribute) this.samlspappattribute = new Array(); 
  this.samlspappattribute.push(samlspappattribute); 
 return this;
};

var samlspuser = undefined;
this.setSamlspusers = function(samlspuser) { 
    this.samlspuser = samlspuser;
    return this;
};
this.getSamlspusers = function() {
    return this.samlspuser;
};
this.addSamlspuser = function(samlspuser) { 
 if(!this.samlspuser) this.samlspuser = new Array(); 
  this.samlspuser.push(samlspuser); 
 return this;
};

var samlspapplogo = undefined;
this.setSamlspapplogo = function(samlspapplogo) { 
    this.samlspapplogo = samlspapplogo;
    return this;
};
this.getSamlspapplogo = function() {
    return this.samlspapplogo;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppName(json["app_name"]);
		this.setDescription(json["description"]);
		this.setAcsUrl(json["acs_url"]);
		this.setIdentifier(json["identifier"]);
		this.setAppId(json["app_id"]);
		this.setNameIdField(json["name_id_field"]);
		this.setNameId(json["name_id"]);
		this.setSignInUrl(json["sign_in_url"]);
		this.setDefaultRelayState(json["default_relay_state"]);
		this.setPublicKey(json["public_key"]);
		this.setPrivateKey(json["private_key"]);
		this.setCertificateExpiryTime(json["certificate_expiry_time"]);
		this.setIdpModeSupported(json["idp_mode_supported"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setEnableLogout(json["enable_logout"]);
		this.setLogoutUrl(json["logout_url"]);
		this.setIdpIssuer(json["idp_issuer"]);
		this.setAppType(json["app_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setOidcapps(URI.getResourceArray(json["oIDCApp"],"oidcapp"));
		this.setSamlspappinfo(URI.getResource(json["sAMLSpAppInfo"],"samlspappinfo"));
		this.setSamlspappattributes(URI.getResourceArray(json["sAMLSpAppAttribute"],"samlspappattribute"));
		this.setSamlspusers(URI.getResourceArray(json["sAMLSpUser"],"samlspuser"));
		this.setSamlspapplogo(URI.getResource(json["sAMLSpAppLogo"],"samlspapplogo"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getAcsUrl()) json += '"acs_url"' + ":" + '"' + jsonEscape(this.getAcsUrl())  + '",';
		if(this.getIdentifier()) json += '"identifier"' + ":" + '"' + jsonEscape(this.getIdentifier())  + '",';
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getNameIdField()) json += '"name_id_field"' + ":" + '"' + jsonEscape(this.getNameIdField())  + '",';
		if(this.getNameId()) json += '"name_id"' + ":" + '"' + jsonEscape(this.getNameId())  + '",';
		if(this.getSignInUrl()) json += '"sign_in_url"' + ":" + '"' + jsonEscape(this.getSignInUrl())  + '",';
		if(this.getDefaultRelayState()) json += '"default_relay_state"' + ":" + '"' + jsonEscape(this.getDefaultRelayState())  + '",';
		if(this.getPublicKey()) json += '"public_key"' + ":" + '"' + jsonEscape(this.getPublicKey())  + '",';
		if(this.getPrivateKey()) json += '"private_key"' + ":" + '"' + jsonEscape(this.getPrivateKey())  + '",';
		if(this.getCertificateExpiryTime()) json += '"certificate_expiry_time"' + ":" + '"' + jsonEscape(this.getCertificateExpiryTime())  + '",';
		if(this.getIdpModeSupported()) json += '"idp_mode_supported"' + ":" + '"' + jsonEscape(this.getIdpModeSupported())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getEnableLogout()) json += '"enable_logout"' + ":" + '"' + jsonEscape(this.getEnableLogout())  + '",';
		if(this.getLogoutUrl()) json += '"logout_url"' + ":" + '"' + jsonEscape(this.getLogoutUrl())  + '",';
		if(this.getIdpIssuer()) json += '"idp_issuer"' + ":" + '"' + jsonEscape(this.getIdpIssuer())  + '",';
		if(this.getAppType()) json += '"app_type"' + ":" + '"' + jsonEscape(this.getAppType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getOidcapps()) json += '"oIDCApp"' + ":" + URI.toJSONArray(this.getOidcapps())  + ',';
		if(this.getSamlspappinfo()) json += '"sAMLSpAppInfo"' + ":" + this.getSamlspappinfo().toJSON()  + ',';
		if(this.getSamlspappattributes()) json += '"sAMLSpAppAttribute"' + ":" + URI.toJSONArray(this.getSamlspappattributes())  + ',';
		if(this.getSamlspusers()) json += '"sAMLSpUser"' + ":" + URI.toJSONArray(this.getSamlspusers())  + ',';
		if(this.getSamlspapplogo()) json += '"sAMLSpAppLogo"' + ":" + this.getSamlspapplogo().toJSON()  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SAMLSpApp.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.appName && !(/xss:throwerror/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.acsUrl && !(/xss:throwerror/).test(this.acsUrl)) { throw new ValidationError(_formprefix + "acs_url", ValidationError.PATTERN_FAILED);}
if(this.identifier && !(/xss:throwerror/).test(this.identifier)) { throw new ValidationError(_formprefix + "identifier", ValidationError.PATTERN_FAILED);}
if(this.appId && !(/^[a-zA-Z0-9_\-]+$/).test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.nameIdField && !Validator.INTEGER.test(this.nameIdField)) { throw new ValidationError(_formprefix + "name_id_field", ValidationError.PATTERN_FAILED);}
if(this.signInUrl && !(/xss:throwerror/).test(this.signInUrl)) { throw new ValidationError(_formprefix + "sign_in_url", ValidationError.PATTERN_FAILED);}
if(this.defaultRelayState && !(/xss:throwerror/).test(this.defaultRelayState)) { throw new ValidationError(_formprefix + "default_relay_state", ValidationError.PATTERN_FAILED);}
if(this.publicKey && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.publicKey)) { throw new ValidationError(_formprefix + "public_key", ValidationError.PATTERN_FAILED);}
if(this.privateKey && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.privateKey)) { throw new ValidationError(_formprefix + "private_key", ValidationError.PATTERN_FAILED);}
if(this.certificateExpiryTime && !Validator.INTEGER.test(this.certificateExpiryTime)) { throw new ValidationError(_formprefix + "certificate_expiry_time", ValidationError.PATTERN_FAILED);}
if(this.idpModeSupported && !Validator.BOOLEAN.test(this.idpModeSupported)) { throw new ValidationError(_formprefix + "idp_mode_supported", ValidationError.PATTERN_FAILED);}
if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.enableLogout && !Validator.BOOLEAN.test(this.enableLogout)) { throw new ValidationError(_formprefix + "enable_logout", ValidationError.PATTERN_FAILED);}
if(this.logoutUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.logoutUrl)) { throw new ValidationError(_formprefix + "logout_url", ValidationError.PATTERN_FAILED);}
if(this.idpIssuer && !(/xss:throwerror/).test(this.idpIssuer)) { throw new ValidationError(_formprefix + "idp_issuer", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.oidcapp) { for(i=0; i < this.oidcapp.length; i++ ) { this.oidcapp[i].validate(); } }
if(this.samlspappinfo) { this.samlspappinfo.validate(); }
if(this.samlspappattribute) { for(i=0; i < this.samlspappattribute.length; i++ ) { this.samlspappattribute[i].validate(); } }
if(this.samlspuser) { for(i=0; i < this.samlspuser.length; i++ ) { this.samlspuser[i].validate(); } }
if(this.samlspapplogo) { this.samlspapplogo.validate(); }

	return this;
    }
}
SAMLSpApp.path = "samlspapp";
SAMLSpApp.newBuilder = function() {
    return new SAMLSpApp();
};

UserServiceDetails = function() {
    var _formprefix = "";
    
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var isActive = "1";
this.setIsActive = function(isActive) { 
    this.isActive = isActive;
    return this;
};
this.getIsActive = function() {
    return this.isActive;
};
var defaultAppAccount = "";
this.setDefaultAppAccount = function(defaultAppAccount) { 
    this.defaultAppAccount = defaultAppAccount;
    return this;
};
this.getDefaultAppAccount = function() {
    return this.defaultAppAccount;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var userservicepreference = undefined;
this.setUserservicepreferences = function(userservicepreference) { 
    this.userservicepreference = userservicepreference;
    return this;
};
this.getUserservicepreferences = function() {
    return this.userservicepreference;
};
this.addUserservicepreference = function(userservicepreference) { 
 if(!this.userservicepreference) this.userservicepreference = new Array(); 
  this.userservicepreference.push(userservicepreference); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppId(json["app_id"]);
		this.setIsActive(json["is_active"]);
		this.setDefaultAppAccount(json["default_app_account"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setUserservicepreferences(URI.getResourceArray(json["userServicePreference"],"userservicepreference"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getIsActive()) json += '"is_active"' + ":" + '"' + jsonEscape(this.getIsActive())  + '",';
		if(this.getDefaultAppAccount()) json += '"default_app_account"' + ":" + '"' + jsonEscape(this.getDefaultAppAccount())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getUserservicepreferences()) json += '"userServicePreference"' + ":" + URI.toJSONArray(this.getUserservicepreferences())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserServiceDetails.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.appId && !(/^[a-zA-Z0-9_\-]+$/).test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.isActive && !Validator.INTEGER.test(this.isActive)) { throw new ValidationError(_formprefix + "is_active", ValidationError.PATTERN_FAILED);}
if(this.defaultAppAccount && !(/^[a-zA-Z0-9_\-]+$/).test(this.defaultAppAccount)) { throw new ValidationError(_formprefix + "default_app_account", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.userservicepreference) { for(i=0; i < this.userservicepreference.length; i++ ) { this.userservicepreference[i].validate(); } }

	return this;
    }
}
UserServiceDetails.path = "userservicedetails";
UserServiceDetails.newBuilder = function() {
    return new UserServiceDetails();
};

SOOAuthAccessGrantScopes = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var allowedOperations = "";
this.setAllowedOperations = function(allowedOperations) { 
    this.allowedOperations = allowedOperations;
    return this;
};
this.getAllowedOperations = function() {
    return this.allowedOperations;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setAllowedOperations(json["allowed_operations"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getAllowedOperations()) json += '"allowed_operations"' + ":" + '"' + jsonEscape(this.getAllowedOperations())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SOOAuthAccessGrantScopes.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[a-zA-Z0-9_\-]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.allowedOperations && !Validator.INTEGER.test(this.allowedOperations)) { throw new ValidationError(_formprefix + "allowed_operations", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SOOAuthAccessGrantScopes.path = "sooauthaccessgrantscopes";
SOOAuthAccessGrantScopes.newBuilder = function() {
    return new SOOAuthAccessGrantScopes();
};

AppSystemRole = function() {
    var _formprefix = "";
    
var roleId = "";
this.setRoleId = function(roleId) { 
    this.roleId = roleId;
    return this;
};
this.getRoleId = function() {
    return this.roleId;
};
var systemRoleName = "";
this.setSystemRoleName = function(systemRoleName) { 
    this.systemRoleName = systemRoleName;
    return this;
};
this.getSystemRoleName = function() {
    return this.systemRoleName;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var usersystemroles = undefined;
this.setUsersystemroless = function(usersystemroles) { 
    this.usersystemroles = usersystemroles;
    return this;
};
this.getUsersystemroless = function() {
    return this.usersystemroles;
};
this.addUsersystemroles = function(usersystemroles) { 
 if(!this.usersystemroles) this.usersystemroles = new Array(); 
  this.usersystemroles.push(usersystemroles); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRoleId(json["role_id"]);
		this.setSystemRoleName(json["system_role_name"]);
		this.setDescription(json["description"]);
		this.setCreatedTime(json["created_time"]);
		this.setUsersystemroless(URI.getResourceArray(json["userSystemRoles"],"usersystemroles"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRoleId()) json += '"role_id"' + ":" + '"' + jsonEscape(this.getRoleId())  + '",';
		if(this.getSystemRoleName()) json += '"system_role_name"' + ":" + '"' + jsonEscape(this.getSystemRoleName())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getUsersystemroless()) json += '"userSystemRoles"' + ":" + URI.toJSONArray(this.getUsersystemroless())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppSystemRole.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.roleId && !Validator.INTEGER.test(this.roleId)) { throw new ValidationError(_formprefix + "role_id", ValidationError.PATTERN_FAILED);}
if(this.systemRoleName && !(/^[a-zA-Z]{1,20}$/).test(this.systemRoleName)) { throw new ValidationError(_formprefix + "system_role_name", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.usersystemroles) { for(i=0; i < this.usersystemroles.length; i++ ) { this.usersystemroles[i].validate(); } }

	return this;
    }
}
AppSystemRole.path = "appsystemrole";
AppSystemRole.newBuilder = function() {
    return new AppSystemRole();
};

ServiceOrg = function() {
    var _formprefix = "";
    
var zsoid = "";
this.setZsoid = function(zsoid) { 
    this.zsoid = zsoid;
    return this;
};
this.getZsoid = function() {
    return this.zsoid;
};
var orgName = "";
this.setOrgName = function(orgName) { 
    this.orgName = orgName;
    return this;
};
this.getOrgName = function() {
    return this.orgName;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var createdBy = "-1";
this.setCreatedBy = function(createdBy) { 
    this.createdBy = createdBy;
    return this;
};
this.getCreatedBy = function() {
    return this.createdBy;
};
var migratedToOrg = "";
this.setMigratedToOrg = function(migratedToOrg) { 
    this.migratedToOrg = migratedToOrg;
    return this;
};
this.getMigratedToOrg = function() {
    return this.migratedToOrg;
};
var parentZaaid = "";
this.setParentZaaid = function(parentZaaid) { 
    this.parentZaaid = parentZaaid;
    return this;
};
this.getParentZaaid = function() {
    return this.parentZaaid;
};
var directoryZaaid = "";
this.setDirectoryZaaid = function(directoryZaaid) { 
    this.directoryZaaid = directoryZaaid;
    return this;
};
this.getDirectoryZaaid = function() {
    return this.directoryZaaid;
};
var isExposed = "1";
this.setIsExposed = function(isExposed) { 
    this.isExposed = isExposed;
    return this;
};
this.getIsExposed = function() {
    return this.isExposed;
};
var parentOrgType = "";
this.setParentOrgType = function(parentOrgType) { 
    this.parentOrgType = parentOrgType;
    return this;
};
this.getParentOrgType = function() {
    return this.parentOrgType;
};
var environment = "1";
this.setEnvironment = function(environment) { 
    this.environment = environment;
    return this;
};
this.getEnvironment = function() {
    return this.environment;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var serviceorgsubservice = undefined;
this.setServiceorgsubservices = function(serviceorgsubservice) { 
    this.serviceorgsubservice = serviceorgsubservice;
    return this;
};
this.getServiceorgsubservices = function() {
    return this.serviceorgsubservice;
};
this.addServiceorgsubservice = function(serviceorgsubservice) { 
 if(!this.serviceorgsubservice) this.serviceorgsubservice = new Array(); 
  this.serviceorgsubservice.push(serviceorgsubservice); 
 return this;
};

var serviceorgproperties = undefined;
this.setServiceorgpropertiess = function(serviceorgproperties) { 
    this.serviceorgproperties = serviceorgproperties;
    return this;
};
this.getServiceorgpropertiess = function() {
    return this.serviceorgproperties;
};
this.addServiceorgproperties = function(serviceorgproperties) { 
 if(!this.serviceorgproperties) this.serviceorgproperties = new Array(); 
  this.serviceorgproperties.push(serviceorgproperties); 
 return this;
};

var serviceorgzaid = undefined;
this.setServiceorgzaids = function(serviceorgzaid) { 
    this.serviceorgzaid = serviceorgzaid;
    return this;
};
this.getServiceorgzaids = function() {
    return this.serviceorgzaid;
};
this.addServiceorgzaid = function(serviceorgzaid) { 
 if(!this.serviceorgzaid) this.serviceorgzaid = new Array(); 
  this.serviceorgzaid.push(serviceorgzaid); 
 return this;
};

var serviceorgaccountmapping = undefined;
this.setServiceorgaccountmappings = function(serviceorgaccountmapping) { 
    this.serviceorgaccountmapping = serviceorgaccountmapping;
    return this;
};
this.getServiceorgaccountmappings = function() {
    return this.serviceorgaccountmapping;
};
this.addServiceorgaccountmapping = function(serviceorgaccountmapping) { 
 if(!this.serviceorgaccountmapping) this.serviceorgaccountmapping = new Array(); 
  this.serviceorgaccountmapping.push(serviceorgaccountmapping); 
 return this;
};

var serviceorgaddress = undefined;
this.setServiceorgaddresss = function(serviceorgaddress) { 
    this.serviceorgaddress = serviceorgaddress;
    return this;
};
this.getServiceorgaddresss = function() {
    return this.serviceorgaddress;
};
this.addServiceorgaddress = function(serviceorgaddress) { 
 if(!this.serviceorgaddress) this.serviceorgaddress = new Array(); 
  this.serviceorgaddress.push(serviceorgaddress); 
 return this;
};

var serviceorgkyc = undefined;
this.setServiceorgkycs = function(serviceorgkyc) { 
    this.serviceorgkyc = serviceorgkyc;
    return this;
};
this.getServiceorgkycs = function() {
    return this.serviceorgkyc;
};
this.addServiceorgkyc = function(serviceorgkyc) { 
 if(!this.serviceorgkyc) this.serviceorgkyc = new Array(); 
  this.serviceorgkyc.push(serviceorgkyc); 
 return this;
};

var serviceorgdevices = undefined;
this.setServiceorgdevicess = function(serviceorgdevices) { 
    this.serviceorgdevices = serviceorgdevices;
    return this;
};
this.getServiceorgdevicess = function() {
    return this.serviceorgdevices;
};
this.addServiceorgdevices = function(serviceorgdevices) { 
 if(!this.serviceorgdevices) this.serviceorgdevices = new Array(); 
  this.serviceorgdevices.push(serviceorgdevices); 
 return this;
};

var serviceorglogo = undefined;
this.setServiceorglogo = function(serviceorglogo) { 
    this.serviceorglogo = serviceorglogo;
    return this;
};
this.getServiceorglogo = function() {
    return this.serviceorglogo;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZsoid(json["zsoid"]);
		this.setOrgName(json["org_name"]);
		this.setDescription(json["description"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setCreatedBy(json["created_by"]);
		this.setMigratedToOrg(json["migrated_to_org"]);
		this.setParentZaaid(json["parent_zaaid"]);
		this.setDirectoryZaaid(json["directory_zaaid"]);
		this.setIsExposed(json["is_exposed"]);
		this.setParentOrgType(json["parent_org_type"]);
		this.setEnvironment(json["environment"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setServiceorgsubservices(URI.getResourceArray(json["serviceOrgSubService"],"serviceorgsubservice"));
		this.setServiceorgpropertiess(URI.getResourceArray(json["serviceOrgProperties"],"serviceorgproperties"));
		this.setServiceorgzaids(URI.getResourceArray(json["serviceOrgZAID"],"serviceorgzaid"));
		this.setServiceorgaccountmappings(URI.getResourceArray(json["serviceOrgAccountMapping"],"serviceorgaccountmapping"));
		this.setServiceorgaddresss(URI.getResourceArray(json["serviceOrgAddress"],"serviceorgaddress"));
		this.setServiceorgkycs(URI.getResourceArray(json["serviceOrgKYC"],"serviceorgkyc"));
		this.setServiceorgdevicess(URI.getResourceArray(json["serviceOrgDevices"],"serviceorgdevices"));
		this.setServiceorglogo(URI.getResource(json["serviceOrgLogo"],"serviceorglogo"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZsoid()) json += '"zsoid"' + ":" + '"' + jsonEscape(this.getZsoid())  + '",';
		if(this.getOrgName()) json += '"org_name"' + ":" + '"' + jsonEscape(this.getOrgName())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getCreatedBy()) json += '"created_by"' + ":" + '"' + jsonEscape(this.getCreatedBy())  + '",';
		if(this.getMigratedToOrg()) json += '"migrated_to_org"' + ":" + '"' + jsonEscape(this.getMigratedToOrg())  + '",';
		if(this.getParentZaaid()) json += '"parent_zaaid"' + ":" + '"' + jsonEscape(this.getParentZaaid())  + '",';
		if(this.getDirectoryZaaid()) json += '"directory_zaaid"' + ":" + '"' + jsonEscape(this.getDirectoryZaaid())  + '",';
		if(this.getIsExposed()) json += '"is_exposed"' + ":" + '"' + jsonEscape(this.getIsExposed())  + '",';
		if(this.getParentOrgType()) json += '"parent_org_type"' + ":" + '"' + jsonEscape(this.getParentOrgType())  + '",';
		if(this.getEnvironment()) json += '"environment"' + ":" + '"' + jsonEscape(this.getEnvironment())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getServiceorgsubservices()) json += '"serviceOrgSubService"' + ":" + URI.toJSONArray(this.getServiceorgsubservices())  + ',';
		if(this.getServiceorgpropertiess()) json += '"serviceOrgProperties"' + ":" + URI.toJSONArray(this.getServiceorgpropertiess())  + ',';
		if(this.getServiceorgzaids()) json += '"serviceOrgZAID"' + ":" + URI.toJSONArray(this.getServiceorgzaids())  + ',';
		if(this.getServiceorgaccountmappings()) json += '"serviceOrgAccountMapping"' + ":" + URI.toJSONArray(this.getServiceorgaccountmappings())  + ',';
		if(this.getServiceorgaddresss()) json += '"serviceOrgAddress"' + ":" + URI.toJSONArray(this.getServiceorgaddresss())  + ',';
		if(this.getServiceorgkycs()) json += '"serviceOrgKYC"' + ":" + URI.toJSONArray(this.getServiceorgkycs())  + ',';
		if(this.getServiceorgdevicess()) json += '"serviceOrgDevices"' + ":" + URI.toJSONArray(this.getServiceorgdevicess())  + ',';
		if(this.getServiceorglogo()) json += '"serviceOrgLogo"' + ":" + this.getServiceorglogo().toJSON()  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrg.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zsoid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zsoid)) { throw new ValidationError(_formprefix + "zsoid", ValidationError.PATTERN_FAILED);}
if(this.orgName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.orgName)) { throw new ValidationError(_formprefix + "org_name", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.createdBy && !(/^[a-zA-Z0-9\-]+$/).test(this.createdBy)) { throw new ValidationError(_formprefix + "created_by", ValidationError.PATTERN_FAILED);}
if(this.migratedToOrg && !Validator.BOOLEAN.test(this.migratedToOrg)) { throw new ValidationError(_formprefix + "migrated_to_org", ValidationError.PATTERN_FAILED);}
if(this.parentZaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.parentZaaid)) { throw new ValidationError(_formprefix + "parent_zaaid", ValidationError.PATTERN_FAILED);}
if(this.directoryZaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.directoryZaaid)) { throw new ValidationError(_formprefix + "directory_zaaid", ValidationError.PATTERN_FAILED);}
if(this.isExposed && !Validator.INTEGER.test(this.isExposed)) { throw new ValidationError(_formprefix + "is_exposed", ValidationError.PATTERN_FAILED);}
if(this.parentOrgType && !Validator.INTEGER.test(this.parentOrgType)) { throw new ValidationError(_formprefix + "parent_org_type", ValidationError.PATTERN_FAILED);}
if(this.environment && !Validator.INTEGER.test(this.environment)) { throw new ValidationError(_formprefix + "environment", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.serviceorgsubservice) { for(i=0; i < this.serviceorgsubservice.length; i++ ) { this.serviceorgsubservice[i].validate(); } }
if(this.serviceorgproperties) { for(i=0; i < this.serviceorgproperties.length; i++ ) { this.serviceorgproperties[i].validate(); } }
if(this.serviceorgzaid) { for(i=0; i < this.serviceorgzaid.length; i++ ) { this.serviceorgzaid[i].validate(); } }
if(this.serviceorgaccountmapping) { for(i=0; i < this.serviceorgaccountmapping.length; i++ ) { this.serviceorgaccountmapping[i].validate(); } }
if(this.serviceorgaddress) { for(i=0; i < this.serviceorgaddress.length; i++ ) { this.serviceorgaddress[i].validate(); } }
if(this.serviceorgkyc) { for(i=0; i < this.serviceorgkyc.length; i++ ) { this.serviceorgkyc[i].validate(); } }
if(this.serviceorgdevices) { for(i=0; i < this.serviceorgdevices.length; i++ ) { this.serviceorgdevices[i].validate(); } }
if(this.serviceorglogo) { this.serviceorglogo.validate(); }

	return this;
    }
}
ServiceOrg.path = "serviceorg";
ServiceOrg.newBuilder = function() {
    return new ServiceOrg();
};

OpenId = function() {
    var _formprefix = "";
    
var openIdApl = "";
this.setOpenIdApl = function(openIdApl) { 
    this.openIdApl = openIdApl;
    return this;
};
this.getOpenIdApl = function() {
    return this.openIdApl;
};
var openId = "";
this.setOpenId = function(openId) { 
    this.openId = openId;
    return this;
};
this.getOpenId = function() {
    return this.openId;
};
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var idp = "0";
this.setIdp = function(idp) { 
    this.idp = idp;
    return this;
};
this.getIdp = function() {
    return this.idp;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var ipAuditInfo = "";
this.setIpAuditInfo = function(ipAuditInfo) { 
    this.ipAuditInfo = ipAuditInfo;
    return this;
};
this.getIpAuditInfo = function() {
    return this.ipAuditInfo;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setOpenIdApl(json["open_id_apl"]);
		this.setOpenId(json["open_id"]);
		this.setEmailId(json["email_id"]);
		this.setIdp(json["idp"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setUserAgent(json["user_agent"]);
		this.setIpAuditInfo(json["ip_audit_info"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getOpenIdApl()) json += '"open_id_apl"' + ":" + '"' + jsonEscape(this.getOpenIdApl())  + '",';
		if(this.getOpenId()) json += '"open_id"' + ":" + '"' + jsonEscape(this.getOpenId())  + '",';
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getIdp()) json += '"idp"' + ":" + '"' + jsonEscape(this.getIdp())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getIpAuditInfo()) json += '"ip_audit_info"' + ":" + '"' + jsonEscape(this.getIpAuditInfo())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OpenId.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.openIdApl && !(/xss:throwerror/).test(this.openIdApl)) { throw new ValidationError(_formprefix + "open_id_apl", ValidationError.PATTERN_FAILED);}
if(this.openId && !(/dontdisturb/).test(this.openId)) { throw new ValidationError(_formprefix + "open_id", ValidationError.PATTERN_FAILED);}
if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.idp && !Validator.INTEGER.test(this.idp)) { throw new ValidationError(_formprefix + "idp", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/xss:throwerror/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OpenId.path = "openid";
OpenId.newBuilder = function() {
    return new OpenId();
};

OAuthAudit = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
var operation = "";
this.setOperation = function(operation) { 
    this.operation = operation;
    return this;
};
this.getOperation = function() {
    return this.operation;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var tokenDigest = "";
this.setTokenDigest = function(tokenDigest) { 
    this.tokenDigest = tokenDigest;
    return this;
};
this.getTokenDigest = function() {
    return this.tokenDigest;
};
var parentTokenDigest = "";
this.setParentTokenDigest = function(parentTokenDigest) { 
    this.parentTokenDigest = parentTokenDigest;
    return this;
};
this.getParentTokenDigest = function() {
    return this.parentTokenDigest;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var addedTime = "";
this.setAddedTime = function(addedTime) { 
    this.addedTime = addedTime;
    return this;
};
this.getAddedTime = function() {
    return this.addedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setZid(json["zid"]);
		this.setAppName(json["app_name"]);
		this.setClientZid(json["client_zid"]);
		this.setOperation(json["operation"]);
		this.setIpAddress(json["ip_address"]);
		this.setTokenDigest(json["token_digest"]);
		this.setParentTokenDigest(json["parent_token_digest"]);
		this.setUserAgent(json["user_agent"]);
		this.setAddedTime(json["added_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';
		if(this.getOperation()) json += '"operation"' + ":" + '"' + jsonEscape(this.getOperation())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getTokenDigest()) json += '"token_digest"' + ":" + '"' + jsonEscape(this.getTokenDigest())  + '",';
		if(this.getParentTokenDigest()) json += '"parent_token_digest"' + ":" + '"' + jsonEscape(this.getParentTokenDigest())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getAddedTime()) json += '"added_time"' + ":" + '"' + jsonEscape(this.getAddedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.clientZid && !(/^[0-9]+\.[0-9]+$/).test(this.clientZid)) { throw new ValidationError(_formprefix + "client_zid", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.tokenDigest && !(/dontdisturb/).test(this.tokenDigest)) { throw new ValidationError(_formprefix + "token_digest", ValidationError.PATTERN_FAILED);}
if(this.parentTokenDigest && !(/dontdisturb/).test(this.parentTokenDigest)) { throw new ValidationError(_formprefix + "parent_token_digest", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.addedTime && !Validator.INTEGER.test(this.addedTime)) { throw new ValidationError(_formprefix + "added_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthAudit.path = "oauthaudit";
OAuthAudit.newBuilder = function() {
    return new OAuthAudit();
};

ResourceAudit = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var ownerZuid = "";
this.setOwnerZuid = function(ownerZuid) { 
    this.ownerZuid = ownerZuid;
    return this;
};
this.getOwnerZuid = function() {
    return this.ownerZuid;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var requestId = "";
this.setRequestId = function(requestId) { 
    this.requestId = requestId;
    return this;
};
this.getRequestId = function() {
    return this.requestId;
};
var resourceType = "";
this.setResourceType = function(resourceType) { 
    this.resourceType = resourceType;
    return this;
};
this.getResourceType = function() {
    return this.resourceType;
};
var operation = "";
this.setOperation = function(operation) { 
    this.operation = operation;
    return this;
};
this.getOperation = function() {
    return this.operation;
};
var oldData = "";
this.setOldData = function(oldData) { 
    this.oldData = oldData;
    return this;
};
this.getOldData = function() {
    return this.oldData;
};
var newData = "";
this.setNewData = function(newData) { 
    this.newData = newData;
    return this;
};
this.getNewData = function() {
    return this.newData;
};
var restUrl = "";
this.setRestUrl = function(restUrl) { 
    this.restUrl = restUrl;
    return this;
};
this.getRestUrl = function() {
    return this.restUrl;
};
var tokenDigest = "";
this.setTokenDigest = function(tokenDigest) { 
    this.tokenDigest = tokenDigest;
    return this;
};
this.getTokenDigest = function() {
    return this.tokenDigest;
};
var threadId = "";
this.setThreadId = function(threadId) { 
    this.threadId = threadId;
    return this;
};
this.getThreadId = function() {
    return this.threadId;
};
var appIp = "";
this.setAppIp = function(appIp) { 
    this.appIp = appIp;
    return this;
};
this.getAppIp = function() {
    return this.appIp;
};
var remoteIp = "";
this.setRemoteIp = function(remoteIp) { 
    this.remoteIp = remoteIp;
    return this;
};
this.getRemoteIp = function() {
    return this.remoteIp;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var auditedTime = "";
this.setAuditedTime = function(auditedTime) { 
    this.auditedTime = auditedTime;
    return this;
};
this.getAuditedTime = function() {
    return this.auditedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setZuid(json["zuid"]);
		this.setOwnerZuid(json["owner_zuid"]);
		this.setAppName(json["app_name"]);
		this.setRequestId(json["request_id"]);
		this.setResourceType(json["resource_type"]);
		this.setOperation(json["operation"]);
		this.setOldData(json["old_data"]);
		this.setNewData(json["new_data"]);
		this.setRestUrl(json["rest_url"]);
		this.setTokenDigest(json["token_digest"]);
		this.setThreadId(json["thread_id"]);
		this.setAppIp(json["app_ip"]);
		this.setRemoteIp(json["remote_ip"]);
		this.setUserAgent(json["user_agent"]);
		this.setAuditedTime(json["audited_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getOwnerZuid()) json += '"owner_zuid"' + ":" + '"' + jsonEscape(this.getOwnerZuid())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getRequestId()) json += '"request_id"' + ":" + '"' + jsonEscape(this.getRequestId())  + '",';
		if(this.getResourceType()) json += '"resource_type"' + ":" + '"' + jsonEscape(this.getResourceType())  + '",';
		if(this.getOperation()) json += '"operation"' + ":" + '"' + jsonEscape(this.getOperation())  + '",';
		if(this.getOldData()) json += '"old_data"' + ":" + '"' + jsonEscape(this.getOldData())  + '",';
		if(this.getNewData()) json += '"new_data"' + ":" + '"' + jsonEscape(this.getNewData())  + '",';
		if(this.getRestUrl()) json += '"rest_url"' + ":" + '"' + jsonEscape(this.getRestUrl())  + '",';
		if(this.getTokenDigest()) json += '"token_digest"' + ":" + '"' + jsonEscape(this.getTokenDigest())  + '",';
		if(this.getThreadId()) json += '"thread_id"' + ":" + '"' + jsonEscape(this.getThreadId())  + '",';
		if(this.getAppIp()) json += '"app_ip"' + ":" + '"' + jsonEscape(this.getAppIp())  + '",';
		if(this.getRemoteIp()) json += '"remote_ip"' + ":" + '"' + jsonEscape(this.getRemoteIp())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getAuditedTime()) json += '"audited_time"' + ":" + '"' + jsonEscape(this.getAuditedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ResourceAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.ownerZuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.ownerZuid)) { throw new ValidationError(_formprefix + "owner_zuid", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.requestId && !(/^[a-zA-Z0-9_\-]+$/).test(this.requestId)) { throw new ValidationError(_formprefix + "request_id", ValidationError.PATTERN_FAILED);}
if(this.resourceType && !(/^[a-zA-Z0-9_]+$/).test(this.resourceType)) { throw new ValidationError(_formprefix + "resource_type", ValidationError.PATTERN_FAILED);}
if(this.oldData && !(/dontdisturb/).test(this.oldData)) { throw new ValidationError(_formprefix + "old_data", ValidationError.PATTERN_FAILED);}
if(this.newData && !(/dontdisturb/).test(this.newData)) { throw new ValidationError(_formprefix + "new_data", ValidationError.PATTERN_FAILED);}
if(this.restUrl && !(/dontdisturb/).test(this.restUrl)) { throw new ValidationError(_formprefix + "rest_url", ValidationError.PATTERN_FAILED);}
if(this.tokenDigest && !(/^[a-f0-9]+$/).test(this.tokenDigest)) { throw new ValidationError(_formprefix + "token_digest", ValidationError.PATTERN_FAILED);}
if(this.threadId && !(/dontdisturb/).test(this.threadId)) { throw new ValidationError(_formprefix + "thread_id", ValidationError.PATTERN_FAILED);}
if(this.appIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.appIp)) { throw new ValidationError(_formprefix + "app_ip", ValidationError.PATTERN_FAILED);}
if(this.remoteIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.remoteIp)) { throw new ValidationError(_formprefix + "remote_ip", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.auditedTime && !Validator.INTEGER.test(this.auditedTime)) { throw new ValidationError(_formprefix + "audited_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ResourceAudit.path = "resourceaudit";
ResourceAudit.newBuilder = function() {
    return new ResourceAudit();
};

ConditionalPolicy = function() {
    var _formprefix = "";
    
var conditionId = "";
this.setConditionId = function(conditionId) { 
    this.conditionId = conditionId;
    return this;
};
this.getConditionId = function() {
    return this.conditionId;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var accessControl = "0";
this.setAccessControl = function(accessControl) { 
    this.accessControl = accessControl;
    return this;
};
this.getAccessControl = function() {
    return this.accessControl;
};
var allowedMfaModes = "0";
this.setAllowedMfaModes = function(allowedMfaModes) { 
    this.allowedMfaModes = allowedMfaModes;
    return this;
};
this.getAllowedMfaModes = function() {
    return this.allowedMfaModes;
};
var allowedClients = "0";
this.setAllowedClients = function(allowedClients) { 
    this.allowedClients = allowedClients;
    return this;
};
this.getAllowedClients = function() {
    return this.allowedClients;
};
var mfaLifetime = "0";
this.setMfaLifetime = function(mfaLifetime) { 
    this.mfaLifetime = mfaLifetime;
    return this;
};
this.getMfaLifetime = function() {
    return this.mfaLifetime;
};
var conditionMatch = "0";
this.setConditionMatch = function(conditionMatch) { 
    this.conditionMatch = conditionMatch;
    return this;
};
this.getConditionMatch = function() {
    return this.conditionMatch;
};
var appliesTo = "0";
this.setAppliesTo = function(appliesTo) { 
    this.appliesTo = appliesTo;
    return this;
};
this.getAppliesTo = function() {
    return this.appliesTo;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var conditionaluser = undefined;
this.setConditionalusers = function(conditionaluser) { 
    this.conditionaluser = conditionaluser;
    return this;
};
this.getConditionalusers = function() {
    return this.conditionaluser;
};
this.addConditionaluser = function(conditionaluser) { 
 if(!this.conditionaluser) this.conditionaluser = new Array(); 
  this.conditionaluser.push(conditionaluser); 
 return this;
};

var conditionalaccess = undefined;
this.setConditionalaccesss = function(conditionalaccess) { 
    this.conditionalaccess = conditionalaccess;
    return this;
};
this.getConditionalaccesss = function() {
    return this.conditionalaccess;
};
this.addConditionalaccess = function(conditionalaccess) { 
 if(!this.conditionalaccess) this.conditionalaccess = new Array(); 
  this.conditionalaccess.push(conditionalaccess); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setConditionId(json["condition_id"]);
		this.setDisplayName(json["display_name"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setAccessControl(json["access_control"]);
		this.setAllowedMfaModes(json["allowed_mfa_modes"]);
		this.setAllowedClients(json["allowed_clients"]);
		this.setMfaLifetime(json["mfa_lifetime"]);
		this.setConditionMatch(json["condition_match"]);
		this.setAppliesTo(json["applies_to"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setConditionalusers(URI.getResourceArray(json["conditionalUser"],"conditionaluser"));
		this.setConditionalaccesss(URI.getResourceArray(json["conditionalAccess"],"conditionalaccess"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getConditionId()) json += '"condition_id"' + ":" + '"' + jsonEscape(this.getConditionId())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getAccessControl()) json += '"access_control"' + ":" + '"' + jsonEscape(this.getAccessControl())  + '",';
		if(this.getAllowedMfaModes()) json += '"allowed_mfa_modes"' + ":" + '"' + jsonEscape(this.getAllowedMfaModes())  + '",';
		if(this.getAllowedClients()) json += '"allowed_clients"' + ":" + '"' + jsonEscape(this.getAllowedClients())  + '",';
		if(this.getMfaLifetime()) json += '"mfa_lifetime"' + ":" + '"' + jsonEscape(this.getMfaLifetime())  + '",';
		if(this.getConditionMatch()) json += '"condition_match"' + ":" + '"' + jsonEscape(this.getConditionMatch())  + '",';
		if(this.getAppliesTo()) json += '"applies_to"' + ":" + '"' + jsonEscape(this.getAppliesTo())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getConditionalusers()) json += '"conditionalUser"' + ":" + URI.toJSONArray(this.getConditionalusers())  + ',';
		if(this.getConditionalaccesss()) json += '"conditionalAccess"' + ":" + URI.toJSONArray(this.getConditionalaccesss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ConditionalPolicy.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.allowedMfaModes && !Validator.INTEGER.test(this.allowedMfaModes)) { throw new ValidationError(_formprefix + "allowed_mfa_modes", ValidationError.PATTERN_FAILED);}
if(this.allowedClients && !Validator.INTEGER.test(this.allowedClients)) { throw new ValidationError(_formprefix + "allowed_clients", ValidationError.PATTERN_FAILED);}
if(this.mfaLifetime && !Validator.INTEGER.test(this.mfaLifetime)) { throw new ValidationError(_formprefix + "mfa_lifetime", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.conditionaluser) { for(i=0; i < this.conditionaluser.length; i++ ) { this.conditionaluser[i].validate(); } }
if(this.conditionalaccess) { for(i=0; i < this.conditionalaccess.length; i++ ) { this.conditionalaccess[i].validate(); } }

	return this;
    }
}
ConditionalPolicy.path = "conditionalpolicy";
ConditionalPolicy.newBuilder = function() {
    return new ConditionalPolicy();
};

TokenPairAuthToken = function() {
    var _formprefix = "";
    
var authToken = "";
this.setAuthToken = function(authToken) { 
    this.authToken = authToken;
    return this;
};
this.getAuthToken = function() {
    return this.authToken;
};
var createdDomain = "";
this.setCreatedDomain = function(createdDomain) { 
    this.createdDomain = createdDomain;
    return this;
};
this.getCreatedDomain = function() {
    return this.createdDomain;
};
var type = "0";
this.setType = function(type) { 
    this.type = type;
    return this;
};
this.getType = function() {
    return this.type;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAuthToken(json["auth_token"]);
		this.setCreatedDomain(json["created_domain"]);
		this.setType(json["type"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAuthToken()) json += '"auth_token"' + ":" + '"' + jsonEscape(this.getAuthToken())  + '",';
		if(this.getCreatedDomain()) json += '"created_domain"' + ":" + '"' + jsonEscape(this.getCreatedDomain())  + '",';
		if(this.getType()) json += '"type"' + ":" + '"' + jsonEscape(this.getType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(TokenPairAuthToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.authToken && !(/^[a-zA-Z0-9\-\_]+$/).test(this.authToken)) { throw new ValidationError(_formprefix + "auth_token", ValidationError.PATTERN_FAILED);}
if(this.createdDomain && !(/^([\p{L}\p{M}\p{N}]([\p{L}\p{M}\p{N}\-]{0,61}[\p{L}\p{M}\p{N}])?\.)+[\p{L}\p{M}]{2,6}$/).test(this.createdDomain)) { throw new ValidationError(_formprefix + "created_domain", ValidationError.PATTERN_FAILED);}
if(this.type && !Validator.INTEGER.test(this.type)) { throw new ValidationError(_formprefix + "type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
TokenPairAuthToken.path = "tokenpairauthtoken";
TokenPairAuthToken.newBuilder = function() {
    return new TokenPairAuthToken();
};

OAuthGrantToken = function() {
    var _formprefix = "";
    
var userZid = "";
this.setUserZid = function(userZid) { 
    this.userZid = userZid;
    return this;
};
this.getUserZid = function() {
    return this.userZid;
};
var zidType = "1";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var grantToken = "";
this.setGrantToken = function(grantToken) { 
    this.grantToken = grantToken;
    return this;
};
this.getGrantToken = function() {
    return this.grantToken;
};
var grantType = "";
this.setGrantType = function(grantType) { 
    this.grantType = grantType;
    return this;
};
this.getGrantType = function() {
    return this.grantType;
};
var redirectUrl = "";
this.setRedirectUrl = function(redirectUrl) { 
    this.redirectUrl = redirectUrl;
    return this;
};
this.getRedirectUrl = function() {
    return this.redirectUrl;
};
var accessType = "1";
this.setAccessType = function(accessType) { 
    this.accessType = accessType;
    return this;
};
this.getAccessType = function() {
    return this.accessType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
var grantTokenInfo = "";
this.setGrantTokenInfo = function(grantTokenInfo) { 
    this.grantTokenInfo = grantTokenInfo;
    return this;
};
this.getGrantTokenInfo = function() {
    return this.grantTokenInfo;
};
var orgType = "";
this.setOrgType = function(orgType) { 
    this.orgType = orgType;
    return this;
};
this.getOrgType = function() {
    return this.orgType;
};
var oauthgranttokenscopes = undefined;
this.setOauthgranttokenscopess = function(oauthgranttokenscopes) { 
    this.oauthgranttokenscopes = oauthgranttokenscopes;
    return this;
};
this.getOauthgranttokenscopess = function() {
    return this.oauthgranttokenscopes;
};
this.addOauthgranttokenscopes = function(oauthgranttokenscopes) { 
 if(!this.oauthgranttokenscopes) this.oauthgranttokenscopes = new Array(); 
  this.oauthgranttokenscopes.push(oauthgranttokenscopes); 
 return this;
};

var oauthgranttokenorginfo = undefined;
this.setOauthgranttokenorginfos = function(oauthgranttokenorginfo) { 
    this.oauthgranttokenorginfo = oauthgranttokenorginfo;
    return this;
};
this.getOauthgranttokenorginfos = function() {
    return this.oauthgranttokenorginfo;
};
this.addOauthgranttokenorginfo = function(oauthgranttokenorginfo) { 
 if(!this.oauthgranttokenorginfo) this.oauthgranttokenorginfo = new Array(); 
  this.oauthgranttokenorginfo.push(oauthgranttokenorginfo); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setUserZid(json["user_zid"]);
		this.setZidType(json["zid_type"]);
		this.setGrantToken(json["grant_token"]);
		this.setGrantType(json["grant_type"]);
		this.setRedirectUrl(json["redirect_url"]);
		this.setAccessType(json["access_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setExpiryTime(json["expiry_time"]);
		this.setGrantTokenInfo(json["grant_token_info"]);
		this.setOrgType(json["org_type"]);
		this.setOauthgranttokenscopess(URI.getResourceArray(json["oAuthGrantTokenScopes"],"oauthgranttokenscopes"));
		this.setOauthgranttokenorginfos(URI.getResourceArray(json["oAuthGrantTokenOrgInfo"],"oauthgranttokenorginfo"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getUserZid()) json += '"user_zid"' + ":" + '"' + jsonEscape(this.getUserZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getGrantToken()) json += '"grant_token"' + ":" + '"' + jsonEscape(this.getGrantToken())  + '",';
		if(this.getGrantType()) json += '"grant_type"' + ":" + '"' + jsonEscape(this.getGrantType())  + '",';
		if(this.getRedirectUrl()) json += '"redirect_url"' + ":" + '"' + jsonEscape(this.getRedirectUrl())  + '",';
		if(this.getAccessType()) json += '"access_type"' + ":" + '"' + jsonEscape(this.getAccessType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';
		if(this.getGrantTokenInfo()) json += '"grant_token_info"' + ":" + '"' + jsonEscape(this.getGrantTokenInfo())  + '",';
		if(this.getOrgType()) json += '"org_type"' + ":" + '"' + jsonEscape(this.getOrgType())  + '",';
		if(this.getOauthgranttokenscopess()) json += '"oAuthGrantTokenScopes"' + ":" + URI.toJSONArray(this.getOauthgranttokenscopess())  + ',';
		if(this.getOauthgranttokenorginfos()) json += '"oAuthGrantTokenOrgInfo"' + ":" + URI.toJSONArray(this.getOauthgranttokenorginfos())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthGrantToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.userZid && !(/^[a-zA-Z0-9_\-]+$/).test(this.userZid)) { throw new ValidationError(_formprefix + "user_zid", ValidationError.PATTERN_FAILED);}
if(this.zidType && !Validator.INTEGER.test(this.zidType)) { throw new ValidationError(_formprefix + "zid_type", ValidationError.PATTERN_FAILED);}
if(this.grantToken && !(/xss:throwerror/).test(this.grantToken)) { throw new ValidationError(_formprefix + "grant_token", ValidationError.PATTERN_FAILED);}
if(this.grantType && !(/xss:throwerror/).test(this.grantType)) { throw new ValidationError(_formprefix + "grant_type", ValidationError.PATTERN_FAILED);}
if(this.redirectUrl && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.redirectUrl)) { throw new ValidationError(_formprefix + "redirect_url", ValidationError.PATTERN_FAILED);}
if(this.accessType && !Validator.INTEGER.test(this.accessType)) { throw new ValidationError(_formprefix + "access_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}
if(this.grantTokenInfo && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.grantTokenInfo)) { throw new ValidationError(_formprefix + "grant_token_info", ValidationError.PATTERN_FAILED);}
if(this.orgType && !Validator.INTEGER.test(this.orgType)) { throw new ValidationError(_formprefix + "org_type", ValidationError.PATTERN_FAILED);}
if(this.oauthgranttokenscopes) { for(i=0; i < this.oauthgranttokenscopes.length; i++ ) { this.oauthgranttokenscopes[i].validate(); } }
if(this.oauthgranttokenorginfo) { for(i=0; i < this.oauthgranttokenorginfo.length; i++ ) { this.oauthgranttokenorginfo[i].validate(); } }

	return this;
    }
}
OAuthGrantToken.path = "oauthgranttoken";
OAuthGrantToken.newBuilder = function() {
    return new OAuthGrantToken();
};

SAMLAuthentication = function() {
    var _formprefix = "";
    
var samlId = "";
this.setSamlId = function(samlId) { 
    this.samlId = samlId;
    return this;
};
this.getSamlId = function() {
    return this.samlId;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var loginUrl = "";
this.setLoginUrl = function(loginUrl) { 
    this.loginUrl = loginUrl;
    return this;
};
this.getLoginUrl = function() {
    return this.loginUrl;
};
var artifactUrl = "";
this.setArtifactUrl = function(artifactUrl) { 
    this.artifactUrl = artifactUrl;
    return this;
};
this.getArtifactUrl = function() {
    return this.artifactUrl;
};
var loginBinding = "0";
this.setLoginBinding = function(loginBinding) { 
    this.loginBinding = loginBinding;
    return this;
};
this.getLoginBinding = function() {
    return this.loginBinding;
};
var logoutUrl = "";
this.setLogoutUrl = function(logoutUrl) { 
    this.logoutUrl = logoutUrl;
    return this;
};
this.getLogoutUrl = function() {
    return this.logoutUrl;
};
var logoutBinding = "1";
this.setLogoutBinding = function(logoutBinding) { 
    this.logoutBinding = logoutBinding;
    return this;
};
this.getLogoutBinding = function() {
    return this.logoutBinding;
};
var publicKey = "";
this.setPublicKey = function(publicKey) { 
    this.publicKey = publicKey;
    return this;
};
this.getPublicKey = function() {
    return this.publicKey;
};
var nameIdentifier = "1";
this.setNameIdentifier = function(nameIdentifier) { 
    this.nameIdentifier = nameIdentifier;
    return this;
};
this.getNameIdentifier = function() {
    return this.nameIdentifier;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var landingService = "";
this.setLandingService = function(landingService) { 
    this.landingService = landingService;
    return this;
};
this.getLandingService = function() {
    return this.landingService;
};
var isSignEnabled = "false";
this.setIsSignEnabled = function(isSignEnabled) { 
    this.isSignEnabled = isSignEnabled;
    return this;
};
this.getIsSignEnabled = function() {
    return this.isSignEnabled;
};
var issuer = "";
this.setIssuer = function(issuer) { 
    this.issuer = issuer;
    return this;
};
this.getIssuer = function() {
    return this.issuer;
};
var spCertificate = "";
this.setSpCertificate = function(spCertificate) { 
    this.spCertificate = spCertificate;
    return this;
};
this.getSpCertificate = function() {
    return this.spCertificate;
};
var spPrivateKey = "";
this.setSpPrivateKey = function(spPrivateKey) { 
    this.spPrivateKey = spPrivateKey;
    return this;
};
this.getSpPrivateKey = function() {
    return this.spPrivateKey;
};
var spCertificateExpiryTime = "";
this.setSpCertificateExpiryTime = function(spCertificateExpiryTime) { 
    this.spCertificateExpiryTime = spCertificateExpiryTime;
    return this;
};
this.getSpCertificateExpiryTime = function() {
    return this.spCertificateExpiryTime;
};
var isNewSamlConfig = "0";
this.setIsNewSamlConfig = function(isNewSamlConfig) { 
    this.isNewSamlConfig = isNewSamlConfig;
    return this;
};
this.getIsNewSamlConfig = function() {
    return this.isNewSamlConfig;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var samlreqparam = undefined;
this.setSamlreqparams = function(samlreqparam) { 
    this.samlreqparam = samlreqparam;
    return this;
};
this.getSamlreqparams = function() {
    return this.samlreqparam;
};
this.addSamlreqparam = function(samlreqparam) { 
 if(!this.samlreqparam) this.samlreqparam = new Array(); 
  this.samlreqparam.push(samlreqparam); 
 return this;
};

var samlattribute = undefined;
this.setSamlattributes = function(samlattribute) { 
    this.samlattribute = samlattribute;
    return this;
};
this.getSamlattributes = function() {
    return this.samlattribute;
};
this.addSamlattribute = function(samlattribute) { 
 if(!this.samlattribute) this.samlattribute = new Array(); 
  this.samlattribute.push(samlattribute); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setSamlId(json["saml_id"]);
		this.setDisplayName(json["display_name"]);
		this.setLoginUrl(json["login_url"]);
		this.setArtifactUrl(json["artifact_url"]);
		this.setLoginBinding(json["login_binding"]);
		this.setLogoutUrl(json["logout_url"]);
		this.setLogoutBinding(json["logout_binding"]);
		this.setPublicKey(json["public_key"]);
		this.setNameIdentifier(json["name_identifier"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setLandingService(json["landing_service"]);
		this.setIsSignEnabled(json["is_sign_enabled"]);
		this.setIssuer(json["issuer"]);
		this.setSpCertificate(json["sp_certificate"]);
		this.setSpPrivateKey(json["sp_private_key"]);
		this.setSpCertificateExpiryTime(json["sp_certificate_expiry_time"]);
		this.setIsNewSamlConfig(json["is_new_saml_config"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setSamlreqparams(URI.getResourceArray(json["sAMLReqParam"],"samlreqparam"));
		this.setSamlattributes(URI.getResourceArray(json["sAMLAttribute"],"samlattribute"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getSamlId()) json += '"saml_id"' + ":" + '"' + jsonEscape(this.getSamlId())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getLoginUrl()) json += '"login_url"' + ":" + '"' + jsonEscape(this.getLoginUrl())  + '",';
		if(this.getArtifactUrl()) json += '"artifact_url"' + ":" + '"' + jsonEscape(this.getArtifactUrl())  + '",';
		if(this.getLoginBinding()) json += '"login_binding"' + ":" + '"' + jsonEscape(this.getLoginBinding())  + '",';
		if(this.getLogoutUrl()) json += '"logout_url"' + ":" + '"' + jsonEscape(this.getLogoutUrl())  + '",';
		if(this.getLogoutBinding()) json += '"logout_binding"' + ":" + '"' + jsonEscape(this.getLogoutBinding())  + '",';
		if(this.getPublicKey()) json += '"public_key"' + ":" + '"' + jsonEscape(this.getPublicKey())  + '",';
		if(this.getNameIdentifier()) json += '"name_identifier"' + ":" + '"' + jsonEscape(this.getNameIdentifier())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getLandingService()) json += '"landing_service"' + ":" + '"' + jsonEscape(this.getLandingService())  + '",';
		if(this.getIsSignEnabled()) json += '"is_sign_enabled"' + ":" + '"' + jsonEscape(this.getIsSignEnabled())  + '",';
		if(this.getIssuer()) json += '"issuer"' + ":" + '"' + jsonEscape(this.getIssuer())  + '",';
		if(this.getSpCertificate()) json += '"sp_certificate"' + ":" + '"' + jsonEscape(this.getSpCertificate())  + '",';
		if(this.getSpPrivateKey()) json += '"sp_private_key"' + ":" + '"' + jsonEscape(this.getSpPrivateKey())  + '",';
		if(this.getSpCertificateExpiryTime()) json += '"sp_certificate_expiry_time"' + ":" + '"' + jsonEscape(this.getSpCertificateExpiryTime())  + '",';
		if(this.getIsNewSamlConfig()) json += '"is_new_saml_config"' + ":" + '"' + jsonEscape(this.getIsNewSamlConfig())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getSamlreqparams()) json += '"sAMLReqParam"' + ":" + URI.toJSONArray(this.getSamlreqparams())  + ',';
		if(this.getSamlattributes()) json += '"sAMLAttribute"' + ":" + URI.toJSONArray(this.getSamlattributes())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SAMLAuthentication.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.loginUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.loginUrl)) { throw new ValidationError(_formprefix + "login_url", ValidationError.PATTERN_FAILED);}
if(this.artifactUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.artifactUrl)) { throw new ValidationError(_formprefix + "artifact_url", ValidationError.PATTERN_FAILED);}
if(this.logoutUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.logoutUrl)) { throw new ValidationError(_formprefix + "logout_url", ValidationError.PATTERN_FAILED);}
if(this.publicKey && !(/dontdisturb/).test(this.publicKey)) { throw new ValidationError(_formprefix + "public_key", ValidationError.PATTERN_FAILED);}
if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.isSignEnabled && !Validator.BOOLEAN.test(this.isSignEnabled)) { throw new ValidationError(_formprefix + "is_sign_enabled", ValidationError.PATTERN_FAILED);}
if(this.spCertificate && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.spCertificate)) { throw new ValidationError(_formprefix + "sp_certificate", ValidationError.PATTERN_FAILED);}
if(this.spPrivateKey && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.spPrivateKey)) { throw new ValidationError(_formprefix + "sp_private_key", ValidationError.PATTERN_FAILED);}
if(this.spCertificateExpiryTime && !Validator.INTEGER.test(this.spCertificateExpiryTime)) { throw new ValidationError(_formprefix + "sp_certificate_expiry_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.samlreqparam) { for(i=0; i < this.samlreqparam.length; i++ ) { this.samlreqparam[i].validate(); } }
if(this.samlattribute) { for(i=0; i < this.samlattribute.length; i++ ) { this.samlattribute[i].validate(); } }

	return this;
    }
}
SAMLAuthentication.path = "samlauthentication";
SAMLAuthentication.newBuilder = function() {
    return new SAMLAuthentication();
};

ISCUserTicketUsage = function() {
    var _formprefix = "";
    
var iscTicket = "";
this.setIscTicket = function(iscTicket) { 
    this.iscTicket = iscTicket;
    return this;
};
this.getIscTicket = function() {
    return this.iscTicket;
};
var scopeId = "-1";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var tokenCreatedTime = "";
this.setTokenCreatedTime = function(tokenCreatedTime) { 
    this.tokenCreatedTime = tokenCreatedTime;
    return this;
};
this.getTokenCreatedTime = function() {
    return this.tokenCreatedTime;
};
var tokenAccessedIp = "";
this.setTokenAccessedIp = function(tokenAccessedIp) { 
    this.tokenAccessedIp = tokenAccessedIp;
    return this;
};
this.getTokenAccessedIp = function() {
    return this.tokenAccessedIp;
};
var tokenAccessedTime = "";
this.setTokenAccessedTime = function(tokenAccessedTime) { 
    this.tokenAccessedTime = tokenAccessedTime;
    return this;
};
this.getTokenAccessedTime = function() {
    return this.tokenAccessedTime;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setIscTicket(json["isc_ticket"]);
		this.setScopeId(json["scope_id"]);
		this.setTokenCreatedTime(json["token_created_time"]);
		this.setTokenAccessedIp(json["token_accessed_ip"]);
		this.setTokenAccessedTime(json["token_accessed_time"]);
		this.setUserAgent(json["user_agent"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getIscTicket()) json += '"isc_ticket"' + ":" + '"' + jsonEscape(this.getIscTicket())  + '",';
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getTokenCreatedTime()) json += '"token_created_time"' + ":" + '"' + jsonEscape(this.getTokenCreatedTime())  + '",';
		if(this.getTokenAccessedIp()) json += '"token_accessed_ip"' + ":" + '"' + jsonEscape(this.getTokenAccessedIp())  + '",';
		if(this.getTokenAccessedTime()) json += '"token_accessed_time"' + ":" + '"' + jsonEscape(this.getTokenAccessedTime())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ISCUserTicketUsage.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.iscTicket && !(/^(?:[a-z0-9\.\-])+$/).test(this.iscTicket)) { throw new ValidationError(_formprefix + "isc_ticket", ValidationError.PATTERN_FAILED);}
if(this.scopeId && !(/^[a-zA-Z0-9_\-]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.tokenCreatedTime && !Validator.INTEGER.test(this.tokenCreatedTime)) { throw new ValidationError(_formprefix + "token_created_time", ValidationError.PATTERN_FAILED);}
if(this.tokenAccessedIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.tokenAccessedIp)) { throw new ValidationError(_formprefix + "token_accessed_ip", ValidationError.PATTERN_FAILED);}
if(this.tokenAccessedTime && !Validator.INTEGER.test(this.tokenAccessedTime)) { throw new ValidationError(_formprefix + "token_accessed_time", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ISCUserTicketUsage.path = "iscuserticketusage";
ISCUserTicketUsage.newBuilder = function() {
    return new ISCUserTicketUsage();
};

I18n = function() {
    var _formprefix = "";
    
var i18nAttributeName = "";
this.setI18nAttributeName = function(i18nAttributeName) { 
    this.i18nAttributeName = i18nAttributeName;
    return this;
};
this.getI18nAttributeName = function() {
    return this.i18nAttributeName;
};
var isFile = "";
this.setIsFile = function(isFile) { 
    this.isFile = isFile;
    return this;
};
this.getIsFile = function() {
    return this.isFile;
};
var i18nAttributeValue = "";
this.setI18nAttributeValue = function(i18nAttributeValue) { 
    this.i18nAttributeValue = i18nAttributeValue;
    return this;
};
this.getI18nAttributeValue = function() {
    return this.i18nAttributeValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setI18nAttributeName(json["i18n_attribute_name"]);
		this.setIsFile(json["is_file"]);
		this.setI18nAttributeValue(json["i18n_attribute_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getI18nAttributeName()) json += '"i18n_attribute_name"' + ":" + '"' + jsonEscape(this.getI18nAttributeName())  + '",';
		if(this.getIsFile()) json += '"is_file"' + ":" + '"' + jsonEscape(this.getIsFile())  + '",';
		if(this.getI18nAttributeValue()) json += '"i18n_attribute_value"' + ":" + '"' + jsonEscape(this.getI18nAttributeValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(I18n.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.i18nAttributeName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.i18nAttributeName)) { throw new ValidationError(_formprefix + "i18n_attribute_name", ValidationError.PATTERN_FAILED);}
if(this.isFile && !Validator.BOOLEAN.test(this.isFile)) { throw new ValidationError(_formprefix + "is_file", ValidationError.PATTERN_FAILED);}
if(this.i18nAttributeValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.i18nAttributeValue)) { throw new ValidationError(_formprefix + "i18n_attribute_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
I18n.path = "i18n";
I18n.newBuilder = function() {
    return new I18n();
};

DCCustomDomains = function() {
    var _formprefix = "";
    
var entityName = "";
this.setEntityName = function(entityName) { 
    this.entityName = entityName;
    return this;
};
this.getEntityName = function() {
    return this.entityName;
};
var originalBasedomain = "";
this.setOriginalBasedomain = function(originalBasedomain) { 
    this.originalBasedomain = originalBasedomain;
    return this;
};
this.getOriginalBasedomain = function() {
    return this.originalBasedomain;
};
var transformedBasedomain = ".*";
this.setTransformedBasedomain = function(transformedBasedomain) { 
    this.transformedBasedomain = transformedBasedomain;
    return this;
};
this.getTransformedBasedomain = function() {
    return this.transformedBasedomain;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setEntityName(json["entity_name"]);
		this.setOriginalBasedomain(json["original_basedomain"]);
		this.setTransformedBasedomain(json["transformed_basedomain"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getEntityName()) json += '"entity_name"' + ":" + '"' + jsonEscape(this.getEntityName())  + '",';
		if(this.getOriginalBasedomain()) json += '"original_basedomain"' + ":" + '"' + jsonEscape(this.getOriginalBasedomain())  + '",';
		if(this.getTransformedBasedomain()) json += '"transformed_basedomain"' + ":" + '"' + jsonEscape(this.getTransformedBasedomain())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(DCCustomDomains.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	
	return this;
    }
}
DCCustomDomains.path = "dccustomdomains";
DCCustomDomains.newBuilder = function() {
    return new DCCustomDomains();
};

ServiceOrgAddress = function() {
    var _formprefix = "";
    
var addressType = "";
this.setAddressType = function(addressType) { 
    this.addressType = addressType;
    return this;
};
this.getAddressType = function() {
    return this.addressType;
};
var name = "";
this.setName = function(name) { 
    this.name = name;
    return this;
};
this.getName = function() {
    return this.name;
};
var postBox = "";
this.setPostBox = function(postBox) { 
    this.postBox = postBox;
    return this;
};
this.getPostBox = function() {
    return this.postBox;
};
var streetAddress = "";
this.setStreetAddress = function(streetAddress) { 
    this.streetAddress = streetAddress;
    return this;
};
this.getStreetAddress = function() {
    return this.streetAddress;
};
var city = "";
this.setCity = function(city) { 
    this.city = city;
    return this;
};
this.getCity = function() {
    return this.city;
};
var state = "";
this.setState = function(state) { 
    this.state = state;
    return this;
};
this.getState = function() {
    return this.state;
};
var country = "";
this.setCountry = function(country) { 
    this.country = country;
    return this;
};
this.getCountry = function() {
    return this.country;
};
var postalCode = "";
this.setPostalCode = function(postalCode) { 
    this.postalCode = postalCode;
    return this;
};
this.getPostalCode = function() {
    return this.postalCode;
};
var latitude = "";
this.setLatitude = function(latitude) { 
    this.latitude = latitude;
    return this;
};
this.getLatitude = function() {
    return this.latitude;
};
var longitude = "";
this.setLongitude = function(longitude) { 
    this.longitude = longitude;
    return this;
};
this.getLongitude = function() {
    return this.longitude;
};
var phone = "";
this.setPhone = function(phone) { 
    this.phone = phone;
    return this;
};
this.getPhone = function() {
    return this.phone;
};
var extension = "";
this.setExtension = function(extension) { 
    this.extension = extension;
    return this;
};
this.getExtension = function() {
    return this.extension;
};
var mobile = "";
this.setMobile = function(mobile) { 
    this.mobile = mobile;
    return this;
};
this.getMobile = function() {
    return this.mobile;
};
var fax = "";
this.setFax = function(fax) { 
    this.fax = fax;
    return this;
};
this.getFax = function() {
    return this.fax;
};
var timezone = "";
this.setTimezone = function(timezone) { 
    this.timezone = timezone;
    return this;
};
this.getTimezone = function() {
    return this.timezone;
};
var language = "";
this.setLanguage = function(language) { 
    this.language = language;
    return this;
};
this.getLanguage = function() {
    return this.language;
};
var websiteUrl = "";
this.setWebsiteUrl = function(websiteUrl) { 
    this.websiteUrl = websiteUrl;
    return this;
};
this.getWebsiteUrl = function() {
    return this.websiteUrl;
};
var blogUrl = "";
this.setBlogUrl = function(blogUrl) { 
    this.blogUrl = blogUrl;
    return this;
};
this.getBlogUrl = function() {
    return this.blogUrl;
};
var twitterUrl = "";
this.setTwitterUrl = function(twitterUrl) { 
    this.twitterUrl = twitterUrl;
    return this;
};
this.getTwitterUrl = function() {
    return this.twitterUrl;
};
var linkedinUrl = "";
this.setLinkedinUrl = function(linkedinUrl) { 
    this.linkedinUrl = linkedinUrl;
    return this;
};
this.getLinkedinUrl = function() {
    return this.linkedinUrl;
};
var flickrUrl = "";
this.setFlickrUrl = function(flickrUrl) { 
    this.flickrUrl = flickrUrl;
    return this;
};
this.getFlickrUrl = function() {
    return this.flickrUrl;
};
var deliciousUrl = "";
this.setDeliciousUrl = function(deliciousUrl) { 
    this.deliciousUrl = deliciousUrl;
    return this;
};
this.getDeliciousUrl = function() {
    return this.deliciousUrl;
};
var amazonUrl = "";
this.setAmazonUrl = function(amazonUrl) { 
    this.amazonUrl = amazonUrl;
    return this;
};
this.getAmazonUrl = function() {
    return this.amazonUrl;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAddressType(json["address_type"]);
		this.setName(json["name"]);
		this.setPostBox(json["post_box"]);
		this.setStreetAddress(json["street_address"]);
		this.setCity(json["city"]);
		this.setState(json["state"]);
		this.setCountry(json["country"]);
		this.setPostalCode(json["postal_code"]);
		this.setLatitude(json["latitude"]);
		this.setLongitude(json["longitude"]);
		this.setPhone(json["phone"]);
		this.setExtension(json["extension"]);
		this.setMobile(json["mobile"]);
		this.setFax(json["fax"]);
		this.setTimezone(json["timezone"]);
		this.setLanguage(json["language"]);
		this.setWebsiteUrl(json["website_url"]);
		this.setBlogUrl(json["blog_url"]);
		this.setTwitterUrl(json["twitter_url"]);
		this.setLinkedinUrl(json["linkedin_url"]);
		this.setFlickrUrl(json["flickr_url"]);
		this.setDeliciousUrl(json["delicious_url"]);
		this.setAmazonUrl(json["amazon_url"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAddressType()) json += '"address_type"' + ":" + '"' + jsonEscape(this.getAddressType())  + '",';
		if(this.getName()) json += '"name"' + ":" + '"' + jsonEscape(this.getName())  + '",';
		if(this.getPostBox()) json += '"post_box"' + ":" + '"' + jsonEscape(this.getPostBox())  + '",';
		if(this.getStreetAddress()) json += '"street_address"' + ":" + '"' + jsonEscape(this.getStreetAddress())  + '",';
		if(this.getCity()) json += '"city"' + ":" + '"' + jsonEscape(this.getCity())  + '",';
		if(this.getState()) json += '"state"' + ":" + '"' + jsonEscape(this.getState())  + '",';
		if(this.getCountry()) json += '"country"' + ":" + '"' + jsonEscape(this.getCountry())  + '",';
		if(this.getPostalCode()) json += '"postal_code"' + ":" + '"' + jsonEscape(this.getPostalCode())  + '",';
		if(this.getLatitude()) json += '"latitude"' + ":" + '"' + jsonEscape(this.getLatitude())  + '",';
		if(this.getLongitude()) json += '"longitude"' + ":" + '"' + jsonEscape(this.getLongitude())  + '",';
		if(this.getPhone()) json += '"phone"' + ":" + '"' + jsonEscape(this.getPhone())  + '",';
		if(this.getExtension()) json += '"extension"' + ":" + '"' + jsonEscape(this.getExtension())  + '",';
		if(this.getMobile()) json += '"mobile"' + ":" + '"' + jsonEscape(this.getMobile())  + '",';
		if(this.getFax()) json += '"fax"' + ":" + '"' + jsonEscape(this.getFax())  + '",';
		if(this.getTimezone()) json += '"timezone"' + ":" + '"' + jsonEscape(this.getTimezone())  + '",';
		if(this.getLanguage()) json += '"language"' + ":" + '"' + jsonEscape(this.getLanguage())  + '",';
		if(this.getWebsiteUrl()) json += '"website_url"' + ":" + '"' + jsonEscape(this.getWebsiteUrl())  + '",';
		if(this.getBlogUrl()) json += '"blog_url"' + ":" + '"' + jsonEscape(this.getBlogUrl())  + '",';
		if(this.getTwitterUrl()) json += '"twitter_url"' + ":" + '"' + jsonEscape(this.getTwitterUrl())  + '",';
		if(this.getLinkedinUrl()) json += '"linkedin_url"' + ":" + '"' + jsonEscape(this.getLinkedinUrl())  + '",';
		if(this.getFlickrUrl()) json += '"flickr_url"' + ":" + '"' + jsonEscape(this.getFlickrUrl())  + '",';
		if(this.getDeliciousUrl()) json += '"delicious_url"' + ":" + '"' + jsonEscape(this.getDeliciousUrl())  + '",';
		if(this.getAmazonUrl()) json += '"amazon_url"' + ":" + '"' + jsonEscape(this.getAmazonUrl())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgAddress.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.addressType && !Validator.INTEGER.test(this.addressType)) { throw new ValidationError(_formprefix + "address_type", ValidationError.PATTERN_FAILED);}
if(this.name && !(/xss:throwerror/).test(this.name)) { throw new ValidationError(_formprefix + "name", ValidationError.PATTERN_FAILED);}
if(this.postBox && !(/xss:throwerror/).test(this.postBox)) { throw new ValidationError(_formprefix + "post_box", ValidationError.PATTERN_FAILED);}
if(this.streetAddress && !(/xss:throwerror/).test(this.streetAddress)) { throw new ValidationError(_formprefix + "street_address", ValidationError.PATTERN_FAILED);}
if(this.city && !(/xss:throwerror/).test(this.city)) { throw new ValidationError(_formprefix + "city", ValidationError.PATTERN_FAILED);}
if(this.state && !(/xss:throwerror/).test(this.state)) { throw new ValidationError(_formprefix + "state", ValidationError.PATTERN_FAILED);}
if(this.country && !(/^[a-zA-Z0-9]{2,5}$/).test(this.country)) { throw new ValidationError(_formprefix + "country", ValidationError.PATTERN_FAILED);}
if(this.postalCode && !(/xss:throwerror/).test(this.postalCode)) { throw new ValidationError(_formprefix + "postal_code", ValidationError.PATTERN_FAILED);}
if(this.latitude && !(/^[0-9\-\.]*$/).test(this.latitude)) { throw new ValidationError(_formprefix + "latitude", ValidationError.PATTERN_FAILED);}
if(this.longitude && !(/^[0-9\-\.]*$/).test(this.longitude)) { throw new ValidationError(_formprefix + "longitude", ValidationError.PATTERN_FAILED);}
if(this.phone && !(/xss:throwerror/).test(this.phone)) { throw new ValidationError(_formprefix + "phone", ValidationError.PATTERN_FAILED);}
if(this.extension && !(/xss:throwerror/).test(this.extension)) { throw new ValidationError(_formprefix + "extension", ValidationError.PATTERN_FAILED);}
if(this.mobile && !(/xss:throwerror/).test(this.mobile)) { throw new ValidationError(_formprefix + "mobile", ValidationError.PATTERN_FAILED);}
if(this.fax && !(/xss:throwerror/).test(this.fax)) { throw new ValidationError(_formprefix + "fax", ValidationError.PATTERN_FAILED);}
if(this.timezone && !(/xss:throwerror/).test(this.timezone)) { throw new ValidationError(_formprefix + "timezone", ValidationError.PATTERN_FAILED);}
if(this.language && !(/^[a-zA-Z-]{0,5}$/).test(this.language)) { throw new ValidationError(_formprefix + "language", ValidationError.PATTERN_FAILED);}
if(this.websiteUrl && !(/xss:throwerror/).test(this.websiteUrl)) { throw new ValidationError(_formprefix + "website_url", ValidationError.PATTERN_FAILED);}
if(this.blogUrl && !(/xss:throwerror/).test(this.blogUrl)) { throw new ValidationError(_formprefix + "blog_url", ValidationError.PATTERN_FAILED);}
if(this.twitterUrl && !(/xss:throwerror/).test(this.twitterUrl)) { throw new ValidationError(_formprefix + "twitter_url", ValidationError.PATTERN_FAILED);}
if(this.linkedinUrl && !(/xss:throwerror/).test(this.linkedinUrl)) { throw new ValidationError(_formprefix + "linkedin_url", ValidationError.PATTERN_FAILED);}
if(this.flickrUrl && !(/xss:throwerror/).test(this.flickrUrl)) { throw new ValidationError(_formprefix + "flickr_url", ValidationError.PATTERN_FAILED);}
if(this.deliciousUrl && !(/xss:throwerror/).test(this.deliciousUrl)) { throw new ValidationError(_formprefix + "delicious_url", ValidationError.PATTERN_FAILED);}
if(this.amazonUrl && !(/xss:throwerror/).test(this.amazonUrl)) { throw new ValidationError(_formprefix + "amazon_url", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgAddress.path = "serviceorgaddress";
ServiceOrgAddress.newBuilder = function() {
    return new ServiceOrgAddress();
};

OAuthGrantTokenScopes = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var allowedOperations = "";
this.setAllowedOperations = function(allowedOperations) { 
    this.allowedOperations = allowedOperations;
    return this;
};
this.getAllowedOperations = function() {
    return this.allowedOperations;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setAllowedOperations(json["allowed_operations"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getAllowedOperations()) json += '"allowed_operations"' + ":" + '"' + jsonEscape(this.getAllowedOperations())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthGrantTokenScopes.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.allowedOperations && !Validator.INTEGER.test(this.allowedOperations)) { throw new ValidationError(_formprefix + "allowed_operations", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthGrantTokenScopes.path = "oauthgranttokenscopes";
OAuthGrantTokenScopes.newBuilder = function() {
    return new OAuthGrantTokenScopes();
};

ZAIDSMSAuditTemplate = function() {
    var _formprefix = "";
    
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var mobileNo = "";
this.setMobileNo = function(mobileNo) { 
    this.mobileNo = mobileNo;
    return this;
};
this.getMobileNo = function() {
    return this.mobileNo;
};
var type = "";
this.setType = function(type) { 
    this.type = type;
    return this;
};
this.getType = function() {
    return this.type;
};
var usecase = "";
this.setUsecase = function(usecase) { 
    this.usecase = usecase;
    return this;
};
this.getUsecase = function() {
    return this.usecase;
};
var languageCode = "";
this.setLanguageCode = function(languageCode) { 
    this.languageCode = languageCode;
    return this;
};
this.getLanguageCode = function() {
    return this.languageCode;
};
var response = "";
this.setResponse = function(response) { 
    this.response = response;
    return this;
};
this.getResponse = function() {
    return this.response;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZaid(json["zaid"]);
		this.setZid(json["zid"]);
		this.setMobileNo(json["mobile_no"]);
		this.setType(json["type"]);
		this.setUsecase(json["usecase"]);
		this.setLanguageCode(json["language_code"]);
		this.setResponse(json["response"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getMobileNo()) json += '"mobile_no"' + ":" + '"' + jsonEscape(this.getMobileNo())  + '",';
		if(this.getType()) json += '"type"' + ":" + '"' + jsonEscape(this.getType())  + '",';
		if(this.getUsecase()) json += '"usecase"' + ":" + '"' + jsonEscape(this.getUsecase())  + '",';
		if(this.getLanguageCode()) json += '"language_code"' + ":" + '"' + jsonEscape(this.getLanguageCode())  + '",';
		if(this.getResponse()) json += '"response"' + ":" + '"' + jsonEscape(this.getResponse())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ZAIDSMSAuditTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.mobileNo && !(/dontdisturb/).test(this.mobileNo)) { throw new ValidationError(_formprefix + "mobile_no", ValidationError.PATTERN_FAILED);}
if(this.type && !Validator.INTEGER.test(this.type)) { throw new ValidationError(_formprefix + "type", ValidationError.PATTERN_FAILED);}
if(this.usecase && !Validator.INTEGER.test(this.usecase)) { throw new ValidationError(_formprefix + "usecase", ValidationError.PATTERN_FAILED);}
if(this.languageCode && !(/dontdisturb/).test(this.languageCode)) { throw new ValidationError(_formprefix + "language_code", ValidationError.PATTERN_FAILED);}
if(this.response && !(/dontdisturb/).test(this.response)) { throw new ValidationError(_formprefix + "response", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ZAIDSMSAuditTemplate.path = "zaidsmsaudittemplate";
ZAIDSMSAuditTemplate.newBuilder = function() {
    return new ZAIDSMSAuditTemplate();
};

Lang = function() {
    var _formprefix = "";
    
var languageCode = "";
this.setLanguageCode = function(languageCode) { 
    this.languageCode = languageCode;
    return this;
};
this.getLanguageCode = function() {
    return this.languageCode;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var i18n = undefined;
this.setI18ns = function(i18n) { 
    this.i18n = i18n;
    return this;
};
this.getI18ns = function() {
    return this.i18n;
};
this.addI18n = function(i18n) { 
 if(!this.i18n) this.i18n = new Array(); 
  this.i18n.push(i18n); 
 return this;
};

var rebrandl10n = undefined;
this.setRebrandl10ns = function(rebrandl10n) { 
    this.rebrandl10n = rebrandl10n;
    return this;
};
this.getRebrandl10ns = function() {
    return this.rebrandl10n;
};
this.addRebrandl10n = function(rebrandl10n) { 
 if(!this.rebrandl10n) this.rebrandl10n = new Array(); 
  this.rebrandl10n.push(rebrandl10n); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLanguageCode(json["language_code"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setI18ns(URI.getResourceArray(json["i18n"],"i18n"));
		this.setRebrandl10ns(URI.getResourceArray(json["rebrandL10n"],"rebrandl10n"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLanguageCode()) json += '"language_code"' + ":" + '"' + jsonEscape(this.getLanguageCode())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getI18ns()) json += '"i18n"' + ":" + URI.toJSONArray(this.getI18ns())  + ',';
		if(this.getRebrandl10ns()) json += '"rebrandL10n"' + ":" + URI.toJSONArray(this.getRebrandl10ns())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Lang.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.languageCode && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.languageCode)) { throw new ValidationError(_formprefix + "language_code", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.i18n) { for(i=0; i < this.i18n.length; i++ ) { this.i18n[i].validate(); } }
if(this.rebrandl10n) { for(i=0; i < this.rebrandl10n.length; i++ ) { this.rebrandl10n[i].validate(); } }

	return this;
    }
}
Lang.path = "lang";
Lang.newBuilder = function() {
    return new Lang();
};

OAuthAccessGrant = function() {
    var _formprefix = "";
    
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var oauthaccessgrantscopes = undefined;
this.setOauthaccessgrantscopess = function(oauthaccessgrantscopes) { 
    this.oauthaccessgrantscopes = oauthaccessgrantscopes;
    return this;
};
this.getOauthaccessgrantscopess = function() {
    return this.oauthaccessgrantscopes;
};
this.addOauthaccessgrantscopes = function(oauthaccessgrantscopes) { 
 if(!this.oauthaccessgrantscopes) this.oauthaccessgrantscopes = new Array(); 
  this.oauthaccessgrantscopes.push(oauthaccessgrantscopes); 
 return this;
};

var userwhitelistedclient = undefined;
this.setUserwhitelistedclient = function(userwhitelistedclient) { 
    this.userwhitelistedclient = userwhitelistedclient;
    return this;
};
this.getUserwhitelistedclient = function() {
    return this.userwhitelistedclient;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClientZid(json["client_zid"]);
		this.setIpAddress(json["ip_address"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);
		this.setOauthaccessgrantscopess(URI.getResourceArray(json["oAuthAccessGrantScopes"],"oauthaccessgrantscopes"));
		this.setUserwhitelistedclient(URI.getResource(json["userWhiteListedClient"],"userwhitelistedclient"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getOauthaccessgrantscopess()) json += '"oAuthAccessGrantScopes"' + ":" + URI.toJSONArray(this.getOauthaccessgrantscopess())  + ',';
		if(this.getUserwhitelistedclient()) json += '"userWhiteListedClient"' + ":" + this.getUserwhitelistedclient().toJSON()  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthAccessGrant.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.clientZid && !(/^[0-9]+\.[0-9]+$/).test(this.clientZid)) { throw new ValidationError(_formprefix + "client_zid", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/xss:throwerror/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.oauthaccessgrantscopes) { for(i=0; i < this.oauthaccessgrantscopes.length; i++ ) { this.oauthaccessgrantscopes[i].validate(); } }
if(this.userwhitelistedclient) { this.userwhitelistedclient.validate(); }

	return this;
    }
}
OAuthAccessGrant.path = "oauthaccessgrant";
OAuthAccessGrant.newBuilder = function() {
    return new OAuthAccessGrant();
};

SecretKey = function() {
    var _formprefix = "";
    
var keyLabel = "";
this.setKeyLabel = function(keyLabel) { 
    this.keyLabel = keyLabel;
    return this;
};
this.getKeyLabel = function() {
    return this.keyLabel;
};
var secretKey = "";
this.setSecretKey = function(secretKey) { 
    this.secretKey = secretKey;
    return this;
};
this.getSecretKey = function() {
    return this.secretKey;
};
var previousSecretKey = "";
this.setPreviousSecretKey = function(previousSecretKey) { 
    this.previousSecretKey = previousSecretKey;
    return this;
};
this.getPreviousSecretKey = function() {
    return this.previousSecretKey;
};
var validityPeriod = "30";
this.setValidityPeriod = function(validityPeriod) { 
    this.validityPeriod = validityPeriod;
    return this;
};
this.getValidityPeriod = function() {
    return this.validityPeriod;
};
var keyAlgorithm = "";
this.setKeyAlgorithm = function(keyAlgorithm) { 
    this.keyAlgorithm = keyAlgorithm;
    return this;
};
this.getKeyAlgorithm = function() {
    return this.keyAlgorithm;
};
var keyLength = "128";
this.setKeyLength = function(keyLength) { 
    this.keyLength = keyLength;
    return this;
};
this.getKeyLength = function() {
    return this.keyLength;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setKeyLabel(json["key_label"]);
		this.setSecretKey(json["secret_key"]);
		this.setPreviousSecretKey(json["previous_secret_key"]);
		this.setValidityPeriod(json["validity_period"]);
		this.setKeyAlgorithm(json["key_algorithm"]);
		this.setKeyLength(json["key_length"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getKeyLabel()) json += '"key_label"' + ":" + '"' + jsonEscape(this.getKeyLabel())  + '",';
		if(this.getSecretKey()) json += '"secret_key"' + ":" + '"' + jsonEscape(this.getSecretKey())  + '",';
		if(this.getPreviousSecretKey()) json += '"previous_secret_key"' + ":" + '"' + jsonEscape(this.getPreviousSecretKey())  + '",';
		if(this.getValidityPeriod()) json += '"validity_period"' + ":" + '"' + jsonEscape(this.getValidityPeriod())  + '",';
		if(this.getKeyAlgorithm()) json += '"key_algorithm"' + ":" + '"' + jsonEscape(this.getKeyAlgorithm())  + '",';
		if(this.getKeyLength()) json += '"key_length"' + ":" + '"' + jsonEscape(this.getKeyLength())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SecretKey.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.keyLabel && !(/^([A-Za-z0-9_.\-]+)$/).test(this.keyLabel)) { throw new ValidationError(_formprefix + "key_label", ValidationError.PATTERN_FAILED);}
if(this.validityPeriod && !Validator.INTEGER.test(this.validityPeriod)) { throw new ValidationError(_formprefix + "validity_period", ValidationError.PATTERN_FAILED);}
if(this.keyAlgorithm && !(/^([A-Za-z0-9_.\-]+)$/).test(this.keyAlgorithm)) { throw new ValidationError(_formprefix + "key_algorithm", ValidationError.PATTERN_FAILED);}
if(this.keyLength && !Validator.INTEGER.test(this.keyLength)) { throw new ValidationError(_formprefix + "key_length", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SecretKey.path = "secretkey";
SecretKey.newBuilder = function() {
    return new SecretKey();
};

InvitedUserDetails = function() {
    var _formprefix = "";
    
var invitedUserAutoid = "";
this.setInvitedUserAutoid = function(invitedUserAutoid) { 
    this.invitedUserAutoid = invitedUserAutoid;
    return this;
};
this.getInvitedUserAutoid = function() {
    return this.invitedUserAutoid;
};
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var orgId = "";
this.setOrgId = function(orgId) { 
    this.orgId = orgId;
    return this;
};
this.getOrgId = function() {
    return this.orgId;
};
var orgType = "";
this.setOrgType = function(orgType) { 
    this.orgType = orgType;
    return this;
};
this.getOrgType = function() {
    return this.orgType;
};
var status = "1";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var argsData = "";
this.setArgsData = function(argsData) { 
    this.argsData = argsData;
    return this;
};
this.getArgsData = function() {
    return this.argsData;
};
var invitationTime = "";
this.setInvitationTime = function(invitationTime) { 
    this.invitationTime = invitationTime;
    return this;
};
this.getInvitationTime = function() {
    return this.invitationTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setInvitedUserAutoid(json["invited_user_autoid"]);
		this.setEmailId(json["email_id"]);
		this.setOrgId(json["org_id"]);
		this.setOrgType(json["org_type"]);
		this.setStatus(json["status"]);
		this.setArgsData(json["args_data"]);
		this.setInvitationTime(json["invitation_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getInvitedUserAutoid()) json += '"invited_user_autoid"' + ":" + '"' + jsonEscape(this.getInvitedUserAutoid())  + '",';
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getOrgId()) json += '"org_id"' + ":" + '"' + jsonEscape(this.getOrgId())  + '",';
		if(this.getOrgType()) json += '"org_type"' + ":" + '"' + jsonEscape(this.getOrgType())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getArgsData()) json += '"args_data"' + ":" + '"' + jsonEscape(this.getArgsData())  + '",';
		if(this.getInvitationTime()) json += '"invitation_time"' + ":" + '"' + jsonEscape(this.getInvitationTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(InvitedUserDetails.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.invitedUserAutoid && !Validator.INTEGER.test(this.invitedUserAutoid)) { throw new ValidationError(_formprefix + "invited_user_autoid", ValidationError.PATTERN_FAILED);}
if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.orgId && !(/^[a-zA-Z0-9_\-]+$/).test(this.orgId)) { throw new ValidationError(_formprefix + "org_id", ValidationError.PATTERN_FAILED);}
if(this.orgType && !Validator.INTEGER.test(this.orgType)) { throw new ValidationError(_formprefix + "org_type", ValidationError.PATTERN_FAILED);}
if(this.invitationTime && !Validator.INTEGER.test(this.invitationTime)) { throw new ValidationError(_formprefix + "invitation_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
InvitedUserDetails.path = "inviteduserdetails";
InvitedUserDetails.newBuilder = function() {
    return new InvitedUserDetails();
};

OAuthAccessToken = function() {
    var _formprefix = "";
    
var userZid = "";
this.setUserZid = function(userZid) { 
    this.userZid = userZid;
    return this;
};
this.getUserZid = function() {
    return this.userZid;
};
var zidType = "1";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var refreshToken = "";
this.setRefreshToken = function(refreshToken) { 
    this.refreshToken = refreshToken;
    return this;
};
this.getRefreshToken = function() {
    return this.refreshToken;
};
var accessToken = "";
this.setAccessToken = function(accessToken) { 
    this.accessToken = accessToken;
    return this;
};
this.getAccessToken = function() {
    return this.accessToken;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var oauthaccesstokenscopes = undefined;
this.setOauthaccesstokenscopess = function(oauthaccesstokenscopes) { 
    this.oauthaccesstokenscopes = oauthaccesstokenscopes;
    return this;
};
this.getOauthaccesstokenscopess = function() {
    return this.oauthaccesstokenscopes;
};
this.addOauthaccesstokenscopes = function(oauthaccesstokenscopes) { 
 if(!this.oauthaccesstokenscopes) this.oauthaccesstokenscopes = new Array(); 
  this.oauthaccesstokenscopes.push(oauthaccesstokenscopes); 
 return this;
};

var oauthaccesstokenorginfo = undefined;
this.setOauthaccesstokenorginfos = function(oauthaccesstokenorginfo) { 
    this.oauthaccesstokenorginfo = oauthaccesstokenorginfo;
    return this;
};
this.getOauthaccesstokenorginfos = function() {
    return this.oauthaccesstokenorginfo;
};
this.addOauthaccesstokenorginfo = function(oauthaccesstokenorginfo) { 
 if(!this.oauthaccesstokenorginfo) this.oauthaccesstokenorginfo = new Array(); 
  this.oauthaccesstokenorginfo.push(oauthaccesstokenorginfo); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setUserZid(json["user_zid"]);
		this.setZidType(json["zid_type"]);
		this.setRefreshToken(json["refresh_token"]);
		this.setAccessToken(json["access_token"]);
		this.setExpiryTime(json["expiry_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setOauthaccesstokenscopess(URI.getResourceArray(json["oAuthAccessTokenScopes"],"oauthaccesstokenscopes"));
		this.setOauthaccesstokenorginfos(URI.getResourceArray(json["oAuthAccessTokenOrgInfo"],"oauthaccesstokenorginfo"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getUserZid()) json += '"user_zid"' + ":" + '"' + jsonEscape(this.getUserZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getRefreshToken()) json += '"refresh_token"' + ":" + '"' + jsonEscape(this.getRefreshToken())  + '",';
		if(this.getAccessToken()) json += '"access_token"' + ":" + '"' + jsonEscape(this.getAccessToken())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getOauthaccesstokenscopess()) json += '"oAuthAccessTokenScopes"' + ":" + URI.toJSONArray(this.getOauthaccesstokenscopess())  + ',';
		if(this.getOauthaccesstokenorginfos()) json += '"oAuthAccessTokenOrgInfo"' + ":" + URI.toJSONArray(this.getOauthaccesstokenorginfos())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthAccessToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.userZid && !(/^[a-zA-Z0-9_\-]+$/).test(this.userZid)) { throw new ValidationError(_formprefix + "user_zid", ValidationError.PATTERN_FAILED);}
if(this.zidType && !Validator.INTEGER.test(this.zidType)) { throw new ValidationError(_formprefix + "zid_type", ValidationError.PATTERN_FAILED);}
if(this.refreshToken && !(/xss:throwerror/).test(this.refreshToken)) { throw new ValidationError(_formprefix + "refresh_token", ValidationError.PATTERN_FAILED);}
if(this.accessToken && !(/xss:throwerror/).test(this.accessToken)) { throw new ValidationError(_formprefix + "access_token", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.oauthaccesstokenscopes) { for(i=0; i < this.oauthaccesstokenscopes.length; i++ ) { this.oauthaccesstokenscopes[i].validate(); } }
if(this.oauthaccesstokenorginfo) { for(i=0; i < this.oauthaccesstokenorginfo.length; i++ ) { this.oauthaccesstokenorginfo[i].validate(); } }

	return this;
    }
}
OAuthAccessToken.path = "oauthaccesstoken";
OAuthAccessToken.newBuilder = function() {
    return new OAuthAccessToken();
};

DeploymentConfig = function() {
    var _formprefix = "";
    
var deploymentName = "";
this.setDeploymentName = function(deploymentName) { 
    this.deploymentName = deploymentName;
    return this;
};
this.getDeploymentName = function() {
    return this.deploymentName;
};
var configName = "";
this.setConfigName = function(configName) { 
    this.configName = configName;
    return this;
};
this.getConfigName = function() {
    return this.configName;
};
var configValue = "";
this.setConfigValue = function(configValue) { 
    this.configValue = configValue;
    return this;
};
this.getConfigValue = function() {
    return this.configValue;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDeploymentName(json["deployment_name"]);
		this.setConfigName(json["config_name"]);
		this.setConfigValue(json["config_value"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDeploymentName()) json += '"deployment_name"' + ":" + '"' + jsonEscape(this.getDeploymentName())  + '",';
		if(this.getConfigName()) json += '"config_name"' + ":" + '"' + jsonEscape(this.getConfigName())  + '",';
		if(this.getConfigValue()) json += '"config_value"' + ":" + '"' + jsonEscape(this.getConfigValue())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(DeploymentConfig.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.deploymentName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.deploymentName)) { throw new ValidationError(_formprefix + "deployment_name", ValidationError.PATTERN_FAILED);}
if(this.configName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.configName)) { throw new ValidationError(_formprefix + "config_name", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
DeploymentConfig.path = "deploymentconfig";
DeploymentConfig.newBuilder = function() {
    return new DeploymentConfig();
};

AccountOAuthAccessGrantScopes = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var allowedOperations = "";
this.setAllowedOperations = function(allowedOperations) { 
    this.allowedOperations = allowedOperations;
    return this;
};
this.getAllowedOperations = function() {
    return this.allowedOperations;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setAllowedOperations(json["allowed_operations"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getAllowedOperations()) json += '"allowed_operations"' + ":" + '"' + jsonEscape(this.getAllowedOperations())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountOAuthAccessGrantScopes.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[a-zA-Z0-9_\-]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.allowedOperations && !Validator.INTEGER.test(this.allowedOperations)) { throw new ValidationError(_formprefix + "allowed_operations", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountOAuthAccessGrantScopes.path = "accountoauthaccessgrantscopes";
AccountOAuthAccessGrantScopes.newBuilder = function() {
    return new AccountOAuthAccessGrantScopes();
};

RebrandL10n = function() {
    var _formprefix = "";
    
var rebrandAttributeName = "";
this.setRebrandAttributeName = function(rebrandAttributeName) { 
    this.rebrandAttributeName = rebrandAttributeName;
    return this;
};
this.getRebrandAttributeName = function() {
    return this.rebrandAttributeName;
};
var rebrandAttributeValue = "";
this.setRebrandAttributeValue = function(rebrandAttributeValue) { 
    this.rebrandAttributeValue = rebrandAttributeValue;
    return this;
};
this.getRebrandAttributeValue = function() {
    return this.rebrandAttributeValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRebrandAttributeName(json["rebrand_attribute_name"]);
		this.setRebrandAttributeValue(json["rebrand_attribute_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRebrandAttributeName()) json += '"rebrand_attribute_name"' + ":" + '"' + jsonEscape(this.getRebrandAttributeName())  + '",';
		if(this.getRebrandAttributeValue()) json += '"rebrand_attribute_value"' + ":" + '"' + jsonEscape(this.getRebrandAttributeValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(RebrandL10n.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.rebrandAttributeName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.rebrandAttributeName)) { throw new ValidationError(_formprefix + "rebrand_attribute_name", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
RebrandL10n.path = "rebrandl10n";
RebrandL10n.newBuilder = function() {
    return new RebrandL10n();
};

ResourceAction = function() {
    var _formprefix = "";
    
var resourceActionId = "";
this.setResourceActionId = function(resourceActionId) { 
    this.resourceActionId = resourceActionId;
    return this;
};
this.getResourceActionId = function() {
    return this.resourceActionId;
};
var resourceUriToUpdate = "";
this.setResourceUriToUpdate = function(resourceUriToUpdate) { 
    this.resourceUriToUpdate = resourceUriToUpdate;
    return this;
};
this.getResourceUriToUpdate = function() {
    return this.resourceUriToUpdate;
};
var resourceOperation = "";
this.setResourceOperation = function(resourceOperation) { 
    this.resourceOperation = resourceOperation;
    return this;
};
this.getResourceOperation = function() {
    return this.resourceOperation;
};
var resourceCriteria = "";
this.setResourceCriteria = function(resourceCriteria) { 
    this.resourceCriteria = resourceCriteria;
    return this;
};
this.getResourceCriteria = function() {
    return this.resourceCriteria;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var resourcemapping = undefined;
this.setResourcemappings = function(resourcemapping) { 
    this.resourcemapping = resourcemapping;
    return this;
};
this.getResourcemappings = function() {
    return this.resourcemapping;
};
this.addResourcemapping = function(resourcemapping) { 
 if(!this.resourcemapping) this.resourcemapping = new Array(); 
  this.resourcemapping.push(resourcemapping); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setResourceActionId(json["resource_action_id"]);
		this.setResourceUriToUpdate(json["resource_uri_to_update"]);
		this.setResourceOperation(json["resource_operation"]);
		this.setResourceCriteria(json["resource_criteria"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setResourcemappings(URI.getResourceArray(json["resourceMapping"],"resourcemapping"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getResourceActionId()) json += '"resource_action_id"' + ":" + '"' + jsonEscape(this.getResourceActionId())  + '",';
		if(this.getResourceUriToUpdate()) json += '"resource_uri_to_update"' + ":" + '"' + jsonEscape(this.getResourceUriToUpdate())  + '",';
		if(this.getResourceOperation()) json += '"resource_operation"' + ":" + '"' + jsonEscape(this.getResourceOperation())  + '",';
		if(this.getResourceCriteria()) json += '"resource_criteria"' + ":" + '"' + jsonEscape(this.getResourceCriteria())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getResourcemappings()) json += '"resourceMapping"' + ":" + URI.toJSONArray(this.getResourcemappings())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ResourceAction.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.resourceOperation && !(/(?i)POST|PUT|DELETE/).test(this.resourceOperation)) { throw new ValidationError(_formprefix + "resource_operation", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.resourcemapping) { for(i=0; i < this.resourcemapping.length; i++ ) { this.resourcemapping[i].validate(); } }

	return this;
    }
}
ResourceAction.path = "resourceaction";
ResourceAction.newBuilder = function() {
    return new ResourceAction();
};

ISDCode = function() {
    var _formprefix = "";
    
var countryName = "";
this.setCountryName = function(countryName) { 
    this.countryName = countryName;
    return this;
};
this.getCountryName = function() {
    return this.countryName;
};
var countryCode = "";
this.setCountryCode = function(countryCode) { 
    this.countryCode = countryCode;
    return this;
};
this.getCountryCode = function() {
    return this.countryCode;
};
var dialingCode = "";
this.setDialingCode = function(dialingCode) { 
    this.dialingCode = dialingCode;
    return this;
};
this.getDialingCode = function() {
    return this.dialingCode;
};
var newsletterSubscriptionMode = "0";
this.setNewsletterSubscriptionMode = function(newsletterSubscriptionMode) { 
    this.newsletterSubscriptionMode = newsletterSubscriptionMode;
    return this;
};
this.getNewsletterSubscriptionMode = function() {
    return this.newsletterSubscriptionMode;
};
var isExcluded = "false";
this.setIsExcluded = function(isExcluded) { 
    this.isExcluded = isExcluded;
    return this;
};
this.getIsExcluded = function() {
    return this.isExcluded;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setCountryName(json["country_name"]);
		this.setCountryCode(json["country_code"]);
		this.setDialingCode(json["dialing_code"]);
		this.setNewsletterSubscriptionMode(json["newsletter_subscription_mode"]);
		this.setIsExcluded(json["is_excluded"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getCountryName()) json += '"country_name"' + ":" + '"' + jsonEscape(this.getCountryName())  + '",';
		if(this.getCountryCode()) json += '"country_code"' + ":" + '"' + jsonEscape(this.getCountryCode())  + '",';
		if(this.getDialingCode()) json += '"dialing_code"' + ":" + '"' + jsonEscape(this.getDialingCode())  + '",';
		if(this.getNewsletterSubscriptionMode()) json += '"newsletter_subscription_mode"' + ":" + '"' + jsonEscape(this.getNewsletterSubscriptionMode())  + '",';
		if(this.getIsExcluded()) json += '"is_excluded"' + ":" + '"' + jsonEscape(this.getIsExcluded())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ISDCode.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.countryName && !(/xss:throwerror/).test(this.countryName)) { throw new ValidationError(_formprefix + "country_name", ValidationError.PATTERN_FAILED);}
if(this.countryCode && !(/^[a-zA-Z0-9]{2,5}$/).test(this.countryCode)) { throw new ValidationError(_formprefix + "country_code", ValidationError.PATTERN_FAILED);}
if(this.dialingCode && !(/^[0-9]{2,5}$/).test(this.dialingCode)) { throw new ValidationError(_formprefix + "dialing_code", ValidationError.PATTERN_FAILED);}
if(this.newsletterSubscriptionMode && !Validator.INTEGER.test(this.newsletterSubscriptionMode)) { throw new ValidationError(_formprefix + "newsletter_subscription_mode", ValidationError.PATTERN_FAILED);}
if(this.isExcluded && !Validator.BOOLEAN.test(this.isExcluded)) { throw new ValidationError(_formprefix + "is_excluded", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ISDCode.path = "isdcode";
ISDCode.newBuilder = function() {
    return new ISDCode();
};

AppAccountPolicy = function() {
    var _formprefix = "";
    
var policyKey = "";
this.setPolicyKey = function(policyKey) { 
    this.policyKey = policyKey;
    return this;
};
this.getPolicyKey = function() {
    return this.policyKey;
};
var policyValue = "";
this.setPolicyValue = function(policyValue) { 
    this.policyValue = policyValue;
    return this;
};
this.getPolicyValue = function() {
    return this.policyValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPolicyKey(json["policy_key"]);
		this.setPolicyValue(json["policy_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPolicyKey()) json += '"policy_key"' + ":" + '"' + jsonEscape(this.getPolicyKey())  + '",';
		if(this.getPolicyValue()) json += '"policy_value"' + ":" + '"' + jsonEscape(this.getPolicyValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccountPolicy.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.policyKey && !(/^([A-Za-z0-9_.\-]+)$/).test(this.policyKey)) { throw new ValidationError(_formprefix + "policy_key", ValidationError.PATTERN_FAILED);}
if(this.policyValue && !(/^([A-Za-z0-9_.\-]+)$/).test(this.policyValue)) { throw new ValidationError(_formprefix + "policy_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAccountPolicy.path = "appaccountpolicy";
AppAccountPolicy.newBuilder = function() {
    return new AppAccountPolicy();
};

APIAuditTemplate = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var screenName = "";
this.setScreenName = function(screenName) { 
    this.screenName = screenName;
    return this;
};
this.getScreenName = function() {
    return this.screenName;
};
var operationId = "";
this.setOperationId = function(operationId) { 
    this.operationId = operationId;
    return this;
};
this.getOperationId = function() {
    return this.operationId;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var tokenDigest = "";
this.setTokenDigest = function(tokenDigest) { 
    this.tokenDigest = tokenDigest;
    return this;
};
this.getTokenDigest = function() {
    return this.tokenDigest;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setZuid(json["zuid"]);
		this.setAppId(json["app_id"]);
		this.setScreenName(json["screen_name"]);
		this.setOperationId(json["operation_id"]);
		this.setIpAddress(json["ip_address"]);
		this.setReferrer(json["referrer"]);
		this.setTokenDigest(json["token_digest"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getScreenName()) json += '"screen_name"' + ":" + '"' + jsonEscape(this.getScreenName())  + '",';
		if(this.getOperationId()) json += '"operation_id"' + ":" + '"' + jsonEscape(this.getOperationId())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getTokenDigest()) json += '"token_digest"' + ":" + '"' + jsonEscape(this.getTokenDigest())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(APIAuditTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.appId && !Validator.INTEGER.test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.screenName && !(/^([\p{L}\p{M}\p{N}\_\.]+)|[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.screenName)) { throw new ValidationError(_formprefix + "screen_name", ValidationError.PATTERN_FAILED);}
if(this.operationId && !Validator.INTEGER.test(this.operationId)) { throw new ValidationError(_formprefix + "operation_id", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.tokenDigest && !(/dontdisturb/).test(this.tokenDigest)) { throw new ValidationError(_formprefix + "token_digest", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
APIAuditTemplate.path = "apiaudittemplate";
APIAuditTemplate.newBuilder = function() {
    return new APIAuditTemplate();
};

Group = function() {
    var _formprefix = "";
    
var zgid = "";
this.setZgid = function(zgid) { 
    this.zgid = zgid;
    return this;
};
this.getZgid = function() {
    return this.zgid;
};
var groupName = "";
this.setGroupName = function(groupName) { 
    this.groupName = groupName;
    return this;
};
this.getGroupName = function() {
    return this.groupName;
};
var groupDescription = "";
this.setGroupDescription = function(groupDescription) { 
    this.groupDescription = groupDescription;
    return this;
};
this.getGroupDescription = function() {
    return this.groupDescription;
};
var groupType = "0";
this.setGroupType = function(groupType) { 
    this.groupType = groupType;
    return this;
};
this.getGroupType = function() {
    return this.groupType;
};
var isActive = "1";
this.setIsActive = function(isActive) { 
    this.isActive = isActive;
    return this;
};
this.getIsActive = function() {
    return this.isActive;
};
var createdBy = "-1";
this.setCreatedBy = function(createdBy) { 
    this.createdBy = createdBy;
    return this;
};
this.getCreatedBy = function() {
    return this.createdBy;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var departmentHead = "-1";
this.setDepartmentHead = function(departmentHead) { 
    this.departmentHead = departmentHead;
    return this;
};
this.getDepartmentHead = function() {
    return this.departmentHead;
};
var isServiceSyncEnabled = "false";
this.setIsServiceSyncEnabled = function(isServiceSyncEnabled) { 
    this.isServiceSyncEnabled = isServiceSyncEnabled;
    return this;
};
this.getIsServiceSyncEnabled = function() {
    return this.isServiceSyncEnabled;
};
var exposure = "2";
this.setExposure = function(exposure) { 
    this.exposure = exposure;
    return this;
};
this.getExposure = function() {
    return this.exposure;
};
var groupinvitation = undefined;
this.setGroupinvitations = function(groupinvitation) { 
    this.groupinvitation = groupinvitation;
    return this;
};
this.getGroupinvitations = function() {
    return this.groupinvitation;
};
this.addGroupinvitation = function(groupinvitation) { 
 if(!this.groupinvitation) this.groupinvitation = new Array(); 
  this.groupinvitation.push(groupinvitation); 
 return this;
};

var groupproperties = undefined;
this.setGrouppropertiess = function(groupproperties) { 
    this.groupproperties = groupproperties;
    return this;
};
this.getGrouppropertiess = function() {
    return this.groupproperties;
};
this.addGroupproperties = function(groupproperties) { 
 if(!this.groupproperties) this.groupproperties = new Array(); 
  this.groupproperties.push(groupproperties); 
 return this;
};

var groupmember = undefined;
this.setGroupmembers = function(groupmember) { 
    this.groupmember = groupmember;
    return this;
};
this.getGroupmembers = function() {
    return this.groupmember;
};
this.addGroupmember = function(groupmember) { 
 if(!this.groupmember) this.groupmember = new Array(); 
  this.groupmember.push(groupmember); 
 return this;
};

var parentgroup = undefined;
this.setParentgroups = function(parentgroup) { 
    this.parentgroup = parentgroup;
    return this;
};
this.getParentgroups = function() {
    return this.parentgroup;
};
this.addParentgroup = function(parentgroup) { 
 if(!this.parentgroup) this.parentgroup = new Array(); 
  this.parentgroup.push(parentgroup); 
 return this;
};

var groupsyncservices = undefined;
this.setGroupsyncservicess = function(groupsyncservices) { 
    this.groupsyncservices = groupsyncservices;
    return this;
};
this.getGroupsyncservicess = function() {
    return this.groupsyncservices;
};
this.addGroupsyncservices = function(groupsyncservices) { 
 if(!this.groupsyncservices) this.groupsyncservices = new Array(); 
  this.groupsyncservices.push(groupsyncservices); 
 return this;
};

var grouplogo = undefined;
this.setGrouplogo = function(grouplogo) { 
    this.grouplogo = grouplogo;
    return this;
};
this.getGrouplogo = function() {
    return this.grouplogo;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZgid(json["zgid"]);
		this.setGroupName(json["group_name"]);
		this.setGroupDescription(json["group_description"]);
		this.setGroupType(json["group_type"]);
		this.setIsActive(json["is_active"]);
		this.setCreatedBy(json["created_by"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setDepartmentHead(json["department_head"]);
		this.setIsServiceSyncEnabled(json["is_service_sync_enabled"]);
		this.setExposure(json["exposure"]);
		this.setGroupinvitations(URI.getResourceArray(json["groupInvitation"],"groupinvitation"));
		this.setGrouppropertiess(URI.getResourceArray(json["groupProperties"],"groupproperties"));
		this.setGroupmembers(URI.getResourceArray(json["groupMember"],"groupmember"));
		this.setParentgroups(URI.getResourceArray(json["parentGroup"],"parentgroup"));
		this.setGroupsyncservicess(URI.getResourceArray(json["groupSyncServices"],"groupsyncservices"));
		this.setGrouplogo(URI.getResource(json["groupLogo"],"grouplogo"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZgid()) json += '"zgid"' + ":" + '"' + jsonEscape(this.getZgid())  + '",';
		if(this.getGroupName()) json += '"group_name"' + ":" + '"' + jsonEscape(this.getGroupName())  + '",';
		if(this.getGroupDescription()) json += '"group_description"' + ":" + '"' + jsonEscape(this.getGroupDescription())  + '",';
		if(this.getGroupType()) json += '"group_type"' + ":" + '"' + jsonEscape(this.getGroupType())  + '",';
		if(this.getIsActive()) json += '"is_active"' + ":" + '"' + jsonEscape(this.getIsActive())  + '",';
		if(this.getCreatedBy()) json += '"created_by"' + ":" + '"' + jsonEscape(this.getCreatedBy())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getDepartmentHead()) json += '"department_head"' + ":" + '"' + jsonEscape(this.getDepartmentHead())  + '",';
		if(this.getIsServiceSyncEnabled()) json += '"is_service_sync_enabled"' + ":" + '"' + jsonEscape(this.getIsServiceSyncEnabled())  + '",';
		if(this.getExposure()) json += '"exposure"' + ":" + '"' + jsonEscape(this.getExposure())  + '",';
		if(this.getGroupinvitations()) json += '"groupInvitation"' + ":" + URI.toJSONArray(this.getGroupinvitations())  + ',';
		if(this.getGrouppropertiess()) json += '"groupProperties"' + ":" + URI.toJSONArray(this.getGrouppropertiess())  + ',';
		if(this.getGroupmembers()) json += '"groupMember"' + ":" + URI.toJSONArray(this.getGroupmembers())  + ',';
		if(this.getParentgroups()) json += '"parentGroup"' + ":" + URI.toJSONArray(this.getParentgroups())  + ',';
		if(this.getGroupsyncservicess()) json += '"groupSyncServices"' + ":" + URI.toJSONArray(this.getGroupsyncservicess())  + ',';
		if(this.getGrouplogo()) json += '"groupLogo"' + ":" + this.getGrouplogo().toJSON()  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Group.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zgid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zgid)) { throw new ValidationError(_formprefix + "zgid", ValidationError.PATTERN_FAILED);}
if(this.groupName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.groupName)) { throw new ValidationError(_formprefix + "group_name", ValidationError.PATTERN_FAILED);}
if(this.groupDescription && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.groupDescription)) { throw new ValidationError(_formprefix + "group_description", ValidationError.PATTERN_FAILED);}
if(this.groupType && !Validator.INTEGER.test(this.groupType)) { throw new ValidationError(_formprefix + "group_type", ValidationError.PATTERN_FAILED);}
if(this.isActive && !Validator.INTEGER.test(this.isActive)) { throw new ValidationError(_formprefix + "is_active", ValidationError.PATTERN_FAILED);}
if(this.createdBy && !(/^[a-zA-Z0-9\-]+$/).test(this.createdBy)) { throw new ValidationError(_formprefix + "created_by", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.departmentHead && !(/^[a-zA-Z0-9\-]+$/).test(this.departmentHead)) { throw new ValidationError(_formprefix + "department_head", ValidationError.PATTERN_FAILED);}
if(this.isServiceSyncEnabled && !Validator.BOOLEAN.test(this.isServiceSyncEnabled)) { throw new ValidationError(_formprefix + "is_service_sync_enabled", ValidationError.PATTERN_FAILED);}
if(this.groupinvitation) { for(i=0; i < this.groupinvitation.length; i++ ) { this.groupinvitation[i].validate(); } }
if(this.groupproperties) { for(i=0; i < this.groupproperties.length; i++ ) { this.groupproperties[i].validate(); } }
if(this.groupmember) { for(i=0; i < this.groupmember.length; i++ ) { this.groupmember[i].validate(); } }
if(this.parentgroup) { for(i=0; i < this.parentgroup.length; i++ ) { this.parentgroup[i].validate(); } }
if(this.groupsyncservices) { for(i=0; i < this.groupsyncservices.length; i++ ) { this.groupsyncservices[i].validate(); } }
if(this.grouplogo) { this.grouplogo.validate(); }

	return this;
    }
}
Group.path = "group";
Group.newBuilder = function() {
    return new Group();
};

GroupMember = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var isActive = "1";
this.setIsActive = function(isActive) { 
    this.isActive = isActive;
    return this;
};
this.getIsActive = function() {
    return this.isActive;
};
var isModerator = "1";
this.setIsModerator = function(isModerator) { 
    this.isModerator = isModerator;
    return this;
};
this.getIsModerator = function() {
    return this.isModerator;
};
var fullName = "";
this.setFullName = function(fullName) { 
    this.fullName = fullName;
    return this;
};
this.getFullName = function() {
    return this.fullName;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var loginName = "";
this.setLoginName = function(loginName) { 
    this.loginName = loginName;
    return this;
};
this.getLoginName = function() {
    return this.loginName;
};
var type = "1";
this.setType = function(type) { 
    this.type = type;
    return this;
};
this.getType = function() {
    return this.type;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setIsActive(json["is_active"]);
		this.setIsModerator(json["is_moderator"]);
		this.setFullName(json["full_name"]);
		this.setDisplayName(json["display_name"]);
		this.setLoginName(json["login_name"]);
		this.setType(json["type"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getIsActive()) json += '"is_active"' + ":" + '"' + jsonEscape(this.getIsActive())  + '",';
		if(this.getIsModerator()) json += '"is_moderator"' + ":" + '"' + jsonEscape(this.getIsModerator())  + '",';
		if(this.getFullName()) json += '"full_name"' + ":" + '"' + jsonEscape(this.getFullName())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getLoginName()) json += '"login_name"' + ":" + '"' + jsonEscape(this.getLoginName())  + '",';
		if(this.getType()) json += '"type"' + ":" + '"' + jsonEscape(this.getType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(GroupMember.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.isActive && !Validator.INTEGER.test(this.isActive)) { throw new ValidationError(_formprefix + "is_active", ValidationError.PATTERN_FAILED);}
if(this.isModerator && !Validator.INTEGER.test(this.isModerator)) { throw new ValidationError(_formprefix + "is_moderator", ValidationError.PATTERN_FAILED);}
if(this.fullName && !(/xss:throwerror/).test(this.fullName)) { throw new ValidationError(_formprefix + "full_name", ValidationError.PATTERN_FAILED);}
if(this.displayName && !(/xss:throwerror/).test(this.displayName)) { throw new ValidationError(_formprefix + "display_name", ValidationError.PATTERN_FAILED);}
if(this.loginName && !(/^([\p{L}\p{M}\p{N}\_\.]+)|[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.loginName)) { throw new ValidationError(_formprefix + "login_name", ValidationError.PATTERN_FAILED);}
if(this.type && !Validator.INTEGER.test(this.type)) { throw new ValidationError(_formprefix + "type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
GroupMember.path = "groupmember";
GroupMember.newBuilder = function() {
    return new GroupMember();
};

UserSystemProperties = function() {
    var _formprefix = "";
    
var captchaEnteredStatus = "false";
this.setCaptchaEnteredStatus = function(captchaEnteredStatus) { 
    this.captchaEnteredStatus = captchaEnteredStatus;
    return this;
};
this.getCaptchaEnteredStatus = function() {
    return this.captchaEnteredStatus;
};
var spamCheckStatus = "";
this.setSpamCheckStatus = function(spamCheckStatus) { 
    this.spamCheckStatus = spamCheckStatus;
    return this;
};
this.getSpamCheckStatus = function() {
    return this.spamCheckStatus;
};
var mailboxExist = "false";
this.setMailboxExist = function(mailboxExist) { 
    this.mailboxExist = mailboxExist;
    return this;
};
this.getMailboxExist = function() {
    return this.mailboxExist;
};
var signupCountry = "";
this.setSignupCountry = function(signupCountry) { 
    this.signupCountry = signupCountry;
    return this;
};
this.getSignupCountry = function() {
    return this.signupCountry;
};
var ipInfo = "";
this.setIpInfo = function(ipInfo) { 
    this.ipInfo = ipInfo;
    return this;
};
this.getIpInfo = function() {
    return this.ipInfo;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setCaptchaEnteredStatus(json["captcha_entered_status"]);
		this.setSpamCheckStatus(json["spam_check_status"]);
		this.setMailboxExist(json["mailbox_exist"]);
		this.setSignupCountry(json["signup_country"]);
		this.setIpInfo(json["ip_info"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getCaptchaEnteredStatus()) json += '"captcha_entered_status"' + ":" + '"' + jsonEscape(this.getCaptchaEnteredStatus())  + '",';
		if(this.getSpamCheckStatus()) json += '"spam_check_status"' + ":" + '"' + jsonEscape(this.getSpamCheckStatus())  + '",';
		if(this.getMailboxExist()) json += '"mailbox_exist"' + ":" + '"' + jsonEscape(this.getMailboxExist())  + '",';
		if(this.getSignupCountry()) json += '"signup_country"' + ":" + '"' + jsonEscape(this.getSignupCountry())  + '",';
		if(this.getIpInfo()) json += '"ip_info"' + ":" + '"' + jsonEscape(this.getIpInfo())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserSystemProperties.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.captchaEnteredStatus && !Validator.BOOLEAN.test(this.captchaEnteredStatus)) { throw new ValidationError(_formprefix + "captcha_entered_status", ValidationError.PATTERN_FAILED);}
if(this.spamCheckStatus && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.spamCheckStatus)) { throw new ValidationError(_formprefix + "spam_check_status", ValidationError.PATTERN_FAILED);}
if(this.mailboxExist && !Validator.BOOLEAN.test(this.mailboxExist)) { throw new ValidationError(_formprefix + "mailbox_exist", ValidationError.PATTERN_FAILED);}
if(this.signupCountry && !(/^[a-zA-Z0-9]{2,5}$/).test(this.signupCountry)) { throw new ValidationError(_formprefix + "signup_country", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserSystemProperties.path = "usersystemproperties";
UserSystemProperties.newBuilder = function() {
    return new UserSystemProperties();
};

UserCustomField = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var c1 = "";
this.setC1 = function(c1) { 
    this.c1 = c1;
    return this;
};
this.getC1 = function() {
    return this.c1;
};
var c2 = "";
this.setC2 = function(c2) { 
    this.c2 = c2;
    return this;
};
this.getC2 = function() {
    return this.c2;
};
var c3 = "";
this.setC3 = function(c3) { 
    this.c3 = c3;
    return this;
};
this.getC3 = function() {
    return this.c3;
};
var c4 = "";
this.setC4 = function(c4) { 
    this.c4 = c4;
    return this;
};
this.getC4 = function() {
    return this.c4;
};
var c5 = "";
this.setC5 = function(c5) { 
    this.c5 = c5;
    return this;
};
this.getC5 = function() {
    return this.c5;
};
var c6 = "";
this.setC6 = function(c6) { 
    this.c6 = c6;
    return this;
};
this.getC6 = function() {
    return this.c6;
};
var c7 = "";
this.setC7 = function(c7) { 
    this.c7 = c7;
    return this;
};
this.getC7 = function() {
    return this.c7;
};
var c8 = "";
this.setC8 = function(c8) { 
    this.c8 = c8;
    return this;
};
this.getC8 = function() {
    return this.c8;
};
var c9 = "";
this.setC9 = function(c9) { 
    this.c9 = c9;
    return this;
};
this.getC9 = function() {
    return this.c9;
};
var c10 = "";
this.setC10 = function(c10) { 
    this.c10 = c10;
    return this;
};
this.getC10 = function() {
    return this.c10;
};
var c11 = "";
this.setC11 = function(c11) { 
    this.c11 = c11;
    return this;
};
this.getC11 = function() {
    return this.c11;
};
var c12 = "";
this.setC12 = function(c12) { 
    this.c12 = c12;
    return this;
};
this.getC12 = function() {
    return this.c12;
};
var c13 = "";
this.setC13 = function(c13) { 
    this.c13 = c13;
    return this;
};
this.getC13 = function() {
    return this.c13;
};
var c14 = "";
this.setC14 = function(c14) { 
    this.c14 = c14;
    return this;
};
this.getC14 = function() {
    return this.c14;
};
var c15 = "";
this.setC15 = function(c15) { 
    this.c15 = c15;
    return this;
};
this.getC15 = function() {
    return this.c15;
};
var c16 = "";
this.setC16 = function(c16) { 
    this.c16 = c16;
    return this;
};
this.getC16 = function() {
    return this.c16;
};
var c17 = "";
this.setC17 = function(c17) { 
    this.c17 = c17;
    return this;
};
this.getC17 = function() {
    return this.c17;
};
var c18 = "";
this.setC18 = function(c18) { 
    this.c18 = c18;
    return this;
};
this.getC18 = function() {
    return this.c18;
};
var c19 = "";
this.setC19 = function(c19) { 
    this.c19 = c19;
    return this;
};
this.getC19 = function() {
    return this.c19;
};
var c20 = "";
this.setC20 = function(c20) { 
    this.c20 = c20;
    return this;
};
this.getC20 = function() {
    return this.c20;
};
var c21 = "";
this.setC21 = function(c21) { 
    this.c21 = c21;
    return this;
};
this.getC21 = function() {
    return this.c21;
};
var c22 = "";
this.setC22 = function(c22) { 
    this.c22 = c22;
    return this;
};
this.getC22 = function() {
    return this.c22;
};
var c23 = "";
this.setC23 = function(c23) { 
    this.c23 = c23;
    return this;
};
this.getC23 = function() {
    return this.c23;
};
var c24 = "";
this.setC24 = function(c24) { 
    this.c24 = c24;
    return this;
};
this.getC24 = function() {
    return this.c24;
};
var c25 = "";
this.setC25 = function(c25) { 
    this.c25 = c25;
    return this;
};
this.getC25 = function() {
    return this.c25;
};
var c26 = "";
this.setC26 = function(c26) { 
    this.c26 = c26;
    return this;
};
this.getC26 = function() {
    return this.c26;
};
var c27 = "";
this.setC27 = function(c27) { 
    this.c27 = c27;
    return this;
};
this.getC27 = function() {
    return this.c27;
};
var c28 = "";
this.setC28 = function(c28) { 
    this.c28 = c28;
    return this;
};
this.getC28 = function() {
    return this.c28;
};
var c29 = "";
this.setC29 = function(c29) { 
    this.c29 = c29;
    return this;
};
this.getC29 = function() {
    return this.c29;
};
var c30 = "";
this.setC30 = function(c30) { 
    this.c30 = c30;
    return this;
};
this.getC30 = function() {
    return this.c30;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setC1(json["c_1"]);
		this.setC2(json["c_2"]);
		this.setC3(json["c_3"]);
		this.setC4(json["c_4"]);
		this.setC5(json["c_5"]);
		this.setC6(json["c_6"]);
		this.setC7(json["c_7"]);
		this.setC8(json["c_8"]);
		this.setC9(json["c_9"]);
		this.setC10(json["c_10"]);
		this.setC11(json["c_11"]);
		this.setC12(json["c_12"]);
		this.setC13(json["c_13"]);
		this.setC14(json["c_14"]);
		this.setC15(json["c_15"]);
		this.setC16(json["c_16"]);
		this.setC17(json["c_17"]);
		this.setC18(json["c_18"]);
		this.setC19(json["c_19"]);
		this.setC20(json["c_20"]);
		this.setC21(json["c_21"]);
		this.setC22(json["c_22"]);
		this.setC23(json["c_23"]);
		this.setC24(json["c_24"]);
		this.setC25(json["c_25"]);
		this.setC26(json["c_26"]);
		this.setC27(json["c_27"]);
		this.setC28(json["c_28"]);
		this.setC29(json["c_29"]);
		this.setC30(json["c_30"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getC1()) json += '"c_1"' + ":" + '"' + jsonEscape(this.getC1())  + '",';
		if(this.getC2()) json += '"c_2"' + ":" + '"' + jsonEscape(this.getC2())  + '",';
		if(this.getC3()) json += '"c_3"' + ":" + '"' + jsonEscape(this.getC3())  + '",';
		if(this.getC4()) json += '"c_4"' + ":" + '"' + jsonEscape(this.getC4())  + '",';
		if(this.getC5()) json += '"c_5"' + ":" + '"' + jsonEscape(this.getC5())  + '",';
		if(this.getC6()) json += '"c_6"' + ":" + '"' + jsonEscape(this.getC6())  + '",';
		if(this.getC7()) json += '"c_7"' + ":" + '"' + jsonEscape(this.getC7())  + '",';
		if(this.getC8()) json += '"c_8"' + ":" + '"' + jsonEscape(this.getC8())  + '",';
		if(this.getC9()) json += '"c_9"' + ":" + '"' + jsonEscape(this.getC9())  + '",';
		if(this.getC10()) json += '"c_10"' + ":" + '"' + jsonEscape(this.getC10())  + '",';
		if(this.getC11()) json += '"c_11"' + ":" + '"' + jsonEscape(this.getC11())  + '",';
		if(this.getC12()) json += '"c_12"' + ":" + '"' + jsonEscape(this.getC12())  + '",';
		if(this.getC13()) json += '"c_13"' + ":" + '"' + jsonEscape(this.getC13())  + '",';
		if(this.getC14()) json += '"c_14"' + ":" + '"' + jsonEscape(this.getC14())  + '",';
		if(this.getC15()) json += '"c_15"' + ":" + '"' + jsonEscape(this.getC15())  + '",';
		if(this.getC16()) json += '"c_16"' + ":" + '"' + jsonEscape(this.getC16())  + '",';
		if(this.getC17()) json += '"c_17"' + ":" + '"' + jsonEscape(this.getC17())  + '",';
		if(this.getC18()) json += '"c_18"' + ":" + '"' + jsonEscape(this.getC18())  + '",';
		if(this.getC19()) json += '"c_19"' + ":" + '"' + jsonEscape(this.getC19())  + '",';
		if(this.getC20()) json += '"c_20"' + ":" + '"' + jsonEscape(this.getC20())  + '",';
		if(this.getC21()) json += '"c_21"' + ":" + '"' + jsonEscape(this.getC21())  + '",';
		if(this.getC22()) json += '"c_22"' + ":" + '"' + jsonEscape(this.getC22())  + '",';
		if(this.getC23()) json += '"c_23"' + ":" + '"' + jsonEscape(this.getC23())  + '",';
		if(this.getC24()) json += '"c_24"' + ":" + '"' + jsonEscape(this.getC24())  + '",';
		if(this.getC25()) json += '"c_25"' + ":" + '"' + jsonEscape(this.getC25())  + '",';
		if(this.getC26()) json += '"c_26"' + ":" + '"' + jsonEscape(this.getC26())  + '",';
		if(this.getC27()) json += '"c_27"' + ":" + '"' + jsonEscape(this.getC27())  + '",';
		if(this.getC28()) json += '"c_28"' + ":" + '"' + jsonEscape(this.getC28())  + '",';
		if(this.getC29()) json += '"c_29"' + ":" + '"' + jsonEscape(this.getC29())  + '",';
		if(this.getC30()) json += '"c_30"' + ":" + '"' + jsonEscape(this.getC30())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserCustomField.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.c1 && !(/xss:throwerror/).test(this.c1)) { throw new ValidationError(_formprefix + "c_1", ValidationError.PATTERN_FAILED);}
if(this.c2 && !(/xss:throwerror/).test(this.c2)) { throw new ValidationError(_formprefix + "c_2", ValidationError.PATTERN_FAILED);}
if(this.c3 && !(/xss:throwerror/).test(this.c3)) { throw new ValidationError(_formprefix + "c_3", ValidationError.PATTERN_FAILED);}
if(this.c4 && !(/xss:throwerror/).test(this.c4)) { throw new ValidationError(_formprefix + "c_4", ValidationError.PATTERN_FAILED);}
if(this.c5 && !(/xss:throwerror/).test(this.c5)) { throw new ValidationError(_formprefix + "c_5", ValidationError.PATTERN_FAILED);}
if(this.c6 && !(/xss:throwerror/).test(this.c6)) { throw new ValidationError(_formprefix + "c_6", ValidationError.PATTERN_FAILED);}
if(this.c7 && !(/xss:throwerror/).test(this.c7)) { throw new ValidationError(_formprefix + "c_7", ValidationError.PATTERN_FAILED);}
if(this.c8 && !(/xss:throwerror/).test(this.c8)) { throw new ValidationError(_formprefix + "c_8", ValidationError.PATTERN_FAILED);}
if(this.c9 && !(/xss:throwerror/).test(this.c9)) { throw new ValidationError(_formprefix + "c_9", ValidationError.PATTERN_FAILED);}
if(this.c10 && !(/xss:throwerror/).test(this.c10)) { throw new ValidationError(_formprefix + "c_10", ValidationError.PATTERN_FAILED);}
if(this.c11 && !(/xss:throwerror/).test(this.c11)) { throw new ValidationError(_formprefix + "c_11", ValidationError.PATTERN_FAILED);}
if(this.c12 && !(/xss:throwerror/).test(this.c12)) { throw new ValidationError(_formprefix + "c_12", ValidationError.PATTERN_FAILED);}
if(this.c13 && !(/xss:throwerror/).test(this.c13)) { throw new ValidationError(_formprefix + "c_13", ValidationError.PATTERN_FAILED);}
if(this.c14 && !(/xss:throwerror/).test(this.c14)) { throw new ValidationError(_formprefix + "c_14", ValidationError.PATTERN_FAILED);}
if(this.c15 && !(/xss:throwerror/).test(this.c15)) { throw new ValidationError(_formprefix + "c_15", ValidationError.PATTERN_FAILED);}
if(this.c16 && !(/xss:throwerror/).test(this.c16)) { throw new ValidationError(_formprefix + "c_16", ValidationError.PATTERN_FAILED);}
if(this.c17 && !(/xss:throwerror/).test(this.c17)) { throw new ValidationError(_formprefix + "c_17", ValidationError.PATTERN_FAILED);}
if(this.c18 && !(/xss:throwerror/).test(this.c18)) { throw new ValidationError(_formprefix + "c_18", ValidationError.PATTERN_FAILED);}
if(this.c19 && !(/xss:throwerror/).test(this.c19)) { throw new ValidationError(_formprefix + "c_19", ValidationError.PATTERN_FAILED);}
if(this.c20 && !(/xss:throwerror/).test(this.c20)) { throw new ValidationError(_formprefix + "c_20", ValidationError.PATTERN_FAILED);}
if(this.c21 && !(/xss:throwerror/).test(this.c21)) { throw new ValidationError(_formprefix + "c_21", ValidationError.PATTERN_FAILED);}
if(this.c22 && !(/xss:throwerror/).test(this.c22)) { throw new ValidationError(_formprefix + "c_22", ValidationError.PATTERN_FAILED);}
if(this.c23 && !(/xss:throwerror/).test(this.c23)) { throw new ValidationError(_formprefix + "c_23", ValidationError.PATTERN_FAILED);}
if(this.c24 && !(/xss:throwerror/).test(this.c24)) { throw new ValidationError(_formprefix + "c_24", ValidationError.PATTERN_FAILED);}
if(this.c25 && !(/xss:throwerror/).test(this.c25)) { throw new ValidationError(_formprefix + "c_25", ValidationError.PATTERN_FAILED);}
if(this.c26 && !(/xss:throwerror/).test(this.c26)) { throw new ValidationError(_formprefix + "c_26", ValidationError.PATTERN_FAILED);}
if(this.c27 && !(/xss:throwerror/).test(this.c27)) { throw new ValidationError(_formprefix + "c_27", ValidationError.PATTERN_FAILED);}
if(this.c28 && !(/xss:throwerror/).test(this.c28)) { throw new ValidationError(_formprefix + "c_28", ValidationError.PATTERN_FAILED);}
if(this.c29 && !(/xss:throwerror/).test(this.c29)) { throw new ValidationError(_formprefix + "c_29", ValidationError.PATTERN_FAILED);}
if(this.c30 && !(/xss:throwerror/).test(this.c30)) { throw new ValidationError(_formprefix + "c_30", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserCustomField.path = "usercustomfield";
UserCustomField.newBuilder = function() {
    return new UserCustomField();
};

AuthSecret = function() {
    var _formprefix = "";
    
var authSecret = "";
this.setAuthSecret = function(authSecret) { 
    this.authSecret = authSecret;
    return this;
};
this.getAuthSecret = function() {
    return this.authSecret;
};
var isInternal = "0";
this.setIsInternal = function(isInternal) { 
    this.isInternal = isInternal;
    return this;
};
this.getIsInternal = function() {
    return this.isInternal;
};
var serviceName = "";
this.setServiceName = function(serviceName) { 
    this.serviceName = serviceName;
    return this;
};
this.getServiceName = function() {
    return this.serviceName;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAuthSecret(json["auth_secret"]);
		this.setIsInternal(json["is_internal"]);
		this.setServiceName(json["service_name"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAuthSecret()) json += '"auth_secret"' + ":" + '"' + jsonEscape(this.getAuthSecret())  + '",';
		if(this.getIsInternal()) json += '"is_internal"' + ":" + '"' + jsonEscape(this.getIsInternal())  + '",';
		if(this.getServiceName()) json += '"service_name"' + ":" + '"' + jsonEscape(this.getServiceName())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AuthSecret.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.authSecret && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.authSecret)) { throw new ValidationError(_formprefix + "auth_secret", ValidationError.PATTERN_FAILED);}
if(this.isInternal && !Validator.INTEGER.test(this.isInternal)) { throw new ValidationError(_formprefix + "is_internal", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AuthSecret.path = "authsecret";
AuthSecret.newBuilder = function() {
    return new AuthSecret();
};

Attribute = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var userAttributeKey = "";
this.setUserAttributeKey = function(userAttributeKey) { 
    this.userAttributeKey = userAttributeKey;
    return this;
};
this.getUserAttributeKey = function() {
    return this.userAttributeKey;
};
var userAttributeValue = "";
this.setUserAttributeValue = function(userAttributeValue) { 
    this.userAttributeValue = userAttributeValue;
    return this;
};
this.getUserAttributeValue = function() {
    return this.userAttributeValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setUserAttributeKey(json["user_attribute_key"]);
		this.setUserAttributeValue(json["user_attribute_value"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getUserAttributeKey()) json += '"user_attribute_key"' + ":" + '"' + jsonEscape(this.getUserAttributeKey())  + '",';
		if(this.getUserAttributeValue()) json += '"user_attribute_value"' + ":" + '"' + jsonEscape(this.getUserAttributeValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Attribute.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.userAttributeKey && !(/^([A-Za-z0-9_.\-]+)$/).test(this.userAttributeKey)) { throw new ValidationError(_formprefix + "user_attribute_key", ValidationError.PATTERN_FAILED);}
if(this.userAttributeValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.userAttributeValue)) { throw new ValidationError(_formprefix + "user_attribute_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Attribute.path = "attribute";
Attribute.newBuilder = function() {
    return new Attribute();
};

UserApp = function() {
    var _formprefix = "";
    
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppId(json["app_id"]);
		this.setZuid(json["zuid"]);
		this.setIpAddress(json["ip_address"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserApp.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.appId && !(/^[a-zA-Z0-9_\-]+$/).test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserApp.path = "userapp";
UserApp.newBuilder = function() {
    return new UserApp();
};

OAuthAuditTemplate = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
var operationId = "";
this.setOperationId = function(operationId) { 
    this.operationId = operationId;
    return this;
};
this.getOperationId = function() {
    return this.operationId;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var tokenDigest = "";
this.setTokenDigest = function(tokenDigest) { 
    this.tokenDigest = tokenDigest;
    return this;
};
this.getTokenDigest = function() {
    return this.tokenDigest;
};
var parentTokenDigest = "";
this.setParentTokenDigest = function(parentTokenDigest) { 
    this.parentTokenDigest = parentTokenDigest;
    return this;
};
this.getParentTokenDigest = function() {
    return this.parentTokenDigest;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var addedTime = "";
this.setAddedTime = function(addedTime) { 
    this.addedTime = addedTime;
    return this;
};
this.getAddedTime = function() {
    return this.addedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setZid(json["zid"]);
		this.setAppId(json["app_id"]);
		this.setClientZid(json["client_zid"]);
		this.setOperationId(json["operation_id"]);
		this.setIpAddress(json["ip_address"]);
		this.setTokenDigest(json["token_digest"]);
		this.setParentTokenDigest(json["parent_token_digest"]);
		this.setUserAgent(json["user_agent"]);
		this.setAddedTime(json["added_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';
		if(this.getOperationId()) json += '"operation_id"' + ":" + '"' + jsonEscape(this.getOperationId())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getTokenDigest()) json += '"token_digest"' + ":" + '"' + jsonEscape(this.getTokenDigest())  + '",';
		if(this.getParentTokenDigest()) json += '"parent_token_digest"' + ":" + '"' + jsonEscape(this.getParentTokenDigest())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getAddedTime()) json += '"added_time"' + ":" + '"' + jsonEscape(this.getAddedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthAuditTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.appId && !Validator.INTEGER.test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.clientZid && !(/^[0-9]+\.[0-9]+$/).test(this.clientZid)) { throw new ValidationError(_formprefix + "client_zid", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.tokenDigest && !(/dontdisturb/).test(this.tokenDigest)) { throw new ValidationError(_formprefix + "token_digest", ValidationError.PATTERN_FAILED);}
if(this.parentTokenDigest && !(/dontdisturb/).test(this.parentTokenDigest)) { throw new ValidationError(_formprefix + "parent_token_digest", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.addedTime && !Validator.INTEGER.test(this.addedTime)) { throw new ValidationError(_formprefix + "added_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthAuditTemplate.path = "oauthaudittemplate";
OAuthAuditTemplate.newBuilder = function() {
    return new OAuthAuditTemplate();
};

AppAccountLicense = function() {
    var _formprefix = "";
    
var licenseAttributeKey = "";
this.setLicenseAttributeKey = function(licenseAttributeKey) { 
    this.licenseAttributeKey = licenseAttributeKey;
    return this;
};
this.getLicenseAttributeKey = function() {
    return this.licenseAttributeKey;
};
var licenseAttributeValue = "";
this.setLicenseAttributeValue = function(licenseAttributeValue) { 
    this.licenseAttributeValue = licenseAttributeValue;
    return this;
};
this.getLicenseAttributeValue = function() {
    return this.licenseAttributeValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLicenseAttributeKey(json["license_attribute_key"]);
		this.setLicenseAttributeValue(json["license_attribute_value"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLicenseAttributeKey()) json += '"license_attribute_key"' + ":" + '"' + jsonEscape(this.getLicenseAttributeKey())  + '",';
		if(this.getLicenseAttributeValue()) json += '"license_attribute_value"' + ":" + '"' + jsonEscape(this.getLicenseAttributeValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccountLicense.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.licenseAttributeValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.licenseAttributeValue)) { throw new ValidationError(_formprefix + "license_attribute_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAccountLicense.path = "appaccountlicense";
AppAccountLicense.newBuilder = function() {
    return new AppAccountLicense();
};

ServiceOrgAccountMapping = function() {
    var _formprefix = "";
    
var accountId = "";
this.setAccountId = function(accountId) { 
    this.accountId = accountId;
    return this;
};
this.getAccountId = function() {
    return this.accountId;
};
var accountType = "";
this.setAccountType = function(accountType) { 
    this.accountType = accountType;
    return this;
};
this.getAccountType = function() {
    return this.accountType;
};
var accountName = "";
this.setAccountName = function(accountName) { 
    this.accountName = accountName;
    return this;
};
this.getAccountName = function() {
    return this.accountName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAccountId(json["account_id"]);
		this.setAccountType(json["account_type"]);
		this.setAccountName(json["account_name"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAccountId()) json += '"account_id"' + ":" + '"' + jsonEscape(this.getAccountId())  + '",';
		if(this.getAccountType()) json += '"account_type"' + ":" + '"' + jsonEscape(this.getAccountType())  + '",';
		if(this.getAccountName()) json += '"account_name"' + ":" + '"' + jsonEscape(this.getAccountName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgAccountMapping.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.accountId && !Validator.INTEGER.test(this.accountId)) { throw new ValidationError(_formprefix + "account_id", ValidationError.PATTERN_FAILED);}
if(this.accountType && !Validator.INTEGER.test(this.accountType)) { throw new ValidationError(_formprefix + "account_type", ValidationError.PATTERN_FAILED);}
if(this.accountName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.accountName)) { throw new ValidationError(_formprefix + "account_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgAccountMapping.path = "serviceorgaccountmapping";
ServiceOrgAccountMapping.newBuilder = function() {
    return new ServiceOrgAccountMapping();
};

UserEmail = function() {
    var _formprefix = "";
    
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var isVerified = "false";
this.setIsVerified = function(isVerified) { 
    this.isVerified = isVerified;
    return this;
};
this.getIsVerified = function() {
    return this.isVerified;
};
var isPrimary = "false";
this.setIsPrimary = function(isPrimary) { 
    this.isPrimary = isPrimary;
    return this;
};
this.getIsPrimary = function() {
    return this.isPrimary;
};
var verificationCode = "";
this.setVerificationCode = function(verificationCode) { 
    this.verificationCode = verificationCode;
    return this;
};
this.getVerificationCode = function() {
    return this.verificationCode;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setEmailId(json["email_id"]);
		this.setIsVerified(json["is_verified"]);
		this.setIsPrimary(json["is_primary"]);
		this.setVerificationCode(json["verification_code"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getIsVerified()) json += '"is_verified"' + ":" + '"' + jsonEscape(this.getIsVerified())  + '",';
		if(this.getIsPrimary()) json += '"is_primary"' + ":" + '"' + jsonEscape(this.getIsPrimary())  + '",';
		if(this.getVerificationCode()) json += '"verification_code"' + ":" + '"' + jsonEscape(this.getVerificationCode())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserEmail.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.isVerified && !Validator.BOOLEAN.test(this.isVerified)) { throw new ValidationError(_formprefix + "is_verified", ValidationError.PATTERN_FAILED);}
if(this.isPrimary && !Validator.BOOLEAN.test(this.isPrimary)) { throw new ValidationError(_formprefix + "is_primary", ValidationError.PATTERN_FAILED);}
if(this.verificationCode && !(/^([A-Za-z0-9_.\-]+)$/).test(this.verificationCode)) { throw new ValidationError(_formprefix + "verification_code", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserEmail.path = "useremail";
UserEmail.newBuilder = function() {
    return new UserEmail();
};

NodeRange = function() {
    var _formprefix = "";
    
var rangeName = "";
this.setRangeName = function(rangeName) { 
    this.rangeName = rangeName;
    return this;
};
this.getRangeName = function() {
    return this.rangeName;
};
var start = "";
this.setStart = function(start) { 
    this.start = start;
    return this;
};
this.getStart = function() {
    return this.start;
};
var end = "";
this.setEnd = function(end) { 
    this.end = end;
    return this;
};
this.getEnd = function() {
    return this.end;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRangeName(json["range_name"]);
		this.setStart(json["start"]);
		this.setEnd(json["end"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRangeName()) json += '"range_name"' + ":" + '"' + jsonEscape(this.getRangeName())  + '",';
		if(this.getStart()) json += '"start"' + ":" + '"' + jsonEscape(this.getStart())  + '",';
		if(this.getEnd()) json += '"end"' + ":" + '"' + jsonEscape(this.getEnd())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(NodeRange.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.rangeName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.rangeName)) { throw new ValidationError(_formprefix + "range_name", ValidationError.PATTERN_FAILED);}
if(this.start && !Validator.INTEGER.test(this.start)) { throw new ValidationError(_formprefix + "start", ValidationError.PATTERN_FAILED);}
if(this.end && !Validator.INTEGER.test(this.end)) { throw new ValidationError(_formprefix + "end", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
NodeRange.path = "noderange";
NodeRange.newBuilder = function() {
    return new NodeRange();
};

SamlAppSessionIndex = function() {
    var _formprefix = "";
    
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var sessionIndex = "";
this.setSessionIndex = function(sessionIndex) { 
    this.sessionIndex = sessionIndex;
    return this;
};
this.getSessionIndex = function() {
    return this.sessionIndex;
};
var appType = "0";
this.setAppType = function(appType) { 
    this.appType = appType;
    return this;
};
this.getAppType = function() {
    return this.appType;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppId(json["app_id"]);
		this.setSessionIndex(json["session_index"]);
		this.setAppType(json["app_type"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getSessionIndex()) json += '"session_index"' + ":" + '"' + jsonEscape(this.getSessionIndex())  + '",';
		if(this.getAppType()) json += '"app_type"' + ":" + '"' + jsonEscape(this.getAppType())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SamlAppSessionIndex.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.sessionIndex && !(/^[a-zA-Z0-9\-\_]+$/).test(this.sessionIndex)) { throw new ValidationError(_formprefix + "session_index", ValidationError.PATTERN_FAILED);}
if(this.appType && !Validator.INTEGER.test(this.appType)) { throw new ValidationError(_formprefix + "app_type", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SamlAppSessionIndex.path = "samlappsessionindex";
SamlAppSessionIndex.newBuilder = function() {
    return new SamlAppSessionIndex();
};

ClientAccessIp = function() {
    var _formprefix = "";
    
var name = "";
this.setName = function(name) { 
    this.name = name;
    return this;
};
this.getName = function() {
    return this.name;
};
var fromIp = "";
this.setFromIp = function(fromIp) { 
    this.fromIp = fromIp;
    return this;
};
this.getFromIp = function() {
    return this.fromIp;
};
var toIp = "";
this.setToIp = function(toIp) { 
    this.toIp = toIp;
    return this;
};
this.getToIp = function() {
    return this.toIp;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setName(json["name"]);
		this.setFromIp(json["from_ip"]);
		this.setToIp(json["to_ip"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getName()) json += '"name"' + ":" + '"' + jsonEscape(this.getName())  + '",';
		if(this.getFromIp()) json += '"from_ip"' + ":" + '"' + jsonEscape(this.getFromIp())  + '",';
		if(this.getToIp()) json += '"to_ip"' + ":" + '"' + jsonEscape(this.getToIp())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ClientAccessIp.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.fromIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.fromIp)) { throw new ValidationError(_formprefix + "from_ip", ValidationError.PATTERN_FAILED);}
if(this.toIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.toIp)) { throw new ValidationError(_formprefix + "to_ip", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ClientAccessIp.path = "clientaccessip";
ClientAccessIp.newBuilder = function() {
    return new ClientAccessIp();
};

OAuthClientProperties = function() {
    var _formprefix = "";
    
var propName = "";
this.setPropName = function(propName) { 
    this.propName = propName;
    return this;
};
this.getPropName = function() {
    return this.propName;
};
var propValue = "";
this.setPropValue = function(propValue) { 
    this.propValue = propValue;
    return this;
};
this.getPropValue = function() {
    return this.propValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPropName(json["prop_name"]);
		this.setPropValue(json["prop_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPropName()) json += '"prop_name"' + ":" + '"' + jsonEscape(this.getPropName())  + '",';
		if(this.getPropValue()) json += '"prop_value"' + ":" + '"' + jsonEscape(this.getPropValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthClientProperties.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.propName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.propName)) { throw new ValidationError(_formprefix + "prop_name", ValidationError.PATTERN_FAILED);}
if(this.propValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.propValue)) { throw new ValidationError(_formprefix + "prop_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthClientProperties.path = "oauthclientproperties";
OAuthClientProperties.newBuilder = function() {
    return new OAuthClientProperties();
};

MailClientAudit = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var auditedTime = "";
this.setAuditedTime = function(auditedTime) { 
    this.auditedTime = auditedTime;
    return this;
};
this.getAuditedTime = function() {
    return this.auditedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setEmailId(json["email_id"]);
		this.setAppName(json["app_name"]);
		this.setIpAddress(json["ip_address"]);
		this.setUserAgent(json["user_agent"]);
		this.setAuditedTime(json["audited_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getAuditedTime()) json += '"audited_time"' + ":" + '"' + jsonEscape(this.getAuditedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MailClientAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.auditedTime && !Validator.INTEGER.test(this.auditedTime)) { throw new ValidationError(_formprefix + "audited_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
MailClientAudit.path = "mailclientaudit";
MailClientAudit.newBuilder = function() {
    return new MailClientAudit();
};

ManagedDevice = function() {
    var _formprefix = "";
    
var mdmToken = "";
this.setMdmToken = function(mdmToken) { 
    this.mdmToken = mdmToken;
    return this;
};
this.getMdmToken = function() {
    return this.mdmToken;
};
var apiToken = "";
this.setApiToken = function(apiToken) { 
    this.apiToken = apiToken;
    return this;
};
this.getApiToken = function() {
    return this.apiToken;
};
var status = "1";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var restrictedType = "0";
this.setRestrictedType = function(restrictedType) { 
    this.restrictedType = restrictedType;
    return this;
};
this.getRestrictedType = function() {
    return this.restrictedType;
};
var tokenSalt = "";
this.setTokenSalt = function(tokenSalt) { 
    this.tokenSalt = tokenSalt;
    return this;
};
this.getTokenSalt = function() {
    return this.tokenSalt;
};
var displayId = "";
this.setDisplayId = function(displayId) { 
    this.displayId = displayId;
    return this;
};
this.getDisplayId = function() {
    return this.displayId;
};
var deviceId = "";
this.setDeviceId = function(deviceId) { 
    this.deviceId = deviceId;
    return this;
};
this.getDeviceId = function() {
    return this.deviceId;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var manageddeviceusers = undefined;
this.setManageddeviceuserss = function(manageddeviceusers) { 
    this.manageddeviceusers = manageddeviceusers;
    return this;
};
this.getManageddeviceuserss = function() {
    return this.manageddeviceusers;
};
this.addManageddeviceusers = function(manageddeviceusers) { 
 if(!this.manageddeviceusers) this.manageddeviceusers = new Array(); 
  this.manageddeviceusers.push(manageddeviceusers); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setMdmToken(json["mdm_token"]);
		this.setApiToken(json["api_token"]);
		this.setStatus(json["status"]);
		this.setRestrictedType(json["restricted_type"]);
		this.setTokenSalt(json["token_salt"]);
		this.setDisplayId(json["display_id"]);
		this.setDeviceId(json["device_id"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setManageddeviceuserss(URI.getResourceArray(json["managedDeviceUsers"],"manageddeviceusers"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getMdmToken()) json += '"mdm_token"' + ":" + '"' + jsonEscape(this.getMdmToken())  + '",';
		if(this.getApiToken()) json += '"api_token"' + ":" + '"' + jsonEscape(this.getApiToken())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getRestrictedType()) json += '"restricted_type"' + ":" + '"' + jsonEscape(this.getRestrictedType())  + '",';
		if(this.getTokenSalt()) json += '"token_salt"' + ":" + '"' + jsonEscape(this.getTokenSalt())  + '",';
		if(this.getDisplayId()) json += '"display_id"' + ":" + '"' + jsonEscape(this.getDisplayId())  + '",';
		if(this.getDeviceId()) json += '"device_id"' + ":" + '"' + jsonEscape(this.getDeviceId())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getManageddeviceuserss()) json += '"managedDeviceUsers"' + ":" + URI.toJSONArray(this.getManageddeviceuserss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ManagedDevice.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.status && !Validator.INTEGER.test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.restrictedType && !Validator.INTEGER.test(this.restrictedType)) { throw new ValidationError(_formprefix + "restricted_type", ValidationError.PATTERN_FAILED);}
if(this.deviceId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.deviceId)) { throw new ValidationError(_formprefix + "device_id", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.manageddeviceusers) { for(i=0; i < this.manageddeviceusers.length; i++ ) { this.manageddeviceusers[i].validate(); } }

	return this;
    }
}
ManagedDevice.path = "manageddevice";
ManagedDevice.newBuilder = function() {
    return new ManagedDevice();
};

AccountMemberRole = function() {
    var _formprefix = "";
    
var zarid = "";
this.setZarid = function(zarid) { 
    this.zarid = zarid;
    return this;
};
this.getZarid = function() {
    return this.zarid;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZarid(json["zarid"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZarid()) json += '"zarid"' + ":" + '"' + jsonEscape(this.getZarid())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountMemberRole.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zarid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zarid)) { throw new ValidationError(_formprefix + "zarid", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountMemberRole.path = "accountmemberrole";
AccountMemberRole.newBuilder = function() {
    return new AccountMemberRole();
};

UniqueIdRangeGenerationAudit = function() {
    var _formprefix = "";
    
var uniqueIdRangeName = "";
this.setUniqueIdRangeName = function(uniqueIdRangeName) { 
    this.uniqueIdRangeName = uniqueIdRangeName;
    return this;
};
this.getUniqueIdRangeName = function() {
    return this.uniqueIdRangeName;
};
var uniqueIdName = "";
this.setUniqueIdName = function(uniqueIdName) { 
    this.uniqueIdName = uniqueIdName;
    return this;
};
this.getUniqueIdName = function() {
    return this.uniqueIdName;
};
var reservedFrom = "";
this.setReservedFrom = function(reservedFrom) { 
    this.reservedFrom = reservedFrom;
    return this;
};
this.getReservedFrom = function() {
    return this.reservedFrom;
};
var reservedTo = "";
this.setReservedTo = function(reservedTo) { 
    this.reservedTo = reservedTo;
    return this;
};
this.getReservedTo = function() {
    return this.reservedTo;
};
var reservedByIp = "";
this.setReservedByIp = function(reservedByIp) { 
    this.reservedByIp = reservedByIp;
    return this;
};
this.getReservedByIp = function() {
    return this.reservedByIp;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setUniqueIdRangeName(json["unique_id_range_name"]);
		this.setUniqueIdName(json["unique_id_name"]);
		this.setReservedFrom(json["reserved_from"]);
		this.setReservedTo(json["reserved_to"]);
		this.setReservedByIp(json["reserved_by_ip"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getUniqueIdRangeName()) json += '"unique_id_range_name"' + ":" + '"' + jsonEscape(this.getUniqueIdRangeName())  + '",';
		if(this.getUniqueIdName()) json += '"unique_id_name"' + ":" + '"' + jsonEscape(this.getUniqueIdName())  + '",';
		if(this.getReservedFrom()) json += '"reserved_from"' + ":" + '"' + jsonEscape(this.getReservedFrom())  + '",';
		if(this.getReservedTo()) json += '"reserved_to"' + ":" + '"' + jsonEscape(this.getReservedTo())  + '",';
		if(this.getReservedByIp()) json += '"reserved_by_ip"' + ":" + '"' + jsonEscape(this.getReservedByIp())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UniqueIdRangeGenerationAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.uniqueIdRangeName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.uniqueIdRangeName)) { throw new ValidationError(_formprefix + "unique_id_range_name", ValidationError.PATTERN_FAILED);}
if(this.uniqueIdName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.uniqueIdName)) { throw new ValidationError(_formprefix + "unique_id_name", ValidationError.PATTERN_FAILED);}
if(this.reservedFrom && !Validator.INTEGER.test(this.reservedFrom)) { throw new ValidationError(_formprefix + "reserved_from", ValidationError.PATTERN_FAILED);}
if(this.reservedTo && !Validator.INTEGER.test(this.reservedTo)) { throw new ValidationError(_formprefix + "reserved_to", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UniqueIdRangeGenerationAudit.path = "uniqueidrangegenerationaudit";
UniqueIdRangeGenerationAudit.newBuilder = function() {
    return new UniqueIdRangeGenerationAudit();
};

AuthenticationTokens = function() {
    var _formprefix = "";
    
var tokenName = "";
this.setTokenName = function(tokenName) { 
    this.tokenName = tokenName;
    return this;
};
this.getTokenName = function() {
    return this.tokenName;
};
var tokenValue = "";
this.setTokenValue = function(tokenValue) { 
    this.tokenValue = tokenValue;
    return this;
};
this.getTokenValue = function() {
    return this.tokenValue;
};
var createdBy = "";
this.setCreatedBy = function(createdBy) { 
    this.createdBy = createdBy;
    return this;
};
this.getCreatedBy = function() {
    return this.createdBy;
};
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var clientId = "";
this.setClientId = function(clientId) { 
    this.clientId = clientId;
    return this;
};
this.getClientId = function() {
    return this.clientId;
};
var clientSecret = "";
this.setClientSecret = function(clientSecret) { 
    this.clientSecret = clientSecret;
    return this;
};
this.getClientSecret = function() {
    return this.clientSecret;
};
var dcInfo = "";
this.setDcInfo = function(dcInfo) { 
    this.dcInfo = dcInfo;
    return this;
};
this.getDcInfo = function() {
    return this.dcInfo;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTokenName(json["token_name"]);
		this.setTokenValue(json["token_value"]);
		this.setCreatedBy(json["created_by"]);
		this.setZid(json["zid"]);
		this.setClientId(json["client_id"]);
		this.setClientSecret(json["client_secret"]);
		this.setDcInfo(json["dc_info"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTokenName()) json += '"token_name"' + ":" + '"' + jsonEscape(this.getTokenName())  + '",';
		if(this.getTokenValue()) json += '"token_value"' + ":" + '"' + jsonEscape(this.getTokenValue())  + '",';
		if(this.getCreatedBy()) json += '"created_by"' + ":" + '"' + jsonEscape(this.getCreatedBy())  + '",';
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getClientId()) json += '"client_id"' + ":" + '"' + jsonEscape(this.getClientId())  + '",';
		if(this.getClientSecret()) json += '"client_secret"' + ":" + '"' + jsonEscape(this.getClientSecret())  + '",';
		if(this.getDcInfo()) json += '"dc_info"' + ":" + '"' + jsonEscape(this.getDcInfo())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AuthenticationTokens.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.tokenName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.tokenName)) { throw new ValidationError(_formprefix + "token_name", ValidationError.PATTERN_FAILED);}
if(this.tokenValue && !(/xss:throwerror/).test(this.tokenValue)) { throw new ValidationError(_formprefix + "token_value", ValidationError.PATTERN_FAILED);}
if(this.createdBy && !(/^[a-zA-Z0-9_\-]+$/).test(this.createdBy)) { throw new ValidationError(_formprefix + "created_by", ValidationError.PATTERN_FAILED);}
if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.clientId && !(/^[a-zA-Z0-9_\-]+$/).test(this.clientId)) { throw new ValidationError(_formprefix + "client_id", ValidationError.PATTERN_FAILED);}
if(this.clientSecret && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.clientSecret)) { throw new ValidationError(_formprefix + "client_secret", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AuthenticationTokens.path = "authenticationtokens";
AuthenticationTokens.newBuilder = function() {
    return new AuthenticationTokens();
};

AppI18n = function() {
    var _formprefix = "";
    
var i18nAttributeName = "";
this.setI18nAttributeName = function(i18nAttributeName) { 
    this.i18nAttributeName = i18nAttributeName;
    return this;
};
this.getI18nAttributeName = function() {
    return this.i18nAttributeName;
};
var i18nAttributeValue = "";
this.setI18nAttributeValue = function(i18nAttributeValue) { 
    this.i18nAttributeValue = i18nAttributeValue;
    return this;
};
this.getI18nAttributeValue = function() {
    return this.i18nAttributeValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setI18nAttributeName(json["i18n_attribute_name"]);
		this.setI18nAttributeValue(json["i18n_attribute_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getI18nAttributeName()) json += '"i18n_attribute_name"' + ":" + '"' + jsonEscape(this.getI18nAttributeName())  + '",';
		if(this.getI18nAttributeValue()) json += '"i18n_attribute_value"' + ":" + '"' + jsonEscape(this.getI18nAttributeValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppI18n.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.i18nAttributeName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.i18nAttributeName)) { throw new ValidationError(_formprefix + "i18n_attribute_name", ValidationError.PATTERN_FAILED);}
if(this.i18nAttributeValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.i18nAttributeValue)) { throw new ValidationError(_formprefix + "i18n_attribute_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppI18n.path = "appi18n";
AppI18n.newBuilder = function() {
    return new AppI18n();
};

AccountAttribute = function() {
    var _formprefix = "";
    
var attributeKey = "";
this.setAttributeKey = function(attributeKey) { 
    this.attributeKey = attributeKey;
    return this;
};
this.getAttributeKey = function() {
    return this.attributeKey;
};
var attributeValue = "";
this.setAttributeValue = function(attributeValue) { 
    this.attributeValue = attributeValue;
    return this;
};
this.getAttributeValue = function() {
    return this.attributeValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAttributeKey(json["attribute_key"]);
		this.setAttributeValue(json["attribute_value"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAttributeKey()) json += '"attribute_key"' + ":" + '"' + jsonEscape(this.getAttributeKey())  + '",';
		if(this.getAttributeValue()) json += '"attribute_value"' + ":" + '"' + jsonEscape(this.getAttributeValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountAttribute.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.attributeKey && !(/^([A-Za-z0-9_.\-]+)$/).test(this.attributeKey)) { throw new ValidationError(_formprefix + "attribute_key", ValidationError.PATTERN_FAILED);}
if(this.attributeValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.attributeValue)) { throw new ValidationError(_formprefix + "attribute_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountAttribute.path = "accountattribute";
AccountAttribute.newBuilder = function() {
    return new AccountAttribute();
};

Automation = function() {
    var _formprefix = "";
    
var automationName = "";
this.setAutomationName = function(automationName) { 
    this.automationName = automationName;
    return this;
};
this.getAutomationName = function() {
    return this.automationName;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var type = "";
this.setType = function(type) { 
    this.type = type;
    return this;
};
this.getType = function() {
    return this.type;
};
var resourceToListen = "";
this.setResourceToListen = function(resourceToListen) { 
    this.resourceToListen = resourceToListen;
    return this;
};
this.getResourceToListen = function() {
    return this.resourceToListen;
};
var childResourcesToInclude = "";
this.setChildResourcesToInclude = function(childResourcesToInclude) { 
    this.childResourcesToInclude = childResourcesToInclude;
    return this;
};
this.getChildResourcesToInclude = function() {
    return this.childResourcesToInclude;
};
var criteria = "";
this.setCriteria = function(criteria) { 
    this.criteria = criteria;
    return this;
};
this.getCriteria = function() {
    return this.criteria;
};
var operation = "";
this.setOperation = function(operation) { 
    this.operation = operation;
    return this;
};
this.getOperation = function() {
    return this.operation;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var resourceaction = undefined;
this.setResourceactions = function(resourceaction) { 
    this.resourceaction = resourceaction;
    return this;
};
this.getResourceactions = function() {
    return this.resourceaction;
};
this.addResourceaction = function(resourceaction) { 
 if(!this.resourceaction) this.resourceaction = new Array(); 
  this.resourceaction.push(resourceaction); 
 return this;
};

var emailaction = undefined;
this.setEmailactions = function(emailaction) { 
    this.emailaction = emailaction;
    return this;
};
this.getEmailactions = function() {
    return this.emailaction;
};
this.addEmailaction = function(emailaction) { 
 if(!this.emailaction) this.emailaction = new Array(); 
  this.emailaction.push(emailaction); 
 return this;
};

var notifyaction = undefined;
this.setNotifyactions = function(notifyaction) { 
    this.notifyaction = notifyaction;
    return this;
};
this.getNotifyactions = function() {
    return this.notifyaction;
};
this.addNotifyaction = function(notifyaction) { 
 if(!this.notifyaction) this.notifyaction = new Array(); 
  this.notifyaction.push(notifyaction); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAutomationName(json["automation_name"]);
		this.setDescription(json["description"]);
		this.setType(json["type"]);
		this.setResourceToListen(json["resource_to_listen"]);
		this.setChildResourcesToInclude(json["child_resources_to_include"]);
		this.setCriteria(json["criteria"]);
		this.setOperation(json["operation"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setResourceactions(URI.getResourceArray(json["resourceAction"],"resourceaction"));
		this.setEmailactions(URI.getResourceArray(json["emailAction"],"emailaction"));
		this.setNotifyactions(URI.getResourceArray(json["notifyAction"],"notifyaction"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAutomationName()) json += '"automation_name"' + ":" + '"' + jsonEscape(this.getAutomationName())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getType()) json += '"type"' + ":" + '"' + jsonEscape(this.getType())  + '",';
		if(this.getResourceToListen()) json += '"resource_to_listen"' + ":" + '"' + jsonEscape(this.getResourceToListen())  + '",';
		if(this.getChildResourcesToInclude()) json += '"child_resources_to_include"' + ":" + '"' + jsonEscape(this.getChildResourcesToInclude())  + '",';
		if(this.getCriteria()) json += '"criteria"' + ":" + '"' + jsonEscape(this.getCriteria())  + '",';
		if(this.getOperation()) json += '"operation"' + ":" + '"' + jsonEscape(this.getOperation())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getResourceactions()) json += '"resourceAction"' + ":" + URI.toJSONArray(this.getResourceactions())  + ',';
		if(this.getEmailactions()) json += '"emailAction"' + ":" + URI.toJSONArray(this.getEmailactions())  + ',';
		if(this.getNotifyactions()) json += '"notifyAction"' + ":" + URI.toJSONArray(this.getNotifyactions())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Automation.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.automationName && !(/^[a-zA-Z0-9_\-]+$/).test(this.automationName)) { throw new ValidationError(_formprefix + "automation_name", ValidationError.PATTERN_FAILED);}
if(this.type && !(/(?i)PRE|POST/).test(this.type)) { throw new ValidationError(_formprefix + "type", ValidationError.PATTERN_FAILED);}
if(this.operation && !(/(?i)POST|PUT|DELETE/).test(this.operation)) { throw new ValidationError(_formprefix + "operation", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.resourceaction) { for(i=0; i < this.resourceaction.length; i++ ) { this.resourceaction[i].validate(); } }
if(this.emailaction) { for(i=0; i < this.emailaction.length; i++ ) { this.emailaction[i].validate(); } }
if(this.notifyaction) { for(i=0; i < this.notifyaction.length; i++ ) { this.notifyaction[i].validate(); } }

	return this;
    }
}
Automation.path = "automation";
Automation.newBuilder = function() {
    return new Automation();
};

ACE = function() {
    var _formprefix = "";
    
var aceIndex = "";
this.setAceIndex = function(aceIndex) { 
    this.aceIndex = aceIndex;
    return this;
};
this.getAceIndex = function() {
    return this.aceIndex;
};
var aceType = "1";
this.setAceType = function(aceType) { 
    this.aceType = aceType;
    return this;
};
this.getAceType = function() {
    return this.aceType;
};
var privilege = "1";
this.setPrivilege = function(privilege) { 
    this.privilege = privilege;
    return this;
};
this.getPrivilege = function() {
    return this.privilege;
};
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var attributes = "";
this.setAttributes = function(attributes) { 
    this.attributes = attributes;
    return this;
};
this.getAttributes = function() {
    return this.attributes;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAceIndex(json["ace_index"]);
		this.setAceType(json["ace_type"]);
		this.setPrivilege(json["privilege"]);
		this.setZid(json["zid"]);
		this.setAttributes(json["attributes"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAceIndex()) json += '"ace_index"' + ":" + '"' + jsonEscape(this.getAceIndex())  + '",';
		if(this.getAceType()) json += '"ace_type"' + ":" + '"' + jsonEscape(this.getAceType())  + '",';
		if(this.getPrivilege()) json += '"privilege"' + ":" + '"' + jsonEscape(this.getPrivilege())  + '",';
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getAttributes()) json += '"attributes"' + ":" + '"' + jsonEscape(this.getAttributes())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ACE.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.aceIndex && !Validator.INTEGER.test(this.aceIndex)) { throw new ValidationError(_formprefix + "ace_index", ValidationError.PATTERN_FAILED);}
if(this.aceType && !Validator.INTEGER.test(this.aceType)) { throw new ValidationError(_formprefix + "ace_type", ValidationError.PATTERN_FAILED);}
if(this.privilege && !Validator.INTEGER.test(this.privilege)) { throw new ValidationError(_formprefix + "privilege", ValidationError.PATTERN_FAILED);}
if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.attributes && !(/dontdisturb/).test(this.attributes)) { throw new ValidationError(_formprefix + "attributes", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ACE.path = "ace";
ACE.newBuilder = function() {
    return new ACE();
};

RecoveryCode = function() {
    var _formprefix = "";
    
var recoveryCode = "";
this.setRecoveryCode = function(recoveryCode) { 
    this.recoveryCode = recoveryCode;
    return this;
};
this.getRecoveryCode = function() {
    return this.recoveryCode;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRecoveryCode(json["recovery_code"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRecoveryCode()) json += '"recovery_code"' + ":" + '"' + jsonEscape(this.getRecoveryCode())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(RecoveryCode.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.recoveryCode && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.recoveryCode)) { throw new ValidationError(_formprefix + "recovery_code", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
RecoveryCode.path = "recoverycode";
RecoveryCode.newBuilder = function() {
    return new RecoveryCode();
};

UserAppKeyStore = function() {
    var _formprefix = "";
    
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var label = "";
this.setLabel = function(label) { 
    this.label = label;
    return this;
};
this.getLabel = function() {
    return this.label;
};
var publicKey = "";
this.setPublicKey = function(publicKey) { 
    this.publicKey = publicKey;
    return this;
};
this.getPublicKey = function() {
    return this.publicKey;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppId(json["app_id"]);
		this.setLabel(json["label"]);
		this.setPublicKey(json["public_key"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getLabel()) json += '"label"' + ":" + '"' + jsonEscape(this.getLabel())  + '",';
		if(this.getPublicKey()) json += '"public_key"' + ":" + '"' + jsonEscape(this.getPublicKey())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserAppKeyStore.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.appId && !Validator.INTEGER.test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.label && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.label)) { throw new ValidationError(_formprefix + "label", ValidationError.PATTERN_FAILED);}
if(this.publicKey && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.publicKey)) { throw new ValidationError(_formprefix + "public_key", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserAppKeyStore.path = "userappkeystore";
UserAppKeyStore.newBuilder = function() {
    return new UserAppKeyStore();
};

AppAccountFinancialSettings = function() {
    var _formprefix = "";
    
var fiscalYearStartMonth = "";
this.setFiscalYearStartMonth = function(fiscalYearStartMonth) { 
    this.fiscalYearStartMonth = fiscalYearStartMonth;
    return this;
};
this.getFiscalYearStartMonth = function() {
    return this.fiscalYearStartMonth;
};
var taxBasis = "";
this.setTaxBasis = function(taxBasis) { 
    this.taxBasis = taxBasis;
    return this;
};
this.getTaxBasis = function() {
    return this.taxBasis;
};
var currencyCode = "";
this.setCurrencyCode = function(currencyCode) { 
    this.currencyCode = currencyCode;
    return this;
};
this.getCurrencyCode = function() {
    return this.currencyCode;
};
var currencySymbol = "";
this.setCurrencySymbol = function(currencySymbol) { 
    this.currencySymbol = currencySymbol;
    return this;
};
this.getCurrencySymbol = function() {
    return this.currencySymbol;
};
var currencyFormat = "";
this.setCurrencyFormat = function(currencyFormat) { 
    this.currencyFormat = currencyFormat;
    return this;
};
this.getCurrencyFormat = function() {
    return this.currencyFormat;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setFiscalYearStartMonth(json["fiscal_year_start_month"]);
		this.setTaxBasis(json["tax_basis"]);
		this.setCurrencyCode(json["currency_code"]);
		this.setCurrencySymbol(json["currency_symbol"]);
		this.setCurrencyFormat(json["currency_format"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getFiscalYearStartMonth()) json += '"fiscal_year_start_month"' + ":" + '"' + jsonEscape(this.getFiscalYearStartMonth())  + '",';
		if(this.getTaxBasis()) json += '"tax_basis"' + ":" + '"' + jsonEscape(this.getTaxBasis())  + '",';
		if(this.getCurrencyCode()) json += '"currency_code"' + ":" + '"' + jsonEscape(this.getCurrencyCode())  + '",';
		if(this.getCurrencySymbol()) json += '"currency_symbol"' + ":" + '"' + jsonEscape(this.getCurrencySymbol())  + '",';
		if(this.getCurrencyFormat()) json += '"currency_format"' + ":" + '"' + jsonEscape(this.getCurrencyFormat())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccountFinancialSettings.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.taxBasis && !Validator.BOOLEAN.test(this.taxBasis)) { throw new ValidationError(_formprefix + "tax_basis", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAccountFinancialSettings.path = "appaccountfinancialsettings";
AppAccountFinancialSettings.newBuilder = function() {
    return new AppAccountFinancialSettings();
};

Statement = function() {
    var _formprefix = "";
    
var statementId = "";
this.setStatementId = function(statementId) { 
    this.statementId = statementId;
    return this;
};
this.getStatementId = function() {
    return this.statementId;
};
var statement = "";
this.setStatement = function(statement) { 
    this.statement = statement;
    return this;
};
this.getStatement = function() {
    return this.statement;
};
var paramMetadata = "";
this.setParamMetadata = function(paramMetadata) { 
    this.paramMetadata = paramMetadata;
    return this;
};
this.getParamMetadata = function() {
    return this.paramMetadata;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setStatementId(json["statement_id"]);
		this.setStatement(json["statement"]);
		this.setParamMetadata(json["param_metadata"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getStatementId()) json += '"statement_id"' + ":" + '"' + jsonEscape(this.getStatementId())  + '",';
		if(this.getStatement()) json += '"statement"' + ":" + '"' + jsonEscape(this.getStatement())  + '",';
		if(this.getParamMetadata()) json += '"param_metadata"' + ":" + '"' + jsonEscape(this.getParamMetadata())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Statement.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.statementId && !(/^([A-Za-z0-9_.\-]+)$/).test(this.statementId)) { throw new ValidationError(_formprefix + "statement_id", ValidationError.PATTERN_FAILED);}
if(this.statement && !(/dontdisturb/).test(this.statement)) { throw new ValidationError(_formprefix + "statement", ValidationError.PATTERN_FAILED);}
if(this.paramMetadata && !(/^([A-Za-z0-9_.\-]+)$/).test(this.paramMetadata)) { throw new ValidationError(_formprefix + "param_metadata", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Statement.path = "statement";
Statement.newBuilder = function() {
    return new Statement();
};

Designations = function() {
    var _formprefix = "";
    
var designationId = "";
this.setDesignationId = function(designationId) { 
    this.designationId = designationId;
    return this;
};
this.getDesignationId = function() {
    return this.designationId;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDesignationId(json["designation_id"]);
		this.setDisplayName(json["display_name"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDesignationId()) json += '"designation_id"' + ":" + '"' + jsonEscape(this.getDesignationId())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Designations.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.designationId && !(/^[a-zA-Z0-9_\-]+$/).test(this.designationId)) { throw new ValidationError(_formprefix + "designation_id", ValidationError.PATTERN_FAILED);}
if(this.displayName && !(/xss:throwerror/).test(this.displayName)) { throw new ValidationError(_formprefix + "display_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Designations.path = "designations";
Designations.newBuilder = function() {
    return new Designations();
};

AuthtoOAuth = function() {
    var _formprefix = "";
    
var clientId = "";
this.setClientId = function(clientId) { 
    this.clientId = clientId;
    return this;
};
this.getClientId = function() {
    return this.clientId;
};
var authtokenscopes = "";
this.setAuthtokenscopes = function(authtokenscopes) { 
    this.authtokenscopes = authtokenscopes;
    return this;
};
this.getAuthtokenscopes = function() {
    return this.authtokenscopes;
};
var oauthtokenscopes = "";
this.setOauthtokenscopes = function(oauthtokenscopes) { 
    this.oauthtokenscopes = oauthtokenscopes;
    return this;
};
this.getOauthtokenscopes = function() {
    return this.oauthtokenscopes;
};
var clientStatus = "1";
this.setClientStatus = function(clientStatus) { 
    this.clientStatus = clientStatus;
    return this;
};
this.getClientStatus = function() {
    return this.clientStatus;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
var tokenExpiryTime = "1";
this.setTokenExpiryTime = function(tokenExpiryTime) { 
    this.tokenExpiryTime = tokenExpiryTime;
    return this;
};
this.getTokenExpiryTime = function() {
    return this.tokenExpiryTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClientId(json["client_id"]);
		this.setAuthtokenscopes(json["authtokenscopes"]);
		this.setOauthtokenscopes(json["oauthtokenscopes"]);
		this.setClientStatus(json["client_status"]);
		this.setCreatedTime(json["created_time"]);
		this.setExpiryTime(json["expiry_time"]);
		this.setTokenExpiryTime(json["token_expiry_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClientId()) json += '"client_id"' + ":" + '"' + jsonEscape(this.getClientId())  + '",';
		if(this.getAuthtokenscopes()) json += '"authtokenscopes"' + ":" + '"' + jsonEscape(this.getAuthtokenscopes())  + '",';
		if(this.getOauthtokenscopes()) json += '"oauthtokenscopes"' + ":" + '"' + jsonEscape(this.getOauthtokenscopes())  + '",';
		if(this.getClientStatus()) json += '"client_status"' + ":" + '"' + jsonEscape(this.getClientStatus())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';
		if(this.getTokenExpiryTime()) json += '"token_expiry_time"' + ":" + '"' + jsonEscape(this.getTokenExpiryTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AuthtoOAuth.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.clientId && !(/^[a-zA-Z0-9_\-]+$/).test(this.clientId)) { throw new ValidationError(_formprefix + "client_id", ValidationError.PATTERN_FAILED);}
if(this.authtokenscopes && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.authtokenscopes)) { throw new ValidationError(_formprefix + "authtokenscopes", ValidationError.PATTERN_FAILED);}
if(this.oauthtokenscopes && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.oauthtokenscopes)) { throw new ValidationError(_formprefix + "oauthtokenscopes", ValidationError.PATTERN_FAILED);}
if(this.clientStatus && !Validator.INTEGER.test(this.clientStatus)) { throw new ValidationError(_formprefix + "client_status", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}
if(this.tokenExpiryTime && !Validator.INTEGER.test(this.tokenExpiryTime)) { throw new ValidationError(_formprefix + "token_expiry_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AuthtoOAuth.path = "authtooauth";
AuthtoOAuth.newBuilder = function() {
    return new AuthtoOAuth();
};

UserAllDomainsToken = function() {
    var _formprefix = "";
    
var token = "";
this.setToken = function(token) { 
    this.token = token;
    return this;
};
this.getToken = function() {
    return this.token;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var validityPeriod = "0";
this.setValidityPeriod = function(validityPeriod) { 
    this.validityPeriod = validityPeriod;
    return this;
};
this.getValidityPeriod = function() {
    return this.validityPeriod;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var ipAuditInfo = "";
this.setIpAuditInfo = function(ipAuditInfo) { 
    this.ipAuditInfo = ipAuditInfo;
    return this;
};
this.getIpAuditInfo = function() {
    return this.ipAuditInfo;
};
var signinInfo = "";
this.setSigninInfo = function(signinInfo) { 
    this.signinInfo = signinInfo;
    return this;
};
this.getSigninInfo = function() {
    return this.signinInfo;
};
var userbasedomaintoken = undefined;
this.setUserbasedomaintokens = function(userbasedomaintoken) { 
    this.userbasedomaintoken = userbasedomaintoken;
    return this;
};
this.getUserbasedomaintokens = function() {
    return this.userbasedomaintoken;
};
this.addUserbasedomaintoken = function(userbasedomaintoken) { 
 if(!this.userbasedomaintoken) this.userbasedomaintoken = new Array(); 
  this.userbasedomaintoken.push(userbasedomaintoken); 
 return this;
};

var usertokenpairdetails = undefined;
this.setUsertokenpairdetails = function(usertokenpairdetails) { 
    this.usertokenpairdetails = usertokenpairdetails;
    return this;
};
this.getUsertokenpairdetails = function() {
    return this.usertokenpairdetails;
};
var tokenpairauthtoken = undefined;
this.setTokenpairauthtokens = function(tokenpairauthtoken) { 
    this.tokenpairauthtoken = tokenpairauthtoken;
    return this;
};
this.getTokenpairauthtokens = function() {
    return this.tokenpairauthtoken;
};
this.addTokenpairauthtoken = function(tokenpairauthtoken) { 
 if(!this.tokenpairauthtoken) this.tokenpairauthtoken = new Array(); 
  this.tokenpairauthtoken.push(tokenpairauthtoken); 
 return this;
};

var samlappsessionindex = undefined;
this.setSamlappsessionindexs = function(samlappsessionindex) { 
    this.samlappsessionindex = samlappsessionindex;
    return this;
};
this.getSamlappsessionindexs = function() {
    return this.samlappsessionindex;
};
this.addSamlappsessionindex = function(samlappsessionindex) { 
 if(!this.samlappsessionindex) this.samlappsessionindex = new Array(); 
  this.samlappsessionindex.push(samlappsessionindex); 
 return this;
};

var oauthsessiongrant = undefined;
this.setOauthsessiongrants = function(oauthsessiongrant) { 
    this.oauthsessiongrant = oauthsessiongrant;
    return this;
};
this.getOauthsessiongrants = function() {
    return this.oauthsessiongrant;
};
this.addOauthsessiongrant = function(oauthsessiongrant) { 
 if(!this.oauthsessiongrant) this.oauthsessiongrant = new Array(); 
  this.oauthsessiongrant.push(oauthsessiongrant); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setToken(json["token"]);
		this.setIpAddress(json["ip_address"]);
		this.setValidityPeriod(json["validity_period"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);
		this.setIpAuditInfo(json["ip_audit_info"]);
		this.setSigninInfo(json["signin_info"]);
		this.setUserbasedomaintokens(URI.getResourceArray(json["userBaseDomainToken"],"userbasedomaintoken"));
		this.setUsertokenpairdetails(URI.getResource(json["userTokenPairDetails"],"usertokenpairdetails"));
		this.setTokenpairauthtokens(URI.getResourceArray(json["tokenPairAuthToken"],"tokenpairauthtoken"));
		this.setSamlappsessionindexs(URI.getResourceArray(json["samlAppSessionIndex"],"samlappsessionindex"));
		this.setOauthsessiongrants(URI.getResourceArray(json["oAuthSessionGrant"],"oauthsessiongrant"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getToken()) json += '"token"' + ":" + '"' + jsonEscape(this.getToken())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getValidityPeriod()) json += '"validity_period"' + ":" + '"' + jsonEscape(this.getValidityPeriod())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getIpAuditInfo()) json += '"ip_audit_info"' + ":" + '"' + jsonEscape(this.getIpAuditInfo())  + '",';
		if(this.getSigninInfo()) json += '"signin_info"' + ":" + '"' + jsonEscape(this.getSigninInfo())  + '",';
		if(this.getUserbasedomaintokens()) json += '"userBaseDomainToken"' + ":" + URI.toJSONArray(this.getUserbasedomaintokens())  + ',';
		if(this.getUsertokenpairdetails()) json += '"userTokenPairDetails"' + ":" + this.getUsertokenpairdetails().toJSON()  + ',';
		if(this.getTokenpairauthtokens()) json += '"tokenPairAuthToken"' + ":" + URI.toJSONArray(this.getTokenpairauthtokens())  + ',';
		if(this.getSamlappsessionindexs()) json += '"samlAppSessionIndex"' + ":" + URI.toJSONArray(this.getSamlappsessionindexs())  + ',';
		if(this.getOauthsessiongrants()) json += '"oAuthSessionGrant"' + ":" + URI.toJSONArray(this.getOauthsessiongrants())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserAllDomainsToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.token && !(/^[a-zA-Z0-9\-\_]+$/).test(this.token)) { throw new ValidationError(_formprefix + "token", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.validityPeriod && !Validator.INTEGER.test(this.validityPeriod)) { throw new ValidationError(_formprefix + "validity_period", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/xss:htmlfilter/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.userbasedomaintoken) { for(i=0; i < this.userbasedomaintoken.length; i++ ) { this.userbasedomaintoken[i].validate(); } }
if(this.usertokenpairdetails) { this.usertokenpairdetails.validate(); }
if(this.tokenpairauthtoken) { for(i=0; i < this.tokenpairauthtoken.length; i++ ) { this.tokenpairauthtoken[i].validate(); } }
if(this.samlappsessionindex) { for(i=0; i < this.samlappsessionindex.length; i++ ) { this.samlappsessionindex[i].validate(); } }
if(this.oauthsessiongrant) { for(i=0; i < this.oauthsessiongrant.length; i++ ) { this.oauthsessiongrant[i].validate(); } }

	return this;
    }
}
UserAllDomainsToken.path = "useralldomainstoken";
UserAllDomainsToken.newBuilder = function() {
    return new UserAllDomainsToken();
};

BannerTemplateProps = function() {
    var _formprefix = "";
    
var priority = "";
this.setPriority = function(priority) { 
    this.priority = priority;
    return this;
};
this.getPriority = function() {
    return this.priority;
};
var region = "";
this.setRegion = function(region) { 
    this.region = region;
    return this;
};
this.getRegion = function() {
    return this.region;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPriority(json["priority"]);
		this.setRegion(json["region"]);
		this.setExpiryTime(json["expiry_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPriority()) json += '"priority"' + ":" + '"' + jsonEscape(this.getPriority())  + '",';
		if(this.getRegion()) json += '"region"' + ":" + '"' + jsonEscape(this.getRegion())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(BannerTemplateProps.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.priority && !Validator.INTEGER.test(this.priority)) { throw new ValidationError(_formprefix + "priority", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
BannerTemplateProps.path = "bannertemplateprops";
BannerTemplateProps.newBuilder = function() {
    return new BannerTemplateProps();
};

AppRoleOperations = function() {
    var _formprefix = "";
    
var operation = "";
this.setOperation = function(operation) { 
    this.operation = operation;
    return this;
};
this.getOperation = function() {
    return this.operation;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setOperation(json["operation"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getOperation()) json += '"operation"' + ":" + '"' + jsonEscape(this.getOperation())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppRoleOperations.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	
	return this;
    }
}
AppRoleOperations.path = "approleoperations";
AppRoleOperations.newBuilder = function() {
    return new AppRoleOperations();
};

OAuthClientScopes = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var allowedOperations = "";
this.setAllowedOperations = function(allowedOperations) { 
    this.allowedOperations = allowedOperations;
    return this;
};
this.getAllowedOperations = function() {
    return this.allowedOperations;
};
var scopeType = "";
this.setScopeType = function(scopeType) { 
    this.scopeType = scopeType;
    return this;
};
this.getScopeType = function() {
    return this.scopeType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setAllowedOperations(json["allowed_operations"]);
		this.setScopeType(json["scope_type"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getAllowedOperations()) json += '"allowed_operations"' + ":" + '"' + jsonEscape(this.getAllowedOperations())  + '",';
		if(this.getScopeType()) json += '"scope_type"' + ":" + '"' + jsonEscape(this.getScopeType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthClientScopes.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.allowedOperations && !Validator.INTEGER.test(this.allowedOperations)) { throw new ValidationError(_formprefix + "allowed_operations", ValidationError.PATTERN_FAILED);}
if(this.scopeType && !Validator.INTEGER.test(this.scopeType)) { throw new ValidationError(_formprefix + "scope_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthClientScopes.path = "oauthclientscopes";
OAuthClientScopes.newBuilder = function() {
    return new OAuthClientScopes();
};

ACP = function() {
    var _formprefix = "";
    
var acpId = "";
this.setAcpId = function(acpId) { 
    this.acpId = acpId;
    return this;
};
this.getAcpId = function() {
    return this.acpId;
};
var resourceType = "";
this.setResourceType = function(resourceType) { 
    this.resourceType = resourceType;
    return this;
};
this.getResourceType = function() {
    return this.resourceType;
};
var resourceId = "ALL";
this.setResourceId = function(resourceId) { 
    this.resourceId = resourceId;
    return this;
};
this.getResourceId = function() {
    return this.resourceId;
};
var inheritanceFlags = "1";
this.setInheritanceFlags = function(inheritanceFlags) { 
    this.inheritanceFlags = inheritanceFlags;
    return this;
};
this.getInheritanceFlags = function() {
    return this.inheritanceFlags;
};
var ownerZuid = "";
this.setOwnerZuid = function(ownerZuid) { 
    this.ownerZuid = ownerZuid;
    return this;
};
this.getOwnerZuid = function() {
    return this.ownerZuid;
};
var ownerZgid = "";
this.setOwnerZgid = function(ownerZgid) { 
    this.ownerZgid = ownerZgid;
    return this;
};
this.getOwnerZgid = function() {
    return this.ownerZgid;
};
var allowAttributes = "";
this.setAllowAttributes = function(allowAttributes) { 
    this.allowAttributes = allowAttributes;
    return this;
};
this.getAllowAttributes = function() {
    return this.allowAttributes;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var ace = undefined;
this.setAces = function(ace) { 
    this.ace = ace;
    return this;
};
this.getAces = function() {
    return this.ace;
};
this.addAce = function(ace) { 
 if(!this.ace) this.ace = new Array(); 
  this.ace.push(ace); 
 return this;
};

var acpsecret = undefined;
this.setAcpsecrets = function(acpsecret) { 
    this.acpsecret = acpsecret;
    return this;
};
this.getAcpsecrets = function() {
    return this.acpsecret;
};
this.addAcpsecret = function(acpsecret) { 
 if(!this.acpsecret) this.acpsecret = new Array(); 
  this.acpsecret.push(acpsecret); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAcpId(json["acp_id"]);
		this.setResourceType(json["resource_type"]);
		this.setResourceId(json["resource_id"]);
		this.setInheritanceFlags(json["inheritance_flags"]);
		this.setOwnerZuid(json["owner_zuid"]);
		this.setOwnerZgid(json["owner_zgid"]);
		this.setAllowAttributes(json["allow_attributes"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setAces(URI.getResourceArray(json["aCE"],"ace"));
		this.setAcpsecrets(URI.getResourceArray(json["acpSecret"],"acpsecret"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAcpId()) json += '"acp_id"' + ":" + '"' + jsonEscape(this.getAcpId())  + '",';
		if(this.getResourceType()) json += '"resource_type"' + ":" + '"' + jsonEscape(this.getResourceType())  + '",';
		if(this.getResourceId()) json += '"resource_id"' + ":" + '"' + jsonEscape(this.getResourceId())  + '",';
		if(this.getInheritanceFlags()) json += '"inheritance_flags"' + ":" + '"' + jsonEscape(this.getInheritanceFlags())  + '",';
		if(this.getOwnerZuid()) json += '"owner_zuid"' + ":" + '"' + jsonEscape(this.getOwnerZuid())  + '",';
		if(this.getOwnerZgid()) json += '"owner_zgid"' + ":" + '"' + jsonEscape(this.getOwnerZgid())  + '",';
		if(this.getAllowAttributes()) json += '"allow_attributes"' + ":" + '"' + jsonEscape(this.getAllowAttributes())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getAces()) json += '"aCE"' + ":" + URI.toJSONArray(this.getAces())  + ',';
		if(this.getAcpsecrets()) json += '"acpSecret"' + ":" + URI.toJSONArray(this.getAcpsecrets())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ACP.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.acpId && !(/^[a-zA-Z0-9_\-]+$/).test(this.acpId)) { throw new ValidationError(_formprefix + "acp_id", ValidationError.PATTERN_FAILED);}
if(this.resourceType && !(/^[a-zA-Z0-9_]+$/).test(this.resourceType)) { throw new ValidationError(_formprefix + "resource_type", ValidationError.PATTERN_FAILED);}
if(this.resourceId && !(/^[a-zA-Z0-9_\-]+$/).test(this.resourceId)) { throw new ValidationError(_formprefix + "resource_id", ValidationError.PATTERN_FAILED);}
if(this.inheritanceFlags && !Validator.INTEGER.test(this.inheritanceFlags)) { throw new ValidationError(_formprefix + "inheritance_flags", ValidationError.PATTERN_FAILED);}
if(this.ownerZuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.ownerZuid)) { throw new ValidationError(_formprefix + "owner_zuid", ValidationError.PATTERN_FAILED);}
if(this.ownerZgid && !(/^[a-zA-Z0-9_\-]+$/).test(this.ownerZgid)) { throw new ValidationError(_formprefix + "owner_zgid", ValidationError.PATTERN_FAILED);}
if(this.allowAttributes && !(/dontdisturb/).test(this.allowAttributes)) { throw new ValidationError(_formprefix + "allow_attributes", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.ace) { for(i=0; i < this.ace.length; i++ ) { this.ace[i].validate(); } }
if(this.acpsecret) { for(i=0; i < this.acpsecret.length; i++ ) { this.acpsecret[i].validate(); } }

	return this;
    }
}
ACP.path = "acp";
ACP.newBuilder = function() {
    return new ACP();
};

RegistrationAudit = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var regId = "";
this.setRegId = function(regId) { 
    this.regId = regId;
    return this;
};
this.getRegId = function() {
    return this.regId;
};
var appIp = "";
this.setAppIp = function(appIp) { 
    this.appIp = appIp;
    return this;
};
this.getAppIp = function() {
    return this.appIp;
};
var remoteIp = "";
this.setRemoteIp = function(remoteIp) { 
    this.remoteIp = remoteIp;
    return this;
};
this.getRemoteIp = function() {
    return this.remoteIp;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var status = "1";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var errors = "";
this.setErrors = function(errors) { 
    this.errors = errors;
    return this;
};
this.getErrors = function() {
    return this.errors;
};
var zuidAfterReg = "";
this.setZuidAfterReg = function(zuidAfterReg) { 
    this.zuidAfterReg = zuidAfterReg;
    return this;
};
this.getZuidAfterReg = function() {
    return this.zuidAfterReg;
};
var currentZuid = "";
this.setCurrentZuid = function(currentZuid) { 
    this.currentZuid = currentZuid;
    return this;
};
this.getCurrentZuid = function() {
    return this.currentZuid;
};
var getCount = "1";
this.setGetCount = function(getCount) { 
    this.getCount = getCount;
    return this;
};
this.getGetCount = function() {
    return this.getCount;
};
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var idp = "Z";
this.setIdp = function(idp) { 
    this.idp = idp;
    return this;
};
this.getIdp = function() {
    return this.idp;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var endTime = "";
this.setEndTime = function(endTime) { 
    this.endTime = endTime;
    return this;
};
this.getEndTime = function() {
    return this.endTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setRegId(json["reg_id"]);
		this.setAppIp(json["app_ip"]);
		this.setRemoteIp(json["remote_ip"]);
		this.setUserAgent(json["user_agent"]);
		this.setReferrer(json["referrer"]);
		this.setAppName(json["app_name"]);
		this.setStatus(json["status"]);
		this.setErrors(json["errors"]);
		this.setZuidAfterReg(json["zuid_after_reg"]);
		this.setCurrentZuid(json["current_zuid"]);
		this.setGetCount(json["get_count"]);
		this.setEmailId(json["email_id"]);
		this.setIdp(json["idp"]);
		this.setCreatedTime(json["created_time"]);
		this.setEndTime(json["end_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getRegId()) json += '"reg_id"' + ":" + '"' + jsonEscape(this.getRegId())  + '",';
		if(this.getAppIp()) json += '"app_ip"' + ":" + '"' + jsonEscape(this.getAppIp())  + '",';
		if(this.getRemoteIp()) json += '"remote_ip"' + ":" + '"' + jsonEscape(this.getRemoteIp())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getErrors()) json += '"errors"' + ":" + '"' + jsonEscape(this.getErrors())  + '",';
		if(this.getZuidAfterReg()) json += '"zuid_after_reg"' + ":" + '"' + jsonEscape(this.getZuidAfterReg())  + '",';
		if(this.getCurrentZuid()) json += '"current_zuid"' + ":" + '"' + jsonEscape(this.getCurrentZuid())  + '",';
		if(this.getGetCount()) json += '"get_count"' + ":" + '"' + jsonEscape(this.getGetCount())  + '",';
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getIdp()) json += '"idp"' + ":" + '"' + jsonEscape(this.getIdp())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getEndTime()) json += '"end_time"' + ":" + '"' + jsonEscape(this.getEndTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(RegistrationAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.regId && !(/dontdisturb/).test(this.regId)) { throw new ValidationError(_formprefix + "reg_id", ValidationError.PATTERN_FAILED);}
if(this.appIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.appIp)) { throw new ValidationError(_formprefix + "app_ip", ValidationError.PATTERN_FAILED);}
if(this.remoteIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.remoteIp)) { throw new ValidationError(_formprefix + "remote_ip", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.status && !Validator.INTEGER.test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.errors && !(/dontdisturb/).test(this.errors)) { throw new ValidationError(_formprefix + "errors", ValidationError.PATTERN_FAILED);}
if(this.zuidAfterReg && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuidAfterReg)) { throw new ValidationError(_formprefix + "zuid_after_reg", ValidationError.PATTERN_FAILED);}
if(this.currentZuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.currentZuid)) { throw new ValidationError(_formprefix + "current_zuid", ValidationError.PATTERN_FAILED);}
if(this.getCount && !Validator.INTEGER.test(this.getCount)) { throw new ValidationError(_formprefix + "get_count", ValidationError.PATTERN_FAILED);}
if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.endTime && !Validator.INTEGER.test(this.endTime)) { throw new ValidationError(_formprefix + "end_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
RegistrationAudit.path = "registrationaudit";
RegistrationAudit.newBuilder = function() {
    return new RegistrationAudit();
};

InvitationDetails = function() {
    var _formprefix = "";
    
var appaccountInvitationId = "";
this.setAppaccountInvitationId = function(appaccountInvitationId) { 
    this.appaccountInvitationId = appaccountInvitationId;
    return this;
};
this.getAppaccountInvitationId = function() {
    return this.appaccountInvitationId;
};
var zaaid = "";
this.setZaaid = function(zaaid) { 
    this.zaaid = zaaid;
    return this;
};
this.getZaaid = function() {
    return this.zaaid;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var roleName = "";
this.setRoleName = function(roleName) { 
    this.roleName = roleName;
    return this;
};
this.getRoleName = function() {
    return this.roleName;
};
var invitedBy = "";
this.setInvitedBy = function(invitedBy) { 
    this.invitedBy = invitedBy;
    return this;
};
this.getInvitedBy = function() {
    return this.invitedBy;
};
var acceptUrl = "";
this.setAcceptUrl = function(acceptUrl) { 
    this.acceptUrl = acceptUrl;
    return this;
};
this.getAcceptUrl = function() {
    return this.acceptUrl;
};
var rejectUrl = "";
this.setRejectUrl = function(rejectUrl) { 
    this.rejectUrl = rejectUrl;
    return this;
};
this.getRejectUrl = function() {
    return this.rejectUrl;
};
var argsData = "";
this.setArgsData = function(argsData) { 
    this.argsData = argsData;
    return this;
};
this.getArgsData = function() {
    return this.argsData;
};
var status = "1";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var orgRole = "";
this.setOrgRole = function(orgRole) { 
    this.orgRole = orgRole;
    return this;
};
this.getOrgRole = function() {
    return this.orgRole;
};
var resendLimit = "0";
this.setResendLimit = function(resendLimit) { 
    this.resendLimit = resendLimit;
    return this;
};
this.getResendLimit = function() {
    return this.resendLimit;
};
var rejectStatus = "0";
this.setRejectStatus = function(rejectStatus) { 
    this.rejectStatus = rejectStatus;
    return this;
};
this.getRejectStatus = function() {
    return this.rejectStatus;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppaccountInvitationId(json["appaccount_invitation_id"]);
		this.setZaaid(json["zaaid"]);
		this.setAppName(json["app_name"]);
		this.setRoleName(json["role_name"]);
		this.setInvitedBy(json["invited_by"]);
		this.setAcceptUrl(json["accept_url"]);
		this.setRejectUrl(json["reject_url"]);
		this.setArgsData(json["args_data"]);
		this.setStatus(json["status"]);
		this.setOrgRole(json["org_role"]);
		this.setResendLimit(json["resend_limit"]);
		this.setRejectStatus(json["reject_status"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppaccountInvitationId()) json += '"appaccount_invitation_id"' + ":" + '"' + jsonEscape(this.getAppaccountInvitationId())  + '",';
		if(this.getZaaid()) json += '"zaaid"' + ":" + '"' + jsonEscape(this.getZaaid())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getRoleName()) json += '"role_name"' + ":" + '"' + jsonEscape(this.getRoleName())  + '",';
		if(this.getInvitedBy()) json += '"invited_by"' + ":" + '"' + jsonEscape(this.getInvitedBy())  + '",';
		if(this.getAcceptUrl()) json += '"accept_url"' + ":" + '"' + jsonEscape(this.getAcceptUrl())  + '",';
		if(this.getRejectUrl()) json += '"reject_url"' + ":" + '"' + jsonEscape(this.getRejectUrl())  + '",';
		if(this.getArgsData()) json += '"args_data"' + ":" + '"' + jsonEscape(this.getArgsData())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getOrgRole()) json += '"org_role"' + ":" + '"' + jsonEscape(this.getOrgRole())  + '",';
		if(this.getResendLimit()) json += '"resend_limit"' + ":" + '"' + jsonEscape(this.getResendLimit())  + '",';
		if(this.getRejectStatus()) json += '"reject_status"' + ":" + '"' + jsonEscape(this.getRejectStatus())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(InvitationDetails.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.appaccountInvitationId && !(/^[a-zA-Z0-9_\-]+$/).test(this.appaccountInvitationId)) { throw new ValidationError(_formprefix + "appaccount_invitation_id", ValidationError.PATTERN_FAILED);}
if(this.zaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaaid)) { throw new ValidationError(_formprefix + "zaaid", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.roleName && !(/^([a-zA-Z0-9])+$/).test(this.roleName)) { throw new ValidationError(_formprefix + "role_name", ValidationError.PATTERN_FAILED);}
if(this.invitedBy && !(/^[a-zA-Z0-9_\-]+$/).test(this.invitedBy)) { throw new ValidationError(_formprefix + "invited_by", ValidationError.PATTERN_FAILED);}
if(this.acceptUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.acceptUrl)) { throw new ValidationError(_formprefix + "accept_url", ValidationError.PATTERN_FAILED);}
if(this.rejectUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.rejectUrl)) { throw new ValidationError(_formprefix + "reject_url", ValidationError.PATTERN_FAILED);}
if(this.status && !Validator.INTEGER.test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.orgRole && !Validator.INTEGER.test(this.orgRole)) { throw new ValidationError(_formprefix + "org_role", ValidationError.PATTERN_FAILED);}
if(this.resendLimit && !Validator.INTEGER.test(this.resendLimit)) { throw new ValidationError(_formprefix + "resend_limit", ValidationError.PATTERN_FAILED);}
if(this.rejectStatus && !Validator.INTEGER.test(this.rejectStatus)) { throw new ValidationError(_formprefix + "reject_status", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
InvitationDetails.path = "invitationdetails";
InvitationDetails.newBuilder = function() {
    return new InvitationDetails();
};

AppAccountService = function() {
    var _formprefix = "";
    
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var subServiceType = "-1";
this.setSubServiceType = function(subServiceType) { 
    this.subServiceType = subServiceType;
    return this;
};
this.getSubServiceType = function() {
    return this.subServiceType;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var resourceHierarchyId = "";
this.setResourceHierarchyId = function(resourceHierarchyId) { 
    this.resourceHierarchyId = resourceHierarchyId;
    return this;
};
this.getResourceHierarchyId = function() {
    return this.resourceHierarchyId;
};
var roleHierarchyId = "";
this.setRoleHierarchyId = function(roleHierarchyId) { 
    this.roleHierarchyId = roleHierarchyId;
    return this;
};
this.getRoleHierarchyId = function() {
    return this.roleHierarchyId;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var accountStatus = "1";
this.setAccountStatus = function(accountStatus) { 
    this.accountStatus = accountStatus;
    return this;
};
this.getAccountStatus = function() {
    return this.accountStatus;
};
var parentZaaid = "";
this.setParentZaaid = function(parentZaaid) { 
    this.parentZaaid = parentZaaid;
    return this;
};
this.getParentZaaid = function() {
    return this.parentZaaid;
};
var directoryZaaid = "";
this.setDirectoryZaaid = function(directoryZaaid) { 
    this.directoryZaaid = directoryZaaid;
    return this;
};
this.getDirectoryZaaid = function() {
    return this.directoryZaaid;
};
var isExposed = "1";
this.setIsExposed = function(isExposed) { 
    this.isExposed = isExposed;
    return this;
};
this.getIsExposed = function() {
    return this.isExposed;
};
var environment = "1";
this.setEnvironment = function(environment) { 
    this.environment = environment;
    return this;
};
this.getEnvironment = function() {
    return this.environment;
};
var parentOrgType = "";
this.setParentOrgType = function(parentOrgType) { 
    this.parentOrgType = parentOrgType;
    return this;
};
this.getParentOrgType = function() {
    return this.parentOrgType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var accountoauthaccessgrant = undefined;
this.setAccountoauthaccessgrants = function(accountoauthaccessgrant) { 
    this.accountoauthaccessgrant = accountoauthaccessgrant;
    return this;
};
this.getAccountoauthaccessgrants = function() {
    return this.accountoauthaccessgrant;
};
this.addAccountoauthaccessgrant = function(accountoauthaccessgrant) { 
 if(!this.accountoauthaccessgrant) this.accountoauthaccessgrant = new Array(); 
  this.accountoauthaccessgrant.push(accountoauthaccessgrant); 
 return this;
};

var accountmember = undefined;
this.setAccountmembers = function(accountmember) { 
    this.accountmember = accountmember;
    return this;
};
this.getAccountmembers = function() {
    return this.accountmember;
};
this.addAccountmember = function(accountmember) { 
 if(!this.accountmember) this.accountmember = new Array(); 
  this.accountmember.push(accountmember); 
 return this;
};

var appaccountconfiguration = undefined;
this.setAppaccountconfigurations = function(appaccountconfiguration) { 
    this.appaccountconfiguration = appaccountconfiguration;
    return this;
};
this.getAppaccountconfigurations = function() {
    return this.appaccountconfiguration;
};
this.addAppaccountconfiguration = function(appaccountconfiguration) { 
 if(!this.appaccountconfiguration) this.appaccountconfiguration = new Array(); 
  this.appaccountconfiguration.push(appaccountconfiguration); 
 return this;
};

var appaccountlicense = undefined;
this.setAppaccountlicenses = function(appaccountlicense) { 
    this.appaccountlicense = appaccountlicense;
    return this;
};
this.getAppaccountlicenses = function() {
    return this.appaccountlicense;
};
this.addAppaccountlicense = function(appaccountlicense) { 
 if(!this.appaccountlicense) this.appaccountlicense = new Array(); 
  this.appaccountlicense.push(appaccountlicense); 
 return this;
};

var portalaccountmapping = undefined;
this.setPortalaccountmappings = function(portalaccountmapping) { 
    this.portalaccountmapping = portalaccountmapping;
    return this;
};
this.getPortalaccountmappings = function() {
    return this.portalaccountmapping;
};
this.addPortalaccountmapping = function(portalaccountmapping) { 
 if(!this.portalaccountmapping) this.portalaccountmapping = new Array(); 
  this.portalaccountmapping.push(portalaccountmapping); 
 return this;
};

var appaccountinvitationtemplate = undefined;
this.setAppaccountinvitationtemplates = function(appaccountinvitationtemplate) { 
    this.appaccountinvitationtemplate = appaccountinvitationtemplate;
    return this;
};
this.getAppaccountinvitationtemplates = function() {
    return this.appaccountinvitationtemplate;
};
this.addAppaccountinvitationtemplate = function(appaccountinvitationtemplate) { 
 if(!this.appaccountinvitationtemplate) this.appaccountinvitationtemplate = new Array(); 
  this.appaccountinvitationtemplate.push(appaccountinvitationtemplate); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppName(json["app_name"]);
		this.setSubServiceType(json["sub_service_type"]);
		this.setZuid(json["zuid"]);
		this.setResourceHierarchyId(json["resource_hierarchy_id"]);
		this.setRoleHierarchyId(json["role_hierarchy_id"]);
		this.setDescription(json["description"]);
		this.setAccountStatus(json["account_status"]);
		this.setParentZaaid(json["parent_zaaid"]);
		this.setDirectoryZaaid(json["directory_zaaid"]);
		this.setIsExposed(json["is_exposed"]);
		this.setEnvironment(json["environment"]);
		this.setParentOrgType(json["parent_org_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setAccountoauthaccessgrants(URI.getResourceArray(json["accountOAuthAccessGrant"],"accountoauthaccessgrant"));
		this.setAccountmembers(URI.getResourceArray(json["accountMember"],"accountmember"));
		this.setAppaccountconfigurations(URI.getResourceArray(json["appAccountConfiguration"],"appaccountconfiguration"));
		this.setAppaccountlicenses(URI.getResourceArray(json["appAccountLicense"],"appaccountlicense"));
		this.setPortalaccountmappings(URI.getResourceArray(json["portalAccountMapping"],"portalaccountmapping"));
		this.setAppaccountinvitationtemplates(URI.getResourceArray(json["appAccountInvitationTemplate"],"appaccountinvitationtemplate"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getSubServiceType()) json += '"sub_service_type"' + ":" + '"' + jsonEscape(this.getSubServiceType())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getResourceHierarchyId()) json += '"resource_hierarchy_id"' + ":" + '"' + jsonEscape(this.getResourceHierarchyId())  + '",';
		if(this.getRoleHierarchyId()) json += '"role_hierarchy_id"' + ":" + '"' + jsonEscape(this.getRoleHierarchyId())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getAccountStatus()) json += '"account_status"' + ":" + '"' + jsonEscape(this.getAccountStatus())  + '",';
		if(this.getParentZaaid()) json += '"parent_zaaid"' + ":" + '"' + jsonEscape(this.getParentZaaid())  + '",';
		if(this.getDirectoryZaaid()) json += '"directory_zaaid"' + ":" + '"' + jsonEscape(this.getDirectoryZaaid())  + '",';
		if(this.getIsExposed()) json += '"is_exposed"' + ":" + '"' + jsonEscape(this.getIsExposed())  + '",';
		if(this.getEnvironment()) json += '"environment"' + ":" + '"' + jsonEscape(this.getEnvironment())  + '",';
		if(this.getParentOrgType()) json += '"parent_org_type"' + ":" + '"' + jsonEscape(this.getParentOrgType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getAccountoauthaccessgrants()) json += '"accountOAuthAccessGrant"' + ":" + URI.toJSONArray(this.getAccountoauthaccessgrants())  + ',';
		if(this.getAccountmembers()) json += '"accountMember"' + ":" + URI.toJSONArray(this.getAccountmembers())  + ',';
		if(this.getAppaccountconfigurations()) json += '"appAccountConfiguration"' + ":" + URI.toJSONArray(this.getAppaccountconfigurations())  + ',';
		if(this.getAppaccountlicenses()) json += '"appAccountLicense"' + ":" + URI.toJSONArray(this.getAppaccountlicenses())  + ',';
		if(this.getPortalaccountmappings()) json += '"portalAccountMapping"' + ":" + URI.toJSONArray(this.getPortalaccountmappings())  + ',';
		if(this.getAppaccountinvitationtemplates()) json += '"appAccountInvitationTemplate"' + ":" + URI.toJSONArray(this.getAppaccountinvitationtemplates())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccountService.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.subServiceType && !Validator.INTEGER.test(this.subServiceType)) { throw new ValidationError(_formprefix + "sub_service_type", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.resourceHierarchyId && !(/^[a-zA-Z0-9_\-]+$/).test(this.resourceHierarchyId)) { throw new ValidationError(_formprefix + "resource_hierarchy_id", ValidationError.PATTERN_FAILED);}
if(this.roleHierarchyId && !(/^[a-zA-Z0-9_\-]+$/).test(this.roleHierarchyId)) { throw new ValidationError(_formprefix + "role_hierarchy_id", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.accountStatus && !Validator.INTEGER.test(this.accountStatus)) { throw new ValidationError(_formprefix + "account_status", ValidationError.PATTERN_FAILED);}
if(this.parentZaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.parentZaaid)) { throw new ValidationError(_formprefix + "parent_zaaid", ValidationError.PATTERN_FAILED);}
if(this.directoryZaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.directoryZaaid)) { throw new ValidationError(_formprefix + "directory_zaaid", ValidationError.PATTERN_FAILED);}
if(this.isExposed && !Validator.INTEGER.test(this.isExposed)) { throw new ValidationError(_formprefix + "is_exposed", ValidationError.PATTERN_FAILED);}
if(this.environment && !Validator.INTEGER.test(this.environment)) { throw new ValidationError(_formprefix + "environment", ValidationError.PATTERN_FAILED);}
if(this.parentOrgType && !Validator.INTEGER.test(this.parentOrgType)) { throw new ValidationError(_formprefix + "parent_org_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.accountoauthaccessgrant) { for(i=0; i < this.accountoauthaccessgrant.length; i++ ) { this.accountoauthaccessgrant[i].validate(); } }
if(this.accountmember) { for(i=0; i < this.accountmember.length; i++ ) { this.accountmember[i].validate(); } }
if(this.appaccountconfiguration) { for(i=0; i < this.appaccountconfiguration.length; i++ ) { this.appaccountconfiguration[i].validate(); } }
if(this.appaccountlicense) { for(i=0; i < this.appaccountlicense.length; i++ ) { this.appaccountlicense[i].validate(); } }
if(this.portalaccountmapping) { for(i=0; i < this.portalaccountmapping.length; i++ ) { this.portalaccountmapping[i].validate(); } }
if(this.appaccountinvitationtemplate) { for(i=0; i < this.appaccountinvitationtemplate.length; i++ ) { this.appaccountinvitationtemplate[i].validate(); } }

	return this;
    }
}
AppAccountService.path = "appaccountservice";
AppAccountService.newBuilder = function() {
    return new AppAccountService();
};

UserServicePreference = function() {
    var _formprefix = "";
    
var preferenceKey = "";
this.setPreferenceKey = function(preferenceKey) { 
    this.preferenceKey = preferenceKey;
    return this;
};
this.getPreferenceKey = function() {
    return this.preferenceKey;
};
var preferenceValue = "";
this.setPreferenceValue = function(preferenceValue) { 
    this.preferenceValue = preferenceValue;
    return this;
};
this.getPreferenceValue = function() {
    return this.preferenceValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPreferenceKey(json["preference_key"]);
		this.setPreferenceValue(json["preference_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPreferenceKey()) json += '"preference_key"' + ":" + '"' + jsonEscape(this.getPreferenceKey())  + '",';
		if(this.getPreferenceValue()) json += '"preference_value"' + ":" + '"' + jsonEscape(this.getPreferenceValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserServicePreference.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.preferenceKey && !(/^[a-zA-Z0-9_\-]+$/).test(this.preferenceKey)) { throw new ValidationError(_formprefix + "preference_key", ValidationError.PATTERN_FAILED);}
if(this.preferenceValue && !(/^[a-zA-Z0-9_\-]+$/).test(this.preferenceValue)) { throw new ValidationError(_formprefix + "preference_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserServicePreference.path = "userservicepreference";
UserServicePreference.newBuilder = function() {
    return new UserServicePreference();
};

ParentZAID = function() {
    var _formprefix = "";
    
var parentZaid = "";
this.setParentZaid = function(parentZaid) { 
    this.parentZaid = parentZaid;
    return this;
};
this.getParentZaid = function() {
    return this.parentZaid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setParentZaid(json["parent_zaid"]);
		this.setZaid(json["zaid"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getParentZaid()) json += '"parent_zaid"' + ":" + '"' + jsonEscape(this.getParentZaid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ParentZAID.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.parentZaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.parentZaid)) { throw new ValidationError(_formprefix + "parent_zaid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ParentZAID.path = "parentzaid";
ParentZAID.newBuilder = function() {
    return new ParentZAID();
};

Captcha = function() {
    var _formprefix = "";
    
var captchaDigest = "";
this.setCaptchaDigest = function(captchaDigest) { 
    this.captchaDigest = captchaDigest;
    return this;
};
this.getCaptchaDigest = function() {
    return this.captchaDigest;
};
var captchaText = "";
this.setCaptchaText = function(captchaText) { 
    this.captchaText = captchaText;
    return this;
};
this.getCaptchaText = function() {
    return this.captchaText;
};
var difficultyLevel = "1";
this.setDifficultyLevel = function(difficultyLevel) { 
    this.difficultyLevel = difficultyLevel;
    return this;
};
this.getDifficultyLevel = function() {
    return this.difficultyLevel;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setCaptchaDigest(json["captcha_digest"]);
		this.setCaptchaText(json["captcha_text"]);
		this.setDifficultyLevel(json["difficulty_level"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getCaptchaDigest()) json += '"captcha_digest"' + ":" + '"' + jsonEscape(this.getCaptchaDigest())  + '",';
		if(this.getCaptchaText()) json += '"captcha_text"' + ":" + '"' + jsonEscape(this.getCaptchaText())  + '",';
		if(this.getDifficultyLevel()) json += '"difficulty_level"' + ":" + '"' + jsonEscape(this.getDifficultyLevel())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Captcha.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.captchaDigest && !(/^[a-f0-9]+$/).test(this.captchaDigest)) { throw new ValidationError(_formprefix + "captcha_digest", ValidationError.PATTERN_FAILED);}
if(this.captchaText && !(/^([A-Za-z0-9_.\-]+)$/).test(this.captchaText)) { throw new ValidationError(_formprefix + "captcha_text", ValidationError.PATTERN_FAILED);}
if(this.difficultyLevel && !Validator.INTEGER.test(this.difficultyLevel)) { throw new ValidationError(_formprefix + "difficulty_level", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Captcha.path = "captcha";
Captcha.newBuilder = function() {
    return new Captcha();
};

OAuthApiTokenScopes = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var allowedOperations = "";
this.setAllowedOperations = function(allowedOperations) { 
    this.allowedOperations = allowedOperations;
    return this;
};
this.getAllowedOperations = function() {
    return this.allowedOperations;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setAllowedOperations(json["allowed_operations"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getAllowedOperations()) json += '"allowed_operations"' + ":" + '"' + jsonEscape(this.getAllowedOperations())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthApiTokenScopes.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.allowedOperations && !Validator.INTEGER.test(this.allowedOperations)) { throw new ValidationError(_formprefix + "allowed_operations", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthApiTokenScopes.path = "oauthapitokenscopes";
OAuthApiTokenScopes.newBuilder = function() {
    return new OAuthApiTokenScopes();
};

Register = function() {
    var _formprefix = "";
    
var portal = "";
this.setPortal = function(portal) { 
    this.portal = portal;
    return this;
};
this.getPortal = function() {
    return this.portal;
};
var accountType = "";
this.setAccountType = function(accountType) { 
    this.accountType = accountType;
    return this;
};
this.getAccountType = function() {
    return this.accountType;
};
var firstName = "";
this.setFirstName = function(firstName) { 
    this.firstName = firstName;
    return this;
};
this.getFirstName = function() {
    return this.firstName;
};
var lastName = "";
this.setLastName = function(lastName) { 
    this.lastName = lastName;
    return this;
};
this.getLastName = function() {
    return this.lastName;
};
var username = "";
this.setUsername = function(username) { 
    this.username = username;
    return this;
};
this.getUsername = function() {
    return this.username;
};
var email = "";
this.setEmail = function(email) { 
    this.email = email;
    return this;
};
this.getEmail = function() {
    return this.email;
};
var password = "";
this.setPassword = function(password) { 
    this.password = password;
    return this;
};
this.getPassword = function() {
    return this.password;
};
var country = "";
this.setCountry = function(country) { 
    this.country = country;
    return this;
};
this.getCountry = function() {
    return this.country;
};
var language = "";
this.setLanguage = function(language) { 
    this.language = language;
    return this;
};
this.getLanguage = function() {
    return this.language;
};
var timezone = "";
this.setTimezone = function(timezone) { 
    this.timezone = timezone;
    return this;
};
this.getTimezone = function() {
    return this.timezone;
};
var acceptTos = "";
this.setAcceptTos = function(acceptTos) { 
    this.acceptTos = acceptTos;
    return this;
};
this.getAcceptTos = function() {
    return this.acceptTos;
};
var newsletter = "";
this.setNewsletter = function(newsletter) { 
    this.newsletter = newsletter;
    return this;
};
this.getNewsletter = function() {
    return this.newsletter;
};
var resourceParams = "";
this.setResourceParams = function(resourceParams) { 
    this.resourceParams = resourceParams;
    return this;
};
this.getResourceParams = function() {
    return this.resourceParams;
};
var idp = "";
this.setIdp = function(idp) { 
    this.idp = idp;
    return this;
};
this.getIdp = function() {
    return this.idp;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var authtoken = "";
this.setAuthtoken = function(authtoken) { 
    this.authtoken = authtoken;
    return this;
};
this.getAuthtoken = function() {
    return this.authtoken;
};
var tokenType = "";
this.setTokenType = function(tokenType) { 
    this.tokenType = tokenType;
    return this;
};
this.getTokenType = function() {
    return this.tokenType;
};
var redirectUri = "";
this.setRedirectUri = function(redirectUri) { 
    this.redirectUri = redirectUri;
    return this;
};
this.getRedirectUri = function() {
    return this.redirectUri;
};
var tokenParams = "";
this.setTokenParams = function(tokenParams) { 
    this.tokenParams = tokenParams;
    return this;
};
this.getTokenParams = function() {
    return this.tokenParams;
};
var oauthorizeUri = "";
this.setOauthorizeUri = function(oauthorizeUri) { 
    this.oauthorizeUri = oauthorizeUri;
    return this;
};
this.getOauthorizeUri = function() {
    return this.oauthorizeUri;
};
var mobile = "";
this.setMobile = function(mobile) { 
    this.mobile = mobile;
    return this;
};
this.getMobile = function() {
    return this.mobile;
};
var recoveryMobile = "";
this.setRecoveryMobile = function(recoveryMobile) { 
    this.recoveryMobile = recoveryMobile;
    return this;
};
this.getRecoveryMobile = function() {
    return this.recoveryMobile;
};
var showconfirmpage = "";
this.setShowconfirmpage = function(showconfirmpage) { 
    this.showconfirmpage = showconfirmpage;
    return this;
};
this.getShowconfirmpage = function() {
    return this.showconfirmpage;
};
var countryState = "";
this.setCountryState = function(countryState) { 
    this.countryState = countryState;
    return this;
};
this.getCountryState = function() {
    return this.countryState;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPortal(json["portal"]);
		this.setAccountType(json["account_type"]);
		this.setFirstName(json["first_name"]);
		this.setLastName(json["last_name"]);
		this.setUsername(json["username"]);
		this.setEmail(json["email"]);
		this.setPassword(json["password"]);
		this.setCountry(json["country"]);
		this.setLanguage(json["language"]);
		this.setTimezone(json["timezone"]);
		this.setAcceptTos(json["accept_tos"]);
		this.setNewsletter(json["newsletter"]);
		this.setResourceParams(json["resource_params"]);
		this.setIdp(json["idp"]);
		this.setZaid(json["zaid"]);
		this.setZuid(json["zuid"]);
		this.setAuthtoken(json["authtoken"]);
		this.setTokenType(json["token_type"]);
		this.setRedirectUri(json["redirect_uri"]);
		this.setTokenParams(json["token_params"]);
		this.setOauthorizeUri(json["oauthorize_uri"]);
		this.setMobile(json["mobile"]);
		this.setRecoveryMobile(json["recovery_mobile"]);
		this.setShowconfirmpage(json["showconfirmpage"]);
		this.setCountryState(json["country_state"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPortal()) json += '"portal"' + ":" + '"' + jsonEscape(this.getPortal())  + '",';
		if(this.getAccountType()) json += '"account_type"' + ":" + '"' + jsonEscape(this.getAccountType())  + '",';
		if(this.getFirstName()) json += '"first_name"' + ":" + '"' + jsonEscape(this.getFirstName())  + '",';
		if(this.getLastName()) json += '"last_name"' + ":" + '"' + jsonEscape(this.getLastName())  + '",';
		if(this.getUsername()) json += '"username"' + ":" + '"' + jsonEscape(this.getUsername())  + '",';
		if(this.getEmail()) json += '"email"' + ":" + '"' + jsonEscape(this.getEmail())  + '",';
		if(this.getPassword()) json += '"password"' + ":" + '"' + jsonEscape(this.getPassword())  + '",';
		if(this.getCountry()) json += '"country"' + ":" + '"' + jsonEscape(this.getCountry())  + '",';
		if(this.getLanguage()) json += '"language"' + ":" + '"' + jsonEscape(this.getLanguage())  + '",';
		if(this.getTimezone()) json += '"timezone"' + ":" + '"' + jsonEscape(this.getTimezone())  + '",';
		if(this.getAcceptTos()) json += '"accept_tos"' + ":" + '"' + jsonEscape(this.getAcceptTos())  + '",';
		if(this.getNewsletter()) json += '"newsletter"' + ":" + '"' + jsonEscape(this.getNewsletter())  + '",';
		if(this.getResourceParams()) json += '"resource_params"' + ":" + '"' + jsonEscape(this.getResourceParams())  + '",';
		if(this.getIdp()) json += '"idp"' + ":" + '"' + jsonEscape(this.getIdp())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getAuthtoken()) json += '"authtoken"' + ":" + '"' + jsonEscape(this.getAuthtoken())  + '",';
		if(this.getTokenType()) json += '"token_type"' + ":" + '"' + jsonEscape(this.getTokenType())  + '",';
		if(this.getRedirectUri()) json += '"redirect_uri"' + ":" + '"' + jsonEscape(this.getRedirectUri())  + '",';
		if(this.getTokenParams()) json += '"token_params"' + ":" + '"' + jsonEscape(this.getTokenParams())  + '",';
		if(this.getOauthorizeUri()) json += '"oauthorize_uri"' + ":" + '"' + jsonEscape(this.getOauthorizeUri())  + '",';
		if(this.getMobile()) json += '"mobile"' + ":" + '"' + jsonEscape(this.getMobile())  + '",';
		if(this.getRecoveryMobile()) json += '"recovery_mobile"' + ":" + '"' + jsonEscape(this.getRecoveryMobile())  + '",';
		if(this.getShowconfirmpage()) json += '"showconfirmpage"' + ":" + '"' + jsonEscape(this.getShowconfirmpage())  + '",';
		if(this.getCountryState()) json += '"country_state"' + ":" + '"' + jsonEscape(this.getCountryState())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Register.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.acceptTos && !Validator.BOOLEAN.test(this.acceptTos)) { throw new ValidationError(_formprefix + "accept_tos", ValidationError.PATTERN_FAILED);}
if(this.newsletter && !Validator.BOOLEAN.test(this.newsletter)) { throw new ValidationError(_formprefix + "newsletter", ValidationError.PATTERN_FAILED);}
if(this.idp && !Validator.INTEGER.test(this.idp)) { throw new ValidationError(_formprefix + "idp", ValidationError.PATTERN_FAILED);}
if(this.showconfirmpage && !Validator.BOOLEAN.test(this.showconfirmpage)) { throw new ValidationError(_formprefix + "showconfirmpage", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Register.path = "register";
Register.newBuilder = function() {
    return new Register();
};

MFAPolicy = function() {
    var _formprefix = "";
    
var enable = "0";
this.setEnable = function(enable) { 
    this.enable = enable;
    return this;
};
this.getEnable = function() {
    return this.enable;
};
var allowedModes = "";
this.setAllowedModes = function(allowedModes) { 
    this.allowedModes = allowedModes;
    return this;
};
this.getAllowedModes = function() {
    return this.allowedModes;
};
var restrictBackup = "false";
this.setRestrictBackup = function(restrictBackup) { 
    this.restrictBackup = restrictBackup;
    return this;
};
this.getRestrictBackup = function() {
    return this.restrictBackup;
};
var restrictChangeMode = "false";
this.setRestrictChangeMode = function(restrictChangeMode) { 
    this.restrictChangeMode = restrictChangeMode;
    return this;
};
this.getRestrictChangeMode = function() {
    return this.restrictChangeMode;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var restrictTrustMfaSession = "false";
this.setRestrictTrustMfaSession = function(restrictTrustMfaSession) { 
    this.restrictTrustMfaSession = restrictTrustMfaSession;
    return this;
};
this.getRestrictTrustMfaSession = function() {
    return this.restrictTrustMfaSession;
};
var isPasswordLessEnabled = "true";
this.setIsPasswordLessEnabled = function(isPasswordLessEnabled) { 
    this.isPasswordLessEnabled = isPasswordLessEnabled;
    return this;
};
this.getIsPasswordLessEnabled = function() {
    return this.isPasswordLessEnabled;
};
var trustMfaSessionValidity = "-1";
this.setTrustMfaSessionValidity = function(trustMfaSessionValidity) { 
    this.trustMfaSessionValidity = trustMfaSessionValidity;
    return this;
};
this.getTrustMfaSessionValidity = function() {
    return this.trustMfaSessionValidity;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setEnable(json["enable"]);
		this.setAllowedModes(json["allowed_modes"]);
		this.setRestrictBackup(json["restrict_backup"]);
		this.setRestrictChangeMode(json["restrict_change_mode"]);
		this.setModifiedTime(json["modified_time"]);
		this.setRestrictTrustMfaSession(json["restrict_trust_mfa_session"]);
		this.setIsPasswordLessEnabled(json["is_password_less_enabled"]);
		this.setTrustMfaSessionValidity(json["trust_mfa_session_validity"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getEnable()) json += '"enable"' + ":" + '"' + jsonEscape(this.getEnable())  + '",';
		if(this.getAllowedModes()) json += '"allowed_modes"' + ":" + '"' + jsonEscape(this.getAllowedModes())  + '",';
		if(this.getRestrictBackup()) json += '"restrict_backup"' + ":" + '"' + jsonEscape(this.getRestrictBackup())  + '",';
		if(this.getRestrictChangeMode()) json += '"restrict_change_mode"' + ":" + '"' + jsonEscape(this.getRestrictChangeMode())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getRestrictTrustMfaSession()) json += '"restrict_trust_mfa_session"' + ":" + '"' + jsonEscape(this.getRestrictTrustMfaSession())  + '",';
		if(this.getIsPasswordLessEnabled()) json += '"is_password_less_enabled"' + ":" + '"' + jsonEscape(this.getIsPasswordLessEnabled())  + '",';
		if(this.getTrustMfaSessionValidity()) json += '"trust_mfa_session_validity"' + ":" + '"' + jsonEscape(this.getTrustMfaSessionValidity())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MFAPolicy.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.enable && !Validator.INTEGER.test(this.enable)) { throw new ValidationError(_formprefix + "enable", ValidationError.PATTERN_FAILED);}
if(this.allowedModes && !(/^([A-Za-z0-9_.\-]+)$/).test(this.allowedModes)) { throw new ValidationError(_formprefix + "allowed_modes", ValidationError.PATTERN_FAILED);}
if(this.restrictBackup && !Validator.BOOLEAN.test(this.restrictBackup)) { throw new ValidationError(_formprefix + "restrict_backup", ValidationError.PATTERN_FAILED);}
if(this.restrictChangeMode && !Validator.BOOLEAN.test(this.restrictChangeMode)) { throw new ValidationError(_formprefix + "restrict_change_mode", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.restrictTrustMfaSession && !Validator.BOOLEAN.test(this.restrictTrustMfaSession)) { throw new ValidationError(_formprefix + "restrict_trust_mfa_session", ValidationError.PATTERN_FAILED);}
if(this.isPasswordLessEnabled && !Validator.BOOLEAN.test(this.isPasswordLessEnabled)) { throw new ValidationError(_formprefix + "is_password_less_enabled", ValidationError.PATTERN_FAILED);}
if(this.trustMfaSessionValidity && !Validator.INTEGER.test(this.trustMfaSessionValidity)) { throw new ValidationError(_formprefix + "trust_mfa_session_validity", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
MFAPolicy.path = "mfapolicy";
MFAPolicy.newBuilder = function() {
    return new MFAPolicy();
};

OAuthDeviceTokenScopes = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var allowedOperations = "";
this.setAllowedOperations = function(allowedOperations) { 
    this.allowedOperations = allowedOperations;
    return this;
};
this.getAllowedOperations = function() {
    return this.allowedOperations;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setAllowedOperations(json["allowed_operations"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getAllowedOperations()) json += '"allowed_operations"' + ":" + '"' + jsonEscape(this.getAllowedOperations())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthDeviceTokenScopes.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.allowedOperations && !Validator.INTEGER.test(this.allowedOperations)) { throw new ValidationError(_formprefix + "allowed_operations", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthDeviceTokenScopes.path = "oauthdevicetokenscopes";
OAuthDeviceTokenScopes.newBuilder = function() {
    return new OAuthDeviceTokenScopes();
};

APIAudit = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var screenName = "";
this.setScreenName = function(screenName) { 
    this.screenName = screenName;
    return this;
};
this.getScreenName = function() {
    return this.screenName;
};
var operation = "";
this.setOperation = function(operation) { 
    this.operation = operation;
    return this;
};
this.getOperation = function() {
    return this.operation;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var tokenDigest = "";
this.setTokenDigest = function(tokenDigest) { 
    this.tokenDigest = tokenDigest;
    return this;
};
this.getTokenDigest = function() {
    return this.tokenDigest;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setZuid(json["zuid"]);
		this.setAppName(json["app_name"]);
		this.setScreenName(json["screen_name"]);
		this.setOperation(json["operation"]);
		this.setIpAddress(json["ip_address"]);
		this.setReferrer(json["referrer"]);
		this.setTokenDigest(json["token_digest"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getScreenName()) json += '"screen_name"' + ":" + '"' + jsonEscape(this.getScreenName())  + '",';
		if(this.getOperation()) json += '"operation"' + ":" + '"' + jsonEscape(this.getOperation())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getTokenDigest()) json += '"token_digest"' + ":" + '"' + jsonEscape(this.getTokenDigest())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(APIAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.screenName && !(/^([\p{L}\p{M}\p{N}\_\.]+)|[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.screenName)) { throw new ValidationError(_formprefix + "screen_name", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.tokenDigest && !(/dontdisturb/).test(this.tokenDigest)) { throw new ValidationError(_formprefix + "token_digest", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
APIAudit.path = "apiaudit";
APIAudit.newBuilder = function() {
    return new APIAudit();
};

IpAddress = function() {
    var _formprefix = "";
    
var ipId = "";
this.setIpId = function(ipId) { 
    this.ipId = ipId;
    return this;
};
this.getIpId = function() {
    return this.ipId;
};
var ipName = "";
this.setIpName = function(ipName) { 
    this.ipName = ipName;
    return this;
};
this.getIpName = function() {
    return this.ipName;
};
var fromIp = "";
this.setFromIp = function(fromIp) { 
    this.fromIp = fromIp;
    return this;
};
this.getFromIp = function() {
    return this.fromIp;
};
var toIp = "";
this.setToIp = function(toIp) { 
    this.toIp = toIp;
    return this;
};
this.getToIp = function() {
    return this.toIp;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setIpId(json["ip_id"]);
		this.setIpName(json["ip_name"]);
		this.setFromIp(json["from_ip"]);
		this.setToIp(json["to_ip"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getIpId()) json += '"ip_id"' + ":" + '"' + jsonEscape(this.getIpId())  + '",';
		if(this.getIpName()) json += '"ip_name"' + ":" + '"' + jsonEscape(this.getIpName())  + '",';
		if(this.getFromIp()) json += '"from_ip"' + ":" + '"' + jsonEscape(this.getFromIp())  + '",';
		if(this.getToIp()) json += '"to_ip"' + ":" + '"' + jsonEscape(this.getToIp())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(IpAddress.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.fromIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.fromIp)) { throw new ValidationError(_formprefix + "from_ip", ValidationError.PATTERN_FAILED);}
if(this.toIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.toIp)) { throw new ValidationError(_formprefix + "to_ip", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
IpAddress.path = "ipaddress";
IpAddress.newBuilder = function() {
    return new IpAddress();
};

OAuthAllowedClients = function() {
    var _formprefix = "";
    
var allowedClientZid = "";
this.setAllowedClientZid = function(allowedClientZid) { 
    this.allowedClientZid = allowedClientZid;
    return this;
};
this.getAllowedClientZid = function() {
    return this.allowedClientZid;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAllowedClientZid(json["allowed_client_zid"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAllowedClientZid()) json += '"allowed_client_zid"' + ":" + '"' + jsonEscape(this.getAllowedClientZid())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthAllowedClients.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.allowedClientZid && !(/^[0-9]+\.[0-9]+$/).test(this.allowedClientZid)) { throw new ValidationError(_formprefix + "allowed_client_zid", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthAllowedClients.path = "oauthallowedclients";
OAuthAllowedClients.newBuilder = function() {
    return new OAuthAllowedClients();
};

TFAAudit = function() {
    var _formprefix = "";
    
var tfaauditId = "";
this.setTfaauditId = function(tfaauditId) { 
    this.tfaauditId = tfaauditId;
    return this;
};
this.getTfaauditId = function() {
    return this.tfaauditId;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var operation = "1";
this.setOperation = function(operation) { 
    this.operation = operation;
    return this;
};
this.getOperation = function() {
    return this.operation;
};
var status = "";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var errors = "";
this.setErrors = function(errors) { 
    this.errors = errors;
    return this;
};
this.getErrors = function() {
    return this.errors;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var startedTime = "";
this.setStartedTime = function(startedTime) { 
    this.startedTime = startedTime;
    return this;
};
this.getStartedTime = function() {
    return this.startedTime;
};
var alteredTime = "";
this.setAlteredTime = function(alteredTime) { 
    this.alteredTime = alteredTime;
    return this;
};
this.getAlteredTime = function() {
    return this.alteredTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTfaauditId(json["tfaaudit_id"]);
		this.setZaid(json["zaid"]);
		this.setZid(json["zid"]);
		this.setAppName(json["app_name"]);
		this.setOperation(json["operation"]);
		this.setStatus(json["status"]);
		this.setErrors(json["errors"]);
		this.setUserAgent(json["user_agent"]);
		this.setReferrer(json["referrer"]);
		this.setStartedTime(json["started_time"]);
		this.setAlteredTime(json["altered_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTfaauditId()) json += '"tfaaudit_id"' + ":" + '"' + jsonEscape(this.getTfaauditId())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getOperation()) json += '"operation"' + ":" + '"' + jsonEscape(this.getOperation())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getErrors()) json += '"errors"' + ":" + '"' + jsonEscape(this.getErrors())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getStartedTime()) json += '"started_time"' + ":" + '"' + jsonEscape(this.getStartedTime())  + '",';
		if(this.getAlteredTime()) json += '"altered_time"' + ":" + '"' + jsonEscape(this.getAlteredTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(TFAAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.tfaauditId && !(/dontdisturb/).test(this.tfaauditId)) { throw new ValidationError(_formprefix + "tfaaudit_id", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.operation && !Validator.INTEGER.test(this.operation)) { throw new ValidationError(_formprefix + "operation", ValidationError.PATTERN_FAILED);}
if(this.status && !(/dontdisturb/).test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.errors && !(/dontdisturb/).test(this.errors)) { throw new ValidationError(_formprefix + "errors", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.startedTime && !Validator.INTEGER.test(this.startedTime)) { throw new ValidationError(_formprefix + "started_time", ValidationError.PATTERN_FAILED);}
if(this.alteredTime && !Validator.INTEGER.test(this.alteredTime)) { throw new ValidationError(_formprefix + "altered_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
TFAAudit.path = "tfaaudit";
TFAAudit.newBuilder = function() {
    return new TFAAudit();
};

Email = function() {
    var _formprefix = "";
    
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setEmailId(json["email_id"]);
		this.setZuid(json["zuid"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Email.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Email.path = "email";
Email.newBuilder = function() {
    return new Email();
};

SignInFailedAudit = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var loginId = "";
this.setLoginId = function(loginId) { 
    this.loginId = loginId;
    return this;
};
this.getLoginId = function() {
    return this.loginId;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var errorCode = "";
this.setErrorCode = function(errorCode) { 
    this.errorCode = errorCode;
    return this;
};
this.getErrorCode = function() {
    return this.errorCode;
};
var country = "";
this.setCountry = function(country) { 
    this.country = country;
    return this;
};
this.getCountry = function() {
    return this.country;
};
var requestType = "";
this.setRequestType = function(requestType) { 
    this.requestType = requestType;
    return this;
};
this.getRequestType = function() {
    return this.requestType;
};
var signinId = "";
this.setSigninId = function(signinId) { 
    this.signinId = signinId;
    return this;
};
this.getSigninId = function() {
    return this.signinId;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setLoginId(json["login_id"]);
		this.setZuid(json["zuid"]);
		this.setIpAddress(json["ip_address"]);
		this.setAppName(json["app_name"]);
		this.setReferrer(json["referrer"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);
		this.setErrorCode(json["error_code"]);
		this.setCountry(json["country"]);
		this.setRequestType(json["request_type"]);
		this.setSigninId(json["signin_id"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getLoginId()) json += '"login_id"' + ":" + '"' + jsonEscape(this.getLoginId())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getErrorCode()) json += '"error_code"' + ":" + '"' + jsonEscape(this.getErrorCode())  + '",';
		if(this.getCountry()) json += '"country"' + ":" + '"' + jsonEscape(this.getCountry())  + '",';
		if(this.getRequestType()) json += '"request_type"' + ":" + '"' + jsonEscape(this.getRequestType())  + '",';
		if(this.getSigninId()) json += '"signin_id"' + ":" + '"' + jsonEscape(this.getSigninId())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SignInFailedAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.loginId && !(/^([\p{L}\p{M}\p{N}\_\.]+)|[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.loginId)) { throw new ValidationError(_formprefix + "login_id", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.country && !(/^[a-zA-Z0-9]{2,5}$/).test(this.country)) { throw new ValidationError(_formprefix + "country", ValidationError.PATTERN_FAILED);}
if(this.signinId && !(/dontdisturb/).test(this.signinId)) { throw new ValidationError(_formprefix + "signin_id", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SignInFailedAudit.path = "signinfailedaudit";
SignInFailedAudit.newBuilder = function() {
    return new SignInFailedAudit();
};

ClientPortalOrgType = function() {
    var _formprefix = "";
    
var orgType = "";
this.setOrgType = function(orgType) { 
    this.orgType = orgType;
    return this;
};
this.getOrgType = function() {
    return this.orgType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var portalmapping = undefined;
this.setPortalmappings = function(portalmapping) { 
    this.portalmapping = portalmapping;
    return this;
};
this.getPortalmappings = function() {
    return this.portalmapping;
};
this.addPortalmapping = function(portalmapping) { 
 if(!this.portalmapping) this.portalmapping = new Array(); 
  this.portalmapping.push(portalmapping); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setOrgType(json["org_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setPortalmappings(URI.getResourceArray(json["portalMapping"],"portalmapping"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getOrgType()) json += '"org_type"' + ":" + '"' + jsonEscape(this.getOrgType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getPortalmappings()) json += '"portalMapping"' + ":" + URI.toJSONArray(this.getPortalmappings())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ClientPortalOrgType.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.orgType && !Validator.INTEGER.test(this.orgType)) { throw new ValidationError(_formprefix + "org_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.portalmapping) { for(i=0; i < this.portalmapping.length; i++ ) { this.portalmapping[i].validate(); } }

	return this;
    }
}
ClientPortalOrgType.path = "clientportalorgtype";
ClientPortalOrgType.newBuilder = function() {
    return new ClientPortalOrgType();
};

PortalMapping = function() {
    var _formprefix = "";
    
var zaaid = "";
this.setZaaid = function(zaaid) { 
    this.zaaid = zaaid;
    return this;
};
this.getZaaid = function() {
    return this.zaaid;
};
var mappingType = "";
this.setMappingType = function(mappingType) { 
    this.mappingType = mappingType;
    return this;
};
this.getMappingType = function() {
    return this.mappingType;
};
var mappingKey = "";
this.setMappingKey = function(mappingKey) { 
    this.mappingKey = mappingKey;
    return this;
};
this.getMappingKey = function() {
    return this.mappingKey;
};
var mappingValue = "";
this.setMappingValue = function(mappingValue) { 
    this.mappingValue = mappingValue;
    return this;
};
this.getMappingValue = function() {
    return this.mappingValue;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZaaid(json["zaaid"]);
		this.setMappingType(json["mapping_type"]);
		this.setMappingKey(json["mapping_key"]);
		this.setMappingValue(json["mapping_value"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZaaid()) json += '"zaaid"' + ":" + '"' + jsonEscape(this.getZaaid())  + '",';
		if(this.getMappingType()) json += '"mapping_type"' + ":" + '"' + jsonEscape(this.getMappingType())  + '",';
		if(this.getMappingKey()) json += '"mapping_key"' + ":" + '"' + jsonEscape(this.getMappingKey())  + '",';
		if(this.getMappingValue()) json += '"mapping_value"' + ":" + '"' + jsonEscape(this.getMappingValue())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(PortalMapping.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaaid)) { throw new ValidationError(_formprefix + "zaaid", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
PortalMapping.path = "portalmapping";
PortalMapping.newBuilder = function() {
    return new PortalMapping();
};

OAuthDCDigest = function() {
    var _formprefix = "";
    
var digest = "";
this.setDigest = function(digest) { 
    this.digest = digest;
    return this;
};
this.getDigest = function() {
    return this.digest;
};
var location = "";
this.setLocation = function(location) { 
    this.location = location;
    return this;
};
this.getLocation = function() {
    return this.location;
};
var validUpto = "";
this.setValidUpto = function(validUpto) { 
    this.validUpto = validUpto;
    return this;
};
this.getValidUpto = function() {
    return this.validUpto;
};
var isValidated = "false";
this.setIsValidated = function(isValidated) { 
    this.isValidated = isValidated;
    return this;
};
this.getIsValidated = function() {
    return this.isValidated;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDigest(json["digest"]);
		this.setLocation(json["location"]);
		this.setValidUpto(json["valid_upto"]);
		this.setIsValidated(json["is_validated"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDigest()) json += '"digest"' + ":" + '"' + jsonEscape(this.getDigest())  + '",';
		if(this.getLocation()) json += '"location"' + ":" + '"' + jsonEscape(this.getLocation())  + '",';
		if(this.getValidUpto()) json += '"valid_upto"' + ":" + '"' + jsonEscape(this.getValidUpto())  + '",';
		if(this.getIsValidated()) json += '"is_validated"' + ":" + '"' + jsonEscape(this.getIsValidated())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthDCDigest.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.validUpto && !Validator.INTEGER.test(this.validUpto)) { throw new ValidationError(_formprefix + "valid_upto", ValidationError.PATTERN_FAILED);}
if(this.isValidated && !Validator.BOOLEAN.test(this.isValidated)) { throw new ValidationError(_formprefix + "is_validated", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthDCDigest.path = "oauthdcdigest";
OAuthDCDigest.newBuilder = function() {
    return new OAuthDCDigest();
};

OAuthDeviceTokenOrgInfo = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidtype = "";
this.setZidtype = function(zidtype) { 
    this.zidtype = zidtype;
    return this;
};
this.getZidtype = function() {
    return this.zidtype;
};
var serviceName = "";
this.setServiceName = function(serviceName) { 
    this.serviceName = serviceName;
    return this;
};
this.getServiceName = function() {
    return this.serviceName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidtype(json["zidtype"]);
		this.setServiceName(json["service_name"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidtype()) json += '"zidtype"' + ":" + '"' + jsonEscape(this.getZidtype())  + '",';
		if(this.getServiceName()) json += '"service_name"' + ":" + '"' + jsonEscape(this.getServiceName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthDeviceTokenOrgInfo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.zidtype && !Validator.INTEGER.test(this.zidtype)) { throw new ValidationError(_formprefix + "zidtype", ValidationError.PATTERN_FAILED);}
if(this.serviceName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.serviceName)) { throw new ValidationError(_formprefix + "service_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthDeviceTokenOrgInfo.path = "oauthdevicetokenorginfo";
OAuthDeviceTokenOrgInfo.newBuilder = function() {
    return new OAuthDeviceTokenOrgInfo();
};

ResourceMapping = function() {
    var _formprefix = "";
    
var resourceMappingActionId = "";
this.setResourceMappingActionId = function(resourceMappingActionId) { 
    this.resourceMappingActionId = resourceMappingActionId;
    return this;
};
this.getResourceMappingActionId = function() {
    return this.resourceMappingActionId;
};
var destinationColumnName = "";
this.setDestinationColumnName = function(destinationColumnName) { 
    this.destinationColumnName = destinationColumnName;
    return this;
};
this.getDestinationColumnName = function() {
    return this.destinationColumnName;
};
var srcColumnName = "";
this.setSrcColumnName = function(srcColumnName) { 
    this.srcColumnName = srcColumnName;
    return this;
};
this.getSrcColumnName = function() {
    return this.srcColumnName;
};
var defaultValue = "";
this.setDefaultValue = function(defaultValue) { 
    this.defaultValue = defaultValue;
    return this;
};
this.getDefaultValue = function() {
    return this.defaultValue;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setResourceMappingActionId(json["resource_mapping_action_id"]);
		this.setDestinationColumnName(json["destination_column_name"]);
		this.setSrcColumnName(json["src_column_name"]);
		this.setDefaultValue(json["default_value"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getResourceMappingActionId()) json += '"resource_mapping_action_id"' + ":" + '"' + jsonEscape(this.getResourceMappingActionId())  + '",';
		if(this.getDestinationColumnName()) json += '"destination_column_name"' + ":" + '"' + jsonEscape(this.getDestinationColumnName())  + '",';
		if(this.getSrcColumnName()) json += '"src_column_name"' + ":" + '"' + jsonEscape(this.getSrcColumnName())  + '",';
		if(this.getDefaultValue()) json += '"default_value"' + ":" + '"' + jsonEscape(this.getDefaultValue())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ResourceMapping.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ResourceMapping.path = "resourcemapping";
ResourceMapping.newBuilder = function() {
    return new ResourceMapping();
};

UserSigninUserAgent = function() {
    var _formprefix = "";
    
var userAgentId = "";
this.setUserAgentId = function(userAgentId) { 
    this.userAgentId = userAgentId;
    return this;
};
this.getUserAgentId = function() {
    return this.userAgentId;
};
var device = "";
this.setDevice = function(device) { 
    this.device = device;
    return this;
};
this.getDevice = function() {
    return this.device;
};
var browser = "";
this.setBrowser = function(browser) { 
    this.browser = browser;
    return this;
};
this.getBrowser = function() {
    return this.browser;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var lastAccessedTime = "";
this.setLastAccessedTime = function(lastAccessedTime) { 
    this.lastAccessedTime = lastAccessedTime;
    return this;
};
this.getLastAccessedTime = function() {
    return this.lastAccessedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setUserAgentId(json["user_agent_id"]);
		this.setDevice(json["device"]);
		this.setBrowser(json["browser"]);
		this.setUserAgent(json["user_agent"]);
		this.setLastAccessedTime(json["last_accessed_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getUserAgentId()) json += '"user_agent_id"' + ":" + '"' + jsonEscape(this.getUserAgentId())  + '",';
		if(this.getDevice()) json += '"device"' + ":" + '"' + jsonEscape(this.getDevice())  + '",';
		if(this.getBrowser()) json += '"browser"' + ":" + '"' + jsonEscape(this.getBrowser())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getLastAccessedTime()) json += '"last_accessed_time"' + ":" + '"' + jsonEscape(this.getLastAccessedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserSigninUserAgent.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.userAgentId && !Validator.INTEGER.test(this.userAgentId)) { throw new ValidationError(_formprefix + "user_agent_id", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/xss:throwerror/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.lastAccessedTime && !Validator.INTEGER.test(this.lastAccessedTime)) { throw new ValidationError(_formprefix + "last_accessed_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserSigninUserAgent.path = "usersigninuseragent";
UserSigninUserAgent.newBuilder = function() {
    return new UserSigninUserAgent();
};

MFAAudit = function() {
    var _formprefix = "";
    
var mfaauditId = "";
this.setMfaauditId = function(mfaauditId) { 
    this.mfaauditId = mfaauditId;
    return this;
};
this.getMfaauditId = function() {
    return this.mfaauditId;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var operation = "1";
this.setOperation = function(operation) { 
    this.operation = operation;
    return this;
};
this.getOperation = function() {
    return this.operation;
};
var status = "";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var errors = "";
this.setErrors = function(errors) { 
    this.errors = errors;
    return this;
};
this.getErrors = function() {
    return this.errors;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var deviceToken = "";
this.setDeviceToken = function(deviceToken) { 
    this.deviceToken = deviceToken;
    return this;
};
this.getDeviceToken = function() {
    return this.deviceToken;
};
var deviceName = "";
this.setDeviceName = function(deviceName) { 
    this.deviceName = deviceName;
    return this;
};
this.getDeviceName = function() {
    return this.deviceName;
};
var location = "";
this.setLocation = function(location) { 
    this.location = location;
    return this;
};
this.getLocation = function() {
    return this.location;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var startedTime = "";
this.setStartedTime = function(startedTime) { 
    this.startedTime = startedTime;
    return this;
};
this.getStartedTime = function() {
    return this.startedTime;
};
var alteredTime = "";
this.setAlteredTime = function(alteredTime) { 
    this.alteredTime = alteredTime;
    return this;
};
this.getAlteredTime = function() {
    return this.alteredTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setMfaauditId(json["mfaaudit_id"]);
		this.setZuid(json["zuid"]);
		this.setOperation(json["operation"]);
		this.setStatus(json["status"]);
		this.setErrors(json["errors"]);
		this.setUserAgent(json["user_agent"]);
		this.setDeviceToken(json["device_token"]);
		this.setDeviceName(json["device_name"]);
		this.setLocation(json["location"]);
		this.setReferrer(json["referrer"]);
		this.setStartedTime(json["started_time"]);
		this.setAlteredTime(json["altered_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getMfaauditId()) json += '"mfaaudit_id"' + ":" + '"' + jsonEscape(this.getMfaauditId())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getOperation()) json += '"operation"' + ":" + '"' + jsonEscape(this.getOperation())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getErrors()) json += '"errors"' + ":" + '"' + jsonEscape(this.getErrors())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getDeviceToken()) json += '"device_token"' + ":" + '"' + jsonEscape(this.getDeviceToken())  + '",';
		if(this.getDeviceName()) json += '"device_name"' + ":" + '"' + jsonEscape(this.getDeviceName())  + '",';
		if(this.getLocation()) json += '"location"' + ":" + '"' + jsonEscape(this.getLocation())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getStartedTime()) json += '"started_time"' + ":" + '"' + jsonEscape(this.getStartedTime())  + '",';
		if(this.getAlteredTime()) json += '"altered_time"' + ":" + '"' + jsonEscape(this.getAlteredTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MFAAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.mfaauditId && !(/^([A-Za-z0-9_.\-]+)$/).test(this.mfaauditId)) { throw new ValidationError(_formprefix + "mfaaudit_id", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.operation && !Validator.INTEGER.test(this.operation)) { throw new ValidationError(_formprefix + "operation", ValidationError.PATTERN_FAILED);}
if(this.status && !(/dontdisturb/).test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.errors && !(/dontdisturb/).test(this.errors)) { throw new ValidationError(_formprefix + "errors", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.deviceToken && !(/xss:throwerror/).test(this.deviceToken)) { throw new ValidationError(_formprefix + "device_token", ValidationError.PATTERN_FAILED);}
if(this.deviceName && !(/xss:throwerror/).test(this.deviceName)) { throw new ValidationError(_formprefix + "device_name", ValidationError.PATTERN_FAILED);}
if(this.location && !(/^([A-Za-z0-9_.\-]+)$/).test(this.location)) { throw new ValidationError(_formprefix + "location", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.startedTime && !Validator.INTEGER.test(this.startedTime)) { throw new ValidationError(_formprefix + "started_time", ValidationError.PATTERN_FAILED);}
if(this.alteredTime && !Validator.INTEGER.test(this.alteredTime)) { throw new ValidationError(_formprefix + "altered_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
MFAAudit.path = "mfaaudit";
MFAAudit.newBuilder = function() {
    return new MFAAudit();
};

PasswordPolicy = function() {
    var _formprefix = "";
    
var minLen = "3";
this.setMinLen = function(minLen) { 
    this.minLen = minLen;
    return this;
};
this.getMinLen = function() {
    return this.minLen;
};
var maxLen = "60";
this.setMaxLen = function(maxLen) { 
    this.maxLen = maxLen;
    return this;
};
this.getMaxLen = function() {
    return this.maxLen;
};
var minSpecialChars = "0";
this.setMinSpecialChars = function(minSpecialChars) { 
    this.minSpecialChars = minSpecialChars;
    return this;
};
this.getMinSpecialChars = function() {
    return this.minSpecialChars;
};
var minNumericChars = "0";
this.setMinNumericChars = function(minNumericChars) { 
    this.minNumericChars = minNumericChars;
    return this;
};
this.getMinNumericChars = function() {
    return this.minNumericChars;
};
var mixedCase = "0";
this.setMixedCase = function(mixedCase) { 
    this.mixedCase = mixedCase;
    return this;
};
this.getMixedCase = function() {
    return this.mixedCase;
};
var passExpiry = "-1";
this.setPassExpiry = function(passExpiry) { 
    this.passExpiry = passExpiry;
    return this;
};
this.getPassExpiry = function() {
    return this.passExpiry;
};
var passwordHistory = "-1";
this.setPasswordHistory = function(passwordHistory) { 
    this.passwordHistory = passwordHistory;
    return this;
};
this.getPasswordHistory = function() {
    return this.passwordHistory;
};
var passwordMinimumAge = "0";
this.setPasswordMinimumAge = function(passwordMinimumAge) { 
    this.passwordMinimumAge = passwordMinimumAge;
    return this;
};
this.getPasswordMinimumAge = function() {
    return this.passwordMinimumAge;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setMinLen(json["min_len"]);
		this.setMaxLen(json["max_len"]);
		this.setMinSpecialChars(json["min_special_chars"]);
		this.setMinNumericChars(json["min_numeric_chars"]);
		this.setMixedCase(json["mixed_case"]);
		this.setPassExpiry(json["pass_expiry"]);
		this.setPasswordHistory(json["password_history"]);
		this.setPasswordMinimumAge(json["password_minimum_age"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getMinLen()) json += '"min_len"' + ":" + '"' + jsonEscape(this.getMinLen())  + '",';
		if(this.getMaxLen()) json += '"max_len"' + ":" + '"' + jsonEscape(this.getMaxLen())  + '",';
		if(this.getMinSpecialChars()) json += '"min_special_chars"' + ":" + '"' + jsonEscape(this.getMinSpecialChars())  + '",';
		if(this.getMinNumericChars()) json += '"min_numeric_chars"' + ":" + '"' + jsonEscape(this.getMinNumericChars())  + '",';
		if(this.getMixedCase()) json += '"mixed_case"' + ":" + '"' + jsonEscape(this.getMixedCase())  + '",';
		if(this.getPassExpiry()) json += '"pass_expiry"' + ":" + '"' + jsonEscape(this.getPassExpiry())  + '",';
		if(this.getPasswordHistory()) json += '"password_history"' + ":" + '"' + jsonEscape(this.getPasswordHistory())  + '",';
		if(this.getPasswordMinimumAge()) json += '"password_minimum_age"' + ":" + '"' + jsonEscape(this.getPasswordMinimumAge())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(PasswordPolicy.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.minLen && !Validator.INTEGER.test(this.minLen)) { throw new ValidationError(_formprefix + "min_len", ValidationError.PATTERN_FAILED);}
if(this.maxLen && !Validator.INTEGER.test(this.maxLen)) { throw new ValidationError(_formprefix + "max_len", ValidationError.PATTERN_FAILED);}
if(this.minSpecialChars && !Validator.INTEGER.test(this.minSpecialChars)) { throw new ValidationError(_formprefix + "min_special_chars", ValidationError.PATTERN_FAILED);}
if(this.minNumericChars && !Validator.INTEGER.test(this.minNumericChars)) { throw new ValidationError(_formprefix + "min_numeric_chars", ValidationError.PATTERN_FAILED);}
if(this.mixedCase && !Validator.INTEGER.test(this.mixedCase)) { throw new ValidationError(_formprefix + "mixed_case", ValidationError.PATTERN_FAILED);}
if(this.passExpiry && !Validator.INTEGER.test(this.passExpiry)) { throw new ValidationError(_formprefix + "pass_expiry", ValidationError.PATTERN_FAILED);}
if(this.passwordHistory && !Validator.INTEGER.test(this.passwordHistory)) { throw new ValidationError(_formprefix + "password_history", ValidationError.PATTERN_FAILED);}
if(this.passwordMinimumAge && !Validator.INTEGER.test(this.passwordMinimumAge)) { throw new ValidationError(_formprefix + "password_minimum_age", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
PasswordPolicy.path = "passwordpolicy";
PasswordPolicy.newBuilder = function() {
    return new PasswordPolicy();
};

CPortalAdmin = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var role = "0";
this.setRole = function(role) { 
    this.role = role;
    return this;
};
this.getRole = function() {
    return this.role;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setRole(json["role"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getRole()) json += '"role"' + ":" + '"' + jsonEscape(this.getRole())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(CPortalAdmin.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.role && !Validator.INTEGER.test(this.role)) { throw new ValidationError(_formprefix + "role", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
CPortalAdmin.path = "cportaladmin";
CPortalAdmin.newBuilder = function() {
    return new CPortalAdmin();
};

UserSystemRoles = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setExpiryTime(json["expiry_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserSystemRoles.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserSystemRoles.path = "usersystemroles";
UserSystemRoles.newBuilder = function() {
    return new UserSystemRoles();
};

MailTypes = function() {
    var _formprefix = "";
    
var mailTypeName = "isc";
this.setMailTypeName = function(mailTypeName) { 
    this.mailTypeName = mailTypeName;
    return this;
};
this.getMailTypeName = function() {
    return this.mailTypeName;
};
var mailTypeDescription = "";
this.setMailTypeDescription = function(mailTypeDescription) { 
    this.mailTypeDescription = mailTypeDescription;
    return this;
};
this.getMailTypeDescription = function() {
    return this.mailTypeDescription;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var mailsender = undefined;
this.setMailsender = function(mailsender) { 
    this.mailsender = mailsender;
    return this;
};
this.getMailsender = function() {
    return this.mailsender;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setMailTypeName(json["mail_type_name"]);
		this.setMailTypeDescription(json["mail_type_description"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setMailsender(URI.getResource(json["mailSender"],"mailsender"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getMailTypeName()) json += '"mail_type_name"' + ":" + '"' + jsonEscape(this.getMailTypeName())  + '",';
		if(this.getMailTypeDescription()) json += '"mail_type_description"' + ":" + '"' + jsonEscape(this.getMailTypeDescription())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getMailsender()) json += '"mailSender"' + ":" + this.getMailsender().toJSON()  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MailTypes.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.mailTypeName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.mailTypeName)) { throw new ValidationError(_formprefix + "mail_type_name", ValidationError.PATTERN_FAILED);}
if(this.mailTypeDescription && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.mailTypeDescription)) { throw new ValidationError(_formprefix + "mail_type_description", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.mailsender) { this.mailsender.validate(); }

	return this;
    }
}
MailTypes.path = "mailtypes";
MailTypes.newBuilder = function() {
    return new MailTypes();
};

OrgUPAuthToken = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var authToken = "";
this.setAuthToken = function(authToken) { 
    this.authToken = authToken;
    return this;
};
this.getAuthToken = function() {
    return this.authToken;
};
var csAuthToken = "";
this.setCsAuthToken = function(csAuthToken) { 
    this.csAuthToken = csAuthToken;
    return this;
};
this.getCsAuthToken = function() {
    return this.csAuthToken;
};
var validityUpto = "";
this.setValidityUpto = function(validityUpto) { 
    this.validityUpto = validityUpto;
    return this;
};
this.getValidityUpto = function() {
    return this.validityUpto;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setAuthToken(json["auth_token"]);
		this.setCsAuthToken(json["cs_auth_token"]);
		this.setValidityUpto(json["validity_upto"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getAuthToken()) json += '"auth_token"' + ":" + '"' + jsonEscape(this.getAuthToken())  + '",';
		if(this.getCsAuthToken()) json += '"cs_auth_token"' + ":" + '"' + jsonEscape(this.getCsAuthToken())  + '",';
		if(this.getValidityUpto()) json += '"validity_upto"' + ":" + '"' + jsonEscape(this.getValidityUpto())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OrgUPAuthToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.authToken && !(/^(?:[a-z0-9\.\-])+$/).test(this.authToken)) { throw new ValidationError(_formprefix + "auth_token", ValidationError.PATTERN_FAILED);}
if(this.csAuthToken && !(/^[a-zA-Z0-9]+\.[a-zA-Z0-9]+\.[a-f0-9]{128}$/).test(this.csAuthToken)) { throw new ValidationError(_formprefix + "cs_auth_token", ValidationError.PATTERN_FAILED);}
if(this.validityUpto && !Validator.INTEGER.test(this.validityUpto)) { throw new ValidationError(_formprefix + "validity_upto", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OrgUPAuthToken.path = "orgupauthtoken";
OrgUPAuthToken.newBuilder = function() {
    return new OrgUPAuthToken();
};

AuthDomainSignup = function() {
    var _formprefix = "";
    
var provisionType = "";
this.setProvisionType = function(provisionType) { 
    this.provisionType = provisionType;
    return this;
};
this.getProvisionType = function() {
    return this.provisionType;
};
var sendWelcomeMail = "false";
this.setSendWelcomeMail = function(sendWelcomeMail) { 
    this.sendWelcomeMail = sendWelcomeMail;
    return this;
};
this.getSendWelcomeMail = function() {
    return this.sendWelcomeMail;
};
var email = "";
this.setEmail = function(email) { 
    this.email = email;
    return this;
};
this.getEmail = function() {
    return this.email;
};
var mobile = "";
this.setMobile = function(mobile) { 
    this.mobile = mobile;
    return this;
};
this.getMobile = function() {
    return this.mobile;
};
var firstName = "";
this.setFirstName = function(firstName) { 
    this.firstName = firstName;
    return this;
};
this.getFirstName = function() {
    return this.firstName;
};
var lastName = "";
this.setLastName = function(lastName) { 
    this.lastName = lastName;
    return this;
};
this.getLastName = function() {
    return this.lastName;
};
var locale = "";
this.setLocale = function(locale) { 
    this.locale = locale;
    return this;
};
this.getLocale = function() {
    return this.locale;
};
var forgotPassword = "";
this.setForgotPassword = function(forgotPassword) { 
    this.forgotPassword = forgotPassword;
    return this;
};
this.getForgotPassword = function() {
    return this.forgotPassword;
};
var termsOfService = "";
this.setTermsOfService = function(termsOfService) { 
    this.termsOfService = termsOfService;
    return this;
};
this.getTermsOfService = function() {
    return this.termsOfService;
};
var privacyPolicy = "";
this.setPrivacyPolicy = function(privacyPolicy) { 
    this.privacyPolicy = privacyPolicy;
    return this;
};
this.getPrivacyPolicy = function() {
    return this.privacyPolicy;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setProvisionType(json["provision_type"]);
		this.setSendWelcomeMail(json["send_welcome_mail"]);
		this.setEmail(json["email"]);
		this.setMobile(json["mobile"]);
		this.setFirstName(json["first_name"]);
		this.setLastName(json["last_name"]);
		this.setLocale(json["locale"]);
		this.setForgotPassword(json["forgot_password"]);
		this.setTermsOfService(json["terms_of_service"]);
		this.setPrivacyPolicy(json["privacy_policy"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getProvisionType()) json += '"provision_type"' + ":" + '"' + jsonEscape(this.getProvisionType())  + '",';
		if(this.getSendWelcomeMail()) json += '"send_welcome_mail"' + ":" + '"' + jsonEscape(this.getSendWelcomeMail())  + '",';
		if(this.getEmail()) json += '"email"' + ":" + '"' + jsonEscape(this.getEmail())  + '",';
		if(this.getMobile()) json += '"mobile"' + ":" + '"' + jsonEscape(this.getMobile())  + '",';
		if(this.getFirstName()) json += '"first_name"' + ":" + '"' + jsonEscape(this.getFirstName())  + '",';
		if(this.getLastName()) json += '"last_name"' + ":" + '"' + jsonEscape(this.getLastName())  + '",';
		if(this.getLocale()) json += '"locale"' + ":" + '"' + jsonEscape(this.getLocale())  + '",';
		if(this.getForgotPassword()) json += '"forgot_password"' + ":" + '"' + jsonEscape(this.getForgotPassword())  + '",';
		if(this.getTermsOfService()) json += '"terms_of_service"' + ":" + '"' + jsonEscape(this.getTermsOfService())  + '",';
		if(this.getPrivacyPolicy()) json += '"privacy_policy"' + ":" + '"' + jsonEscape(this.getPrivacyPolicy())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AuthDomainSignup.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.provisionType && !Validator.INTEGER.test(this.provisionType)) { throw new ValidationError(_formprefix + "provision_type", ValidationError.PATTERN_FAILED);}
if(this.sendWelcomeMail && !Validator.BOOLEAN.test(this.sendWelcomeMail)) { throw new ValidationError(_formprefix + "send_welcome_mail", ValidationError.PATTERN_FAILED);}
if(this.email && !Validator.INTEGER.test(this.email)) { throw new ValidationError(_formprefix + "email", ValidationError.PATTERN_FAILED);}
if(this.mobile && !Validator.INTEGER.test(this.mobile)) { throw new ValidationError(_formprefix + "mobile", ValidationError.PATTERN_FAILED);}
if(this.firstName && !Validator.INTEGER.test(this.firstName)) { throw new ValidationError(_formprefix + "first_name", ValidationError.PATTERN_FAILED);}
if(this.lastName && !Validator.INTEGER.test(this.lastName)) { throw new ValidationError(_formprefix + "last_name", ValidationError.PATTERN_FAILED);}
if(this.locale && !Validator.INTEGER.test(this.locale)) { throw new ValidationError(_formprefix + "locale", ValidationError.PATTERN_FAILED);}
if(this.forgotPassword && !Validator.INTEGER.test(this.forgotPassword)) { throw new ValidationError(_formprefix + "forgot_password", ValidationError.PATTERN_FAILED);}
if(this.termsOfService && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.termsOfService)) { throw new ValidationError(_formprefix + "terms_of_service", ValidationError.PATTERN_FAILED);}
if(this.privacyPolicy && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.privacyPolicy)) { throw new ValidationError(_formprefix + "privacy_policy", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AuthDomainSignup.path = "authdomainsignup";
AuthDomainSignup.newBuilder = function() {
    return new AuthDomainSignup();
};

UniqueId = function() {
    var _formprefix = "";
    
var name = "";
this.setName = function(name) { 
    this.name = name;
    return this;
};
this.getName = function() {
    return this.name;
};
var currentRangeStartingValue = "-1";
this.setCurrentRangeStartingValue = function(currentRangeStartingValue) { 
    this.currentRangeStartingValue = currentRangeStartingValue;
    return this;
};
this.getCurrentRangeStartingValue = function() {
    return this.currentRangeStartingValue;
};
var batchSize = "1000";
this.setBatchSize = function(batchSize) { 
    this.batchSize = batchSize;
    return this;
};
this.getBatchSize = function() {
    return this.batchSize;
};
var reservedUpto = "";
this.setReservedUpto = function(reservedUpto) { 
    this.reservedUpto = reservedUpto;
    return this;
};
this.getReservedUpto = function() {
    return this.reservedUpto;
};
var reservedByIp = "";
this.setReservedByIp = function(reservedByIp) { 
    this.reservedByIp = reservedByIp;
    return this;
};
this.getReservedByIp = function() {
    return this.reservedByIp;
};
var uniqueIdRangeName = "";
this.setUniqueIdRangeName = function(uniqueIdRangeName) { 
    this.uniqueIdRangeName = uniqueIdRangeName;
    return this;
};
this.getUniqueIdRangeName = function() {
    return this.uniqueIdRangeName;
};
var currentRangeMaxValue = "-1";
this.setCurrentRangeMaxValue = function(currentRangeMaxValue) { 
    this.currentRangeMaxValue = currentRangeMaxValue;
    return this;
};
this.getCurrentRangeMaxValue = function() {
    return this.currentRangeMaxValue;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setName(json["name"]);
		this.setCurrentRangeStartingValue(json["current_range_starting_value"]);
		this.setBatchSize(json["batch_size"]);
		this.setReservedUpto(json["reserved_upto"]);
		this.setReservedByIp(json["reserved_by_ip"]);
		this.setUniqueIdRangeName(json["unique_id_range_name"]);
		this.setCurrentRangeMaxValue(json["current_range_max_value"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getName()) json += '"name"' + ":" + '"' + jsonEscape(this.getName())  + '",';
		if(this.getCurrentRangeStartingValue()) json += '"current_range_starting_value"' + ":" + '"' + jsonEscape(this.getCurrentRangeStartingValue())  + '",';
		if(this.getBatchSize()) json += '"batch_size"' + ":" + '"' + jsonEscape(this.getBatchSize())  + '",';
		if(this.getReservedUpto()) json += '"reserved_upto"' + ":" + '"' + jsonEscape(this.getReservedUpto())  + '",';
		if(this.getReservedByIp()) json += '"reserved_by_ip"' + ":" + '"' + jsonEscape(this.getReservedByIp())  + '",';
		if(this.getUniqueIdRangeName()) json += '"unique_id_range_name"' + ":" + '"' + jsonEscape(this.getUniqueIdRangeName())  + '",';
		if(this.getCurrentRangeMaxValue()) json += '"current_range_max_value"' + ":" + '"' + jsonEscape(this.getCurrentRangeMaxValue())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UniqueId.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.name && !(/^([A-Za-z0-9_.\-]+)$/).test(this.name)) { throw new ValidationError(_formprefix + "name", ValidationError.PATTERN_FAILED);}
if(this.currentRangeStartingValue && !Validator.INTEGER.test(this.currentRangeStartingValue)) { throw new ValidationError(_formprefix + "current_range_starting_value", ValidationError.PATTERN_FAILED);}
if(this.batchSize && !Validator.INTEGER.test(this.batchSize)) { throw new ValidationError(_formprefix + "batch_size", ValidationError.PATTERN_FAILED);}
if(this.reservedUpto && !Validator.INTEGER.test(this.reservedUpto)) { throw new ValidationError(_formprefix + "reserved_upto", ValidationError.PATTERN_FAILED);}
if(this.reservedByIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.reservedByIp)) { throw new ValidationError(_formprefix + "reserved_by_ip", ValidationError.PATTERN_FAILED);}
if(this.currentRangeMaxValue && !Validator.INTEGER.test(this.currentRangeMaxValue)) { throw new ValidationError(_formprefix + "current_range_max_value", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UniqueId.path = "uniqueid";
UniqueId.newBuilder = function() {
    return new UniqueId();
};

YubikeyRegistrationData = function() {
    var _formprefix = "";
    
var yubikeyId = "";
this.setYubikeyId = function(yubikeyId) { 
    this.yubikeyId = yubikeyId;
    return this;
};
this.getYubikeyId = function() {
    return this.yubikeyId;
};
var clientData = "";
this.setClientData = function(clientData) { 
    this.clientData = clientData;
    return this;
};
this.getClientData = function() {
    return this.clientData;
};
var publicKey = "";
this.setPublicKey = function(publicKey) { 
    this.publicKey = publicKey;
    return this;
};
this.getPublicKey = function() {
    return this.publicKey;
};
var keyhandle = "";
this.setKeyhandle = function(keyhandle) { 
    this.keyhandle = keyhandle;
    return this;
};
this.getKeyhandle = function() {
    return this.keyhandle;
};
var counter = "-1";
this.setCounter = function(counter) { 
    this.counter = counter;
    return this;
};
this.getCounter = function() {
    return this.counter;
};
var transports = "";
this.setTransports = function(transports) { 
    this.transports = transports;
    return this;
};
this.getTransports = function() {
    return this.transports;
};
var signatureAlgorithm = "-1";
this.setSignatureAlgorithm = function(signatureAlgorithm) { 
    this.signatureAlgorithm = signatureAlgorithm;
    return this;
};
this.getSignatureAlgorithm = function() {
    return this.signatureAlgorithm;
};
var isPrimary = "false";
this.setIsPrimary = function(isPrimary) { 
    this.isPrimary = isPrimary;
    return this;
};
this.getIsPrimary = function() {
    return this.isPrimary;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var keyType = "0";
this.setKeyType = function(keyType) { 
    this.keyType = keyType;
    return this;
};
this.getKeyType = function() {
    return this.keyType;
};
var aaguid = "";
this.setAaguid = function(aaguid) { 
    this.aaguid = aaguid;
    return this;
};
this.getAaguid = function() {
    return this.aaguid;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setYubikeyId(json["yubikey_id"]);
		this.setClientData(json["client_data"]);
		this.setPublicKey(json["public_key"]);
		this.setKeyhandle(json["keyhandle"]);
		this.setCounter(json["counter"]);
		this.setTransports(json["transports"]);
		this.setSignatureAlgorithm(json["signature_algorithm"]);
		this.setIsPrimary(json["is_primary"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setKeyType(json["key_type"]);
		this.setAaguid(json["aaguid"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getYubikeyId()) json += '"yubikey_id"' + ":" + '"' + jsonEscape(this.getYubikeyId())  + '",';
		if(this.getClientData()) json += '"client_data"' + ":" + '"' + jsonEscape(this.getClientData())  + '",';
		if(this.getPublicKey()) json += '"public_key"' + ":" + '"' + jsonEscape(this.getPublicKey())  + '",';
		if(this.getKeyhandle()) json += '"keyhandle"' + ":" + '"' + jsonEscape(this.getKeyhandle())  + '",';
		if(this.getCounter()) json += '"counter"' + ":" + '"' + jsonEscape(this.getCounter())  + '",';
		if(this.getTransports()) json += '"transports"' + ":" + '"' + jsonEscape(this.getTransports())  + '",';
		if(this.getSignatureAlgorithm()) json += '"signature_algorithm"' + ":" + '"' + jsonEscape(this.getSignatureAlgorithm())  + '",';
		if(this.getIsPrimary()) json += '"is_primary"' + ":" + '"' + jsonEscape(this.getIsPrimary())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getKeyType()) json += '"key_type"' + ":" + '"' + jsonEscape(this.getKeyType())  + '",';
		if(this.getAaguid()) json += '"aaguid"' + ":" + '"' + jsonEscape(this.getAaguid())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(YubikeyRegistrationData.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.yubikeyId && !(/xss:throwerror/).test(this.yubikeyId)) { throw new ValidationError(_formprefix + "yubikey_id", ValidationError.PATTERN_FAILED);}
if(this.counter && !Validator.INTEGER.test(this.counter)) { throw new ValidationError(_formprefix + "counter", ValidationError.PATTERN_FAILED);}
if(this.signatureAlgorithm && !Validator.INTEGER.test(this.signatureAlgorithm)) { throw new ValidationError(_formprefix + "signature_algorithm", ValidationError.PATTERN_FAILED);}
if(this.isPrimary && !Validator.BOOLEAN.test(this.isPrimary)) { throw new ValidationError(_formprefix + "is_primary", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
YubikeyRegistrationData.path = "yubikeyregistrationdata";
YubikeyRegistrationData.newBuilder = function() {
    return new YubikeyRegistrationData();
};

AppTemplate = function() {
    var _formprefix = "";
    
var templateName = "";
this.setTemplateName = function(templateName) { 
    this.templateName = templateName;
    return this;
};
this.getTemplateName = function() {
    return this.templateName;
};
var templateType = "";
this.setTemplateType = function(templateType) { 
    this.templateType = templateType;
    return this;
};
this.getTemplateType = function() {
    return this.templateType;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var template = "";
this.setTemplate = function(template) { 
    this.template = template;
    return this;
};
this.getTemplate = function() {
    return this.template;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var bannertemplateprops = undefined;
this.setBannertemplateprops = function(bannertemplateprops) { 
    this.bannertemplateprops = bannertemplateprops;
    return this;
};
this.getBannertemplateprops = function() {
    return this.bannertemplateprops;
};
var mailtemplateprops = undefined;
this.setMailtemplateprops = function(mailtemplateprops) { 
    this.mailtemplateprops = mailtemplateprops;
    return this;
};
this.getMailtemplateprops = function() {
    return this.mailtemplateprops;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTemplateName(json["template_name"]);
		this.setTemplateType(json["template_type"]);
		this.setDescription(json["description"]);
		this.setTemplate(json["template"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setBannertemplateprops(URI.getResource(json["bannerTemplateProps"],"bannertemplateprops"));
		this.setMailtemplateprops(URI.getResource(json["mailTemplateProps"],"mailtemplateprops"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTemplateName()) json += '"template_name"' + ":" + '"' + jsonEscape(this.getTemplateName())  + '",';
		if(this.getTemplateType()) json += '"template_type"' + ":" + '"' + jsonEscape(this.getTemplateType())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getTemplate()) json += '"template"' + ":" + '"' + jsonEscape(this.getTemplate())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getBannertemplateprops()) json += '"bannerTemplateProps"' + ":" + this.getBannertemplateprops().toJSON()  + ',';
		if(this.getMailtemplateprops()) json += '"mailTemplateProps"' + ":" + this.getMailtemplateprops().toJSON()  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.templateType && !Validator.INTEGER.test(this.templateType)) { throw new ValidationError(_formprefix + "template_type", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.template && !(/dontdisturb/).test(this.template)) { throw new ValidationError(_formprefix + "template", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.bannertemplateprops) { this.bannertemplateprops.validate(); }
if(this.mailtemplateprops) { this.mailtemplateprops.validate(); }

	return this;
    }
}
AppTemplate.path = "apptemplate";
AppTemplate.newBuilder = function() {
    return new AppTemplate();
};

UserAccountsProperties = function() {
    var _formprefix = "";
    
var lastLoginTime = "";
this.setLastLoginTime = function(lastLoginTime) { 
    this.lastLoginTime = lastLoginTime;
    return this;
};
this.getLastLoginTime = function() {
    return this.lastLoginTime;
};
var passwordStrength = "";
this.setPasswordStrength = function(passwordStrength) { 
    this.passwordStrength = passwordStrength;
    return this;
};
this.getPasswordStrength = function() {
    return this.passwordStrength;
};
var lastLoginCountry = "";
this.setLastLoginCountry = function(lastLoginCountry) { 
    this.lastLoginCountry = lastLoginCountry;
    return this;
};
this.getLastLoginCountry = function() {
    return this.lastLoginCountry;
};
var lastPasswordVerifiedTime = "";
this.setLastPasswordVerifiedTime = function(lastPasswordVerifiedTime) { 
    this.lastPasswordVerifiedTime = lastPasswordVerifiedTime;
    return this;
};
this.getLastPasswordVerifiedTime = function() {
    return this.lastPasswordVerifiedTime;
};
var lastApiAccessTime = "";
this.setLastApiAccessTime = function(lastApiAccessTime) { 
    this.lastApiAccessTime = lastApiAccessTime;
    return this;
};
this.getLastApiAccessTime = function() {
    return this.lastApiAccessTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLastLoginTime(json["last_login_time"]);
		this.setPasswordStrength(json["password_strength"]);
		this.setLastLoginCountry(json["last_login_country"]);
		this.setLastPasswordVerifiedTime(json["last_password_verified_time"]);
		this.setLastApiAccessTime(json["last_api_access_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLastLoginTime()) json += '"last_login_time"' + ":" + '"' + jsonEscape(this.getLastLoginTime())  + '",';
		if(this.getPasswordStrength()) json += '"password_strength"' + ":" + '"' + jsonEscape(this.getPasswordStrength())  + '",';
		if(this.getLastLoginCountry()) json += '"last_login_country"' + ":" + '"' + jsonEscape(this.getLastLoginCountry())  + '",';
		if(this.getLastPasswordVerifiedTime()) json += '"last_password_verified_time"' + ":" + '"' + jsonEscape(this.getLastPasswordVerifiedTime())  + '",';
		if(this.getLastApiAccessTime()) json += '"last_api_access_time"' + ":" + '"' + jsonEscape(this.getLastApiAccessTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserAccountsProperties.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.lastLoginTime && !Validator.INTEGER.test(this.lastLoginTime)) { throw new ValidationError(_formprefix + "last_login_time", ValidationError.PATTERN_FAILED);}
if(this.passwordStrength && !Validator.INTEGER.test(this.passwordStrength)) { throw new ValidationError(_formprefix + "password_strength", ValidationError.PATTERN_FAILED);}
if(this.lastLoginCountry && !(/^[a-zA-Z0-9]{2,5}$/).test(this.lastLoginCountry)) { throw new ValidationError(_formprefix + "last_login_country", ValidationError.PATTERN_FAILED);}
if(this.lastPasswordVerifiedTime && !Validator.INTEGER.test(this.lastPasswordVerifiedTime)) { throw new ValidationError(_formprefix + "last_password_verified_time", ValidationError.PATTERN_FAILED);}
if(this.lastApiAccessTime && !Validator.INTEGER.test(this.lastApiAccessTime)) { throw new ValidationError(_formprefix + "last_api_access_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserAccountsProperties.path = "useraccountsproperties";
UserAccountsProperties.newBuilder = function() {
    return new UserAccountsProperties();
};

UserWhiteListedClient = function() {
    var _formprefix = "";
    
var isWhitelisted = "0";
this.setIsWhitelisted = function(isWhitelisted) { 
    this.isWhitelisted = isWhitelisted;
    return this;
};
this.getIsWhitelisted = function() {
    return this.isWhitelisted;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setIsWhitelisted(json["is_whitelisted"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getIsWhitelisted()) json += '"is_whitelisted"' + ":" + '"' + jsonEscape(this.getIsWhitelisted())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserWhiteListedClient.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.isWhitelisted && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.isWhitelisted)) { throw new ValidationError(_formprefix + "is_whitelisted", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserWhiteListedClient.path = "userwhitelistedclient";
UserWhiteListedClient.newBuilder = function() {
    return new UserWhiteListedClient();
};

Rebrand = function() {
    var _formprefix = "";
    
var rebrandAttributeKey = "";
this.setRebrandAttributeKey = function(rebrandAttributeKey) { 
    this.rebrandAttributeKey = rebrandAttributeKey;
    return this;
};
this.getRebrandAttributeKey = function() {
    return this.rebrandAttributeKey;
};
var rebrandAttributeValue = "";
this.setRebrandAttributeValue = function(rebrandAttributeValue) { 
    this.rebrandAttributeValue = rebrandAttributeValue;
    return this;
};
this.getRebrandAttributeValue = function() {
    return this.rebrandAttributeValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRebrandAttributeKey(json["rebrand_attribute_key"]);
		this.setRebrandAttributeValue(json["rebrand_attribute_value"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRebrandAttributeKey()) json += '"rebrand_attribute_key"' + ":" + '"' + jsonEscape(this.getRebrandAttributeKey())  + '",';
		if(this.getRebrandAttributeValue()) json += '"rebrand_attribute_value"' + ":" + '"' + jsonEscape(this.getRebrandAttributeValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Rebrand.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.rebrandAttributeKey && !(/^([A-Za-z0-9_.\-]+)$/).test(this.rebrandAttributeKey)) { throw new ValidationError(_formprefix + "rebrand_attribute_key", ValidationError.PATTERN_FAILED);}
if(this.rebrandAttributeValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.rebrandAttributeValue)) { throw new ValidationError(_formprefix + "rebrand_attribute_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Rebrand.path = "rebrand";
Rebrand.newBuilder = function() {
    return new Rebrand();
};

UserRestrictedScope = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var approvedZuid = "";
this.setApprovedZuid = function(approvedZuid) { 
    this.approvedZuid = approvedZuid;
    return this;
};
this.getApprovedZuid = function() {
    return this.approvedZuid;
};
var allowedOperations = "";
this.setAllowedOperations = function(allowedOperations) { 
    this.allowedOperations = allowedOperations;
    return this;
};
this.getAllowedOperations = function() {
    return this.allowedOperations;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setApprovedZuid(json["approved_zuid"]);
		this.setAllowedOperations(json["allowed_operations"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getApprovedZuid()) json += '"approved_zuid"' + ":" + '"' + jsonEscape(this.getApprovedZuid())  + '",';
		if(this.getAllowedOperations()) json += '"allowed_operations"' + ":" + '"' + jsonEscape(this.getAllowedOperations())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserRestrictedScope.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.approvedZuid && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.approvedZuid)) { throw new ValidationError(_formprefix + "approved_zuid", ValidationError.PATTERN_FAILED);}
if(this.allowedOperations && !Validator.INTEGER.test(this.allowedOperations)) { throw new ValidationError(_formprefix + "allowed_operations", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserRestrictedScope.path = "userrestrictedscope";
UserRestrictedScope.newBuilder = function() {
    return new UserRestrictedScope();
};

SAMLSpAppInfo = function() {
    var _formprefix = "";
    
var idpIssuer = "";
this.setIdpIssuer = function(idpIssuer) { 
    this.idpIssuer = idpIssuer;
    return this;
};
this.getIdpIssuer = function() {
    return this.idpIssuer;
};
var idpPrivateKey = "";
this.setIdpPrivateKey = function(idpPrivateKey) { 
    this.idpPrivateKey = idpPrivateKey;
    return this;
};
this.getIdpPrivateKey = function() {
    return this.idpPrivateKey;
};
var idpPublicKey = "";
this.setIdpPublicKey = function(idpPublicKey) { 
    this.idpPublicKey = idpPublicKey;
    return this;
};
this.getIdpPublicKey = function() {
    return this.idpPublicKey;
};
var certificateExpiryTime = "";
this.setCertificateExpiryTime = function(certificateExpiryTime) { 
    this.certificateExpiryTime = certificateExpiryTime;
    return this;
};
this.getCertificateExpiryTime = function() {
    return this.certificateExpiryTime;
};
var acsUrl = "";
this.setAcsUrl = function(acsUrl) { 
    this.acsUrl = acsUrl;
    return this;
};
this.getAcsUrl = function() {
    return this.acsUrl;
};
var defaultRelayState = "";
this.setDefaultRelayState = function(defaultRelayState) { 
    this.defaultRelayState = defaultRelayState;
    return this;
};
this.getDefaultRelayState = function() {
    return this.defaultRelayState;
};
var idpInitiated = "true";
this.setIdpInitiated = function(idpInitiated) { 
    this.idpInitiated = idpInitiated;
    return this;
};
this.getIdpInitiated = function() {
    return this.idpInitiated;
};
var signInUrl = "";
this.setSignInUrl = function(signInUrl) { 
    this.signInUrl = signInUrl;
    return this;
};
this.getSignInUrl = function() {
    return this.signInUrl;
};
var enableLogout = "false";
this.setEnableLogout = function(enableLogout) { 
    this.enableLogout = enableLogout;
    return this;
};
this.getEnableLogout = function() {
    return this.enableLogout;
};
var logoutUrl = "";
this.setLogoutUrl = function(logoutUrl) { 
    this.logoutUrl = logoutUrl;
    return this;
};
this.getLogoutUrl = function() {
    return this.logoutUrl;
};
var spIssuer = "";
this.setSpIssuer = function(spIssuer) { 
    this.spIssuer = spIssuer;
    return this;
};
this.getSpIssuer = function() {
    return this.spIssuer;
};
var nameidFormat = "1";
this.setNameidFormat = function(nameidFormat) { 
    this.nameidFormat = nameidFormat;
    return this;
};
this.getNameidFormat = function() {
    return this.nameidFormat;
};
var nameidValue = "";
this.setNameidValue = function(nameidValue) { 
    this.nameidValue = nameidValue;
    return this;
};
this.getNameidValue = function() {
    return this.nameidValue;
};
var samlResponseFormat = "1";
this.setSamlResponseFormat = function(samlResponseFormat) { 
    this.samlResponseFormat = samlResponseFormat;
    return this;
};
this.getSamlResponseFormat = function() {
    return this.samlResponseFormat;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setIdpIssuer(json["idp_issuer"]);
		this.setIdpPrivateKey(json["idp_private_key"]);
		this.setIdpPublicKey(json["idp_public_key"]);
		this.setCertificateExpiryTime(json["certificate_expiry_time"]);
		this.setAcsUrl(json["acs_url"]);
		this.setDefaultRelayState(json["default_relay_state"]);
		this.setIdpInitiated(json["idp_initiated"]);
		this.setSignInUrl(json["sign_in_url"]);
		this.setEnableLogout(json["enable_logout"]);
		this.setLogoutUrl(json["logout_url"]);
		this.setSpIssuer(json["sp_issuer"]);
		this.setNameidFormat(json["nameid_format"]);
		this.setNameidValue(json["nameid_value"]);
		this.setSamlResponseFormat(json["saml_response_format"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getIdpIssuer()) json += '"idp_issuer"' + ":" + '"' + jsonEscape(this.getIdpIssuer())  + '",';
		if(this.getIdpPrivateKey()) json += '"idp_private_key"' + ":" + '"' + jsonEscape(this.getIdpPrivateKey())  + '",';
		if(this.getIdpPublicKey()) json += '"idp_public_key"' + ":" + '"' + jsonEscape(this.getIdpPublicKey())  + '",';
		if(this.getCertificateExpiryTime()) json += '"certificate_expiry_time"' + ":" + '"' + jsonEscape(this.getCertificateExpiryTime())  + '",';
		if(this.getAcsUrl()) json += '"acs_url"' + ":" + '"' + jsonEscape(this.getAcsUrl())  + '",';
		if(this.getDefaultRelayState()) json += '"default_relay_state"' + ":" + '"' + jsonEscape(this.getDefaultRelayState())  + '",';
		if(this.getIdpInitiated()) json += '"idp_initiated"' + ":" + '"' + jsonEscape(this.getIdpInitiated())  + '",';
		if(this.getSignInUrl()) json += '"sign_in_url"' + ":" + '"' + jsonEscape(this.getSignInUrl())  + '",';
		if(this.getEnableLogout()) json += '"enable_logout"' + ":" + '"' + jsonEscape(this.getEnableLogout())  + '",';
		if(this.getLogoutUrl()) json += '"logout_url"' + ":" + '"' + jsonEscape(this.getLogoutUrl())  + '",';
		if(this.getSpIssuer()) json += '"sp_issuer"' + ":" + '"' + jsonEscape(this.getSpIssuer())  + '",';
		if(this.getNameidFormat()) json += '"nameid_format"' + ":" + '"' + jsonEscape(this.getNameidFormat())  + '",';
		if(this.getNameidValue()) json += '"nameid_value"' + ":" + '"' + jsonEscape(this.getNameidValue())  + '",';
		if(this.getSamlResponseFormat()) json += '"saml_response_format"' + ":" + '"' + jsonEscape(this.getSamlResponseFormat())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SAMLSpAppInfo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.idpIssuer && !(/xss:throwerror/).test(this.idpIssuer)) { throw new ValidationError(_formprefix + "idp_issuer", ValidationError.PATTERN_FAILED);}
if(this.idpPrivateKey && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.idpPrivateKey)) { throw new ValidationError(_formprefix + "idp_private_key", ValidationError.PATTERN_FAILED);}
if(this.idpPublicKey && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.idpPublicKey)) { throw new ValidationError(_formprefix + "idp_public_key", ValidationError.PATTERN_FAILED);}
if(this.certificateExpiryTime && !Validator.INTEGER.test(this.certificateExpiryTime)) { throw new ValidationError(_formprefix + "certificate_expiry_time", ValidationError.PATTERN_FAILED);}
if(this.acsUrl && !(/xss:throwerror/).test(this.acsUrl)) { throw new ValidationError(_formprefix + "acs_url", ValidationError.PATTERN_FAILED);}
if(this.defaultRelayState && !(/xss:throwerror/).test(this.defaultRelayState)) { throw new ValidationError(_formprefix + "default_relay_state", ValidationError.PATTERN_FAILED);}
if(this.idpInitiated && !Validator.BOOLEAN.test(this.idpInitiated)) { throw new ValidationError(_formprefix + "idp_initiated", ValidationError.PATTERN_FAILED);}
if(this.signInUrl && !(/xss:throwerror/).test(this.signInUrl)) { throw new ValidationError(_formprefix + "sign_in_url", ValidationError.PATTERN_FAILED);}
if(this.enableLogout && !Validator.BOOLEAN.test(this.enableLogout)) { throw new ValidationError(_formprefix + "enable_logout", ValidationError.PATTERN_FAILED);}
if(this.logoutUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.logoutUrl)) { throw new ValidationError(_formprefix + "logout_url", ValidationError.PATTERN_FAILED);}
if(this.spIssuer && !(/xss:throwerror/).test(this.spIssuer)) { throw new ValidationError(_formprefix + "sp_issuer", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SAMLSpAppInfo.path = "samlspappinfo";
SAMLSpAppInfo.newBuilder = function() {
    return new SAMLSpAppInfo();
};

Saml = function() {
    var _formprefix = "";
    
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var saml = "0";
this.setSaml = function(saml) { 
    this.saml = saml;
    return this;
};
this.getSaml = function() {
    return this.saml;
};
var samlLoginUrl = "";
this.setSamlLoginUrl = function(samlLoginUrl) { 
    this.samlLoginUrl = samlLoginUrl;
    return this;
};
this.getSamlLoginUrl = function() {
    return this.samlLoginUrl;
};
var loginBinding = "0";
this.setLoginBinding = function(loginBinding) { 
    this.loginBinding = loginBinding;
    return this;
};
this.getLoginBinding = function() {
    return this.loginBinding;
};
var samlLogoutUrl = "";
this.setSamlLogoutUrl = function(samlLogoutUrl) { 
    this.samlLogoutUrl = samlLogoutUrl;
    return this;
};
this.getSamlLogoutUrl = function() {
    return this.samlLogoutUrl;
};
var logoutBinding = "1";
this.setLogoutBinding = function(logoutBinding) { 
    this.logoutBinding = logoutBinding;
    return this;
};
this.getLogoutBinding = function() {
    return this.logoutBinding;
};
var samlPasswordUrl = "";
this.setSamlPasswordUrl = function(samlPasswordUrl) { 
    this.samlPasswordUrl = samlPasswordUrl;
    return this;
};
this.getSamlPasswordUrl = function() {
    return this.samlPasswordUrl;
};
var publicKey = "";
this.setPublicKey = function(publicKey) { 
    this.publicKey = publicKey;
    return this;
};
this.getPublicKey = function() {
    return this.publicKey;
};
var algorithm = "";
this.setAlgorithm = function(algorithm) { 
    this.algorithm = algorithm;
    return this;
};
this.getAlgorithm = function() {
    return this.algorithm;
};
var certType = "";
this.setCertType = function(certType) { 
    this.certType = certType;
    return this;
};
this.getCertType = function() {
    return this.certType;
};
var nameIdentifier = "1";
this.setNameIdentifier = function(nameIdentifier) { 
    this.nameIdentifier = nameIdentifier;
    return this;
};
this.getNameIdentifier = function() {
    return this.nameIdentifier;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var isSamlLogoutEnabled = "false";
this.setIsSamlLogoutEnabled = function(isSamlLogoutEnabled) { 
    this.isSamlLogoutEnabled = isSamlLogoutEnabled;
    return this;
};
this.getIsSamlLogoutEnabled = function() {
    return this.isSamlLogoutEnabled;
};
var isSamlEnabled = "true";
this.setIsSamlEnabled = function(isSamlEnabled) { 
    this.isSamlEnabled = isSamlEnabled;
    return this;
};
this.getIsSamlEnabled = function() {
    return this.isSamlEnabled;
};
var isDomainless = "false";
this.setIsDomainless = function(isDomainless) { 
    this.isDomainless = isDomainless;
    return this;
};
this.getIsDomainless = function() {
    return this.isDomainless;
};
var samlService = "";
this.setSamlService = function(samlService) { 
    this.samlService = samlService;
    return this;
};
this.getSamlService = function() {
    return this.samlService;
};
var isSignatureEnabled = "false";
this.setIsSignatureEnabled = function(isSignatureEnabled) { 
    this.isSignatureEnabled = isSignatureEnabled;
    return this;
};
this.getIsSignatureEnabled = function() {
    return this.isSignatureEnabled;
};
var spCertificate = "";
this.setSpCertificate = function(spCertificate) { 
    this.spCertificate = spCertificate;
    return this;
};
this.getSpCertificate = function() {
    return this.spCertificate;
};
var spPrivateKey = "";
this.setSpPrivateKey = function(spPrivateKey) { 
    this.spPrivateKey = spPrivateKey;
    return this;
};
this.getSpPrivateKey = function() {
    return this.spPrivateKey;
};
var spCertificateExpiryTime = "";
this.setSpCertificateExpiryTime = function(spCertificateExpiryTime) { 
    this.spCertificateExpiryTime = spCertificateExpiryTime;
    return this;
};
this.getSpCertificateExpiryTime = function() {
    return this.spCertificateExpiryTime;
};
var issuer = "";
this.setIssuer = function(issuer) { 
    this.issuer = issuer;
    return this;
};
this.getIssuer = function() {
    return this.issuer;
};
var jitAttributes = "";
this.setJitAttributes = function(jitAttributes) { 
    this.jitAttributes = jitAttributes;
    return this;
};
this.getJitAttributes = function() {
    return this.jitAttributes;
};
var isNewSamlConfig = "0";
this.setIsNewSamlConfig = function(isNewSamlConfig) { 
    this.isNewSamlConfig = isNewSamlConfig;
    return this;
};
this.getIsNewSamlConfig = function() {
    return this.isNewSamlConfig;
};
var samlparams = undefined;
this.setSamlparamss = function(samlparams) { 
    this.samlparams = samlparams;
    return this;
};
this.getSamlparamss = function() {
    return this.samlparams;
};
this.addSamlparams = function(samlparams) { 
 if(!this.samlparams) this.samlparams = new Array(); 
  this.samlparams.push(samlparams); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDisplayName(json["display_name"]);
		this.setSaml(json["saml"]);
		this.setSamlLoginUrl(json["saml_login_url"]);
		this.setLoginBinding(json["login_binding"]);
		this.setSamlLogoutUrl(json["saml_logout_url"]);
		this.setLogoutBinding(json["logout_binding"]);
		this.setSamlPasswordUrl(json["saml_password_url"]);
		this.setPublicKey(json["public_key"]);
		this.setAlgorithm(json["algorithm"]);
		this.setCertType(json["cert_type"]);
		this.setNameIdentifier(json["name_identifier"]);
		this.setModifiedTime(json["modified_time"]);
		this.setIsSamlLogoutEnabled(json["is_saml_logout_enabled"]);
		this.setIsSamlEnabled(json["is_saml_enabled"]);
		this.setIsDomainless(json["is_domainless"]);
		this.setSamlService(json["saml_service"]);
		this.setIsSignatureEnabled(json["is_signature_enabled"]);
		this.setSpCertificate(json["sp_certificate"]);
		this.setSpPrivateKey(json["sp_private_key"]);
		this.setSpCertificateExpiryTime(json["sp_certificate_expiry_time"]);
		this.setIssuer(json["issuer"]);
		this.setJitAttributes(json["jit_attributes"]);
		this.setIsNewSamlConfig(json["is_new_saml_config"]);
		this.setSamlparamss(URI.getResourceArray(json["sAMLParams"],"samlparams"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getSaml()) json += '"saml"' + ":" + '"' + jsonEscape(this.getSaml())  + '",';
		if(this.getSamlLoginUrl()) json += '"saml_login_url"' + ":" + '"' + jsonEscape(this.getSamlLoginUrl())  + '",';
		if(this.getLoginBinding()) json += '"login_binding"' + ":" + '"' + jsonEscape(this.getLoginBinding())  + '",';
		if(this.getSamlLogoutUrl()) json += '"saml_logout_url"' + ":" + '"' + jsonEscape(this.getSamlLogoutUrl())  + '",';
		if(this.getLogoutBinding()) json += '"logout_binding"' + ":" + '"' + jsonEscape(this.getLogoutBinding())  + '",';
		if(this.getSamlPasswordUrl()) json += '"saml_password_url"' + ":" + '"' + jsonEscape(this.getSamlPasswordUrl())  + '",';
		if(this.getPublicKey()) json += '"public_key"' + ":" + '"' + jsonEscape(this.getPublicKey())  + '",';
		if(this.getAlgorithm()) json += '"algorithm"' + ":" + '"' + jsonEscape(this.getAlgorithm())  + '",';
		if(this.getCertType()) json += '"cert_type"' + ":" + '"' + jsonEscape(this.getCertType())  + '",';
		if(this.getNameIdentifier()) json += '"name_identifier"' + ":" + '"' + jsonEscape(this.getNameIdentifier())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getIsSamlLogoutEnabled()) json += '"is_saml_logout_enabled"' + ":" + '"' + jsonEscape(this.getIsSamlLogoutEnabled())  + '",';
		if(this.getIsSamlEnabled()) json += '"is_saml_enabled"' + ":" + '"' + jsonEscape(this.getIsSamlEnabled())  + '",';
		if(this.getIsDomainless()) json += '"is_domainless"' + ":" + '"' + jsonEscape(this.getIsDomainless())  + '",';
		if(this.getSamlService()) json += '"saml_service"' + ":" + '"' + jsonEscape(this.getSamlService())  + '",';
		if(this.getIsSignatureEnabled()) json += '"is_signature_enabled"' + ":" + '"' + jsonEscape(this.getIsSignatureEnabled())  + '",';
		if(this.getSpCertificate()) json += '"sp_certificate"' + ":" + '"' + jsonEscape(this.getSpCertificate())  + '",';
		if(this.getSpPrivateKey()) json += '"sp_private_key"' + ":" + '"' + jsonEscape(this.getSpPrivateKey())  + '",';
		if(this.getSpCertificateExpiryTime()) json += '"sp_certificate_expiry_time"' + ":" + '"' + jsonEscape(this.getSpCertificateExpiryTime())  + '",';
		if(this.getIssuer()) json += '"issuer"' + ":" + '"' + jsonEscape(this.getIssuer())  + '",';
		if(this.getJitAttributes()) json += '"jit_attributes"' + ":" + '"' + jsonEscape(this.getJitAttributes())  + '",';
		if(this.getIsNewSamlConfig()) json += '"is_new_saml_config"' + ":" + '"' + jsonEscape(this.getIsNewSamlConfig())  + '",';
		if(this.getSamlparamss()) json += '"sAMLParams"' + ":" + URI.toJSONArray(this.getSamlparamss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Saml.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.samlLoginUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.samlLoginUrl)) { throw new ValidationError(_formprefix + "saml_login_url", ValidationError.PATTERN_FAILED);}
if(this.samlLogoutUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.samlLogoutUrl)) { throw new ValidationError(_formprefix + "saml_logout_url", ValidationError.PATTERN_FAILED);}
if(this.samlPasswordUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.samlPasswordUrl)) { throw new ValidationError(_formprefix + "saml_password_url", ValidationError.PATTERN_FAILED);}
if(this.publicKey && !(/dontdisturb/).test(this.publicKey)) { throw new ValidationError(_formprefix + "public_key", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.isSamlLogoutEnabled && !Validator.BOOLEAN.test(this.isSamlLogoutEnabled)) { throw new ValidationError(_formprefix + "is_saml_logout_enabled", ValidationError.PATTERN_FAILED);}
if(this.isSamlEnabled && !Validator.BOOLEAN.test(this.isSamlEnabled)) { throw new ValidationError(_formprefix + "is_saml_enabled", ValidationError.PATTERN_FAILED);}
if(this.isDomainless && !Validator.BOOLEAN.test(this.isDomainless)) { throw new ValidationError(_formprefix + "is_domainless", ValidationError.PATTERN_FAILED);}
if(this.isSignatureEnabled && !Validator.BOOLEAN.test(this.isSignatureEnabled)) { throw new ValidationError(_formprefix + "is_signature_enabled", ValidationError.PATTERN_FAILED);}
if(this.spCertificate && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.spCertificate)) { throw new ValidationError(_formprefix + "sp_certificate", ValidationError.PATTERN_FAILED);}
if(this.spPrivateKey && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.spPrivateKey)) { throw new ValidationError(_formprefix + "sp_private_key", ValidationError.PATTERN_FAILED);}
if(this.spCertificateExpiryTime && !Validator.INTEGER.test(this.spCertificateExpiryTime)) { throw new ValidationError(_formprefix + "sp_certificate_expiry_time", ValidationError.PATTERN_FAILED);}
if(this.samlparams) { for(i=0; i < this.samlparams.length; i++ ) { this.samlparams[i].validate(); } }

	return this;
    }
}
Saml.path = "saml";
Saml.newBuilder = function() {
    return new Saml();
};

AppAccountDevices = function() {
    var _formprefix = "";
    
var deviceId = "";
this.setDeviceId = function(deviceId) { 
    this.deviceId = deviceId;
    return this;
};
this.getDeviceId = function() {
    return this.deviceId;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var isEnabled = "2";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDeviceId(json["device_id"]);
		this.setDisplayName(json["display_name"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDeviceId()) json += '"device_id"' + ":" + '"' + jsonEscape(this.getDeviceId())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccountDevices.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.deviceId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.deviceId)) { throw new ValidationError(_formprefix + "device_id", ValidationError.PATTERN_FAILED);}
if(this.displayName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.displayName)) { throw new ValidationError(_formprefix + "display_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAccountDevices.path = "appaccountdevices";
AppAccountDevices.newBuilder = function() {
    return new AppAccountDevices();
};

ZAID = function() {
    var _formprefix = "";
    
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var authType = "ZOHO";
this.setAuthType = function(authType) { 
    this.authType = authType;
    return this;
};
this.getAuthType = function() {
    return this.authType;
};
var accountname = undefined;
this.setAccountnames = function(accountname) { 
    this.accountname = accountname;
    return this;
};
this.getAccountnames = function() {
    return this.accountname;
};
this.addAccountname = function(accountname) { 
 if(!this.accountname) this.accountname = new Array(); 
  this.accountname.push(accountname); 
 return this;
};

var zuid = undefined;
this.setZuids = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuids = function() {
    return this.zuid;
};
this.addZuid = function(zuid) { 
 if(!this.zuid) this.zuid = new Array(); 
  this.zuid.push(zuid); 
 return this;
};

var zgid = undefined;
this.setZgids = function(zgid) { 
    this.zgid = zgid;
    return this;
};
this.getZgids = function() {
    return this.zgid;
};
this.addZgid = function(zgid) { 
 if(!this.zgid) this.zgid = new Array(); 
  this.zgid.push(zgid); 
 return this;
};

var zaaid = undefined;
this.setZaaids = function(zaaid) { 
    this.zaaid = zaaid;
    return this;
};
this.getZaaids = function() {
    return this.zaaid;
};
this.addZaaid = function(zaaid) { 
 if(!this.zaaid) this.zaaid = new Array(); 
  this.zaaid.push(zaaid); 
 return this;
};

var parentzaid = undefined;
this.setParentzaid = function(parentzaid) { 
    this.parentzaid = parentzaid;
    return this;
};
this.getParentzaid = function() {
    return this.parentzaid;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZaid(json["zaid"]);
		this.setAuthType(json["auth_type"]);
		this.setAccountnames(URI.getResourceArray(json["accountName"],"accountname"));
		this.setZuids(URI.getResourceArray(json["zUID"],"zuid"));
		this.setZgids(URI.getResourceArray(json["zGID"],"zgid"));
		this.setZaaids(URI.getResourceArray(json["zAAID"],"zaaid"));
		this.setParentzaid(URI.getResource(json["parentZAID"],"parentzaid"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getAuthType()) json += '"auth_type"' + ":" + '"' + jsonEscape(this.getAuthType())  + '",';
		if(this.getAccountnames()) json += '"accountName"' + ":" + URI.toJSONArray(this.getAccountnames())  + ',';
		if(this.getZuids()) json += '"zUID"' + ":" + URI.toJSONArray(this.getZuids())  + ',';
		if(this.getZgids()) json += '"zGID"' + ":" + URI.toJSONArray(this.getZgids())  + ',';
		if(this.getZaaids()) json += '"zAAID"' + ":" + URI.toJSONArray(this.getZaaids())  + ',';
		if(this.getParentzaid()) json += '"parentZAID"' + ":" + this.getParentzaid().toJSON()  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ZAID.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.authType && !(/^([A-Za-z0-9_.\-]+)$/).test(this.authType)) { throw new ValidationError(_formprefix + "auth_type", ValidationError.PATTERN_FAILED);}
if(this.accountname) { for(i=0; i < this.accountname.length; i++ ) { this.accountname[i].validate(); } }
if(this.zuid) { for(i=0; i < this.zuid.length; i++ ) { this.zuid[i].validate(); } }
if(this.zgid) { for(i=0; i < this.zgid.length; i++ ) { this.zgid[i].validate(); } }
if(this.zaaid) { for(i=0; i < this.zaaid.length; i++ ) { this.zaaid[i].validate(); } }
if(this.parentzaid) { this.parentzaid.validate(); }

	return this;
    }
}
ZAID.path = "zaid";
ZAID.newBuilder = function() {
    return new ZAID();
};

ServiceOrgLogo = function() {
    var _formprefix = "";
    
var viewPermission = "";
this.setViewPermission = function(viewPermission) { 
    this.viewPermission = viewPermission;
    return this;
};
this.getViewPermission = function() {
    return this.viewPermission;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setViewPermission(json["view_permission"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getViewPermission()) json += '"view_permission"' + ":" + '"' + jsonEscape(this.getViewPermission())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgLogo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.viewPermission && !Validator.INTEGER.test(this.viewPermission)) { throw new ValidationError(_formprefix + "view_permission", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgLogo.path = "serviceorglogo";
ServiceOrgLogo.newBuilder = function() {
    return new ServiceOrgLogo();
};

SAMLSpUser = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidType = "1";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidType(json["zid_type"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SAMLSpUser.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.zidType && !Validator.INTEGER.test(this.zidType)) { throw new ValidationError(_formprefix + "zid_type", ValidationError.PATTERN_FAILED);}
if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SAMLSpUser.path = "samlspuser";
SAMLSpUser.newBuilder = function() {
    return new SAMLSpUser();
};

Role = function() {
    var _formprefix = "";
    
var zarid = "";
this.setZarid = function(zarid) { 
    this.zarid = zarid;
    return this;
};
this.getZarid = function() {
    return this.zarid;
};
var roleType = "0";
this.setRoleType = function(roleType) { 
    this.roleType = roleType;
    return this;
};
this.getRoleType = function() {
    return this.roleType;
};
var roleName = "";
this.setRoleName = function(roleName) { 
    this.roleName = roleName;
    return this;
};
this.getRoleName = function() {
    return this.roleName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var approleoperations = undefined;
this.setApproleoperationss = function(approleoperations) { 
    this.approleoperations = approleoperations;
    return this;
};
this.getApproleoperationss = function() {
    return this.approleoperations;
};
this.addApproleoperations = function(approleoperations) { 
 if(!this.approleoperations) this.approleoperations = new Array(); 
  this.approleoperations.push(approleoperations); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZarid(json["zarid"]);
		this.setRoleType(json["role_type"]);
		this.setRoleName(json["role_name"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setApproleoperationss(URI.getResourceArray(json["appRoleOperations"],"approleoperations"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZarid()) json += '"zarid"' + ":" + '"' + jsonEscape(this.getZarid())  + '",';
		if(this.getRoleType()) json += '"role_type"' + ":" + '"' + jsonEscape(this.getRoleType())  + '",';
		if(this.getRoleName()) json += '"role_name"' + ":" + '"' + jsonEscape(this.getRoleName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getApproleoperationss()) json += '"appRoleOperations"' + ":" + URI.toJSONArray(this.getApproleoperationss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Role.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zarid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zarid)) { throw new ValidationError(_formprefix + "zarid", ValidationError.PATTERN_FAILED);}
if(this.roleName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.roleName)) { throw new ValidationError(_formprefix + "role_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.approleoperations) { for(i=0; i < this.approleoperations.length; i++ ) { this.approleoperations[i].validate(); } }

	return this;
    }
}
Role.path = "role";
Role.newBuilder = function() {
    return new Role();
};

GroupSyncServices = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var serviceResourceId = "";
this.setServiceResourceId = function(serviceResourceId) { 
    this.serviceResourceId = serviceResourceId;
    return this;
};
this.getServiceResourceId = function() {
    return this.serviceResourceId;
};
var serviceResourceType = "";
this.setServiceResourceType = function(serviceResourceType) { 
    this.serviceResourceType = serviceResourceType;
    return this;
};
this.getServiceResourceType = function() {
    return this.serviceResourceType;
};
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setServiceResourceId(json["service_resource_id"]);
		this.setServiceResourceType(json["service_resource_type"]);
		this.setAppId(json["app_id"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getServiceResourceId()) json += '"service_resource_id"' + ":" + '"' + jsonEscape(this.getServiceResourceId())  + '",';
		if(this.getServiceResourceType()) json += '"service_resource_type"' + ":" + '"' + jsonEscape(this.getServiceResourceType())  + '",';
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(GroupSyncServices.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.serviceResourceId && !Validator.INTEGER.test(this.serviceResourceId)) { throw new ValidationError(_formprefix + "service_resource_id", ValidationError.PATTERN_FAILED);}
if(this.appId && !(/^[a-zA-Z0-9_\-]+$/).test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
GroupSyncServices.path = "groupsyncservices";
GroupSyncServices.newBuilder = function() {
    return new GroupSyncServices();
};

AuthorizedIp = function() {
    var _formprefix = "";
    
var ipid = "";
this.setIpid = function(ipid) { 
    this.ipid = ipid;
    return this;
};
this.getIpid = function() {
    return this.ipid;
};
var name = "";
this.setName = function(name) { 
    this.name = name;
    return this;
};
this.getName = function() {
    return this.name;
};
var fromIp = "";
this.setFromIp = function(fromIp) { 
    this.fromIp = fromIp;
    return this;
};
this.getFromIp = function() {
    return this.fromIp;
};
var toIp = "";
this.setToIp = function(toIp) { 
    this.toIp = toIp;
    return this;
};
this.getToIp = function() {
    return this.toIp;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setIpid(json["ipid"]);
		this.setName(json["name"]);
		this.setFromIp(json["from_ip"]);
		this.setToIp(json["to_ip"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getIpid()) json += '"ipid"' + ":" + '"' + jsonEscape(this.getIpid())  + '",';
		if(this.getName()) json += '"name"' + ":" + '"' + jsonEscape(this.getName())  + '",';
		if(this.getFromIp()) json += '"from_ip"' + ":" + '"' + jsonEscape(this.getFromIp())  + '",';
		if(this.getToIp()) json += '"to_ip"' + ":" + '"' + jsonEscape(this.getToIp())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AuthorizedIp.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.ipid && !Validator.INTEGER.test(this.ipid)) { throw new ValidationError(_formprefix + "ipid", ValidationError.PATTERN_FAILED);}
if(this.fromIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.fromIp)) { throw new ValidationError(_formprefix + "from_ip", ValidationError.PATTERN_FAILED);}
if(this.toIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.toIp)) { throw new ValidationError(_formprefix + "to_ip", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AuthorizedIp.path = "authorizedip";
AuthorizedIp.newBuilder = function() {
    return new AuthorizedIp();
};

PortalAccountMapping = function() {
    var _formprefix = "";
    
var accountId = "";
this.setAccountId = function(accountId) { 
    this.accountId = accountId;
    return this;
};
this.getAccountId = function() {
    return this.accountId;
};
var accountType = "";
this.setAccountType = function(accountType) { 
    this.accountType = accountType;
    return this;
};
this.getAccountType = function() {
    return this.accountType;
};
var accountName = "";
this.setAccountName = function(accountName) { 
    this.accountName = accountName;
    return this;
};
this.getAccountName = function() {
    return this.accountName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAccountId(json["account_id"]);
		this.setAccountType(json["account_type"]);
		this.setAccountName(json["account_name"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAccountId()) json += '"account_id"' + ":" + '"' + jsonEscape(this.getAccountId())  + '",';
		if(this.getAccountType()) json += '"account_type"' + ":" + '"' + jsonEscape(this.getAccountType())  + '",';
		if(this.getAccountName()) json += '"account_name"' + ":" + '"' + jsonEscape(this.getAccountName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(PortalAccountMapping.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.accountId && !Validator.INTEGER.test(this.accountId)) { throw new ValidationError(_formprefix + "account_id", ValidationError.PATTERN_FAILED);}
if(this.accountType && !Validator.INTEGER.test(this.accountType)) { throw new ValidationError(_formprefix + "account_type", ValidationError.PATTERN_FAILED);}
if(this.accountName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.accountName)) { throw new ValidationError(_formprefix + "account_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
PortalAccountMapping.path = "portalaccountmapping";
PortalAccountMapping.newBuilder = function() {
    return new PortalAccountMapping();
};

Domain = function() {
    var _formprefix = "";
    
var domain = "";
this.setDomain = function(domain) { 
    this.domain = domain;
    return this;
};
this.getDomain = function() {
    return this.domain;
};
var isPrimary = "0";
this.setIsPrimary = function(isPrimary) { 
    this.isPrimary = isPrimary;
    return this;
};
this.getIsPrimary = function() {
    return this.isPrimary;
};
var isRegisteredByZoho = "0";
this.setIsRegisteredByZoho = function(isRegisteredByZoho) { 
    this.isRegisteredByZoho = isRegisteredByZoho;
    return this;
};
this.getIsRegisteredByZoho = function() {
    return this.isRegisteredByZoho;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var verificationCode = "";
this.setVerificationCode = function(verificationCode) { 
    this.verificationCode = verificationCode;
    return this;
};
this.getVerificationCode = function() {
    return this.verificationCode;
};
var verificationMode = "";
this.setVerificationMode = function(verificationMode) { 
    this.verificationMode = verificationMode;
    return this;
};
this.getVerificationMode = function() {
    return this.verificationMode;
};
var isVerified = "false";
this.setIsVerified = function(isVerified) { 
    this.isVerified = isVerified;
    return this;
};
this.getIsVerified = function() {
    return this.isVerified;
};
var verificationDate = "";
this.setVerificationDate = function(verificationDate) { 
    this.verificationDate = verificationDate;
    return this;
};
this.getVerificationDate = function() {
    return this.verificationDate;
};
var verifiedBy = "";
this.setVerifiedBy = function(verifiedBy) { 
    this.verifiedBy = verifiedBy;
    return this;
};
this.getVerifiedBy = function() {
    return this.verifiedBy;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var parentDomain = "";
this.setParentDomain = function(parentDomain) { 
    this.parentDomain = parentDomain;
    return this;
};
this.getParentDomain = function() {
    return this.parentDomain;
};
var expiryDate = "";
this.setExpiryDate = function(expiryDate) { 
    this.expiryDate = expiryDate;
    return this;
};
this.getExpiryDate = function() {
    return this.expiryDate;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDomain(json["domain"]);
		this.setIsPrimary(json["is_primary"]);
		this.setIsRegisteredByZoho(json["is_registered_by_zoho"]);
		this.setCreatedTime(json["created_time"]);
		this.setVerificationCode(json["verification_code"]);
		this.setVerificationMode(json["verification_mode"]);
		this.setIsVerified(json["is_verified"]);
		this.setVerificationDate(json["verification_date"]);
		this.setVerifiedBy(json["verified_by"]);
		this.setModifiedTime(json["modified_time"]);
		this.setParentDomain(json["parent_domain"]);
		this.setExpiryDate(json["expiry_date"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDomain()) json += '"domain"' + ":" + '"' + jsonEscape(this.getDomain())  + '",';
		if(this.getIsPrimary()) json += '"is_primary"' + ":" + '"' + jsonEscape(this.getIsPrimary())  + '",';
		if(this.getIsRegisteredByZoho()) json += '"is_registered_by_zoho"' + ":" + '"' + jsonEscape(this.getIsRegisteredByZoho())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getVerificationCode()) json += '"verification_code"' + ":" + '"' + jsonEscape(this.getVerificationCode())  + '",';
		if(this.getVerificationMode()) json += '"verification_mode"' + ":" + '"' + jsonEscape(this.getVerificationMode())  + '",';
		if(this.getIsVerified()) json += '"is_verified"' + ":" + '"' + jsonEscape(this.getIsVerified())  + '",';
		if(this.getVerificationDate()) json += '"verification_date"' + ":" + '"' + jsonEscape(this.getVerificationDate())  + '",';
		if(this.getVerifiedBy()) json += '"verified_by"' + ":" + '"' + jsonEscape(this.getVerifiedBy())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getParentDomain()) json += '"parent_domain"' + ":" + '"' + jsonEscape(this.getParentDomain())  + '",';
		if(this.getExpiryDate()) json += '"expiry_date"' + ":" + '"' + jsonEscape(this.getExpiryDate())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Domain.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.domain && !(/^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)|([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}$/).test(this.domain)) { throw new ValidationError(_formprefix + "domain", ValidationError.PATTERN_FAILED);}
if(this.isPrimary && !Validator.INTEGER.test(this.isPrimary)) { throw new ValidationError(_formprefix + "is_primary", ValidationError.PATTERN_FAILED);}
if(this.isRegisteredByZoho && !Validator.INTEGER.test(this.isRegisteredByZoho)) { throw new ValidationError(_formprefix + "is_registered_by_zoho", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.verificationCode && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.verificationCode)) { throw new ValidationError(_formprefix + "verification_code", ValidationError.PATTERN_FAILED);}
if(this.verificationMode && !Validator.INTEGER.test(this.verificationMode)) { throw new ValidationError(_formprefix + "verification_mode", ValidationError.PATTERN_FAILED);}
if(this.isVerified && !Validator.BOOLEAN.test(this.isVerified)) { throw new ValidationError(_formprefix + "is_verified", ValidationError.PATTERN_FAILED);}
if(this.verificationDate && !Validator.INTEGER.test(this.verificationDate)) { throw new ValidationError(_formprefix + "verification_date", ValidationError.PATTERN_FAILED);}
if(this.verifiedBy && !(/^[a-zA-Z0-9_\-]+$/).test(this.verifiedBy)) { throw new ValidationError(_formprefix + "verified_by", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.parentDomain && !(/^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)|([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}$/).test(this.parentDomain)) { throw new ValidationError(_formprefix + "parent_domain", ValidationError.PATTERN_FAILED);}
if(this.expiryDate && !Validator.INTEGER.test(this.expiryDate)) { throw new ValidationError(_formprefix + "expiry_date", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Domain.path = "domain";
Domain.newBuilder = function() {
    return new Domain();
};

Announcements = function() {
    var _formprefix = "";
    
var announcementId = "";
this.setAnnouncementId = function(announcementId) { 
    this.announcementId = announcementId;
    return this;
};
this.getAnnouncementId = function() {
    return this.announcementId;
};
var title = "";
this.setTitle = function(title) { 
    this.title = title;
    return this;
};
this.getTitle = function() {
    return this.title;
};
var expiryDate = "";
this.setExpiryDate = function(expiryDate) { 
    this.expiryDate = expiryDate;
    return this;
};
this.getExpiryDate = function() {
    return this.expiryDate;
};
var content = "";
this.setContent = function(content) { 
    this.content = content;
    return this;
};
this.getContent = function() {
    return this.content;
};
var announcementOwner = "";
this.setAnnouncementOwner = function(announcementOwner) { 
    this.announcementOwner = announcementOwner;
    return this;
};
this.getAnnouncementOwner = function() {
    return this.announcementOwner;
};
var announcementOwnerResource = "";
this.setAnnouncementOwnerResource = function(announcementOwnerResource) { 
    this.announcementOwnerResource = announcementOwnerResource;
    return this;
};
this.getAnnouncementOwnerResource = function() {
    return this.announcementOwnerResource;
};
var announcementStatus = "";
this.setAnnouncementStatus = function(announcementStatus) { 
    this.announcementStatus = announcementStatus;
    return this;
};
this.getAnnouncementStatus = function() {
    return this.announcementStatus;
};
var createdBy = "";
this.setCreatedBy = function(createdBy) { 
    this.createdBy = createdBy;
    return this;
};
this.getCreatedBy = function() {
    return this.createdBy;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAnnouncementId(json["announcement_id"]);
		this.setTitle(json["title"]);
		this.setExpiryDate(json["expiry_date"]);
		this.setContent(json["content"]);
		this.setAnnouncementOwner(json["announcement_owner"]);
		this.setAnnouncementOwnerResource(json["announcement_owner_resource"]);
		this.setAnnouncementStatus(json["announcement_status"]);
		this.setCreatedBy(json["created_by"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAnnouncementId()) json += '"announcement_id"' + ":" + '"' + jsonEscape(this.getAnnouncementId())  + '",';
		if(this.getTitle()) json += '"title"' + ":" + '"' + jsonEscape(this.getTitle())  + '",';
		if(this.getExpiryDate()) json += '"expiry_date"' + ":" + '"' + jsonEscape(this.getExpiryDate())  + '",';
		if(this.getContent()) json += '"content"' + ":" + '"' + jsonEscape(this.getContent())  + '",';
		if(this.getAnnouncementOwner()) json += '"announcement_owner"' + ":" + '"' + jsonEscape(this.getAnnouncementOwner())  + '",';
		if(this.getAnnouncementOwnerResource()) json += '"announcement_owner_resource"' + ":" + '"' + jsonEscape(this.getAnnouncementOwnerResource())  + '",';
		if(this.getAnnouncementStatus()) json += '"announcement_status"' + ":" + '"' + jsonEscape(this.getAnnouncementStatus())  + '",';
		if(this.getCreatedBy()) json += '"created_by"' + ":" + '"' + jsonEscape(this.getCreatedBy())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Announcements.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.announcementId && !(/^[a-zA-Z0-9_\-]+$/).test(this.announcementId)) { throw new ValidationError(_formprefix + "announcement_id", ValidationError.PATTERN_FAILED);}
if(this.title && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.title)) { throw new ValidationError(_formprefix + "title", ValidationError.PATTERN_FAILED);}
if(this.expiryDate && !Validator.INTEGER.test(this.expiryDate)) { throw new ValidationError(_formprefix + "expiry_date", ValidationError.PATTERN_FAILED);}
if(this.content && !(/xss:throwerror/).test(this.content)) { throw new ValidationError(_formprefix + "content", ValidationError.PATTERN_FAILED);}
if(this.announcementOwner && !(/^([A-Za-z0-9_.\-]+)$/).test(this.announcementOwner)) { throw new ValidationError(_formprefix + "announcement_owner", ValidationError.PATTERN_FAILED);}
if(this.announcementOwnerResource && !(/^([A-Za-z0-9_.\-]+)$/).test(this.announcementOwnerResource)) { throw new ValidationError(_formprefix + "announcement_owner_resource", ValidationError.PATTERN_FAILED);}
if(this.announcementStatus && !Validator.INTEGER.test(this.announcementStatus)) { throw new ValidationError(_formprefix + "announcement_status", ValidationError.PATTERN_FAILED);}
if(this.createdBy && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.createdBy)) { throw new ValidationError(_formprefix + "created_by", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Announcements.path = "announcements";
Announcements.newBuilder = function() {
    return new Announcements();
};

OAuthApiToken = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidType = "1";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var apiKey = "";
this.setApiKey = function(apiKey) { 
    this.apiKey = apiKey;
    return this;
};
this.getApiKey = function() {
    return this.apiKey;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var isActive = "1";
this.setIsActive = function(isActive) { 
    this.isActive = isActive;
    return this;
};
this.getIsActive = function() {
    return this.isActive;
};
var orgType = "";
this.setOrgType = function(orgType) { 
    this.orgType = orgType;
    return this;
};
this.getOrgType = function() {
    return this.orgType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var oauthapitokenscopes = undefined;
this.setOauthapitokenscopess = function(oauthapitokenscopes) { 
    this.oauthapitokenscopes = oauthapitokenscopes;
    return this;
};
this.getOauthapitokenscopess = function() {
    return this.oauthapitokenscopes;
};
this.addOauthapitokenscopes = function(oauthapitokenscopes) { 
 if(!this.oauthapitokenscopes) this.oauthapitokenscopes = new Array(); 
  this.oauthapitokenscopes.push(oauthapitokenscopes); 
 return this;
};

var oauthinternalapitoken = undefined;
this.setOauthinternalapitokens = function(oauthinternalapitoken) { 
    this.oauthinternalapitoken = oauthinternalapitoken;
    return this;
};
this.getOauthinternalapitokens = function() {
    return this.oauthinternalapitoken;
};
this.addOauthinternalapitoken = function(oauthinternalapitoken) { 
 if(!this.oauthinternalapitoken) this.oauthinternalapitoken = new Array(); 
  this.oauthinternalapitoken.push(oauthinternalapitoken); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidType(json["zid_type"]);
		this.setApiKey(json["api_key"]);
		this.setDescription(json["description"]);
		this.setIsActive(json["is_active"]);
		this.setOrgType(json["org_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setOauthapitokenscopess(URI.getResourceArray(json["oAuthApiTokenScopes"],"oauthapitokenscopes"));
		this.setOauthinternalapitokens(URI.getResourceArray(json["oAuthInternalApiToken"],"oauthinternalapitoken"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getApiKey()) json += '"api_key"' + ":" + '"' + jsonEscape(this.getApiKey())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getIsActive()) json += '"is_active"' + ":" + '"' + jsonEscape(this.getIsActive())  + '",';
		if(this.getOrgType()) json += '"org_type"' + ":" + '"' + jsonEscape(this.getOrgType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getOauthapitokenscopess()) json += '"oAuthApiTokenScopes"' + ":" + URI.toJSONArray(this.getOauthapitokenscopess())  + ',';
		if(this.getOauthinternalapitokens()) json += '"oAuthInternalApiToken"' + ":" + URI.toJSONArray(this.getOauthinternalapitokens())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthApiToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.zidType && !Validator.INTEGER.test(this.zidType)) { throw new ValidationError(_formprefix + "zid_type", ValidationError.PATTERN_FAILED);}
if(this.apiKey && !(/xss:throwerror/).test(this.apiKey)) { throw new ValidationError(_formprefix + "api_key", ValidationError.PATTERN_FAILED);}
if(this.description && !(/xss:throwerror/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.isActive && !Validator.INTEGER.test(this.isActive)) { throw new ValidationError(_formprefix + "is_active", ValidationError.PATTERN_FAILED);}
if(this.orgType && !Validator.INTEGER.test(this.orgType)) { throw new ValidationError(_formprefix + "org_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.oauthapitokenscopes) { for(i=0; i < this.oauthapitokenscopes.length; i++ ) { this.oauthapitokenscopes[i].validate(); } }
if(this.oauthinternalapitoken) { for(i=0; i < this.oauthinternalapitoken.length; i++ ) { this.oauthinternalapitoken[i].validate(); } }

	return this;
    }
}
OAuthApiToken.path = "oauthapitoken";
OAuthApiToken.newBuilder = function() {
    return new OAuthApiToken();
};

UserTokenPairDetails = function() {
    var _formprefix = "";
    
var details = "";
this.setDetails = function(details) { 
    this.details = details;
    return this;
};
this.getDetails = function() {
    return this.details;
};
var idleSessionTimeout = "0";
this.setIdleSessionTimeout = function(idleSessionTimeout) { 
    this.idleSessionTimeout = idleSessionTimeout;
    return this;
};
this.getIdleSessionTimeout = function() {
    return this.idleSessionTimeout;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDetails(json["details"]);
		this.setIdleSessionTimeout(json["idle_session_timeout"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDetails()) json += '"details"' + ":" + '"' + jsonEscape(this.getDetails())  + '",';
		if(this.getIdleSessionTimeout()) json += '"idle_session_timeout"' + ":" + '"' + jsonEscape(this.getIdleSessionTimeout())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserTokenPairDetails.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.idleSessionTimeout && !Validator.INTEGER.test(this.idleSessionTimeout)) { throw new ValidationError(_formprefix + "idle_session_timeout", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserTokenPairDetails.path = "usertokenpairdetails";
UserTokenPairDetails.newBuilder = function() {
    return new UserTokenPairDetails();
};

AccountJoinRequests = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var status = "0";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var argsData = "";
this.setArgsData = function(argsData) { 
    this.argsData = argsData;
    return this;
};
this.getArgsData = function() {
    return this.argsData;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setStatus(json["status"]);
		this.setIpAddress(json["ip_address"]);
		this.setArgsData(json["args_data"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getArgsData()) json += '"args_data"' + ":" + '"' + jsonEscape(this.getArgsData())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountJoinRequests.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.status && !Validator.INTEGER.test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountJoinRequests.path = "accountjoinrequests";
AccountJoinRequests.newBuilder = function() {
    return new AccountJoinRequests();
};

OAuthTokenUsage = function() {
    var _formprefix = "";
    
var clientId = "";
this.setClientId = function(clientId) { 
    this.clientId = clientId;
    return this;
};
this.getClientId = function() {
    return this.clientId;
};
var userId = "-1";
this.setUserId = function(userId) { 
    this.userId = userId;
    return this;
};
this.getUserId = function() {
    return this.userId;
};
var clientApprovedTime = "";
this.setClientApprovedTime = function(clientApprovedTime) { 
    this.clientApprovedTime = clientApprovedTime;
    return this;
};
this.getClientApprovedTime = function() {
    return this.clientApprovedTime;
};
var clientAccessedIp = "";
this.setClientAccessedIp = function(clientAccessedIp) { 
    this.clientAccessedIp = clientAccessedIp;
    return this;
};
this.getClientAccessedIp = function() {
    return this.clientAccessedIp;
};
var clientAccessedTime = "";
this.setClientAccessedTime = function(clientAccessedTime) { 
    this.clientAccessedTime = clientAccessedTime;
    return this;
};
this.getClientAccessedTime = function() {
    return this.clientAccessedTime;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClientId(json["client_id"]);
		this.setUserId(json["user_id"]);
		this.setClientApprovedTime(json["client_approved_time"]);
		this.setClientAccessedIp(json["client_accessed_ip"]);
		this.setClientAccessedTime(json["client_accessed_time"]);
		this.setUserAgent(json["user_agent"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClientId()) json += '"client_id"' + ":" + '"' + jsonEscape(this.getClientId())  + '",';
		if(this.getUserId()) json += '"user_id"' + ":" + '"' + jsonEscape(this.getUserId())  + '",';
		if(this.getClientApprovedTime()) json += '"client_approved_time"' + ":" + '"' + jsonEscape(this.getClientApprovedTime())  + '",';
		if(this.getClientAccessedIp()) json += '"client_accessed_ip"' + ":" + '"' + jsonEscape(this.getClientAccessedIp())  + '",';
		if(this.getClientAccessedTime()) json += '"client_accessed_time"' + ":" + '"' + jsonEscape(this.getClientAccessedTime())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthTokenUsage.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.clientId && !(/^(?:[a-z0-9\.\-])+$/).test(this.clientId)) { throw new ValidationError(_formprefix + "client_id", ValidationError.PATTERN_FAILED);}
if(this.userId && !(/^[a-zA-Z0-9_\-]+$/).test(this.userId)) { throw new ValidationError(_formprefix + "user_id", ValidationError.PATTERN_FAILED);}
if(this.clientApprovedTime && !Validator.INTEGER.test(this.clientApprovedTime)) { throw new ValidationError(_formprefix + "client_approved_time", ValidationError.PATTERN_FAILED);}
if(this.clientAccessedIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.clientAccessedIp)) { throw new ValidationError(_formprefix + "client_accessed_ip", ValidationError.PATTERN_FAILED);}
if(this.clientAccessedTime && !Validator.INTEGER.test(this.clientAccessedTime)) { throw new ValidationError(_formprefix + "client_accessed_time", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthTokenUsage.path = "oauthtokenusage";
OAuthTokenUsage.newBuilder = function() {
    return new OAuthTokenUsage();
};

Listener = function() {
    var _formprefix = "";
    
var name = "";
this.setName = function(name) { 
    this.name = name;
    return this;
};
this.getName = function() {
    return this.name;
};
var resourceTypePattern = "";
this.setResourceTypePattern = function(resourceTypePattern) { 
    this.resourceTypePattern = resourceTypePattern;
    return this;
};
this.getResourceTypePattern = function() {
    return this.resourceTypePattern;
};
var lastNotifiedTime = "";
this.setLastNotifiedTime = function(lastNotifiedTime) { 
    this.lastNotifiedTime = lastNotifiedTime;
    return this;
};
this.getLastNotifiedTime = function() {
    return this.lastNotifiedTime;
};
var lastUpdatedTime = "-1";
this.setLastUpdatedTime = function(lastUpdatedTime) { 
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
};
this.getLastUpdatedTime = function() {
    return this.lastUpdatedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setName(json["name"]);
		this.setResourceTypePattern(json["resource_type_pattern"]);
		this.setLastNotifiedTime(json["last_notified_time"]);
		this.setLastUpdatedTime(json["last_updated_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getName()) json += '"name"' + ":" + '"' + jsonEscape(this.getName())  + '",';
		if(this.getResourceTypePattern()) json += '"resource_type_pattern"' + ":" + '"' + jsonEscape(this.getResourceTypePattern())  + '",';
		if(this.getLastNotifiedTime()) json += '"last_notified_time"' + ":" + '"' + jsonEscape(this.getLastNotifiedTime())  + '",';
		if(this.getLastUpdatedTime()) json += '"last_updated_time"' + ":" + '"' + jsonEscape(this.getLastUpdatedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Listener.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.name && !(/^([A-Za-z0-9_.\-]+)$/).test(this.name)) { throw new ValidationError(_formprefix + "name", ValidationError.PATTERN_FAILED);}
if(this.resourceTypePattern && !(/dontdisturb/).test(this.resourceTypePattern)) { throw new ValidationError(_formprefix + "resource_type_pattern", ValidationError.PATTERN_FAILED);}
if(this.lastNotifiedTime && !Validator.INTEGER.test(this.lastNotifiedTime)) { throw new ValidationError(_formprefix + "last_notified_time", ValidationError.PATTERN_FAILED);}
if(this.lastUpdatedTime && !Validator.INTEGER.test(this.lastUpdatedTime)) { throw new ValidationError(_formprefix + "last_updated_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Listener.path = "listener";
Listener.newBuilder = function() {
    return new Listener();
};

TrustedDomain = function() {
    var _formprefix = "";
    
var trustedDomain = "";
this.setTrustedDomain = function(trustedDomain) { 
    this.trustedDomain = trustedDomain;
    return this;
};
this.getTrustedDomain = function() {
    return this.trustedDomain;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var ipAuditInfo = "";
this.setIpAuditInfo = function(ipAuditInfo) { 
    this.ipAuditInfo = ipAuditInfo;
    return this;
};
this.getIpAuditInfo = function() {
    return this.ipAuditInfo;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTrustedDomain(json["trusted_domain"]);
		this.setIpAddress(json["ip_address"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);
		this.setIpAuditInfo(json["ip_audit_info"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTrustedDomain()) json += '"trusted_domain"' + ":" + '"' + jsonEscape(this.getTrustedDomain())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getIpAuditInfo()) json += '"ip_audit_info"' + ":" + '"' + jsonEscape(this.getIpAuditInfo())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(TrustedDomain.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.trustedDomain && !(/^([\p{L}\p{M}\p{N}]([\p{L}\p{M}\p{N}\-]{0,61}[\p{L}\p{M}\p{N}])?\.)+[\p{L}\p{M}]{2,6}$/).test(this.trustedDomain)) { throw new ValidationError(_formprefix + "trusted_domain", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/xss:throwerror/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
TrustedDomain.path = "trusteddomain";
TrustedDomain.newBuilder = function() {
    return new TrustedDomain();
};

UserInfo = function() {
    var _formprefix = "";
    
var state = "";
this.setState = function(state) { 
    this.state = state;
    return this;
};
this.getState = function() {
    return this.state;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setState(json["state"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getState()) json += '"state"' + ":" + '"' + jsonEscape(this.getState())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserInfo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.state && !(/xss:throwerror/).test(this.state)) { throw new ValidationError(_formprefix + "state", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserInfo.path = "userinfo";
UserInfo.newBuilder = function() {
    return new UserInfo();
};

AppAccount = function() {
    var _formprefix = "";
    
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var screenName = "";
this.setScreenName = function(screenName) { 
    this.screenName = screenName;
    return this;
};
this.getScreenName = function() {
    return this.screenName;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var zaaid = "";
this.setZaaid = function(zaaid) { 
    this.zaaid = zaaid;
    return this;
};
this.getZaaid = function() {
    return this.zaaid;
};
var resourceHierarchyId = "";
this.setResourceHierarchyId = function(resourceHierarchyId) { 
    this.resourceHierarchyId = resourceHierarchyId;
    return this;
};
this.getResourceHierarchyId = function() {
    return this.resourceHierarchyId;
};
var roleHierarchyId = "";
this.setRoleHierarchyId = function(roleHierarchyId) { 
    this.roleHierarchyId = roleHierarchyId;
    return this;
};
this.getRoleHierarchyId = function() {
    return this.roleHierarchyId;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var accountStatus = "1";
this.setAccountStatus = function(accountStatus) { 
    this.accountStatus = accountStatus;
    return this;
};
this.getAccountStatus = function() {
    return this.accountStatus;
};
var parentZaaid = "";
this.setParentZaaid = function(parentZaaid) { 
    this.parentZaaid = parentZaaid;
    return this;
};
this.getParentZaaid = function() {
    return this.parentZaaid;
};
var directoryZaaid = "";
this.setDirectoryZaaid = function(directoryZaaid) { 
    this.directoryZaaid = directoryZaaid;
    return this;
};
this.getDirectoryZaaid = function() {
    return this.directoryZaaid;
};
var isExposed = "1";
this.setIsExposed = function(isExposed) { 
    this.isExposed = isExposed;
    return this;
};
this.getIsExposed = function() {
    return this.isExposed;
};
var environment = "1";
this.setEnvironment = function(environment) { 
    this.environment = environment;
    return this;
};
this.getEnvironment = function() {
    return this.environment;
};
var serviceType = "";
this.setServiceType = function(serviceType) { 
    this.serviceType = serviceType;
    return this;
};
this.getServiceType = function() {
    return this.serviceType;
};
var parentOrgType = "";
this.setParentOrgType = function(parentOrgType) { 
    this.parentOrgType = parentOrgType;
    return this;
};
this.getParentOrgType = function() {
    return this.parentOrgType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var appaccountservice = undefined;
this.setAppaccountservices = function(appaccountservice) { 
    this.appaccountservice = appaccountservice;
    return this;
};
this.getAppaccountservices = function() {
    return this.appaccountservice;
};
this.addAppaccountservice = function(appaccountservice) { 
 if(!this.appaccountservice) this.appaccountservice = new Array(); 
  this.appaccountservice.push(appaccountservice); 
 return this;
};

var appaccountmember = undefined;
this.setAppaccountmembers = function(appaccountmember) { 
    this.appaccountmember = appaccountmember;
    return this;
};
this.getAppaccountmembers = function() {
    return this.appaccountmember;
};
this.addAppaccountmember = function(appaccountmember) { 
 if(!this.appaccountmember) this.appaccountmember = new Array(); 
  this.appaccountmember.push(appaccountmember); 
 return this;
};

var rebrand = undefined;
this.setRebrands = function(rebrand) { 
    this.rebrand = rebrand;
    return this;
};
this.getRebrands = function() {
    return this.rebrand;
};
this.addRebrand = function(rebrand) { 
 if(!this.rebrand) this.rebrand = new Array(); 
  this.rebrand.push(rebrand); 
 return this;
};

var license = undefined;
this.setLicenses = function(license) { 
    this.license = license;
    return this;
};
this.getLicenses = function() {
    return this.license;
};
this.addLicense = function(license) { 
 if(!this.license) this.license = new Array(); 
  this.license.push(license); 
 return this;
};

var attribute = undefined;
this.setAttributes = function(attribute) { 
    this.attribute = attribute;
    return this;
};
this.getAttributes = function() {
    return this.attribute;
};
this.addAttribute = function(attribute) { 
 if(!this.attribute) this.attribute = new Array(); 
  this.attribute.push(attribute); 
 return this;
};

var accountattribute = undefined;
this.setAccountattributes = function(accountattribute) { 
    this.accountattribute = accountattribute;
    return this;
};
this.getAccountattributes = function() {
    return this.accountattribute;
};
this.addAccountattribute = function(accountattribute) { 
 if(!this.accountattribute) this.accountattribute = new Array(); 
  this.accountattribute.push(accountattribute); 
 return this;
};

var template = undefined;
this.setTemplates = function(template) { 
    this.template = template;
    return this;
};
this.getTemplates = function() {
    return this.template;
};
this.addTemplate = function(template) { 
 if(!this.template) this.template = new Array(); 
  this.template.push(template); 
 return this;
};

var lang = undefined;
this.setLangs = function(lang) { 
    this.lang = lang;
    return this;
};
this.getLangs = function() {
    return this.lang;
};
this.addLang = function(lang) { 
 if(!this.lang) this.lang = new Array(); 
  this.lang.push(lang); 
 return this;
};

var appaccountaddress = undefined;
this.setAppaccountaddresss = function(appaccountaddress) { 
    this.appaccountaddress = appaccountaddress;
    return this;
};
this.getAppaccountaddresss = function() {
    return this.appaccountaddress;
};
this.addAppaccountaddress = function(appaccountaddress) { 
 if(!this.appaccountaddress) this.appaccountaddress = new Array(); 
  this.appaccountaddress.push(appaccountaddress); 
 return this;
};

var appaccountpolicy = undefined;
this.setAppaccountpolicys = function(appaccountpolicy) { 
    this.appaccountpolicy = appaccountpolicy;
    return this;
};
this.getAppaccountpolicys = function() {
    return this.appaccountpolicy;
};
this.addAppaccountpolicy = function(appaccountpolicy) { 
 if(!this.appaccountpolicy) this.appaccountpolicy = new Array(); 
  this.appaccountpolicy.push(appaccountpolicy); 
 return this;
};

var appaccountpreference = undefined;
this.setAppaccountpreference = function(appaccountpreference) { 
    this.appaccountpreference = appaccountpreference;
    return this;
};
this.getAppaccountpreference = function() {
    return this.appaccountpreference;
};
var appaccountfinancialsettings = undefined;
this.setAppaccountfinancialsettings = function(appaccountfinancialsettings) { 
    this.appaccountfinancialsettings = appaccountfinancialsettings;
    return this;
};
this.getAppaccountfinancialsettings = function() {
    return this.appaccountfinancialsettings;
};
var samlspapp = undefined;
this.setSamlspapps = function(samlspapp) { 
    this.samlspapp = samlspapp;
    return this;
};
this.getSamlspapps = function() {
    return this.samlspapp;
};
this.addSamlspapp = function(samlspapp) { 
 if(!this.samlspapp) this.samlspapp = new Array(); 
  this.samlspapp.push(samlspapp); 
 return this;
};

var appaccountdevices = undefined;
this.setAppaccountdevicess = function(appaccountdevices) { 
    this.appaccountdevices = appaccountdevices;
    return this;
};
this.getAppaccountdevicess = function() {
    return this.appaccountdevices;
};
this.addAppaccountdevices = function(appaccountdevices) { 
 if(!this.appaccountdevices) this.appaccountdevices = new Array(); 
  this.appaccountdevices.push(appaccountdevices); 
 return this;
};

var appaccountlogo = undefined;
this.setAppaccountlogo = function(appaccountlogo) { 
    this.appaccountlogo = appaccountlogo;
    return this;
};
this.getAppaccountlogo = function() {
    return this.appaccountlogo;
};
var acp = undefined;
this.setAcps = function(acp) { 
    this.acp = acp;
    return this;
};
this.getAcps = function() {
    return this.acp;
};
this.addAcp = function(acp) { 
 if(!this.acp) this.acp = new Array(); 
  this.acp.push(acp); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppName(json["app_name"]);
		this.setDisplayName(json["display_name"]);
		this.setScreenName(json["screen_name"]);
		this.setZuid(json["zuid"]);
		this.setZaaid(json["zaaid"]);
		this.setResourceHierarchyId(json["resource_hierarchy_id"]);
		this.setRoleHierarchyId(json["role_hierarchy_id"]);
		this.setDescription(json["description"]);
		this.setAccountStatus(json["account_status"]);
		this.setParentZaaid(json["parent_zaaid"]);
		this.setDirectoryZaaid(json["directory_zaaid"]);
		this.setIsExposed(json["is_exposed"]);
		this.setEnvironment(json["environment"]);
		this.setServiceType(json["service_type"]);
		this.setParentOrgType(json["parent_org_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setAppaccountservices(URI.getResourceArray(json["appAccountService"],"appaccountservice"));
		this.setAppaccountmembers(URI.getResourceArray(json["appAccountMember"],"appaccountmember"));
		this.setRebrands(URI.getResourceArray(json["rebrand"],"rebrand"));
		this.setLicenses(URI.getResourceArray(json["license"],"license"));
		this.setAttributes(URI.getResourceArray(json["attribute"],"attribute"));
		this.setAccountattributes(URI.getResourceArray(json["accountAttribute"],"accountattribute"));
		this.setTemplates(URI.getResourceArray(json["template"],"template"));
		this.setLangs(URI.getResourceArray(json["lang"],"lang"));
		this.setAppaccountaddresss(URI.getResourceArray(json["appAccountAddress"],"appaccountaddress"));
		this.setAppaccountpolicys(URI.getResourceArray(json["appAccountPolicy"],"appaccountpolicy"));
		this.setAppaccountpreference(URI.getResource(json["appAccountPreference"],"appaccountpreference"));
		this.setAppaccountfinancialsettings(URI.getResource(json["appAccountFinancialSettings"],"appaccountfinancialsettings"));
		this.setSamlspapps(URI.getResourceArray(json["sAMLSpApp"],"samlspapp"));
		this.setAppaccountdevicess(URI.getResourceArray(json["appAccountDevices"],"appaccountdevices"));
		this.setAppaccountlogo(URI.getResource(json["appAccountLogo"],"appaccountlogo"));
		this.setAcps(URI.getResourceArray(json["aCP"],"acp"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getScreenName()) json += '"screen_name"' + ":" + '"' + jsonEscape(this.getScreenName())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getZaaid()) json += '"zaaid"' + ":" + '"' + jsonEscape(this.getZaaid())  + '",';
		if(this.getResourceHierarchyId()) json += '"resource_hierarchy_id"' + ":" + '"' + jsonEscape(this.getResourceHierarchyId())  + '",';
		if(this.getRoleHierarchyId()) json += '"role_hierarchy_id"' + ":" + '"' + jsonEscape(this.getRoleHierarchyId())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getAccountStatus()) json += '"account_status"' + ":" + '"' + jsonEscape(this.getAccountStatus())  + '",';
		if(this.getParentZaaid()) json += '"parent_zaaid"' + ":" + '"' + jsonEscape(this.getParentZaaid())  + '",';
		if(this.getDirectoryZaaid()) json += '"directory_zaaid"' + ":" + '"' + jsonEscape(this.getDirectoryZaaid())  + '",';
		if(this.getIsExposed()) json += '"is_exposed"' + ":" + '"' + jsonEscape(this.getIsExposed())  + '",';
		if(this.getEnvironment()) json += '"environment"' + ":" + '"' + jsonEscape(this.getEnvironment())  + '",';
		if(this.getServiceType()) json += '"service_type"' + ":" + '"' + jsonEscape(this.getServiceType())  + '",';
		if(this.getParentOrgType()) json += '"parent_org_type"' + ":" + '"' + jsonEscape(this.getParentOrgType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getAppaccountservices()) json += '"appAccountService"' + ":" + URI.toJSONArray(this.getAppaccountservices())  + ',';
		if(this.getAppaccountmembers()) json += '"appAccountMember"' + ":" + URI.toJSONArray(this.getAppaccountmembers())  + ',';
		if(this.getRebrands()) json += '"rebrand"' + ":" + URI.toJSONArray(this.getRebrands())  + ',';
		if(this.getLicenses()) json += '"license"' + ":" + URI.toJSONArray(this.getLicenses())  + ',';
		if(this.getAttributes()) json += '"attribute"' + ":" + URI.toJSONArray(this.getAttributes())  + ',';
		if(this.getAccountattributes()) json += '"accountAttribute"' + ":" + URI.toJSONArray(this.getAccountattributes())  + ',';
		if(this.getTemplates()) json += '"template"' + ":" + URI.toJSONArray(this.getTemplates())  + ',';
		if(this.getLangs()) json += '"lang"' + ":" + URI.toJSONArray(this.getLangs())  + ',';
		if(this.getAppaccountaddresss()) json += '"appAccountAddress"' + ":" + URI.toJSONArray(this.getAppaccountaddresss())  + ',';
		if(this.getAppaccountpolicys()) json += '"appAccountPolicy"' + ":" + URI.toJSONArray(this.getAppaccountpolicys())  + ',';
		if(this.getAppaccountpreference()) json += '"appAccountPreference"' + ":" + this.getAppaccountpreference().toJSON()  + ',';
		if(this.getAppaccountfinancialsettings()) json += '"appAccountFinancialSettings"' + ":" + this.getAppaccountfinancialsettings().toJSON()  + ',';
		if(this.getSamlspapps()) json += '"sAMLSpApp"' + ":" + URI.toJSONArray(this.getSamlspapps())  + ',';
		if(this.getAppaccountdevicess()) json += '"appAccountDevices"' + ":" + URI.toJSONArray(this.getAppaccountdevicess())  + ',';
		if(this.getAppaccountlogo()) json += '"appAccountLogo"' + ":" + this.getAppaccountlogo().toJSON()  + ',';
		if(this.getAcps()) json += '"aCP"' + ":" + URI.toJSONArray(this.getAcps())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccount.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.screenName && !(/^([\p{L}\p{M}\p{N}\_\.]+)$/).test(this.screenName)) { throw new ValidationError(_formprefix + "screen_name", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.zaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaaid)) { throw new ValidationError(_formprefix + "zaaid", ValidationError.PATTERN_FAILED);}
if(this.resourceHierarchyId && !(/^[a-zA-Z0-9_\-]+$/).test(this.resourceHierarchyId)) { throw new ValidationError(_formprefix + "resource_hierarchy_id", ValidationError.PATTERN_FAILED);}
if(this.roleHierarchyId && !(/^[a-zA-Z0-9_\-]+$/).test(this.roleHierarchyId)) { throw new ValidationError(_formprefix + "role_hierarchy_id", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.accountStatus && !Validator.INTEGER.test(this.accountStatus)) { throw new ValidationError(_formprefix + "account_status", ValidationError.PATTERN_FAILED);}
if(this.parentZaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.parentZaaid)) { throw new ValidationError(_formprefix + "parent_zaaid", ValidationError.PATTERN_FAILED);}
if(this.directoryZaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.directoryZaaid)) { throw new ValidationError(_formprefix + "directory_zaaid", ValidationError.PATTERN_FAILED);}
if(this.isExposed && !Validator.INTEGER.test(this.isExposed)) { throw new ValidationError(_formprefix + "is_exposed", ValidationError.PATTERN_FAILED);}
if(this.environment && !Validator.INTEGER.test(this.environment)) { throw new ValidationError(_formprefix + "environment", ValidationError.PATTERN_FAILED);}
if(this.serviceType && !Validator.INTEGER.test(this.serviceType)) { throw new ValidationError(_formprefix + "service_type", ValidationError.PATTERN_FAILED);}
if(this.parentOrgType && !Validator.INTEGER.test(this.parentOrgType)) { throw new ValidationError(_formprefix + "parent_org_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.appaccountservice) { for(i=0; i < this.appaccountservice.length; i++ ) { this.appaccountservice[i].validate(); } }
if(this.appaccountmember) { for(i=0; i < this.appaccountmember.length; i++ ) { this.appaccountmember[i].validate(); } }
if(this.rebrand) { for(i=0; i < this.rebrand.length; i++ ) { this.rebrand[i].validate(); } }
if(this.license) { for(i=0; i < this.license.length; i++ ) { this.license[i].validate(); } }
if(this.attribute) { for(i=0; i < this.attribute.length; i++ ) { this.attribute[i].validate(); } }
if(this.accountattribute) { for(i=0; i < this.accountattribute.length; i++ ) { this.accountattribute[i].validate(); } }
if(this.template) { for(i=0; i < this.template.length; i++ ) { this.template[i].validate(); } }
if(this.lang) { for(i=0; i < this.lang.length; i++ ) { this.lang[i].validate(); } }
if(this.appaccountaddress) { for(i=0; i < this.appaccountaddress.length; i++ ) { this.appaccountaddress[i].validate(); } }
if(this.appaccountpolicy) { for(i=0; i < this.appaccountpolicy.length; i++ ) { this.appaccountpolicy[i].validate(); } }
if(this.appaccountpreference) { this.appaccountpreference.validate(); }
if(this.appaccountfinancialsettings) { this.appaccountfinancialsettings.validate(); }
if(this.samlspapp) { for(i=0; i < this.samlspapp.length; i++ ) { this.samlspapp[i].validate(); } }
if(this.appaccountdevices) { for(i=0; i < this.appaccountdevices.length; i++ ) { this.appaccountdevices[i].validate(); } }
if(this.appaccountlogo) { this.appaccountlogo.validate(); }
if(this.acp) { for(i=0; i < this.acp.length; i++ ) { this.acp[i].validate(); } }

	return this;
    }
}
AppAccount.path = "appaccount";
AppAccount.newBuilder = function() {
    return new AppAccount();
};

ServiceOrgInvitation = function() {
    var _formprefix = "";
    
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var status = "0";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var userRole = "0";
this.setUserRole = function(userRole) { 
    this.userRole = userRole;
    return this;
};
this.getUserRole = function() {
    return this.userRole;
};
var userType = "1";
this.setUserType = function(userType) { 
    this.userType = userType;
    return this;
};
this.getUserType = function() {
    return this.userType;
};
var sendMail = "true";
this.setSendMail = function(sendMail) { 
    this.sendMail = sendMail;
    return this;
};
this.getSendMail = function() {
    return this.sendMail;
};
var resendLimit = "0";
this.setResendLimit = function(resendLimit) { 
    this.resendLimit = resendLimit;
    return this;
};
this.getResendLimit = function() {
    return this.resendLimit;
};
var rejectedCount = "0";
this.setRejectedCount = function(rejectedCount) { 
    this.rejectedCount = rejectedCount;
    return this;
};
this.getRejectedCount = function() {
    return this.rejectedCount;
};
var acceptUrl = "";
this.setAcceptUrl = function(acceptUrl) { 
    this.acceptUrl = acceptUrl;
    return this;
};
this.getAcceptUrl = function() {
    return this.acceptUrl;
};
var rejectUrl = "";
this.setRejectUrl = function(rejectUrl) { 
    this.rejectUrl = rejectUrl;
    return this;
};
this.getRejectUrl = function() {
    return this.rejectUrl;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var idp = "0";
this.setIdp = function(idp) { 
    this.idp = idp;
    return this;
};
this.getIdp = function() {
    return this.idp;
};
var argsData = "";
this.setArgsData = function(argsData) { 
    this.argsData = argsData;
    return this;
};
this.getArgsData = function() {
    return this.argsData;
};
var invitedBy = "";
this.setInvitedBy = function(invitedBy) { 
    this.invitedBy = invitedBy;
    return this;
};
this.getInvitedBy = function() {
    return this.invitedBy;
};
var firstName = "";
this.setFirstName = function(firstName) { 
    this.firstName = firstName;
    return this;
};
this.getFirstName = function() {
    return this.firstName;
};
var lastName = "";
this.setLastName = function(lastName) { 
    this.lastName = lastName;
    return this;
};
this.getLastName = function() {
    return this.lastName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setEmailId(json["email_id"]);
		this.setStatus(json["status"]);
		this.setUserRole(json["user_role"]);
		this.setUserType(json["user_type"]);
		this.setSendMail(json["send_mail"]);
		this.setResendLimit(json["resend_limit"]);
		this.setRejectedCount(json["rejected_count"]);
		this.setAcceptUrl(json["accept_url"]);
		this.setRejectUrl(json["reject_url"]);
		this.setIpAddress(json["ip_address"]);
		this.setIdp(json["idp"]);
		this.setArgsData(json["args_data"]);
		this.setInvitedBy(json["invited_by"]);
		this.setFirstName(json["first_name"]);
		this.setLastName(json["last_name"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getUserRole()) json += '"user_role"' + ":" + '"' + jsonEscape(this.getUserRole())  + '",';
		if(this.getUserType()) json += '"user_type"' + ":" + '"' + jsonEscape(this.getUserType())  + '",';
		if(this.getSendMail()) json += '"send_mail"' + ":" + '"' + jsonEscape(this.getSendMail())  + '",';
		if(this.getResendLimit()) json += '"resend_limit"' + ":" + '"' + jsonEscape(this.getResendLimit())  + '",';
		if(this.getRejectedCount()) json += '"rejected_count"' + ":" + '"' + jsonEscape(this.getRejectedCount())  + '",';
		if(this.getAcceptUrl()) json += '"accept_url"' + ":" + '"' + jsonEscape(this.getAcceptUrl())  + '",';
		if(this.getRejectUrl()) json += '"reject_url"' + ":" + '"' + jsonEscape(this.getRejectUrl())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getIdp()) json += '"idp"' + ":" + '"' + jsonEscape(this.getIdp())  + '",';
		if(this.getArgsData()) json += '"args_data"' + ":" + '"' + jsonEscape(this.getArgsData())  + '",';
		if(this.getInvitedBy()) json += '"invited_by"' + ":" + '"' + jsonEscape(this.getInvitedBy())  + '",';
		if(this.getFirstName()) json += '"first_name"' + ":" + '"' + jsonEscape(this.getFirstName())  + '",';
		if(this.getLastName()) json += '"last_name"' + ":" + '"' + jsonEscape(this.getLastName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgInvitation.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.emailId && !(/^[a-zA-Z0-9_\-]+$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.status && !Validator.INTEGER.test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.userRole && !Validator.INTEGER.test(this.userRole)) { throw new ValidationError(_formprefix + "user_role", ValidationError.PATTERN_FAILED);}
if(this.userType && !Validator.INTEGER.test(this.userType)) { throw new ValidationError(_formprefix + "user_type", ValidationError.PATTERN_FAILED);}
if(this.sendMail && !Validator.BOOLEAN.test(this.sendMail)) { throw new ValidationError(_formprefix + "send_mail", ValidationError.PATTERN_FAILED);}
if(this.resendLimit && !Validator.INTEGER.test(this.resendLimit)) { throw new ValidationError(_formprefix + "resend_limit", ValidationError.PATTERN_FAILED);}
if(this.acceptUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.acceptUrl)) { throw new ValidationError(_formprefix + "accept_url", ValidationError.PATTERN_FAILED);}
if(this.rejectUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.rejectUrl)) { throw new ValidationError(_formprefix + "reject_url", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.idp && !Validator.INTEGER.test(this.idp)) { throw new ValidationError(_formprefix + "idp", ValidationError.PATTERN_FAILED);}
if(this.invitedBy && !(/^[a-zA-Z0-9_\-]+$/).test(this.invitedBy)) { throw new ValidationError(_formprefix + "invited_by", ValidationError.PATTERN_FAILED);}
if(this.firstName && !(/xss:throwerror/).test(this.firstName)) { throw new ValidationError(_formprefix + "first_name", ValidationError.PATTERN_FAILED);}
if(this.lastName && !(/xss:throwerror/).test(this.lastName)) { throw new ValidationError(_formprefix + "last_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgInvitation.path = "serviceorginvitation";
ServiceOrgInvitation.newBuilder = function() {
    return new ServiceOrgInvitation();
};

Properties = function() {
    var _formprefix = "";
    
var propName = "";
this.setPropName = function(propName) { 
    this.propName = propName;
    return this;
};
this.getPropName = function() {
    return this.propName;
};
var propValue = "";
this.setPropValue = function(propValue) { 
    this.propValue = propValue;
    return this;
};
this.getPropValue = function() {
    return this.propValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPropName(json["prop_name"]);
		this.setPropValue(json["prop_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPropName()) json += '"prop_name"' + ":" + '"' + jsonEscape(this.getPropName())  + '",';
		if(this.getPropValue()) json += '"prop_value"' + ":" + '"' + jsonEscape(this.getPropValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Properties.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.propName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.propName)) { throw new ValidationError(_formprefix + "prop_name", ValidationError.PATTERN_FAILED);}
if(this.propValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.propValue)) { throw new ValidationError(_formprefix + "prop_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Properties.path = "properties";
Properties.newBuilder = function() {
    return new Properties();
};

ConditionalUser = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidType = "1";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var isExcluded = "false";
this.setIsExcluded = function(isExcluded) { 
    this.isExcluded = isExcluded;
    return this;
};
this.getIsExcluded = function() {
    return this.isExcluded;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidType(json["zid_type"]);
		this.setIsExcluded(json["is_excluded"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getIsExcluded()) json += '"is_excluded"' + ":" + '"' + jsonEscape(this.getIsExcluded())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ConditionalUser.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.isExcluded && !Validator.BOOLEAN.test(this.isExcluded)) { throw new ValidationError(_formprefix + "is_excluded", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ConditionalUser.path = "conditionaluser";
ConditionalUser.newBuilder = function() {
    return new ConditionalUser();
};

OAuthAppGroup = function() {
    var _formprefix = "";
    
var oauthAppGroupId = "";
this.setOauthAppGroupId = function(oauthAppGroupId) { 
    this.oauthAppGroupId = oauthAppGroupId;
    return this;
};
this.getOauthAppGroupId = function() {
    return this.oauthAppGroupId;
};
var oauthAppGroupName = "";
this.setOauthAppGroupName = function(oauthAppGroupName) { 
    this.oauthAppGroupName = oauthAppGroupName;
    return this;
};
this.getOauthAppGroupName = function() {
    return this.oauthAppGroupName;
};
var orgType = "-1";
this.setOrgType = function(orgType) { 
    this.orgType = orgType;
    return this;
};
this.getOrgType = function() {
    return this.orgType;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var oauthclient = undefined;
this.setOauthclients = function(oauthclient) { 
    this.oauthclient = oauthclient;
    return this;
};
this.getOauthclients = function() {
    return this.oauthclient;
};
this.addOauthclient = function(oauthclient) { 
 if(!this.oauthclient) this.oauthclient = new Array(); 
  this.oauthclient.push(oauthclient); 
 return this;
};

var oauthkeypair = undefined;
this.setOauthkeypairs = function(oauthkeypair) { 
    this.oauthkeypair = oauthkeypair;
    return this;
};
this.getOauthkeypairs = function() {
    return this.oauthkeypair;
};
this.addOauthkeypair = function(oauthkeypair) { 
 if(!this.oauthkeypair) this.oauthkeypair = new Array(); 
  this.oauthkeypair.push(oauthkeypair); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setOauthAppGroupId(json["oauth_app_group_id"]);
		this.setOauthAppGroupName(json["oauth_app_group_name"]);
		this.setOrgType(json["org_type"]);
		this.setDescription(json["description"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setOauthclients(URI.getResourceArray(json["oAuthClient"],"oauthclient"));
		this.setOauthkeypairs(URI.getResourceArray(json["oAuthKeyPair"],"oauthkeypair"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getOauthAppGroupId()) json += '"oauth_app_group_id"' + ":" + '"' + jsonEscape(this.getOauthAppGroupId())  + '",';
		if(this.getOauthAppGroupName()) json += '"oauth_app_group_name"' + ":" + '"' + jsonEscape(this.getOauthAppGroupName())  + '",';
		if(this.getOrgType()) json += '"org_type"' + ":" + '"' + jsonEscape(this.getOrgType())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getOauthclients()) json += '"oAuthClient"' + ":" + URI.toJSONArray(this.getOauthclients())  + ',';
		if(this.getOauthkeypairs()) json += '"oAuthKeyPair"' + ":" + URI.toJSONArray(this.getOauthkeypairs())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthAppGroup.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.oauthAppGroupId && !(/^[a-zA-Z0-9_\-]+$/).test(this.oauthAppGroupId)) { throw new ValidationError(_formprefix + "oauth_app_group_id", ValidationError.PATTERN_FAILED);}
if(this.oauthAppGroupName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.oauthAppGroupName)) { throw new ValidationError(_formprefix + "oauth_app_group_name", ValidationError.PATTERN_FAILED);}
if(this.orgType && !Validator.INTEGER.test(this.orgType)) { throw new ValidationError(_formprefix + "org_type", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.oauthclient) { for(i=0; i < this.oauthclient.length; i++ ) { this.oauthclient[i].validate(); } }
if(this.oauthkeypair) { for(i=0; i < this.oauthkeypair.length; i++ ) { this.oauthkeypair[i].validate(); } }

	return this;
    }
}
OAuthAppGroup.path = "oauthappgroup";
OAuthAppGroup.newBuilder = function() {
    return new OAuthAppGroup();
};

ScopeDescriptions = function() {
    var _formprefix = "";
    
var operationType = "";
this.setOperationType = function(operationType) { 
    this.operationType = operationType;
    return this;
};
this.getOperationType = function() {
    return this.operationType;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var isI18n = "true";
this.setIsI18n = function(isI18n) { 
    this.isI18n = isI18n;
    return this;
};
this.getIsI18n = function() {
    return this.isI18n;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setOperationType(json["operation_type"]);
		this.setDescription(json["description"]);
		this.setIsI18n(json["is_i18n"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getOperationType()) json += '"operation_type"' + ":" + '"' + jsonEscape(this.getOperationType())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getIsI18n()) json += '"is_i18n"' + ":" + '"' + jsonEscape(this.getIsI18n())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ScopeDescriptions.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.operationType && !(/^[a-zA-Z0-9_\-]+$/).test(this.operationType)) { throw new ValidationError(_formprefix + "operation_type", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[a-zA-Z0-9_\-]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.isI18n && !Validator.BOOLEAN.test(this.isI18n)) { throw new ValidationError(_formprefix + "is_i18n", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ScopeDescriptions.path = "scopedescriptions";
ScopeDescriptions.newBuilder = function() {
    return new ScopeDescriptions();
};

OAuthMobileDevicesDetails = function() {
    var _formprefix = "";
    
var appClientId = "";
this.setAppClientId = function(appClientId) { 
    this.appClientId = appClientId;
    return this;
};
this.getAppClientId = function() {
    return this.appClientId;
};
var projectId = "";
this.setProjectId = function(projectId) { 
    this.projectId = projectId;
    return this;
};
this.getProjectId = function() {
    return this.projectId;
};
var audienceId = "";
this.setAudienceId = function(audienceId) { 
    this.audienceId = audienceId;
    return this;
};
this.getAudienceId = function() {
    return this.audienceId;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppClientId(json["app_client_id"]);
		this.setProjectId(json["project_id"]);
		this.setAudienceId(json["audience_id"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppClientId()) json += '"app_client_id"' + ":" + '"' + jsonEscape(this.getAppClientId())  + '",';
		if(this.getProjectId()) json += '"project_id"' + ":" + '"' + jsonEscape(this.getProjectId())  + '",';
		if(this.getAudienceId()) json += '"audience_id"' + ":" + '"' + jsonEscape(this.getAudienceId())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthMobileDevicesDetails.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.appClientId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.appClientId)) { throw new ValidationError(_formprefix + "app_client_id", ValidationError.PATTERN_FAILED);}
if(this.projectId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.projectId)) { throw new ValidationError(_formprefix + "project_id", ValidationError.PATTERN_FAILED);}
if(this.audienceId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.audienceId)) { throw new ValidationError(_formprefix + "audience_id", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthMobileDevicesDetails.path = "oauthmobiledevicesdetails";
OAuthMobileDevicesDetails.newBuilder = function() {
    return new OAuthMobileDevicesDetails();
};

ScreenName = function() {
    var _formprefix = "";
    
var screenName = "";
this.setScreenName = function(screenName) { 
    this.screenName = screenName;
    return this;
};
this.getScreenName = function() {
    return this.screenName;
};
var isLoginName = "";
this.setIsLoginName = function(isLoginName) { 
    this.isLoginName = isLoginName;
    return this;
};
this.getIsLoginName = function() {
    return this.isLoginName;
};
var isZohoEmailId = "false";
this.setIsZohoEmailId = function(isZohoEmailId) { 
    this.isZohoEmailId = isZohoEmailId;
    return this;
};
this.getIsZohoEmailId = function() {
    return this.isZohoEmailId;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScreenName(json["screen_name"]);
		this.setIsLoginName(json["is_login_name"]);
		this.setIsZohoEmailId(json["is_zoho_email_id"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScreenName()) json += '"screen_name"' + ":" + '"' + jsonEscape(this.getScreenName())  + '",';
		if(this.getIsLoginName()) json += '"is_login_name"' + ":" + '"' + jsonEscape(this.getIsLoginName())  + '",';
		if(this.getIsZohoEmailId()) json += '"is_zoho_email_id"' + ":" + '"' + jsonEscape(this.getIsZohoEmailId())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ScreenName.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.screenName && !(/^([\p{L}\p{M}\p{N}\_\.]+)$/).test(this.screenName)) { throw new ValidationError(_formprefix + "screen_name", ValidationError.PATTERN_FAILED);}
if(this.isLoginName && !Validator.BOOLEAN.test(this.isLoginName)) { throw new ValidationError(_formprefix + "is_login_name", ValidationError.PATTERN_FAILED);}
if(this.isZohoEmailId && !Validator.BOOLEAN.test(this.isZohoEmailId)) { throw new ValidationError(_formprefix + "is_zoho_email_id", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ScreenName.path = "screenname";
ScreenName.newBuilder = function() {
    return new ScreenName();
};

JWTConfiguration = function() {
    var _formprefix = "";
    
var jwt = "0";
this.setJwt = function(jwt) { 
    this.jwt = jwt;
    return this;
};
this.getJwt = function() {
    return this.jwt;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var loginUrl = "";
this.setLoginUrl = function(loginUrl) { 
    this.loginUrl = loginUrl;
    return this;
};
this.getLoginUrl = function() {
    return this.loginUrl;
};
var logoutUrl = "";
this.setLogoutUrl = function(logoutUrl) { 
    this.logoutUrl = logoutUrl;
    return this;
};
this.getLogoutUrl = function() {
    return this.logoutUrl;
};
var algorithm = "";
this.setAlgorithm = function(algorithm) { 
    this.algorithm = algorithm;
    return this;
};
this.getAlgorithm = function() {
    return this.algorithm;
};
var key = "";
this.setKey = function(key) { 
    this.key = key;
    return this;
};
this.getKey = function() {
    return this.key;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var jwtparams = undefined;
this.setJwtparamss = function(jwtparams) { 
    this.jwtparams = jwtparams;
    return this;
};
this.getJwtparamss = function() {
    return this.jwtparams;
};
this.addJwtparams = function(jwtparams) { 
 if(!this.jwtparams) this.jwtparams = new Array(); 
  this.jwtparams.push(jwtparams); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setJwt(json["jwt"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setLoginUrl(json["login_url"]);
		this.setLogoutUrl(json["logout_url"]);
		this.setAlgorithm(json["algorithm"]);
		this.setKey(json["key"]);
		this.setModifiedTime(json["modified_time"]);
		this.setJwtparamss(URI.getResourceArray(json["jWTParams"],"jwtparams"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getJwt()) json += '"jwt"' + ":" + '"' + jsonEscape(this.getJwt())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getLoginUrl()) json += '"login_url"' + ":" + '"' + jsonEscape(this.getLoginUrl())  + '",';
		if(this.getLogoutUrl()) json += '"logout_url"' + ":" + '"' + jsonEscape(this.getLogoutUrl())  + '",';
		if(this.getAlgorithm()) json += '"algorithm"' + ":" + '"' + jsonEscape(this.getAlgorithm())  + '",';
		if(this.getKey()) json += '"key"' + ":" + '"' + jsonEscape(this.getKey())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getJwtparamss()) json += '"jWTParams"' + ":" + URI.toJSONArray(this.getJwtparamss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(JWTConfiguration.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.jwtparams) { for(i=0; i < this.jwtparams.length; i++ ) { this.jwtparams[i].validate(); } }

	return this;
    }
}
JWTConfiguration.path = "jwtconfiguration";
JWTConfiguration.newBuilder = function() {
    return new JWTConfiguration();
};

AppAccountInvitationTemplate = function() {
    var _formprefix = "";
    
var templateId = "";
this.setTemplateId = function(templateId) { 
    this.templateId = templateId;
    return this;
};
this.getTemplateId = function() {
    return this.templateId;
};
var templateName = "";
this.setTemplateName = function(templateName) { 
    this.templateName = templateName;
    return this;
};
this.getTemplateName = function() {
    return this.templateName;
};
var senderEmailId = "";
this.setSenderEmailId = function(senderEmailId) { 
    this.senderEmailId = senderEmailId;
    return this;
};
this.getSenderEmailId = function() {
    return this.senderEmailId;
};
var replyToEmailId = "";
this.setReplyToEmailId = function(replyToEmailId) { 
    this.replyToEmailId = replyToEmailId;
    return this;
};
this.getReplyToEmailId = function() {
    return this.replyToEmailId;
};
var emailSubject = "";
this.setEmailSubject = function(emailSubject) { 
    this.emailSubject = emailSubject;
    return this;
};
this.getEmailSubject = function() {
    return this.emailSubject;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTemplateId(json["template_id"]);
		this.setTemplateName(json["template_name"]);
		this.setSenderEmailId(json["sender_email_id"]);
		this.setReplyToEmailId(json["reply_to_email_id"]);
		this.setEmailSubject(json["email_subject"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTemplateId()) json += '"template_id"' + ":" + '"' + jsonEscape(this.getTemplateId())  + '",';
		if(this.getTemplateName()) json += '"template_name"' + ":" + '"' + jsonEscape(this.getTemplateName())  + '",';
		if(this.getSenderEmailId()) json += '"sender_email_id"' + ":" + '"' + jsonEscape(this.getSenderEmailId())  + '",';
		if(this.getReplyToEmailId()) json += '"reply_to_email_id"' + ":" + '"' + jsonEscape(this.getReplyToEmailId())  + '",';
		if(this.getEmailSubject()) json += '"email_subject"' + ":" + '"' + jsonEscape(this.getEmailSubject())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccountInvitationTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.templateId && !Validator.INTEGER.test(this.templateId)) { throw new ValidationError(_formprefix + "template_id", ValidationError.PATTERN_FAILED);}
if(this.templateName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.templateName)) { throw new ValidationError(_formprefix + "template_name", ValidationError.PATTERN_FAILED);}
if(this.senderEmailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.senderEmailId)) { throw new ValidationError(_formprefix + "sender_email_id", ValidationError.PATTERN_FAILED);}
if(this.replyToEmailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.replyToEmailId)) { throw new ValidationError(_formprefix + "reply_to_email_id", ValidationError.PATTERN_FAILED);}
if(this.emailSubject && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.emailSubject)) { throw new ValidationError(_formprefix + "email_subject", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAccountInvitationTemplate.path = "appaccountinvitationtemplate";
AppAccountInvitationTemplate.newBuilder = function() {
    return new AppAccountInvitationTemplate();
};

OAuthInternalToken = function() {
    var _formprefix = "";
    
var tokenName = "";
this.setTokenName = function(tokenName) { 
    this.tokenName = tokenName;
    return this;
};
this.getTokenName = function() {
    return this.tokenName;
};
var tokenValue = "";
this.setTokenValue = function(tokenValue) { 
    this.tokenValue = tokenValue;
    return this;
};
this.getTokenValue = function() {
    return this.tokenValue;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTokenName(json["token_name"]);
		this.setTokenValue(json["token_value"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTokenName()) json += '"token_name"' + ":" + '"' + jsonEscape(this.getTokenName())  + '",';
		if(this.getTokenValue()) json += '"token_value"' + ":" + '"' + jsonEscape(this.getTokenValue())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthInternalToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.tokenName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.tokenName)) { throw new ValidationError(_formprefix + "token_name", ValidationError.PATTERN_FAILED);}
if(this.tokenValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.tokenValue)) { throw new ValidationError(_formprefix + "token_value", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthInternalToken.path = "oauthinternaltoken";
OAuthInternalToken.newBuilder = function() {
    return new OAuthInternalToken();
};

Password = function() {
    var _formprefix = "";
    
var password = "";
this.setPassword = function(password) { 
    this.password = password;
    return this;
};
this.getPassword = function() {
    return this.password;
};
var salt = "";
this.setSalt = function(salt) { 
    this.salt = salt;
    return this;
};
this.getSalt = function() {
    return this.salt;
};
var isPasswordExpired = "false";
this.setIsPasswordExpired = function(isPasswordExpired) { 
    this.isPasswordExpired = isPasswordExpired;
    return this;
};
this.getIsPasswordExpired = function() {
    return this.isPasswordExpired;
};
var isOneTimePassword = "false";
this.setIsOneTimePassword = function(isOneTimePassword) { 
    this.isOneTimePassword = isOneTimePassword;
    return this;
};
this.getIsOneTimePassword = function() {
    return this.isOneTimePassword;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPassword(json["password"]);
		this.setSalt(json["salt"]);
		this.setIsPasswordExpired(json["is_password_expired"]);
		this.setIsOneTimePassword(json["is_one_time_password"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPassword()) json += '"password"' + ":" + '"' + jsonEscape(this.getPassword())  + '",';
		if(this.getSalt()) json += '"salt"' + ":" + '"' + jsonEscape(this.getSalt())  + '",';
		if(this.getIsPasswordExpired()) json += '"is_password_expired"' + ":" + '"' + jsonEscape(this.getIsPasswordExpired())  + '",';
		if(this.getIsOneTimePassword()) json += '"is_one_time_password"' + ":" + '"' + jsonEscape(this.getIsOneTimePassword())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Password.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.password && !(/dontdisturb/).test(this.password)) { throw new ValidationError(_formprefix + "password", ValidationError.PATTERN_FAILED);}
if(this.salt && !(/^([A-Za-z0-9_.\-]+)$/).test(this.salt)) { throw new ValidationError(_formprefix + "salt", ValidationError.PATTERN_FAILED);}
if(this.isPasswordExpired && !Validator.BOOLEAN.test(this.isPasswordExpired)) { throw new ValidationError(_formprefix + "is_password_expired", ValidationError.PATTERN_FAILED);}
if(this.isOneTimePassword && !Validator.BOOLEAN.test(this.isOneTimePassword)) { throw new ValidationError(_formprefix + "is_one_time_password", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Password.path = "password";
Password.newBuilder = function() {
    return new Password();
};

UserName = function() {
    var _formprefix = "";
    
var userName = "";
this.setUserName = function(userName) { 
    this.userName = userName;
    return this;
};
this.getUserName = function() {
    return this.userName;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setUserName(json["user_name"]);
		this.setZuid(json["zuid"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getUserName()) json += '"user_name"' + ":" + '"' + jsonEscape(this.getUserName())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserName.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.userName && !(/^([\p{L}\p{M}\p{N}\_\.]+)$/).test(this.userName)) { throw new ValidationError(_formprefix + "user_name", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserName.path = "username";
UserName.newBuilder = function() {
    return new UserName();
};

MobileCount = function() {
    var _formprefix = "";
    
var mobile = "";
this.setMobile = function(mobile) { 
    this.mobile = mobile;
    return this;
};
this.getMobile = function() {
    return this.mobile;
};
var count = "0";
this.setCount = function(count) { 
    this.count = count;
    return this;
};
this.getCount = function() {
    return this.count;
};
var zuids = "";
this.setZuids = function(zuids) { 
    this.zuids = zuids;
    return this;
};
this.getZuids = function() {
    return this.zuids;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setMobile(json["mobile"]);
		this.setCount(json["count"]);
		this.setZuids(json["zuids"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getMobile()) json += '"mobile"' + ":" + '"' + jsonEscape(this.getMobile())  + '",';
		if(this.getCount()) json += '"count"' + ":" + '"' + jsonEscape(this.getCount())  + '",';
		if(this.getZuids()) json += '"zuids"' + ":" + '"' + jsonEscape(this.getZuids())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MobileCount.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.mobile && !(/xss:throwerror/).test(this.mobile)) { throw new ValidationError(_formprefix + "mobile", ValidationError.PATTERN_FAILED);}
if(this.count && !Validator.INTEGER.test(this.count)) { throw new ValidationError(_formprefix + "count", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
MobileCount.path = "mobilecount";
MobileCount.newBuilder = function() {
    return new MobileCount();
};

GroupInvitation = function() {
    var _formprefix = "";
    
var inviteEmailId = "";
this.setInviteEmailId = function(inviteEmailId) { 
    this.inviteEmailId = inviteEmailId;
    return this;
};
this.getInviteEmailId = function() {
    return this.inviteEmailId;
};
var inviteZuid = "-1";
this.setInviteZuid = function(inviteZuid) { 
    this.inviteZuid = inviteZuid;
    return this;
};
this.getInviteZuid = function() {
    return this.inviteZuid;
};
var inviteStatus = "0";
this.setInviteStatus = function(inviteStatus) { 
    this.inviteStatus = inviteStatus;
    return this;
};
this.getInviteStatus = function() {
    return this.inviteStatus;
};
var fullName = "";
this.setFullName = function(fullName) { 
    this.fullName = fullName;
    return this;
};
this.getFullName = function() {
    return this.fullName;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var loginName = "";
this.setLoginName = function(loginName) { 
    this.loginName = loginName;
    return this;
};
this.getLoginName = function() {
    return this.loginName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setInviteEmailId(json["invite_email_id"]);
		this.setInviteZuid(json["invite_zuid"]);
		this.setInviteStatus(json["invite_status"]);
		this.setFullName(json["full_name"]);
		this.setDisplayName(json["display_name"]);
		this.setLoginName(json["login_name"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getInviteEmailId()) json += '"invite_email_id"' + ":" + '"' + jsonEscape(this.getInviteEmailId())  + '",';
		if(this.getInviteZuid()) json += '"invite_zuid"' + ":" + '"' + jsonEscape(this.getInviteZuid())  + '",';
		if(this.getInviteStatus()) json += '"invite_status"' + ":" + '"' + jsonEscape(this.getInviteStatus())  + '",';
		if(this.getFullName()) json += '"full_name"' + ":" + '"' + jsonEscape(this.getFullName())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getLoginName()) json += '"login_name"' + ":" + '"' + jsonEscape(this.getLoginName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(GroupInvitation.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.inviteEmailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.inviteEmailId)) { throw new ValidationError(_formprefix + "invite_email_id", ValidationError.PATTERN_FAILED);}
if(this.inviteZuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.inviteZuid)) { throw new ValidationError(_formprefix + "invite_zuid", ValidationError.PATTERN_FAILED);}
if(this.inviteStatus && !Validator.INTEGER.test(this.inviteStatus)) { throw new ValidationError(_formprefix + "invite_status", ValidationError.PATTERN_FAILED);}
if(this.fullName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.fullName)) { throw new ValidationError(_formprefix + "full_name", ValidationError.PATTERN_FAILED);}
if(this.displayName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.displayName)) { throw new ValidationError(_formprefix + "display_name", ValidationError.PATTERN_FAILED);}
if(this.loginName && !(/^([\p{L}\p{M}\p{N}\_\.]+)|[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.loginName)) { throw new ValidationError(_formprefix + "login_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
GroupInvitation.path = "groupinvitation";
GroupInvitation.newBuilder = function() {
    return new GroupInvitation();
};

AccountAuditTemplate = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var operationId = "";
this.setOperationId = function(operationId) { 
    this.operationId = operationId;
    return this;
};
this.getOperationId = function() {
    return this.operationId;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var tokenDigest = "";
this.setTokenDigest = function(tokenDigest) { 
    this.tokenDigest = tokenDigest;
    return this;
};
this.getTokenDigest = function() {
    return this.tokenDigest;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setZuid(json["zuid"]);
		this.setAppId(json["app_id"]);
		this.setOperationId(json["operation_id"]);
		this.setIpAddress(json["ip_address"]);
		this.setReferrer(json["referrer"]);
		this.setTokenDigest(json["token_digest"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getOperationId()) json += '"operation_id"' + ":" + '"' + jsonEscape(this.getOperationId())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getTokenDigest()) json += '"token_digest"' + ":" + '"' + jsonEscape(this.getTokenDigest())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountAuditTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.appId && !Validator.INTEGER.test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.operationId && !Validator.INTEGER.test(this.operationId)) { throw new ValidationError(_formprefix + "operation_id", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.tokenDigest && !(/dontdisturb/).test(this.tokenDigest)) { throw new ValidationError(_formprefix + "token_digest", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountAuditTemplate.path = "accountaudittemplate";
AccountAuditTemplate.newBuilder = function() {
    return new AccountAuditTemplate();
};

UserMailFetchLocation = function() {
    var _formprefix = "";
    
var locationId = "";
this.setLocationId = function(locationId) { 
    this.locationId = locationId;
    return this;
};
this.getLocationId = function() {
    return this.locationId;
};
var location = "";
this.setLocation = function(location) { 
    this.location = location;
    return this;
};
this.getLocation = function() {
    return this.location;
};
var latitude = "";
this.setLatitude = function(latitude) { 
    this.latitude = latitude;
    return this;
};
this.getLatitude = function() {
    return this.latitude;
};
var longitude = "";
this.setLongitude = function(longitude) { 
    this.longitude = longitude;
    return this;
};
this.getLongitude = function() {
    return this.longitude;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLocationId(json["location_id"]);
		this.setLocation(json["location"]);
		this.setLatitude(json["latitude"]);
		this.setLongitude(json["longitude"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLocationId()) json += '"location_id"' + ":" + '"' + jsonEscape(this.getLocationId())  + '",';
		if(this.getLocation()) json += '"location"' + ":" + '"' + jsonEscape(this.getLocation())  + '",';
		if(this.getLatitude()) json += '"latitude"' + ":" + '"' + jsonEscape(this.getLatitude())  + '",';
		if(this.getLongitude()) json += '"longitude"' + ":" + '"' + jsonEscape(this.getLongitude())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserMailFetchLocation.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.locationId && !Validator.INTEGER.test(this.locationId)) { throw new ValidationError(_formprefix + "location_id", ValidationError.PATTERN_FAILED);}
if(this.latitude && !(/^[0-9\-\.]*$/).test(this.latitude)) { throw new ValidationError(_formprefix + "latitude", ValidationError.PATTERN_FAILED);}
if(this.longitude && !(/^[0-9\-\.]*$/).test(this.longitude)) { throw new ValidationError(_formprefix + "longitude", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserMailFetchLocation.path = "usermailfetchlocation";
UserMailFetchLocation.newBuilder = function() {
    return new UserMailFetchLocation();
};

ServiceOrgMember = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var isActive = "1";
this.setIsActive = function(isActive) { 
    this.isActive = isActive;
    return this;
};
this.getIsActive = function() {
    return this.isActive;
};
var userRole = "0";
this.setUserRole = function(userRole) { 
    this.userRole = userRole;
    return this;
};
this.getUserRole = function() {
    return this.userRole;
};
var userType = "1";
this.setUserType = function(userType) { 
    this.userType = userType;
    return this;
};
this.getUserType = function() {
    return this.userType;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var serviceorgmemberrole = undefined;
this.setServiceorgmemberroles = function(serviceorgmemberrole) { 
    this.serviceorgmemberrole = serviceorgmemberrole;
    return this;
};
this.getServiceorgmemberroles = function() {
    return this.serviceorgmemberrole;
};
this.addServiceorgmemberrole = function(serviceorgmemberrole) { 
 if(!this.serviceorgmemberrole) this.serviceorgmemberrole = new Array(); 
  this.serviceorgmemberrole.push(serviceorgmemberrole); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setIsActive(json["is_active"]);
		this.setUserRole(json["user_role"]);
		this.setUserType(json["user_type"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setServiceorgmemberroles(URI.getResourceArray(json["serviceOrgMemberRole"],"serviceorgmemberrole"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getIsActive()) json += '"is_active"' + ":" + '"' + jsonEscape(this.getIsActive())  + '",';
		if(this.getUserRole()) json += '"user_role"' + ":" + '"' + jsonEscape(this.getUserRole())  + '",';
		if(this.getUserType()) json += '"user_type"' + ":" + '"' + jsonEscape(this.getUserType())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getServiceorgmemberroles()) json += '"serviceOrgMemberRole"' + ":" + URI.toJSONArray(this.getServiceorgmemberroles())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgMember.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.userRole && !Validator.INTEGER.test(this.userRole)) { throw new ValidationError(_formprefix + "user_role", ValidationError.PATTERN_FAILED);}
if(this.userType && !Validator.INTEGER.test(this.userType)) { throw new ValidationError(_formprefix + "user_type", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.serviceorgmemberrole) { for(i=0; i < this.serviceorgmemberrole.length; i++ ) { this.serviceorgmemberrole[i].validate(); } }

	return this;
    }
}
ServiceOrgMember.path = "serviceorgmember";
ServiceOrgMember.newBuilder = function() {
    return new ServiceOrgMember();
};

ISCTicketScope = function() {
    var _formprefix = "";
    
var iscTicket = "";
this.setIscTicket = function(iscTicket) { 
    this.iscTicket = iscTicket;
    return this;
};
this.getIscTicket = function() {
    return this.iscTicket;
};
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setIscTicket(json["isc_ticket"]);
		this.setScopeId(json["scope_id"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getIscTicket()) json += '"isc_ticket"' + ":" + '"' + jsonEscape(this.getIscTicket())  + '",';
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ISCTicketScope.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.iscTicket && !(/^(?:[a-z0-9\.\-])+$/).test(this.iscTicket)) { throw new ValidationError(_formprefix + "isc_ticket", ValidationError.PATTERN_FAILED);}
if(this.scopeId && !Validator.INTEGER.test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ISCTicketScope.path = "iscticketscope";
ISCTicketScope.newBuilder = function() {
    return new ISCTicketScope();
};

AccountRemoteAuthConf = function() {
    var _formprefix = "";
    
var remoteAuthName = "";
this.setRemoteAuthName = function(remoteAuthName) { 
    this.remoteAuthName = remoteAuthName;
    return this;
};
this.getRemoteAuthName = function() {
    return this.remoteAuthName;
};
var remoteAuthType = "";
this.setRemoteAuthType = function(remoteAuthType) { 
    this.remoteAuthType = remoteAuthType;
    return this;
};
this.getRemoteAuthType = function() {
    return this.remoteAuthType;
};
var secretKey = "";
this.setSecretKey = function(secretKey) { 
    this.secretKey = secretKey;
    return this;
};
this.getSecretKey = function() {
    return this.secretKey;
};
var verificationUrl = "";
this.setVerificationUrl = function(verificationUrl) { 
    this.verificationUrl = verificationUrl;
    return this;
};
this.getVerificationUrl = function() {
    return this.verificationUrl;
};
var defaultServiceName = "";
this.setDefaultServiceName = function(defaultServiceName) { 
    this.defaultServiceName = defaultServiceName;
    return this;
};
this.getDefaultServiceName = function() {
    return this.defaultServiceName;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRemoteAuthName(json["remote_auth_name"]);
		this.setRemoteAuthType(json["remote_auth_type"]);
		this.setSecretKey(json["secret_key"]);
		this.setVerificationUrl(json["verification_url"]);
		this.setDefaultServiceName(json["default_service_name"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRemoteAuthName()) json += '"remote_auth_name"' + ":" + '"' + jsonEscape(this.getRemoteAuthName())  + '",';
		if(this.getRemoteAuthType()) json += '"remote_auth_type"' + ":" + '"' + jsonEscape(this.getRemoteAuthType())  + '",';
		if(this.getSecretKey()) json += '"secret_key"' + ":" + '"' + jsonEscape(this.getSecretKey())  + '",';
		if(this.getVerificationUrl()) json += '"verification_url"' + ":" + '"' + jsonEscape(this.getVerificationUrl())  + '",';
		if(this.getDefaultServiceName()) json += '"default_service_name"' + ":" + '"' + jsonEscape(this.getDefaultServiceName())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountRemoteAuthConf.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.remoteAuthType && !Validator.INTEGER.test(this.remoteAuthType)) { throw new ValidationError(_formprefix + "remote_auth_type", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountRemoteAuthConf.path = "accountremoteauthconf";
AccountRemoteAuthConf.newBuilder = function() {
    return new AccountRemoteAuthConf();
};

AppAccountAddress = function() {
    var _formprefix = "";
    
var addressType = "";
this.setAddressType = function(addressType) { 
    this.addressType = addressType;
    return this;
};
this.getAddressType = function() {
    return this.addressType;
};
var name = "";
this.setName = function(name) { 
    this.name = name;
    return this;
};
this.getName = function() {
    return this.name;
};
var locationName = "";
this.setLocationName = function(locationName) { 
    this.locationName = locationName;
    return this;
};
this.getLocationName = function() {
    return this.locationName;
};
var postBox = "";
this.setPostBox = function(postBox) { 
    this.postBox = postBox;
    return this;
};
this.getPostBox = function() {
    return this.postBox;
};
var streetAddress = "";
this.setStreetAddress = function(streetAddress) { 
    this.streetAddress = streetAddress;
    return this;
};
this.getStreetAddress = function() {
    return this.streetAddress;
};
var city = "";
this.setCity = function(city) { 
    this.city = city;
    return this;
};
this.getCity = function() {
    return this.city;
};
var state = "";
this.setState = function(state) { 
    this.state = state;
    return this;
};
this.getState = function() {
    return this.state;
};
var country = "";
this.setCountry = function(country) { 
    this.country = country;
    return this;
};
this.getCountry = function() {
    return this.country;
};
var postalCode = "";
this.setPostalCode = function(postalCode) { 
    this.postalCode = postalCode;
    return this;
};
this.getPostalCode = function() {
    return this.postalCode;
};
var latitude = "";
this.setLatitude = function(latitude) { 
    this.latitude = latitude;
    return this;
};
this.getLatitude = function() {
    return this.latitude;
};
var longitude = "";
this.setLongitude = function(longitude) { 
    this.longitude = longitude;
    return this;
};
this.getLongitude = function() {
    return this.longitude;
};
var phone = "";
this.setPhone = function(phone) { 
    this.phone = phone;
    return this;
};
this.getPhone = function() {
    return this.phone;
};
var extension = "";
this.setExtension = function(extension) { 
    this.extension = extension;
    return this;
};
this.getExtension = function() {
    return this.extension;
};
var mobile = "";
this.setMobile = function(mobile) { 
    this.mobile = mobile;
    return this;
};
this.getMobile = function() {
    return this.mobile;
};
var fax = "";
this.setFax = function(fax) { 
    this.fax = fax;
    return this;
};
this.getFax = function() {
    return this.fax;
};
var timezone = "";
this.setTimezone = function(timezone) { 
    this.timezone = timezone;
    return this;
};
this.getTimezone = function() {
    return this.timezone;
};
var language = "";
this.setLanguage = function(language) { 
    this.language = language;
    return this;
};
this.getLanguage = function() {
    return this.language;
};
var websiteUrl = "";
this.setWebsiteUrl = function(websiteUrl) { 
    this.websiteUrl = websiteUrl;
    return this;
};
this.getWebsiteUrl = function() {
    return this.websiteUrl;
};
var blogUrl = "";
this.setBlogUrl = function(blogUrl) { 
    this.blogUrl = blogUrl;
    return this;
};
this.getBlogUrl = function() {
    return this.blogUrl;
};
var twitterUrl = "";
this.setTwitterUrl = function(twitterUrl) { 
    this.twitterUrl = twitterUrl;
    return this;
};
this.getTwitterUrl = function() {
    return this.twitterUrl;
};
var linkedinUrl = "";
this.setLinkedinUrl = function(linkedinUrl) { 
    this.linkedinUrl = linkedinUrl;
    return this;
};
this.getLinkedinUrl = function() {
    return this.linkedinUrl;
};
var flickrUrl = "";
this.setFlickrUrl = function(flickrUrl) { 
    this.flickrUrl = flickrUrl;
    return this;
};
this.getFlickrUrl = function() {
    return this.flickrUrl;
};
var deliciousUrl = "";
this.setDeliciousUrl = function(deliciousUrl) { 
    this.deliciousUrl = deliciousUrl;
    return this;
};
this.getDeliciousUrl = function() {
    return this.deliciousUrl;
};
var amazonUrl = "";
this.setAmazonUrl = function(amazonUrl) { 
    this.amazonUrl = amazonUrl;
    return this;
};
this.getAmazonUrl = function() {
    return this.amazonUrl;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAddressType(json["address_type"]);
		this.setName(json["name"]);
		this.setLocationName(json["location_name"]);
		this.setPostBox(json["post_box"]);
		this.setStreetAddress(json["street_address"]);
		this.setCity(json["city"]);
		this.setState(json["state"]);
		this.setCountry(json["country"]);
		this.setPostalCode(json["postal_code"]);
		this.setLatitude(json["latitude"]);
		this.setLongitude(json["longitude"]);
		this.setPhone(json["phone"]);
		this.setExtension(json["extension"]);
		this.setMobile(json["mobile"]);
		this.setFax(json["fax"]);
		this.setTimezone(json["timezone"]);
		this.setLanguage(json["language"]);
		this.setWebsiteUrl(json["website_url"]);
		this.setBlogUrl(json["blog_url"]);
		this.setTwitterUrl(json["twitter_url"]);
		this.setLinkedinUrl(json["linkedin_url"]);
		this.setFlickrUrl(json["flickr_url"]);
		this.setDeliciousUrl(json["delicious_url"]);
		this.setAmazonUrl(json["amazon_url"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAddressType()) json += '"address_type"' + ":" + '"' + jsonEscape(this.getAddressType())  + '",';
		if(this.getName()) json += '"name"' + ":" + '"' + jsonEscape(this.getName())  + '",';
		if(this.getLocationName()) json += '"location_name"' + ":" + '"' + jsonEscape(this.getLocationName())  + '",';
		if(this.getPostBox()) json += '"post_box"' + ":" + '"' + jsonEscape(this.getPostBox())  + '",';
		if(this.getStreetAddress()) json += '"street_address"' + ":" + '"' + jsonEscape(this.getStreetAddress())  + '",';
		if(this.getCity()) json += '"city"' + ":" + '"' + jsonEscape(this.getCity())  + '",';
		if(this.getState()) json += '"state"' + ":" + '"' + jsonEscape(this.getState())  + '",';
		if(this.getCountry()) json += '"country"' + ":" + '"' + jsonEscape(this.getCountry())  + '",';
		if(this.getPostalCode()) json += '"postal_code"' + ":" + '"' + jsonEscape(this.getPostalCode())  + '",';
		if(this.getLatitude()) json += '"latitude"' + ":" + '"' + jsonEscape(this.getLatitude())  + '",';
		if(this.getLongitude()) json += '"longitude"' + ":" + '"' + jsonEscape(this.getLongitude())  + '",';
		if(this.getPhone()) json += '"phone"' + ":" + '"' + jsonEscape(this.getPhone())  + '",';
		if(this.getExtension()) json += '"extension"' + ":" + '"' + jsonEscape(this.getExtension())  + '",';
		if(this.getMobile()) json += '"mobile"' + ":" + '"' + jsonEscape(this.getMobile())  + '",';
		if(this.getFax()) json += '"fax"' + ":" + '"' + jsonEscape(this.getFax())  + '",';
		if(this.getTimezone()) json += '"timezone"' + ":" + '"' + jsonEscape(this.getTimezone())  + '",';
		if(this.getLanguage()) json += '"language"' + ":" + '"' + jsonEscape(this.getLanguage())  + '",';
		if(this.getWebsiteUrl()) json += '"website_url"' + ":" + '"' + jsonEscape(this.getWebsiteUrl())  + '",';
		if(this.getBlogUrl()) json += '"blog_url"' + ":" + '"' + jsonEscape(this.getBlogUrl())  + '",';
		if(this.getTwitterUrl()) json += '"twitter_url"' + ":" + '"' + jsonEscape(this.getTwitterUrl())  + '",';
		if(this.getLinkedinUrl()) json += '"linkedin_url"' + ":" + '"' + jsonEscape(this.getLinkedinUrl())  + '",';
		if(this.getFlickrUrl()) json += '"flickr_url"' + ":" + '"' + jsonEscape(this.getFlickrUrl())  + '",';
		if(this.getDeliciousUrl()) json += '"delicious_url"' + ":" + '"' + jsonEscape(this.getDeliciousUrl())  + '",';
		if(this.getAmazonUrl()) json += '"amazon_url"' + ":" + '"' + jsonEscape(this.getAmazonUrl())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccountAddress.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.addressType && !Validator.INTEGER.test(this.addressType)) { throw new ValidationError(_formprefix + "address_type", ValidationError.PATTERN_FAILED);}
if(this.name && !(/xss:throwerror/).test(this.name)) { throw new ValidationError(_formprefix + "name", ValidationError.PATTERN_FAILED);}
if(this.locationName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.locationName)) { throw new ValidationError(_formprefix + "location_name", ValidationError.PATTERN_FAILED);}
if(this.postBox && !(/xss:throwerror/).test(this.postBox)) { throw new ValidationError(_formprefix + "post_box", ValidationError.PATTERN_FAILED);}
if(this.streetAddress && !(/xss:throwerror/).test(this.streetAddress)) { throw new ValidationError(_formprefix + "street_address", ValidationError.PATTERN_FAILED);}
if(this.city && !(/xss:throwerror/).test(this.city)) { throw new ValidationError(_formprefix + "city", ValidationError.PATTERN_FAILED);}
if(this.state && !(/xss:throwerror/).test(this.state)) { throw new ValidationError(_formprefix + "state", ValidationError.PATTERN_FAILED);}
if(this.country && !(/^[a-zA-Z0-9]{2,5}$/).test(this.country)) { throw new ValidationError(_formprefix + "country", ValidationError.PATTERN_FAILED);}
if(this.postalCode && !(/xss:throwerror/).test(this.postalCode)) { throw new ValidationError(_formprefix + "postal_code", ValidationError.PATTERN_FAILED);}
if(this.latitude && !(/^[0-9\-\.]*$/).test(this.latitude)) { throw new ValidationError(_formprefix + "latitude", ValidationError.PATTERN_FAILED);}
if(this.longitude && !(/^[0-9\-\.]*$/).test(this.longitude)) { throw new ValidationError(_formprefix + "longitude", ValidationError.PATTERN_FAILED);}
if(this.phone && !(/xss:throwerror/).test(this.phone)) { throw new ValidationError(_formprefix + "phone", ValidationError.PATTERN_FAILED);}
if(this.extension && !(/xss:throwerror/).test(this.extension)) { throw new ValidationError(_formprefix + "extension", ValidationError.PATTERN_FAILED);}
if(this.mobile && !(/xss:throwerror/).test(this.mobile)) { throw new ValidationError(_formprefix + "mobile", ValidationError.PATTERN_FAILED);}
if(this.fax && !(/xss:throwerror/).test(this.fax)) { throw new ValidationError(_formprefix + "fax", ValidationError.PATTERN_FAILED);}
if(this.timezone && !(/xss:throwerror/).test(this.timezone)) { throw new ValidationError(_formprefix + "timezone", ValidationError.PATTERN_FAILED);}
if(this.language && !(/^[a-zA-Z-]{0,5}$/).test(this.language)) { throw new ValidationError(_formprefix + "language", ValidationError.PATTERN_FAILED);}
if(this.websiteUrl && !(/xss:throwerror/).test(this.websiteUrl)) { throw new ValidationError(_formprefix + "website_url", ValidationError.PATTERN_FAILED);}
if(this.blogUrl && !(/xss:throwerror/).test(this.blogUrl)) { throw new ValidationError(_formprefix + "blog_url", ValidationError.PATTERN_FAILED);}
if(this.twitterUrl && !(/xss:throwerror/).test(this.twitterUrl)) { throw new ValidationError(_formprefix + "twitter_url", ValidationError.PATTERN_FAILED);}
if(this.linkedinUrl && !(/xss:throwerror/).test(this.linkedinUrl)) { throw new ValidationError(_formprefix + "linkedin_url", ValidationError.PATTERN_FAILED);}
if(this.flickrUrl && !(/xss:throwerror/).test(this.flickrUrl)) { throw new ValidationError(_formprefix + "flickr_url", ValidationError.PATTERN_FAILED);}
if(this.deliciousUrl && !(/xss:throwerror/).test(this.deliciousUrl)) { throw new ValidationError(_formprefix + "delicious_url", ValidationError.PATTERN_FAILED);}
if(this.amazonUrl && !(/xss:throwerror/).test(this.amazonUrl)) { throw new ValidationError(_formprefix + "amazon_url", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAccountAddress.path = "appaccountaddress";
AppAccountAddress.newBuilder = function() {
    return new AppAccountAddress();
};

AuthTokenDetails = function() {
    var _formprefix = "";
    
var details = "";
this.setDetails = function(details) { 
    this.details = details;
    return this;
};
this.getDetails = function() {
    return this.details;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDetails(json["details"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDetails()) json += '"details"' + ":" + '"' + jsonEscape(this.getDetails())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AuthTokenDetails.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AuthTokenDetails.path = "authtokendetails";
AuthTokenDetails.newBuilder = function() {
    return new AuthTokenDetails();
};

OIDCApp = function() {
    var _formprefix = "";
    
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
var isPrimary = "0";
this.setIsPrimary = function(isPrimary) { 
    this.isPrimary = isPrimary;
    return this;
};
this.getIsPrimary = function() {
    return this.isPrimary;
};
var isEnabled = "1";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClientZid(json["client_zid"]);
		this.setIsPrimary(json["is_primary"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';
		if(this.getIsPrimary()) json += '"is_primary"' + ":" + '"' + jsonEscape(this.getIsPrimary())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OIDCApp.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OIDCApp.path = "oidcapp";
OIDCApp.newBuilder = function() {
    return new OIDCApp();
};

Scope = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var scope = "";
this.setScope = function(scope) { 
    this.scope = scope;
    return this;
};
this.getScope = function() {
    return this.scope;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var parentScopeId = "-1";
this.setParentScopeId = function(parentScopeId) { 
    this.parentScopeId = parentScopeId;
    return this;
};
this.getParentScopeId = function() {
    return this.parentScopeId;
};
var internal = "1";
this.setInternal = function(internal) { 
    this.internal = internal;
    return this;
};
this.getInternal = function() {
    return this.internal;
};
var exposed = "0";
this.setExposed = function(exposed) { 
    this.exposed = exposed;
    return this;
};
this.getExposed = function() {
    return this.exposed;
};
var operationType = "30";
this.setOperationType = function(operationType) { 
    this.operationType = operationType;
    return this;
};
this.getOperationType = function() {
    return this.operationType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var scopedescriptions = undefined;
this.setScopedescriptionss = function(scopedescriptions) { 
    this.scopedescriptions = scopedescriptions;
    return this;
};
this.getScopedescriptionss = function() {
    return this.scopedescriptions;
};
this.addScopedescriptions = function(scopedescriptions) { 
 if(!this.scopedescriptions) this.scopedescriptions = new Array(); 
  this.scopedescriptions.push(scopedescriptions); 
 return this;
};

var subscopes = undefined;
this.setSubscopess = function(subscopes) { 
    this.subscopes = subscopes;
    return this;
};
this.getSubscopess = function() {
    return this.subscopes;
};
this.addSubscopes = function(subscopes) { 
 if(!this.subscopes) this.subscopes = new Array(); 
  this.subscopes.push(subscopes); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setScope(json["scope"]);
		this.setDescription(json["description"]);
		this.setParentScopeId(json["parent_scope_id"]);
		this.setInternal(json["internal"]);
		this.setExposed(json["exposed"]);
		this.setOperationType(json["operation_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setScopedescriptionss(URI.getResourceArray(json["scopeDescriptions"],"scopedescriptions"));
		this.setSubscopess(URI.getResourceArray(json["subScopes"],"subscopes"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getScope()) json += '"scope"' + ":" + '"' + jsonEscape(this.getScope())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getParentScopeId()) json += '"parent_scope_id"' + ":" + '"' + jsonEscape(this.getParentScopeId())  + '",';
		if(this.getInternal()) json += '"internal"' + ":" + '"' + jsonEscape(this.getInternal())  + '",';
		if(this.getExposed()) json += '"exposed"' + ":" + '"' + jsonEscape(this.getExposed())  + '",';
		if(this.getOperationType()) json += '"operation_type"' + ":" + '"' + jsonEscape(this.getOperationType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getScopedescriptionss()) json += '"scopeDescriptions"' + ":" + URI.toJSONArray(this.getScopedescriptionss())  + ',';
		if(this.getSubscopess()) json += '"subScopes"' + ":" + URI.toJSONArray(this.getSubscopess())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Scope.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[a-zA-Z0-9_\-]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.scope && !(/^([A-Za-z0-9_.\-]+)$/).test(this.scope)) { throw new ValidationError(_formprefix + "scope", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^([A-Za-z0-9_.\-]+)$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.parentScopeId && !(/^[a-zA-Z0-9_\-]+$/).test(this.parentScopeId)) { throw new ValidationError(_formprefix + "parent_scope_id", ValidationError.PATTERN_FAILED);}
if(this.internal && !Validator.INTEGER.test(this.internal)) { throw new ValidationError(_formprefix + "internal", ValidationError.PATTERN_FAILED);}
if(this.exposed && !Validator.INTEGER.test(this.exposed)) { throw new ValidationError(_formprefix + "exposed", ValidationError.PATTERN_FAILED);}
if(this.operationType && !Validator.INTEGER.test(this.operationType)) { throw new ValidationError(_formprefix + "operation_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.scopedescriptions) { for(i=0; i < this.scopedescriptions.length; i++ ) { this.scopedescriptions[i].validate(); } }
if(this.subscopes) { for(i=0; i < this.subscopes.length; i++ ) { this.subscopes[i].validate(); } }

	return this;
    }
}
Scope.path = "scope";
Scope.newBuilder = function() {
    return new Scope();
};

ServiceOrgProductionZSOID = function() {
    var _formprefix = "";
    
var productionZsoid = "";
this.setProductionZsoid = function(productionZsoid) { 
    this.productionZsoid = productionZsoid;
    return this;
};
this.getProductionZsoid = function() {
    return this.productionZsoid;
};
var subZsoid = "";
this.setSubZsoid = function(subZsoid) { 
    this.subZsoid = subZsoid;
    return this;
};
this.getSubZsoid = function() {
    return this.subZsoid;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setProductionZsoid(json["production_zsoid"]);
		this.setSubZsoid(json["sub_zsoid"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getProductionZsoid()) json += '"production_zsoid"' + ":" + '"' + jsonEscape(this.getProductionZsoid())  + '",';
		if(this.getSubZsoid()) json += '"sub_zsoid"' + ":" + '"' + jsonEscape(this.getSubZsoid())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgProductionZSOID.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.productionZsoid && !(/^[a-zA-Z0-9_\-]+$/).test(this.productionZsoid)) { throw new ValidationError(_formprefix + "production_zsoid", ValidationError.PATTERN_FAILED);}
if(this.subZsoid && !(/^[a-zA-Z0-9_\-]+$/).test(this.subZsoid)) { throw new ValidationError(_formprefix + "sub_zsoid", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgProductionZSOID.path = "serviceorgproductionzsoid";
ServiceOrgProductionZSOID.newBuilder = function() {
    return new ServiceOrgProductionZSOID();
};

UserExpiry = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setExpiryTime(json["expiry_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserExpiry.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserExpiry.path = "userexpiry";
UserExpiry.newBuilder = function() {
    return new UserExpiry();
};

ZAIDSMSAudit = function() {
    var _formprefix = "";
    
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var mobileNo = "";
this.setMobileNo = function(mobileNo) { 
    this.mobileNo = mobileNo;
    return this;
};
this.getMobileNo = function() {
    return this.mobileNo;
};
var type = "";
this.setType = function(type) { 
    this.type = type;
    return this;
};
this.getType = function() {
    return this.type;
};
var usecase = "";
this.setUsecase = function(usecase) { 
    this.usecase = usecase;
    return this;
};
this.getUsecase = function() {
    return this.usecase;
};
var languageCode = "";
this.setLanguageCode = function(languageCode) { 
    this.languageCode = languageCode;
    return this;
};
this.getLanguageCode = function() {
    return this.languageCode;
};
var response = "";
this.setResponse = function(response) { 
    this.response = response;
    return this;
};
this.getResponse = function() {
    return this.response;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZaid(json["zaid"]);
		this.setZid(json["zid"]);
		this.setMobileNo(json["mobile_no"]);
		this.setType(json["type"]);
		this.setUsecase(json["usecase"]);
		this.setLanguageCode(json["language_code"]);
		this.setResponse(json["response"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getMobileNo()) json += '"mobile_no"' + ":" + '"' + jsonEscape(this.getMobileNo())  + '",';
		if(this.getType()) json += '"type"' + ":" + '"' + jsonEscape(this.getType())  + '",';
		if(this.getUsecase()) json += '"usecase"' + ":" + '"' + jsonEscape(this.getUsecase())  + '",';
		if(this.getLanguageCode()) json += '"language_code"' + ":" + '"' + jsonEscape(this.getLanguageCode())  + '",';
		if(this.getResponse()) json += '"response"' + ":" + '"' + jsonEscape(this.getResponse())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ZAIDSMSAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.mobileNo && !(/dontdisturb/).test(this.mobileNo)) { throw new ValidationError(_formprefix + "mobile_no", ValidationError.PATTERN_FAILED);}
if(this.type && !Validator.INTEGER.test(this.type)) { throw new ValidationError(_formprefix + "type", ValidationError.PATTERN_FAILED);}
if(this.usecase && !Validator.INTEGER.test(this.usecase)) { throw new ValidationError(_formprefix + "usecase", ValidationError.PATTERN_FAILED);}
if(this.languageCode && !(/dontdisturb/).test(this.languageCode)) { throw new ValidationError(_formprefix + "language_code", ValidationError.PATTERN_FAILED);}
if(this.response && !(/dontdisturb/).test(this.response)) { throw new ValidationError(_formprefix + "response", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ZAIDSMSAudit.path = "zaidsmsaudit";
ZAIDSMSAudit.newBuilder = function() {
    return new ZAIDSMSAudit();
};

AuthToken = function() {
    var _formprefix = "";
    
var token = "";
this.setToken = function(token) { 
    this.token = token;
    return this;
};
this.getToken = function() {
    return this.token;
};
var tokenId = "";
this.setTokenId = function(tokenId) { 
    this.tokenId = tokenId;
    return this;
};
this.getTokenId = function() {
    return this.tokenId;
};
var tokenType = "ticket";
this.setTokenType = function(tokenType) { 
    this.tokenType = tokenType;
    return this;
};
this.getTokenType = function() {
    return this.tokenType;
};
var parentTokenId = "";
this.setParentTokenId = function(parentTokenId) { 
    this.parentTokenId = parentTokenId;
    return this;
};
this.getParentTokenId = function() {
    return this.parentTokenId;
};
var serviceDomain = "";
this.setServiceDomain = function(serviceDomain) { 
    this.serviceDomain = serviceDomain;
    return this;
};
this.getServiceDomain = function() {
    return this.serviceDomain;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var validityPeriod = "0";
this.setValidityPeriod = function(validityPeriod) { 
    this.validityPeriod = validityPeriod;
    return this;
};
this.getValidityPeriod = function() {
    return this.validityPeriod;
};
var idlePeriod = "";
this.setIdlePeriod = function(idlePeriod) { 
    this.idlePeriod = idlePeriod;
    return this;
};
this.getIdlePeriod = function() {
    return this.idlePeriod;
};
var isOneTimeToken = "";
this.setIsOneTimeToken = function(isOneTimeToken) { 
    this.isOneTimeToken = isOneTimeToken;
    return this;
};
this.getIsOneTimeToken = function() {
    return this.isOneTimeToken;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var authtokenscope = undefined;
this.setAuthtokenscopes = function(authtokenscope) { 
    this.authtokenscope = authtokenscope;
    return this;
};
this.getAuthtokenscopes = function() {
    return this.authtokenscope;
};
this.addAuthtokenscope = function(authtokenscope) { 
 if(!this.authtokenscope) this.authtokenscope = new Array(); 
  this.authtokenscope.push(authtokenscope); 
 return this;
};

var authtokendetails = undefined;
this.setAuthtokendetails = function(authtokendetails) { 
    this.authtokendetails = authtokendetails;
    return this;
};
this.getAuthtokendetails = function() {
    return this.authtokendetails;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setToken(json["token"]);
		this.setTokenId(json["token_id"]);
		this.setTokenType(json["token_type"]);
		this.setParentTokenId(json["parent_token_id"]);
		this.setServiceDomain(json["service_domain"]);
		this.setIpAddress(json["ip_address"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);
		this.setValidityPeriod(json["validity_period"]);
		this.setIdlePeriod(json["idle_period"]);
		this.setIsOneTimeToken(json["is_one_time_token"]);
		this.setModifiedTime(json["modified_time"]);
		this.setAuthtokenscopes(URI.getResourceArray(json["authTokenScope"],"authtokenscope"));
		this.setAuthtokendetails(URI.getResource(json["authTokenDetails"],"authtokendetails"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getToken()) json += '"token"' + ":" + '"' + jsonEscape(this.getToken())  + '",';
		if(this.getTokenId()) json += '"token_id"' + ":" + '"' + jsonEscape(this.getTokenId())  + '",';
		if(this.getTokenType()) json += '"token_type"' + ":" + '"' + jsonEscape(this.getTokenType())  + '",';
		if(this.getParentTokenId()) json += '"parent_token_id"' + ":" + '"' + jsonEscape(this.getParentTokenId())  + '",';
		if(this.getServiceDomain()) json += '"service_domain"' + ":" + '"' + jsonEscape(this.getServiceDomain())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getValidityPeriod()) json += '"validity_period"' + ":" + '"' + jsonEscape(this.getValidityPeriod())  + '",';
		if(this.getIdlePeriod()) json += '"idle_period"' + ":" + '"' + jsonEscape(this.getIdlePeriod())  + '",';
		if(this.getIsOneTimeToken()) json += '"is_one_time_token"' + ":" + '"' + jsonEscape(this.getIsOneTimeToken())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getAuthtokenscopes()) json += '"authTokenScope"' + ":" + URI.toJSONArray(this.getAuthtokenscopes())  + ',';
		if(this.getAuthtokendetails()) json += '"authTokenDetails"' + ":" + this.getAuthtokendetails().toJSON()  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AuthToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.token && !(/^[a-zA-Z0-9]+\.[a-zA-Z0-9_]+\.[a-f0-9]{128}$/).test(this.token)) { throw new ValidationError(_formprefix + "token", ValidationError.PATTERN_FAILED);}
if(this.tokenId && !Validator.INTEGER.test(this.tokenId)) { throw new ValidationError(_formprefix + "token_id", ValidationError.PATTERN_FAILED);}
if(this.tokenType && !(/^([A-Za-z0-9_.\-]+)$/).test(this.tokenType)) { throw new ValidationError(_formprefix + "token_type", ValidationError.PATTERN_FAILED);}
if(this.parentTokenId && !Validator.INTEGER.test(this.parentTokenId)) { throw new ValidationError(_formprefix + "parent_token_id", ValidationError.PATTERN_FAILED);}
if(this.serviceDomain && !(/^([\p{L}\p{M}\p{N}]([\p{L}\p{M}\p{N}\-]{0,61}[\p{L}\p{M}\p{N}])?\.)+[\p{L}\p{M}]{2,6}$/).test(this.serviceDomain)) { throw new ValidationError(_formprefix + "service_domain", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/xss:htmlfilter/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.validityPeriod && !Validator.INTEGER.test(this.validityPeriod)) { throw new ValidationError(_formprefix + "validity_period", ValidationError.PATTERN_FAILED);}
if(this.idlePeriod && !Validator.INTEGER.test(this.idlePeriod)) { throw new ValidationError(_formprefix + "idle_period", ValidationError.PATTERN_FAILED);}
if(this.isOneTimeToken && !Validator.BOOLEAN.test(this.isOneTimeToken)) { throw new ValidationError(_formprefix + "is_one_time_token", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.authtokenscope) { for(i=0; i < this.authtokenscope.length; i++ ) { this.authtokenscope[i].validate(); } }
if(this.authtokendetails) { this.authtokendetails.validate(); }

	return this;
    }
}
AuthToken.path = "authtoken";
AuthToken.newBuilder = function() {
    return new AuthToken();
};

OAuthMobileAppName = function() {
    var _formprefix = "";
    
var mobileAppName = "";
this.setMobileAppName = function(mobileAppName) { 
    this.mobileAppName = mobileAppName;
    return this;
};
this.getMobileAppName = function() {
    return this.mobileAppName;
};
var appLogo = "";
this.setAppLogo = function(appLogo) { 
    this.appLogo = appLogo;
    return this;
};
this.getAppLogo = function() {
    return this.appLogo;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var appType = "";
this.setAppType = function(appType) { 
    this.appType = appType;
    return this;
};
this.getAppType = function() {
    return this.appType;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var uniqueId = "";
this.setUniqueId = function(uniqueId) { 
    this.uniqueId = uniqueId;
    return this;
};
this.getUniqueId = function() {
    return this.uniqueId;
};
var oauthmobiledevices = undefined;
this.setOauthmobiledevicess = function(oauthmobiledevices) { 
    this.oauthmobiledevices = oauthmobiledevices;
    return this;
};
this.getOauthmobiledevicess = function() {
    return this.oauthmobiledevices;
};
this.addOauthmobiledevices = function(oauthmobiledevices) { 
 if(!this.oauthmobiledevices) this.oauthmobiledevices = new Array(); 
  this.oauthmobiledevices.push(oauthmobiledevices); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setMobileAppName(json["mobile_app_name"]);
		this.setAppLogo(json["app_logo"]);
		this.setDescription(json["description"]);
		this.setAppType(json["app_type"]);
		this.setDisplayName(json["display_name"]);
		this.setUniqueId(json["unique_id"]);
		this.setOauthmobiledevicess(URI.getResourceArray(json["oAuthMobileDevices"],"oauthmobiledevices"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getMobileAppName()) json += '"mobile_app_name"' + ":" + '"' + jsonEscape(this.getMobileAppName())  + '",';
		if(this.getAppLogo()) json += '"app_logo"' + ":" + '"' + jsonEscape(this.getAppLogo())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getAppType()) json += '"app_type"' + ":" + '"' + jsonEscape(this.getAppType())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getUniqueId()) json += '"unique_id"' + ":" + '"' + jsonEscape(this.getUniqueId())  + '",';
		if(this.getOauthmobiledevicess()) json += '"oAuthMobileDevices"' + ":" + URI.toJSONArray(this.getOauthmobiledevicess())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthMobileAppName.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.mobileAppName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.mobileAppName)) { throw new ValidationError(_formprefix + "mobile_app_name", ValidationError.PATTERN_FAILED);}
if(this.appLogo && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.appLogo)) { throw new ValidationError(_formprefix + "app_logo", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.appType && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.appType)) { throw new ValidationError(_formprefix + "app_type", ValidationError.PATTERN_FAILED);}
if(this.displayName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.displayName)) { throw new ValidationError(_formprefix + "display_name", ValidationError.PATTERN_FAILED);}
if(this.uniqueId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.uniqueId)) { throw new ValidationError(_formprefix + "unique_id", ValidationError.PATTERN_FAILED);}
if(this.oauthmobiledevices) { for(i=0; i < this.oauthmobiledevices.length; i++ ) { this.oauthmobiledevices[i].validate(); } }

	return this;
    }
}
OAuthMobileAppName.path = "oauthmobileappname";
OAuthMobileAppName.newBuilder = function() {
    return new OAuthMobileAppName();
};

AccountAudit = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var tokenDigest = "";
this.setTokenDigest = function(tokenDigest) { 
    this.tokenDigest = tokenDigest;
    return this;
};
this.getTokenDigest = function() {
    return this.tokenDigest;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var operationId = "";
this.setOperationId = function(operationId) { 
    this.operationId = operationId;
    return this;
};
this.getOperationId = function() {
    return this.operationId;
};
var useragentaudit = undefined;
this.setUseragentaudit = function(useragentaudit) { 
    this.useragentaudit = useragentaudit;
    return this;
};
this.getUseragentaudit = function() {
    return this.useragentaudit;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setZuid(json["zuid"]);
		this.setIpAddress(json["ip_address"]);
		this.setReferrer(json["referrer"]);
		this.setTokenDigest(json["token_digest"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);
		this.setAppId(json["app_id"]);
		this.setOperationId(json["operation_id"]);
		this.setUseragentaudit(URI.getResource(json["userAgentAudit"],"useragentaudit"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getTokenDigest()) json += '"token_digest"' + ":" + '"' + jsonEscape(this.getTokenDigest())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getOperationId()) json += '"operation_id"' + ":" + '"' + jsonEscape(this.getOperationId())  + '",';
		if(this.getUseragentaudit()) json += '"userAgentAudit"' + ":" + this.getUseragentaudit().toJSON()  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.tokenDigest && !(/dontdisturb/).test(this.tokenDigest)) { throw new ValidationError(_formprefix + "token_digest", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.appId && !Validator.INTEGER.test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.operationId && !Validator.INTEGER.test(this.operationId)) { throw new ValidationError(_formprefix + "operation_id", ValidationError.PATTERN_FAILED);}
if(this.useragentaudit) { this.useragentaudit.validate(); }

	return this;
    }
}
AccountAudit.path = "accountaudit";
AccountAudit.newBuilder = function() {
    return new AccountAudit();
};

OAuthMobileAppService = function() {
    var _formprefix = "";
    
var serviceName = "";
this.setServiceName = function(serviceName) { 
    this.serviceName = serviceName;
    return this;
};
this.getServiceName = function() {
    return this.serviceName;
};
var oauthmobileappname = undefined;
this.setOauthmobileappnames = function(oauthmobileappname) { 
    this.oauthmobileappname = oauthmobileappname;
    return this;
};
this.getOauthmobileappnames = function() {
    return this.oauthmobileappname;
};
this.addOauthmobileappname = function(oauthmobileappname) { 
 if(!this.oauthmobileappname) this.oauthmobileappname = new Array(); 
  this.oauthmobileappname.push(oauthmobileappname); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setServiceName(json["service_name"]);
		this.setOauthmobileappnames(URI.getResourceArray(json["oAuthMobileAppName"],"oauthmobileappname"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getServiceName()) json += '"service_name"' + ":" + '"' + jsonEscape(this.getServiceName())  + '",';
		if(this.getOauthmobileappnames()) json += '"oAuthMobileAppName"' + ":" + URI.toJSONArray(this.getOauthmobileappnames())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthMobileAppService.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.serviceName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.serviceName)) { throw new ValidationError(_formprefix + "service_name", ValidationError.PATTERN_FAILED);}
if(this.oauthmobileappname) { for(i=0; i < this.oauthmobileappname.length; i++ ) { this.oauthmobileappname[i].validate(); } }

	return this;
    }
}
OAuthMobileAppService.path = "oauthmobileappservice";
OAuthMobileAppService.newBuilder = function() {
    return new OAuthMobileAppService();
};

Location = function() {
    var _formprefix = "";
    
var locationNameApl = "";
this.setLocationNameApl = function(locationNameApl) { 
    this.locationNameApl = locationNameApl;
    return this;
};
this.getLocationNameApl = function() {
    return this.locationNameApl;
};
var addressType = "1";
this.setAddressType = function(addressType) { 
    this.addressType = addressType;
    return this;
};
this.getAddressType = function() {
    return this.addressType;
};
var locationName = "";
this.setLocationName = function(locationName) { 
    this.locationName = locationName;
    return this;
};
this.getLocationName = function() {
    return this.locationName;
};
var postBox = "";
this.setPostBox = function(postBox) { 
    this.postBox = postBox;
    return this;
};
this.getPostBox = function() {
    return this.postBox;
};
var streetAddress = "";
this.setStreetAddress = function(streetAddress) { 
    this.streetAddress = streetAddress;
    return this;
};
this.getStreetAddress = function() {
    return this.streetAddress;
};
var city = "";
this.setCity = function(city) { 
    this.city = city;
    return this;
};
this.getCity = function() {
    return this.city;
};
var state = "";
this.setState = function(state) { 
    this.state = state;
    return this;
};
this.getState = function() {
    return this.state;
};
var country = "";
this.setCountry = function(country) { 
    this.country = country;
    return this;
};
this.getCountry = function() {
    return this.country;
};
var postalCode = "";
this.setPostalCode = function(postalCode) { 
    this.postalCode = postalCode;
    return this;
};
this.getPostalCode = function() {
    return this.postalCode;
};
var latitude = "";
this.setLatitude = function(latitude) { 
    this.latitude = latitude;
    return this;
};
this.getLatitude = function() {
    return this.latitude;
};
var longitude = "";
this.setLongitude = function(longitude) { 
    this.longitude = longitude;
    return this;
};
this.getLongitude = function() {
    return this.longitude;
};
var phone = "";
this.setPhone = function(phone) { 
    this.phone = phone;
    return this;
};
this.getPhone = function() {
    return this.phone;
};
var mobile = "";
this.setMobile = function(mobile) { 
    this.mobile = mobile;
    return this;
};
this.getMobile = function() {
    return this.mobile;
};
var fax = "";
this.setFax = function(fax) { 
    this.fax = fax;
    return this;
};
this.getFax = function() {
    return this.fax;
};
var timezone = "";
this.setTimezone = function(timezone) { 
    this.timezone = timezone;
    return this;
};
this.getTimezone = function() {
    return this.timezone;
};
var language = "";
this.setLanguage = function(language) { 
    this.language = language;
    return this;
};
this.getLanguage = function() {
    return this.language;
};
var isPrimary = "0";
this.setIsPrimary = function(isPrimary) { 
    this.isPrimary = isPrimary;
    return this;
};
this.getIsPrimary = function() {
    return this.isPrimary;
};
var websiteUrl = "";
this.setWebsiteUrl = function(websiteUrl) { 
    this.websiteUrl = websiteUrl;
    return this;
};
this.getWebsiteUrl = function() {
    return this.websiteUrl;
};
var blogUrl = "";
this.setBlogUrl = function(blogUrl) { 
    this.blogUrl = blogUrl;
    return this;
};
this.getBlogUrl = function() {
    return this.blogUrl;
};
var twitterUrl = "";
this.setTwitterUrl = function(twitterUrl) { 
    this.twitterUrl = twitterUrl;
    return this;
};
this.getTwitterUrl = function() {
    return this.twitterUrl;
};
var linkedinUrl = "";
this.setLinkedinUrl = function(linkedinUrl) { 
    this.linkedinUrl = linkedinUrl;
    return this;
};
this.getLinkedinUrl = function() {
    return this.linkedinUrl;
};
var flickrUrl = "";
this.setFlickrUrl = function(flickrUrl) { 
    this.flickrUrl = flickrUrl;
    return this;
};
this.getFlickrUrl = function() {
    return this.flickrUrl;
};
var deliciousUrl = "";
this.setDeliciousUrl = function(deliciousUrl) { 
    this.deliciousUrl = deliciousUrl;
    return this;
};
this.getDeliciousUrl = function() {
    return this.deliciousUrl;
};
var amazonUrl = "";
this.setAmazonUrl = function(amazonUrl) { 
    this.amazonUrl = amazonUrl;
    return this;
};
this.getAmazonUrl = function() {
    return this.amazonUrl;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var userlocation = undefined;
this.setUserlocations = function(userlocation) { 
    this.userlocation = userlocation;
    return this;
};
this.getUserlocations = function() {
    return this.userlocation;
};
this.addUserlocation = function(userlocation) { 
 if(!this.userlocation) this.userlocation = new Array(); 
  this.userlocation.push(userlocation); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLocationNameApl(json["location_name_apl"]);
		this.setAddressType(json["address_type"]);
		this.setLocationName(json["location_name"]);
		this.setPostBox(json["post_box"]);
		this.setStreetAddress(json["street_address"]);
		this.setCity(json["city"]);
		this.setState(json["state"]);
		this.setCountry(json["country"]);
		this.setPostalCode(json["postal_code"]);
		this.setLatitude(json["latitude"]);
		this.setLongitude(json["longitude"]);
		this.setPhone(json["phone"]);
		this.setMobile(json["mobile"]);
		this.setFax(json["fax"]);
		this.setTimezone(json["timezone"]);
		this.setLanguage(json["language"]);
		this.setIsPrimary(json["is_primary"]);
		this.setWebsiteUrl(json["website_url"]);
		this.setBlogUrl(json["blog_url"]);
		this.setTwitterUrl(json["twitter_url"]);
		this.setLinkedinUrl(json["linkedin_url"]);
		this.setFlickrUrl(json["flickr_url"]);
		this.setDeliciousUrl(json["delicious_url"]);
		this.setAmazonUrl(json["amazon_url"]);
		this.setModifiedTime(json["modified_time"]);
		this.setUserlocations(URI.getResourceArray(json["userLocation"],"userlocation"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLocationNameApl()) json += '"location_name_apl"' + ":" + '"' + jsonEscape(this.getLocationNameApl())  + '",';
		if(this.getAddressType()) json += '"address_type"' + ":" + '"' + jsonEscape(this.getAddressType())  + '",';
		if(this.getLocationName()) json += '"location_name"' + ":" + '"' + jsonEscape(this.getLocationName())  + '",';
		if(this.getPostBox()) json += '"post_box"' + ":" + '"' + jsonEscape(this.getPostBox())  + '",';
		if(this.getStreetAddress()) json += '"street_address"' + ":" + '"' + jsonEscape(this.getStreetAddress())  + '",';
		if(this.getCity()) json += '"city"' + ":" + '"' + jsonEscape(this.getCity())  + '",';
		if(this.getState()) json += '"state"' + ":" + '"' + jsonEscape(this.getState())  + '",';
		if(this.getCountry()) json += '"country"' + ":" + '"' + jsonEscape(this.getCountry())  + '",';
		if(this.getPostalCode()) json += '"postal_code"' + ":" + '"' + jsonEscape(this.getPostalCode())  + '",';
		if(this.getLatitude()) json += '"latitude"' + ":" + '"' + jsonEscape(this.getLatitude())  + '",';
		if(this.getLongitude()) json += '"longitude"' + ":" + '"' + jsonEscape(this.getLongitude())  + '",';
		if(this.getPhone()) json += '"phone"' + ":" + '"' + jsonEscape(this.getPhone())  + '",';
		if(this.getMobile()) json += '"mobile"' + ":" + '"' + jsonEscape(this.getMobile())  + '",';
		if(this.getFax()) json += '"fax"' + ":" + '"' + jsonEscape(this.getFax())  + '",';
		if(this.getTimezone()) json += '"timezone"' + ":" + '"' + jsonEscape(this.getTimezone())  + '",';
		if(this.getLanguage()) json += '"language"' + ":" + '"' + jsonEscape(this.getLanguage())  + '",';
		if(this.getIsPrimary()) json += '"is_primary"' + ":" + '"' + jsonEscape(this.getIsPrimary())  + '",';
		if(this.getWebsiteUrl()) json += '"website_url"' + ":" + '"' + jsonEscape(this.getWebsiteUrl())  + '",';
		if(this.getBlogUrl()) json += '"blog_url"' + ":" + '"' + jsonEscape(this.getBlogUrl())  + '",';
		if(this.getTwitterUrl()) json += '"twitter_url"' + ":" + '"' + jsonEscape(this.getTwitterUrl())  + '",';
		if(this.getLinkedinUrl()) json += '"linkedin_url"' + ":" + '"' + jsonEscape(this.getLinkedinUrl())  + '",';
		if(this.getFlickrUrl()) json += '"flickr_url"' + ":" + '"' + jsonEscape(this.getFlickrUrl())  + '",';
		if(this.getDeliciousUrl()) json += '"delicious_url"' + ":" + '"' + jsonEscape(this.getDeliciousUrl())  + '",';
		if(this.getAmazonUrl()) json += '"amazon_url"' + ":" + '"' + jsonEscape(this.getAmazonUrl())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getUserlocations()) json += '"userLocation"' + ":" + URI.toJSONArray(this.getUserlocations())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Location.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.locationNameApl && !(/xss:throwerror/).test(this.locationNameApl)) { throw new ValidationError(_formprefix + "location_name_apl", ValidationError.PATTERN_FAILED);}
if(this.addressType && !Validator.INTEGER.test(this.addressType)) { throw new ValidationError(_formprefix + "address_type", ValidationError.PATTERN_FAILED);}
if(this.locationName && !(/xss:throwerror/).test(this.locationName)) { throw new ValidationError(_formprefix + "location_name", ValidationError.PATTERN_FAILED);}
if(this.postBox && !(/xss:throwerror/).test(this.postBox)) { throw new ValidationError(_formprefix + "post_box", ValidationError.PATTERN_FAILED);}
if(this.streetAddress && !(/xss:throwerror/).test(this.streetAddress)) { throw new ValidationError(_formprefix + "street_address", ValidationError.PATTERN_FAILED);}
if(this.city && !(/xss:throwerror/).test(this.city)) { throw new ValidationError(_formprefix + "city", ValidationError.PATTERN_FAILED);}
if(this.state && !(/xss:throwerror/).test(this.state)) { throw new ValidationError(_formprefix + "state", ValidationError.PATTERN_FAILED);}
if(this.country && !(/xss:throwerror/).test(this.country)) { throw new ValidationError(_formprefix + "country", ValidationError.PATTERN_FAILED);}
if(this.postalCode && !(/xss:throwerror/).test(this.postalCode)) { throw new ValidationError(_formprefix + "postal_code", ValidationError.PATTERN_FAILED);}
if(this.latitude && !(/^[0-9\-\.]*$/).test(this.latitude)) { throw new ValidationError(_formprefix + "latitude", ValidationError.PATTERN_FAILED);}
if(this.longitude && !(/^[0-9\-\.]*$/).test(this.longitude)) { throw new ValidationError(_formprefix + "longitude", ValidationError.PATTERN_FAILED);}
if(this.phone && !(/xss:throwerror/).test(this.phone)) { throw new ValidationError(_formprefix + "phone", ValidationError.PATTERN_FAILED);}
if(this.mobile && !(/xss:throwerror/).test(this.mobile)) { throw new ValidationError(_formprefix + "mobile", ValidationError.PATTERN_FAILED);}
if(this.fax && !(/xss:throwerror/).test(this.fax)) { throw new ValidationError(_formprefix + "fax", ValidationError.PATTERN_FAILED);}
if(this.timezone && !(/xss:throwerror/).test(this.timezone)) { throw new ValidationError(_formprefix + "timezone", ValidationError.PATTERN_FAILED);}
if(this.language && !(/xss:throwerror/).test(this.language)) { throw new ValidationError(_formprefix + "language", ValidationError.PATTERN_FAILED);}
if(this.isPrimary && !Validator.INTEGER.test(this.isPrimary)) { throw new ValidationError(_formprefix + "is_primary", ValidationError.PATTERN_FAILED);}
if(this.websiteUrl && !(/xss:throwerror/).test(this.websiteUrl)) { throw new ValidationError(_formprefix + "website_url", ValidationError.PATTERN_FAILED);}
if(this.blogUrl && !(/xss:throwerror/).test(this.blogUrl)) { throw new ValidationError(_formprefix + "blog_url", ValidationError.PATTERN_FAILED);}
if(this.twitterUrl && !(/xss:throwerror/).test(this.twitterUrl)) { throw new ValidationError(_formprefix + "twitter_url", ValidationError.PATTERN_FAILED);}
if(this.linkedinUrl && !(/xss:throwerror/).test(this.linkedinUrl)) { throw new ValidationError(_formprefix + "linkedin_url", ValidationError.PATTERN_FAILED);}
if(this.flickrUrl && !(/xss:throwerror/).test(this.flickrUrl)) { throw new ValidationError(_formprefix + "flickr_url", ValidationError.PATTERN_FAILED);}
if(this.deliciousUrl && !(/xss:throwerror/).test(this.deliciousUrl)) { throw new ValidationError(_formprefix + "delicious_url", ValidationError.PATTERN_FAILED);}
if(this.amazonUrl && !(/xss:throwerror/).test(this.amazonUrl)) { throw new ValidationError(_formprefix + "amazon_url", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.userlocation) { for(i=0; i < this.userlocation.length; i++ ) { this.userlocation[i].validate(); } }

	return this;
    }
}
Location.path = "location";
Location.newBuilder = function() {
    return new Location();
};

Account = function() {
    var _formprefix = "";
    
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var parentZaid = "";
this.setParentZaid = function(parentZaid) { 
    this.parentZaid = parentZaid;
    return this;
};
this.getParentZaid = function() {
    return this.parentZaid;
};
var accountName = "";
this.setAccountName = function(accountName) { 
    this.accountName = accountName;
    return this;
};
this.getAccountName = function() {
    return this.accountName;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var accountType = "PERSONAL";
this.setAccountType = function(accountType) { 
    this.accountType = accountType;
    return this;
};
this.getAccountType = function() {
    return this.accountType;
};
var createdBy = "";
this.setCreatedBy = function(createdBy) { 
    this.createdBy = createdBy;
    return this;
};
this.getCreatedBy = function() {
    return this.createdBy;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var domain = undefined;
this.setDomains = function(domain) { 
    this.domain = domain;
    return this;
};
this.getDomains = function() {
    return this.domain;
};
this.addDomain = function(domain) { 
 if(!this.domain) this.domain = new Array(); 
  this.domain.push(domain); 
 return this;
};

var invitation = undefined;
this.setInvitations = function(invitation) { 
    this.invitation = invitation;
    return this;
};
this.getInvitations = function() {
    return this.invitation;
};
this.addInvitation = function(invitation) { 
 if(!this.invitation) this.invitation = new Array(); 
  this.invitation.push(invitation); 
 return this;
};

var accountjoinrequests = undefined;
this.setAccountjoinrequestss = function(accountjoinrequests) { 
    this.accountjoinrequests = accountjoinrequests;
    return this;
};
this.getAccountjoinrequestss = function() {
    return this.accountjoinrequests;
};
this.addAccountjoinrequests = function(accountjoinrequests) { 
 if(!this.accountjoinrequests) this.accountjoinrequests = new Array(); 
  this.accountjoinrequests.push(accountjoinrequests); 
 return this;
};

var location = undefined;
this.setLocations = function(location) { 
    this.location = location;
    return this;
};
this.getLocations = function() {
    return this.location;
};
this.addLocation = function(location) { 
 if(!this.location) this.location = new Array(); 
  this.location.push(location); 
 return this;
};

var announcements = undefined;
this.setAnnouncementss = function(announcements) { 
    this.announcements = announcements;
    return this;
};
this.getAnnouncementss = function() {
    return this.announcements;
};
this.addAnnouncements = function(announcements) { 
 if(!this.announcements) this.announcements = new Array(); 
  this.announcements.push(announcements); 
 return this;
};

var policy = undefined;
this.setPolicys = function(policy) { 
    this.policy = policy;
    return this;
};
this.getPolicys = function() {
    return this.policy;
};
this.addPolicy = function(policy) { 
 if(!this.policy) this.policy = new Array(); 
  this.policy.push(policy); 
 return this;
};

var accountconfiguration = undefined;
this.setAccountconfigurations = function(accountconfiguration) { 
    this.accountconfiguration = accountconfiguration;
    return this;
};
this.getAccountconfigurations = function() {
    return this.accountconfiguration;
};
this.addAccountconfiguration = function(accountconfiguration) { 
 if(!this.accountconfiguration) this.accountconfiguration = new Array(); 
  this.accountconfiguration.push(accountconfiguration); 
 return this;
};

var automation = undefined;
this.setAutomations = function(automation) { 
    this.automation = automation;
    return this;
};
this.getAutomations = function() {
    return this.automation;
};
this.addAutomation = function(automation) { 
 if(!this.automation) this.automation = new Array(); 
  this.automation.push(automation); 
 return this;
};

var designations = undefined;
this.setDesignationss = function(designations) { 
    this.designations = designations;
    return this;
};
this.getDesignationss = function() {
    return this.designations;
};
this.addDesignations = function(designations) { 
 if(!this.designations) this.designations = new Array(); 
  this.designations.push(designations); 
 return this;
};

var accountremoteauthconf = undefined;
this.setAccountremoteauthconfs = function(accountremoteauthconf) { 
    this.accountremoteauthconf = accountremoteauthconf;
    return this;
};
this.getAccountremoteauthconfs = function() {
    return this.accountremoteauthconf;
};
this.addAccountremoteauthconf = function(accountremoteauthconf) { 
 if(!this.accountremoteauthconf) this.accountremoteauthconf = new Array(); 
  this.accountremoteauthconf.push(accountremoteauthconf); 
 return this;
};

var accountkyc = undefined;
this.setAccountkycs = function(accountkyc) { 
    this.accountkyc = accountkyc;
    return this;
};
this.getAccountkycs = function() {
    return this.accountkyc;
};
this.addAccountkyc = function(accountkyc) { 
 if(!this.accountkyc) this.accountkyc = new Array(); 
  this.accountkyc.push(accountkyc); 
 return this;
};

var manageddevice = undefined;
this.setManageddevices = function(manageddevice) { 
    this.manageddevice = manageddevice;
    return this;
};
this.getManageddevices = function() {
    return this.manageddevice;
};
this.addManageddevice = function(manageddevice) { 
 if(!this.manageddevice) this.manageddevice = new Array(); 
  this.manageddevice.push(manageddevice); 
 return this;
};

var authdomain = undefined;
this.setAuthdomains = function(authdomain) { 
    this.authdomain = authdomain;
    return this;
};
this.getAuthdomains = function() {
    return this.authdomain;
};
this.addAuthdomain = function(authdomain) { 
 if(!this.authdomain) this.authdomain = new Array(); 
  this.authdomain.push(authdomain); 
 return this;
};

var secretkey = undefined;
this.setSecretkeys = function(secretkey) { 
    this.secretkey = secretkey;
    return this;
};
this.getSecretkeys = function() {
    return this.secretkey;
};
this.addSecretkey = function(secretkey) { 
 if(!this.secretkey) this.secretkey = new Array(); 
  this.secretkey.push(secretkey); 
 return this;
};

var captcha = undefined;
this.setCaptchas = function(captcha) { 
    this.captcha = captcha;
    return this;
};
this.getCaptchas = function() {
    return this.captcha;
};
this.addCaptcha = function(captcha) { 
 if(!this.captcha) this.captcha = new Array(); 
  this.captcha.push(captcha); 
 return this;
};

var digest = undefined;
this.setDigests = function(digest) { 
    this.digest = digest;
    return this;
};
this.getDigests = function() {
    return this.digest;
};
this.addDigest = function(digest) { 
 if(!this.digest) this.digest = new Array(); 
  this.digest.push(digest); 
 return this;
};

var user = undefined;
this.setUsers = function(user) { 
    this.user = user;
    return this;
};
this.getUsers = function() {
    return this.user;
};
this.addUser = function(user) { 
 if(!this.user) this.user = new Array(); 
  this.user.push(user); 
 return this;
};

var screenname = undefined;
this.setScreennames = function(screenname) { 
    this.screenname = screenname;
    return this;
};
this.getScreennames = function() {
    return this.screenname;
};
this.addScreenname = function(screenname) { 
 if(!this.screenname) this.screenname = new Array(); 
  this.screenname.push(screenname); 
 return this;
};

var mobilescreenname = undefined;
this.setMobilescreennames = function(mobilescreenname) { 
    this.mobilescreenname = mobilescreenname;
    return this;
};
this.getMobilescreennames = function() {
    return this.mobilescreenname;
};
this.addMobilescreenname = function(mobilescreenname) { 
 if(!this.mobilescreenname) this.mobilescreenname = new Array(); 
  this.mobilescreenname.push(mobilescreenname); 
 return this;
};

var useremail = undefined;
this.setUseremails = function(useremail) { 
    this.useremail = useremail;
    return this;
};
this.getUseremails = function() {
    return this.useremail;
};
this.addUseremail = function(useremail) { 
 if(!this.useremail) this.useremail = new Array(); 
  this.useremail.push(useremail); 
 return this;
};

var usermobile = undefined;
this.setUsermobiles = function(usermobile) { 
    this.usermobile = usermobile;
    return this;
};
this.getUsermobiles = function() {
    return this.usermobile;
};
this.addUsermobile = function(usermobile) { 
 if(!this.usermobile) this.usermobile = new Array(); 
  this.usermobile.push(usermobile); 
 return this;
};

var tag = undefined;
this.setTags = function(tag) { 
    this.tag = tag;
    return this;
};
this.getTags = function() {
    return this.tag;
};
this.addTag = function(tag) { 
 if(!this.tag) this.tag = new Array(); 
  this.tag.push(tag); 
 return this;
};

var customfields = undefined;
this.setCustomfieldss = function(customfields) { 
    this.customfields = customfields;
    return this;
};
this.getCustomfieldss = function() {
    return this.customfields;
};
this.addCustomfields = function(customfields) { 
 if(!this.customfields) this.customfields = new Array(); 
  this.customfields.push(customfields); 
 return this;
};

var group = undefined;
this.setGroups = function(group) { 
    this.group = group;
    return this;
};
this.getGroups = function() {
    return this.group;
};
this.addGroup = function(group) { 
 if(!this.group) this.group = new Array(); 
  this.group.push(group); 
 return this;
};

var appaccount = undefined;
this.setAppaccounts = function(appaccount) { 
    this.appaccount = appaccount;
    return this;
};
this.getAppaccounts = function() {
    return this.appaccount;
};
this.addAppaccount = function(appaccount) { 
 if(!this.appaccount) this.appaccount = new Array(); 
  this.appaccount.push(appaccount); 
 return this;
};

var cportaladmin = undefined;
this.setCportaladmins = function(cportaladmin) { 
    this.cportaladmin = cportaladmin;
    return this;
};
this.getCportaladmins = function() {
    return this.cportaladmin;
};
this.addCportaladmin = function(cportaladmin) { 
 if(!this.cportaladmin) this.cportaladmin = new Array(); 
  this.cportaladmin.push(cportaladmin); 
 return this;
};

var clientportalorgtype = undefined;
this.setClientportalorgtypes = function(clientportalorgtype) { 
    this.clientportalorgtype = clientportalorgtype;
    return this;
};
this.getClientportalorgtypes = function() {
    return this.clientportalorgtype;
};
this.addClientportalorgtype = function(clientportalorgtype) { 
 if(!this.clientportalorgtype) this.clientportalorgtype = new Array(); 
  this.clientportalorgtype.push(clientportalorgtype); 
 return this;
};

var accountscheduledetails = undefined;
this.setAccountscheduledetailss = function(accountscheduledetails) { 
    this.accountscheduledetails = accountscheduledetails;
    return this;
};
this.getAccountscheduledetailss = function() {
    return this.accountscheduledetails;
};
this.addAccountscheduledetails = function(accountscheduledetails) { 
 if(!this.accountscheduledetails) this.accountscheduledetails = new Array(); 
  this.accountscheduledetails.push(accountscheduledetails); 
 return this;
};

var logo = undefined;
this.setLogo = function(logo) { 
    this.logo = logo;
    return this;
};
this.getLogo = function() {
    return this.logo;
};
var routingpolicy = undefined;
this.setRoutingpolicys = function(routingpolicy) { 
    this.routingpolicy = routingpolicy;
    return this;
};
this.getRoutingpolicys = function() {
    return this.routingpolicy;
};
this.addRoutingpolicy = function(routingpolicy) { 
 if(!this.routingpolicy) this.routingpolicy = new Array(); 
  this.routingpolicy.push(routingpolicy); 
 return this;
};

var samlauthentication = undefined;
this.setSamlauthentications = function(samlauthentication) { 
    this.samlauthentication = samlauthentication;
    return this;
};
this.getSamlauthentications = function() {
    return this.samlauthentication;
};
this.addSamlauthentication = function(samlauthentication) { 
 if(!this.samlauthentication) this.samlauthentication = new Array(); 
  this.samlauthentication.push(samlauthentication); 
 return this;
};

var jwtauthentication = undefined;
this.setJwtauthentications = function(jwtauthentication) { 
    this.jwtauthentication = jwtauthentication;
    return this;
};
this.getJwtauthentications = function() {
    return this.jwtauthentication;
};
this.addJwtauthentication = function(jwtauthentication) { 
 if(!this.jwtauthentication) this.jwtauthentication = new Array(); 
  this.jwtauthentication.push(jwtauthentication); 
 return this;
};

var conditionalpolicy = undefined;
this.setConditionalpolicys = function(conditionalpolicy) { 
    this.conditionalpolicy = conditionalpolicy;
    return this;
};
this.getConditionalpolicys = function() {
    return this.conditionalpolicy;
};
this.addConditionalpolicy = function(conditionalpolicy) { 
 if(!this.conditionalpolicy) this.conditionalpolicy = new Array(); 
  this.conditionalpolicy.push(conditionalpolicy); 
 return this;
};

var ipaddress = undefined;
this.setIpaddresss = function(ipaddress) { 
    this.ipaddress = ipaddress;
    return this;
};
this.getIpaddresss = function() {
    return this.ipaddress;
};
this.addIpaddress = function(ipaddress) { 
 if(!this.ipaddress) this.ipaddress = new Array(); 
  this.ipaddress.push(ipaddress); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZaid(json["zaid"]);
		this.setParentZaid(json["parent_zaid"]);
		this.setAccountName(json["account_name"]);
		this.setDisplayName(json["display_name"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setAccountType(json["account_type"]);
		this.setCreatedBy(json["created_by"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setDomains(URI.getResourceArray(json["domain"],"domain"));
		this.setInvitations(URI.getResourceArray(json["invitation"],"invitation"));
		this.setAccountjoinrequestss(URI.getResourceArray(json["accountJoinRequests"],"accountjoinrequests"));
		this.setLocations(URI.getResourceArray(json["location"],"location"));
		this.setAnnouncementss(URI.getResourceArray(json["announcements"],"announcements"));
		this.setPolicys(URI.getResourceArray(json["policy"],"policy"));
		this.setAccountconfigurations(URI.getResourceArray(json["accountConfiguration"],"accountconfiguration"));
		this.setAutomations(URI.getResourceArray(json["automation"],"automation"));
		this.setDesignationss(URI.getResourceArray(json["designations"],"designations"));
		this.setAccountremoteauthconfs(URI.getResourceArray(json["accountRemoteAuthConf"],"accountremoteauthconf"));
		this.setAccountkycs(URI.getResourceArray(json["accountKYC"],"accountkyc"));
		this.setManageddevices(URI.getResourceArray(json["managedDevice"],"manageddevice"));
		this.setAuthdomains(URI.getResourceArray(json["authDomain"],"authdomain"));
		this.setSecretkeys(URI.getResourceArray(json["secretKey"],"secretkey"));
		this.setCaptchas(URI.getResourceArray(json["captcha"],"captcha"));
		this.setDigests(URI.getResourceArray(json["digest"],"digest"));
		this.setUsers(URI.getResourceArray(json["user"],"user"));
		this.setScreennames(URI.getResourceArray(json["screenName"],"screenname"));
		this.setMobilescreennames(URI.getResourceArray(json["mobileScreenName"],"mobilescreenname"));
		this.setUseremails(URI.getResourceArray(json["userEmail"],"useremail"));
		this.setUsermobiles(URI.getResourceArray(json["userMobile"],"usermobile"));
		this.setTags(URI.getResourceArray(json["tag"],"tag"));
		this.setCustomfieldss(URI.getResourceArray(json["customFields"],"customfields"));
		this.setGroups(URI.getResourceArray(json["group"],"group"));
		this.setAppaccounts(URI.getResourceArray(json["appAccount"],"appaccount"));
		this.setCportaladmins(URI.getResourceArray(json["cPortalAdmin"],"cportaladmin"));
		this.setClientportalorgtypes(URI.getResourceArray(json["clientPortalOrgType"],"clientportalorgtype"));
		this.setAccountscheduledetailss(URI.getResourceArray(json["accountScheduleDetails"],"accountscheduledetails"));
		this.setLogo(URI.getResource(json["logo"],"logo"));
		this.setRoutingpolicys(URI.getResourceArray(json["routingPolicy"],"routingpolicy"));
		this.setSamlauthentications(URI.getResourceArray(json["sAMLAuthentication"],"samlauthentication"));
		this.setJwtauthentications(URI.getResourceArray(json["jWTAuthentication"],"jwtauthentication"));
		this.setConditionalpolicys(URI.getResourceArray(json["conditionalPolicy"],"conditionalpolicy"));
		this.setIpaddresss(URI.getResourceArray(json["ipAddress"],"ipaddress"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getParentZaid()) json += '"parent_zaid"' + ":" + '"' + jsonEscape(this.getParentZaid())  + '",';
		if(this.getAccountName()) json += '"account_name"' + ":" + '"' + jsonEscape(this.getAccountName())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getAccountType()) json += '"account_type"' + ":" + '"' + jsonEscape(this.getAccountType())  + '",';
		if(this.getCreatedBy()) json += '"created_by"' + ":" + '"' + jsonEscape(this.getCreatedBy())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getDomains()) json += '"domain"' + ":" + URI.toJSONArray(this.getDomains())  + ',';
		if(this.getInvitations()) json += '"invitation"' + ":" + URI.toJSONArray(this.getInvitations())  + ',';
		if(this.getAccountjoinrequestss()) json += '"accountJoinRequests"' + ":" + URI.toJSONArray(this.getAccountjoinrequestss())  + ',';
		if(this.getLocations()) json += '"location"' + ":" + URI.toJSONArray(this.getLocations())  + ',';
		if(this.getAnnouncementss()) json += '"announcements"' + ":" + URI.toJSONArray(this.getAnnouncementss())  + ',';
		if(this.getPolicys()) json += '"policy"' + ":" + URI.toJSONArray(this.getPolicys())  + ',';
		if(this.getAccountconfigurations()) json += '"accountConfiguration"' + ":" + URI.toJSONArray(this.getAccountconfigurations())  + ',';
		if(this.getAutomations()) json += '"automation"' + ":" + URI.toJSONArray(this.getAutomations())  + ',';
		if(this.getDesignationss()) json += '"designations"' + ":" + URI.toJSONArray(this.getDesignationss())  + ',';
		if(this.getAccountremoteauthconfs()) json += '"accountRemoteAuthConf"' + ":" + URI.toJSONArray(this.getAccountremoteauthconfs())  + ',';
		if(this.getAccountkycs()) json += '"accountKYC"' + ":" + URI.toJSONArray(this.getAccountkycs())  + ',';
		if(this.getManageddevices()) json += '"managedDevice"' + ":" + URI.toJSONArray(this.getManageddevices())  + ',';
		if(this.getAuthdomains()) json += '"authDomain"' + ":" + URI.toJSONArray(this.getAuthdomains())  + ',';
		if(this.getSecretkeys()) json += '"secretKey"' + ":" + URI.toJSONArray(this.getSecretkeys())  + ',';
		if(this.getCaptchas()) json += '"captcha"' + ":" + URI.toJSONArray(this.getCaptchas())  + ',';
		if(this.getDigests()) json += '"digest"' + ":" + URI.toJSONArray(this.getDigests())  + ',';
		if(this.getUsers()) json += '"user"' + ":" + URI.toJSONArray(this.getUsers())  + ',';
		if(this.getScreennames()) json += '"screenName"' + ":" + URI.toJSONArray(this.getScreennames())  + ',';
		if(this.getMobilescreennames()) json += '"mobileScreenName"' + ":" + URI.toJSONArray(this.getMobilescreennames())  + ',';
		if(this.getUseremails()) json += '"userEmail"' + ":" + URI.toJSONArray(this.getUseremails())  + ',';
		if(this.getUsermobiles()) json += '"userMobile"' + ":" + URI.toJSONArray(this.getUsermobiles())  + ',';
		if(this.getTags()) json += '"tag"' + ":" + URI.toJSONArray(this.getTags())  + ',';
		if(this.getCustomfieldss()) json += '"customFields"' + ":" + URI.toJSONArray(this.getCustomfieldss())  + ',';
		if(this.getGroups()) json += '"group"' + ":" + URI.toJSONArray(this.getGroups())  + ',';
		if(this.getAppaccounts()) json += '"appAccount"' + ":" + URI.toJSONArray(this.getAppaccounts())  + ',';
		if(this.getCportaladmins()) json += '"cPortalAdmin"' + ":" + URI.toJSONArray(this.getCportaladmins())  + ',';
		if(this.getClientportalorgtypes()) json += '"clientPortalOrgType"' + ":" + URI.toJSONArray(this.getClientportalorgtypes())  + ',';
		if(this.getAccountscheduledetailss()) json += '"accountScheduleDetails"' + ":" + URI.toJSONArray(this.getAccountscheduledetailss())  + ',';
		if(this.getLogo()) json += '"logo"' + ":" + this.getLogo().toJSON()  + ',';
		if(this.getRoutingpolicys()) json += '"routingPolicy"' + ":" + URI.toJSONArray(this.getRoutingpolicys())  + ',';
		if(this.getSamlauthentications()) json += '"sAMLAuthentication"' + ":" + URI.toJSONArray(this.getSamlauthentications())  + ',';
		if(this.getJwtauthentications()) json += '"jWTAuthentication"' + ":" + URI.toJSONArray(this.getJwtauthentications())  + ',';
		if(this.getConditionalpolicys()) json += '"conditionalPolicy"' + ":" + URI.toJSONArray(this.getConditionalpolicys())  + ',';
		if(this.getIpaddresss()) json += '"ipAddress"' + ":" + URI.toJSONArray(this.getIpaddresss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Account.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.accountName && !(/xss:throwerror/).test(this.accountName)) { throw new ValidationError(_formprefix + "account_name", ValidationError.PATTERN_FAILED);}
if(this.displayName && !(/xss:throwerror/).test(this.displayName)) { throw new ValidationError(_formprefix + "display_name", ValidationError.PATTERN_FAILED);}
if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.createdBy && !(/^[a-zA-Z0-9\-]+$/).test(this.createdBy)) { throw new ValidationError(_formprefix + "created_by", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.domain) { for(i=0; i < this.domain.length; i++ ) { this.domain[i].validate(); } }
if(this.invitation) { for(i=0; i < this.invitation.length; i++ ) { this.invitation[i].validate(); } }
if(this.accountjoinrequests) { for(i=0; i < this.accountjoinrequests.length; i++ ) { this.accountjoinrequests[i].validate(); } }
if(this.location) { for(i=0; i < this.location.length; i++ ) { this.location[i].validate(); } }
if(this.announcements) { for(i=0; i < this.announcements.length; i++ ) { this.announcements[i].validate(); } }
if(this.policy) { for(i=0; i < this.policy.length; i++ ) { this.policy[i].validate(); } }
if(this.accountconfiguration) { for(i=0; i < this.accountconfiguration.length; i++ ) { this.accountconfiguration[i].validate(); } }
if(this.automation) { for(i=0; i < this.automation.length; i++ ) { this.automation[i].validate(); } }
if(this.designations) { for(i=0; i < this.designations.length; i++ ) { this.designations[i].validate(); } }
if(this.accountremoteauthconf) { for(i=0; i < this.accountremoteauthconf.length; i++ ) { this.accountremoteauthconf[i].validate(); } }
if(this.accountkyc) { for(i=0; i < this.accountkyc.length; i++ ) { this.accountkyc[i].validate(); } }
if(this.manageddevice) { for(i=0; i < this.manageddevice.length; i++ ) { this.manageddevice[i].validate(); } }
if(this.authdomain) { for(i=0; i < this.authdomain.length; i++ ) { this.authdomain[i].validate(); } }
if(this.secretkey) { for(i=0; i < this.secretkey.length; i++ ) { this.secretkey[i].validate(); } }
if(this.captcha) { for(i=0; i < this.captcha.length; i++ ) { this.captcha[i].validate(); } }
if(this.digest) { for(i=0; i < this.digest.length; i++ ) { this.digest[i].validate(); } }
if(this.user) { for(i=0; i < this.user.length; i++ ) { this.user[i].validate(); } }
if(this.screenname) { for(i=0; i < this.screenname.length; i++ ) { this.screenname[i].validate(); } }
if(this.mobilescreenname) { for(i=0; i < this.mobilescreenname.length; i++ ) { this.mobilescreenname[i].validate(); } }
if(this.useremail) { for(i=0; i < this.useremail.length; i++ ) { this.useremail[i].validate(); } }
if(this.usermobile) { for(i=0; i < this.usermobile.length; i++ ) { this.usermobile[i].validate(); } }
if(this.tag) { for(i=0; i < this.tag.length; i++ ) { this.tag[i].validate(); } }
if(this.customfields) { for(i=0; i < this.customfields.length; i++ ) { this.customfields[i].validate(); } }
if(this.group) { for(i=0; i < this.group.length; i++ ) { this.group[i].validate(); } }
if(this.appaccount) { for(i=0; i < this.appaccount.length; i++ ) { this.appaccount[i].validate(); } }
if(this.cportaladmin) { for(i=0; i < this.cportaladmin.length; i++ ) { this.cportaladmin[i].validate(); } }
if(this.clientportalorgtype) { for(i=0; i < this.clientportalorgtype.length; i++ ) { this.clientportalorgtype[i].validate(); } }
if(this.accountscheduledetails) { for(i=0; i < this.accountscheduledetails.length; i++ ) { this.accountscheduledetails[i].validate(); } }
if(this.logo) { this.logo.validate(); }
if(this.routingpolicy) { for(i=0; i < this.routingpolicy.length; i++ ) { this.routingpolicy[i].validate(); } }
if(this.samlauthentication) { for(i=0; i < this.samlauthentication.length; i++ ) { this.samlauthentication[i].validate(); } }
if(this.jwtauthentication) { for(i=0; i < this.jwtauthentication.length; i++ ) { this.jwtauthentication[i].validate(); } }
if(this.conditionalpolicy) { for(i=0; i < this.conditionalpolicy.length; i++ ) { this.conditionalpolicy[i].validate(); } }
if(this.ipaddress) { for(i=0; i < this.ipaddress.length; i++ ) { this.ipaddress[i].validate(); } }

	return this;
    }
}
Account.path = "account";
Account.newBuilder = function() {
    return new Account();
};

AccountCloseAudit = function() {
    var _formprefix = "";
    
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var usedServices = "";
this.setUsedServices = function(usedServices) { 
    this.usedServices = usedServices;
    return this;
};
this.getUsedServices = function() {
    return this.usedServices;
};
var comments = "";
this.setComments = function(comments) { 
    this.comments = comments;
    return this;
};
this.getComments = function() {
    return this.comments;
};
var username = "";
this.setUsername = function(username) { 
    this.username = username;
    return this;
};
this.getUsername = function() {
    return this.username;
};
var reason = "1";
this.setReason = function(reason) { 
    this.reason = reason;
    return this;
};
this.getReason = function() {
    return this.reason;
};
var registeredTime = "";
this.setRegisteredTime = function(registeredTime) { 
    this.registeredTime = registeredTime;
    return this;
};
this.getRegisteredTime = function() {
    return this.registeredTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZaid(json["zaid"]);
		this.setZuid(json["zuid"]);
		this.setUsedServices(json["used_services"]);
		this.setComments(json["comments"]);
		this.setUsername(json["username"]);
		this.setReason(json["reason"]);
		this.setRegisteredTime(json["registered_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getUsedServices()) json += '"used_services"' + ":" + '"' + jsonEscape(this.getUsedServices())  + '",';
		if(this.getComments()) json += '"comments"' + ":" + '"' + jsonEscape(this.getComments())  + '",';
		if(this.getUsername()) json += '"username"' + ":" + '"' + jsonEscape(this.getUsername())  + '",';
		if(this.getReason()) json += '"reason"' + ":" + '"' + jsonEscape(this.getReason())  + '",';
		if(this.getRegisteredTime()) json += '"registered_time"' + ":" + '"' + jsonEscape(this.getRegisteredTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountCloseAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.usedServices && !(/dontdisturb/).test(this.usedServices)) { throw new ValidationError(_formprefix + "used_services", ValidationError.PATTERN_FAILED);}
if(this.comments && !(/dontdisturb/).test(this.comments)) { throw new ValidationError(_formprefix + "comments", ValidationError.PATTERN_FAILED);}
if(this.username && !(/dontdisturb/).test(this.username)) { throw new ValidationError(_formprefix + "username", ValidationError.PATTERN_FAILED);}
if(this.registeredTime && !Validator.INTEGER.test(this.registeredTime)) { throw new ValidationError(_formprefix + "registered_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountCloseAudit.path = "accountcloseaudit";
AccountCloseAudit.newBuilder = function() {
    return new AccountCloseAudit();
};

Address = function() {
    var _formprefix = "";
    
var addressType = "";
this.setAddressType = function(addressType) { 
    this.addressType = addressType;
    return this;
};
this.getAddressType = function() {
    return this.addressType;
};
var companyName = "";
this.setCompanyName = function(companyName) { 
    this.companyName = companyName;
    return this;
};
this.getCompanyName = function() {
    return this.companyName;
};
var jobTitle = "";
this.setJobTitle = function(jobTitle) { 
    this.jobTitle = jobTitle;
    return this;
};
this.getJobTitle = function() {
    return this.jobTitle;
};
var locationName = "";
this.setLocationName = function(locationName) { 
    this.locationName = locationName;
    return this;
};
this.getLocationName = function() {
    return this.locationName;
};
var postBox = "";
this.setPostBox = function(postBox) { 
    this.postBox = postBox;
    return this;
};
this.getPostBox = function() {
    return this.postBox;
};
var streetAddress = "";
this.setStreetAddress = function(streetAddress) { 
    this.streetAddress = streetAddress;
    return this;
};
this.getStreetAddress = function() {
    return this.streetAddress;
};
var city = "";
this.setCity = function(city) { 
    this.city = city;
    return this;
};
this.getCity = function() {
    return this.city;
};
var state = "";
this.setState = function(state) { 
    this.state = state;
    return this;
};
this.getState = function() {
    return this.state;
};
var country = "";
this.setCountry = function(country) { 
    this.country = country;
    return this;
};
this.getCountry = function() {
    return this.country;
};
var postalCode = "";
this.setPostalCode = function(postalCode) { 
    this.postalCode = postalCode;
    return this;
};
this.getPostalCode = function() {
    return this.postalCode;
};
var latitude = "";
this.setLatitude = function(latitude) { 
    this.latitude = latitude;
    return this;
};
this.getLatitude = function() {
    return this.latitude;
};
var longitude = "";
this.setLongitude = function(longitude) { 
    this.longitude = longitude;
    return this;
};
this.getLongitude = function() {
    return this.longitude;
};
var phone = "";
this.setPhone = function(phone) { 
    this.phone = phone;
    return this;
};
this.getPhone = function() {
    return this.phone;
};
var extension = "";
this.setExtension = function(extension) { 
    this.extension = extension;
    return this;
};
this.getExtension = function() {
    return this.extension;
};
var mobile = "";
this.setMobile = function(mobile) { 
    this.mobile = mobile;
    return this;
};
this.getMobile = function() {
    return this.mobile;
};
var fax = "";
this.setFax = function(fax) { 
    this.fax = fax;
    return this;
};
this.getFax = function() {
    return this.fax;
};
var seatingLocation = "";
this.setSeatingLocation = function(seatingLocation) { 
    this.seatingLocation = seatingLocation;
    return this;
};
this.getSeatingLocation = function() {
    return this.seatingLocation;
};
var timezone = "";
this.setTimezone = function(timezone) { 
    this.timezone = timezone;
    return this;
};
this.getTimezone = function() {
    return this.timezone;
};
var language = "";
this.setLanguage = function(language) { 
    this.language = language;
    return this;
};
this.getLanguage = function() {
    return this.language;
};
var websiteUrl = "";
this.setWebsiteUrl = function(websiteUrl) { 
    this.websiteUrl = websiteUrl;
    return this;
};
this.getWebsiteUrl = function() {
    return this.websiteUrl;
};
var blogUrl = "";
this.setBlogUrl = function(blogUrl) { 
    this.blogUrl = blogUrl;
    return this;
};
this.getBlogUrl = function() {
    return this.blogUrl;
};
var twitterUrl = "";
this.setTwitterUrl = function(twitterUrl) { 
    this.twitterUrl = twitterUrl;
    return this;
};
this.getTwitterUrl = function() {
    return this.twitterUrl;
};
var linkedinUrl = "";
this.setLinkedinUrl = function(linkedinUrl) { 
    this.linkedinUrl = linkedinUrl;
    return this;
};
this.getLinkedinUrl = function() {
    return this.linkedinUrl;
};
var flickrUrl = "";
this.setFlickrUrl = function(flickrUrl) { 
    this.flickrUrl = flickrUrl;
    return this;
};
this.getFlickrUrl = function() {
    return this.flickrUrl;
};
var deliciousUrl = "";
this.setDeliciousUrl = function(deliciousUrl) { 
    this.deliciousUrl = deliciousUrl;
    return this;
};
this.getDeliciousUrl = function() {
    return this.deliciousUrl;
};
var amazonUrl = "";
this.setAmazonUrl = function(amazonUrl) { 
    this.amazonUrl = amazonUrl;
    return this;
};
this.getAmazonUrl = function() {
    return this.amazonUrl;
};
var facebookUrl = "";
this.setFacebookUrl = function(facebookUrl) { 
    this.facebookUrl = facebookUrl;
    return this;
};
this.getFacebookUrl = function() {
    return this.facebookUrl;
};
var googleplusUrl = "";
this.setGoogleplusUrl = function(googleplusUrl) { 
    this.googleplusUrl = googleplusUrl;
    return this;
};
this.getGoogleplusUrl = function() {
    return this.googleplusUrl;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAddressType(json["address_type"]);
		this.setCompanyName(json["company_name"]);
		this.setJobTitle(json["job_title"]);
		this.setLocationName(json["location_name"]);
		this.setPostBox(json["post_box"]);
		this.setStreetAddress(json["street_address"]);
		this.setCity(json["city"]);
		this.setState(json["state"]);
		this.setCountry(json["country"]);
		this.setPostalCode(json["postal_code"]);
		this.setLatitude(json["latitude"]);
		this.setLongitude(json["longitude"]);
		this.setPhone(json["phone"]);
		this.setExtension(json["extension"]);
		this.setMobile(json["mobile"]);
		this.setFax(json["fax"]);
		this.setSeatingLocation(json["seating_location"]);
		this.setTimezone(json["timezone"]);
		this.setLanguage(json["language"]);
		this.setWebsiteUrl(json["website_url"]);
		this.setBlogUrl(json["blog_url"]);
		this.setTwitterUrl(json["twitter_url"]);
		this.setLinkedinUrl(json["linkedin_url"]);
		this.setFlickrUrl(json["flickr_url"]);
		this.setDeliciousUrl(json["delicious_url"]);
		this.setAmazonUrl(json["amazon_url"]);
		this.setFacebookUrl(json["facebook_url"]);
		this.setGoogleplusUrl(json["googleplus_url"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAddressType()) json += '"address_type"' + ":" + '"' + jsonEscape(this.getAddressType())  + '",';
		if(this.getCompanyName()) json += '"company_name"' + ":" + '"' + jsonEscape(this.getCompanyName())  + '",';
		if(this.getJobTitle()) json += '"job_title"' + ":" + '"' + jsonEscape(this.getJobTitle())  + '",';
		if(this.getLocationName()) json += '"location_name"' + ":" + '"' + jsonEscape(this.getLocationName())  + '",';
		if(this.getPostBox()) json += '"post_box"' + ":" + '"' + jsonEscape(this.getPostBox())  + '",';
		if(this.getStreetAddress()) json += '"street_address"' + ":" + '"' + jsonEscape(this.getStreetAddress())  + '",';
		if(this.getCity()) json += '"city"' + ":" + '"' + jsonEscape(this.getCity())  + '",';
		if(this.getState()) json += '"state"' + ":" + '"' + jsonEscape(this.getState())  + '",';
		if(this.getCountry()) json += '"country"' + ":" + '"' + jsonEscape(this.getCountry())  + '",';
		if(this.getPostalCode()) json += '"postal_code"' + ":" + '"' + jsonEscape(this.getPostalCode())  + '",';
		if(this.getLatitude()) json += '"latitude"' + ":" + '"' + jsonEscape(this.getLatitude())  + '",';
		if(this.getLongitude()) json += '"longitude"' + ":" + '"' + jsonEscape(this.getLongitude())  + '",';
		if(this.getPhone()) json += '"phone"' + ":" + '"' + jsonEscape(this.getPhone())  + '",';
		if(this.getExtension()) json += '"extension"' + ":" + '"' + jsonEscape(this.getExtension())  + '",';
		if(this.getMobile()) json += '"mobile"' + ":" + '"' + jsonEscape(this.getMobile())  + '",';
		if(this.getFax()) json += '"fax"' + ":" + '"' + jsonEscape(this.getFax())  + '",';
		if(this.getSeatingLocation()) json += '"seating_location"' + ":" + '"' + jsonEscape(this.getSeatingLocation())  + '",';
		if(this.getTimezone()) json += '"timezone"' + ":" + '"' + jsonEscape(this.getTimezone())  + '",';
		if(this.getLanguage()) json += '"language"' + ":" + '"' + jsonEscape(this.getLanguage())  + '",';
		if(this.getWebsiteUrl()) json += '"website_url"' + ":" + '"' + jsonEscape(this.getWebsiteUrl())  + '",';
		if(this.getBlogUrl()) json += '"blog_url"' + ":" + '"' + jsonEscape(this.getBlogUrl())  + '",';
		if(this.getTwitterUrl()) json += '"twitter_url"' + ":" + '"' + jsonEscape(this.getTwitterUrl())  + '",';
		if(this.getLinkedinUrl()) json += '"linkedin_url"' + ":" + '"' + jsonEscape(this.getLinkedinUrl())  + '",';
		if(this.getFlickrUrl()) json += '"flickr_url"' + ":" + '"' + jsonEscape(this.getFlickrUrl())  + '",';
		if(this.getDeliciousUrl()) json += '"delicious_url"' + ":" + '"' + jsonEscape(this.getDeliciousUrl())  + '",';
		if(this.getAmazonUrl()) json += '"amazon_url"' + ":" + '"' + jsonEscape(this.getAmazonUrl())  + '",';
		if(this.getFacebookUrl()) json += '"facebook_url"' + ":" + '"' + jsonEscape(this.getFacebookUrl())  + '",';
		if(this.getGoogleplusUrl()) json += '"googleplus_url"' + ":" + '"' + jsonEscape(this.getGoogleplusUrl())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Address.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.addressType && !Validator.INTEGER.test(this.addressType)) { throw new ValidationError(_formprefix + "address_type", ValidationError.PATTERN_FAILED);}
if(this.companyName && !(/xss:throwerror/).test(this.companyName)) { throw new ValidationError(_formprefix + "company_name", ValidationError.PATTERN_FAILED);}
if(this.jobTitle && !(/xss:throwerror/).test(this.jobTitle)) { throw new ValidationError(_formprefix + "job_title", ValidationError.PATTERN_FAILED);}
if(this.locationName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.locationName)) { throw new ValidationError(_formprefix + "location_name", ValidationError.PATTERN_FAILED);}
if(this.postBox && !(/xss:throwerror/).test(this.postBox)) { throw new ValidationError(_formprefix + "post_box", ValidationError.PATTERN_FAILED);}
if(this.streetAddress && !(/xss:throwerror/).test(this.streetAddress)) { throw new ValidationError(_formprefix + "street_address", ValidationError.PATTERN_FAILED);}
if(this.city && !(/xss:throwerror/).test(this.city)) { throw new ValidationError(_formprefix + "city", ValidationError.PATTERN_FAILED);}
if(this.state && !(/xss:throwerror/).test(this.state)) { throw new ValidationError(_formprefix + "state", ValidationError.PATTERN_FAILED);}
if(this.country && !(/^[a-zA-Z0-9]{2,5}$/).test(this.country)) { throw new ValidationError(_formprefix + "country", ValidationError.PATTERN_FAILED);}
if(this.postalCode && !(/xss:throwerror/).test(this.postalCode)) { throw new ValidationError(_formprefix + "postal_code", ValidationError.PATTERN_FAILED);}
if(this.latitude && !(/^[0-9\-\.]*$/).test(this.latitude)) { throw new ValidationError(_formprefix + "latitude", ValidationError.PATTERN_FAILED);}
if(this.longitude && !(/^[0-9\-\.]*$/).test(this.longitude)) { throw new ValidationError(_formprefix + "longitude", ValidationError.PATTERN_FAILED);}
if(this.phone && !(/xss:throwerror/).test(this.phone)) { throw new ValidationError(_formprefix + "phone", ValidationError.PATTERN_FAILED);}
if(this.extension && !(/xss:throwerror/).test(this.extension)) { throw new ValidationError(_formprefix + "extension", ValidationError.PATTERN_FAILED);}
if(this.mobile && !(/xss:throwerror/).test(this.mobile)) { throw new ValidationError(_formprefix + "mobile", ValidationError.PATTERN_FAILED);}
if(this.fax && !(/xss:throwerror/).test(this.fax)) { throw new ValidationError(_formprefix + "fax", ValidationError.PATTERN_FAILED);}
if(this.seatingLocation && !(/xss:throwerror/).test(this.seatingLocation)) { throw new ValidationError(_formprefix + "seating_location", ValidationError.PATTERN_FAILED);}
if(this.timezone && !(/xss:throwerror/).test(this.timezone)) { throw new ValidationError(_formprefix + "timezone", ValidationError.PATTERN_FAILED);}
if(this.language && !(/^[a-zA-Z-]{0,5}$/).test(this.language)) { throw new ValidationError(_formprefix + "language", ValidationError.PATTERN_FAILED);}
if(this.websiteUrl && !(/xss:throwerror/).test(this.websiteUrl)) { throw new ValidationError(_formprefix + "website_url", ValidationError.PATTERN_FAILED);}
if(this.blogUrl && !(/xss:throwerror/).test(this.blogUrl)) { throw new ValidationError(_formprefix + "blog_url", ValidationError.PATTERN_FAILED);}
if(this.twitterUrl && !(/xss:throwerror/).test(this.twitterUrl)) { throw new ValidationError(_formprefix + "twitter_url", ValidationError.PATTERN_FAILED);}
if(this.linkedinUrl && !(/xss:throwerror/).test(this.linkedinUrl)) { throw new ValidationError(_formprefix + "linkedin_url", ValidationError.PATTERN_FAILED);}
if(this.flickrUrl && !(/xss:throwerror/).test(this.flickrUrl)) { throw new ValidationError(_formprefix + "flickr_url", ValidationError.PATTERN_FAILED);}
if(this.deliciousUrl && !(/xss:throwerror/).test(this.deliciousUrl)) { throw new ValidationError(_formprefix + "delicious_url", ValidationError.PATTERN_FAILED);}
if(this.amazonUrl && !(/xss:throwerror/).test(this.amazonUrl)) { throw new ValidationError(_formprefix + "amazon_url", ValidationError.PATTERN_FAILED);}
if(this.facebookUrl && !(/xss:throwerror/).test(this.facebookUrl)) { throw new ValidationError(_formprefix + "facebook_url", ValidationError.PATTERN_FAILED);}
if(this.googleplusUrl && !(/xss:throwerror/).test(this.googleplusUrl)) { throw new ValidationError(_formprefix + "googleplus_url", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Address.path = "address";
Address.newBuilder = function() {
    return new Address();
};

AuthTokenScope = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AuthTokenScope.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !Validator.INTEGER.test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AuthTokenScope.path = "authtokenscope";
AuthTokenScope.newBuilder = function() {
    return new AuthTokenScope();
};

License = function() {
    var _formprefix = "";
    
var licenseAttributeKey = "";
this.setLicenseAttributeKey = function(licenseAttributeKey) { 
    this.licenseAttributeKey = licenseAttributeKey;
    return this;
};
this.getLicenseAttributeKey = function() {
    return this.licenseAttributeKey;
};
var licenseAttributeValue = "";
this.setLicenseAttributeValue = function(licenseAttributeValue) { 
    this.licenseAttributeValue = licenseAttributeValue;
    return this;
};
this.getLicenseAttributeValue = function() {
    return this.licenseAttributeValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLicenseAttributeKey(json["license_attribute_key"]);
		this.setLicenseAttributeValue(json["license_attribute_value"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLicenseAttributeKey()) json += '"license_attribute_key"' + ":" + '"' + jsonEscape(this.getLicenseAttributeKey())  + '",';
		if(this.getLicenseAttributeValue()) json += '"license_attribute_value"' + ":" + '"' + jsonEscape(this.getLicenseAttributeValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(License.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.licenseAttributeValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.licenseAttributeValue)) { throw new ValidationError(_formprefix + "license_attribute_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
License.path = "license";
License.newBuilder = function() {
    return new License();
};

MailSender = function() {
    var _formprefix = "";
    
var connectorName = "isc";
this.setConnectorName = function(connectorName) { 
    this.connectorName = connectorName;
    return this;
};
this.getConnectorName = function() {
    return this.connectorName;
};
var mailSender = "";
this.setMailSender = function(mailSender) { 
    this.mailSender = mailSender;
    return this;
};
this.getMailSender = function() {
    return this.mailSender;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setConnectorName(json["connector_name"]);
		this.setMailSender(json["mail_sender"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getConnectorName()) json += '"connector_name"' + ":" + '"' + jsonEscape(this.getConnectorName())  + '",';
		if(this.getMailSender()) json += '"mail_sender"' + ":" + '"' + jsonEscape(this.getMailSender())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MailSender.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.connectorName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.connectorName)) { throw new ValidationError(_formprefix + "connector_name", ValidationError.PATTERN_FAILED);}
if(this.mailSender && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.mailSender)) { throw new ValidationError(_formprefix + "mail_sender", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
MailSender.path = "mailsender";
MailSender.newBuilder = function() {
    return new MailSender();
};

AccountKYCContact = function() {
    var _formprefix = "";
    
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var firstName = "";
this.setFirstName = function(firstName) { 
    this.firstName = firstName;
    return this;
};
this.getFirstName = function() {
    return this.firstName;
};
var lastName = "";
this.setLastName = function(lastName) { 
    this.lastName = lastName;
    return this;
};
this.getLastName = function() {
    return this.lastName;
};
var dataProtectionOfficer = "false";
this.setDataProtectionOfficer = function(dataProtectionOfficer) { 
    this.dataProtectionOfficer = dataProtectionOfficer;
    return this;
};
this.getDataProtectionOfficer = function() {
    return this.dataProtectionOfficer;
};
var privacyRepresentative = "false";
this.setPrivacyRepresentative = function(privacyRepresentative) { 
    this.privacyRepresentative = privacyRepresentative;
    return this;
};
this.getPrivacyRepresentative = function() {
    return this.privacyRepresentative;
};
var accountDisputeResolution = "false";
this.setAccountDisputeResolution = function(accountDisputeResolution) { 
    this.accountDisputeResolution = accountDisputeResolution;
    return this;
};
this.getAccountDisputeResolution = function() {
    return this.accountDisputeResolution;
};
var breachNotification = "false";
this.setBreachNotification = function(breachNotification) { 
    this.breachNotification = breachNotification;
    return this;
};
this.getBreachNotification = function() {
    return this.breachNotification;
};
var subprocessorNotification = "false";
this.setSubprocessorNotification = function(subprocessorNotification) { 
    this.subprocessorNotification = subprocessorNotification;
    return this;
};
this.getSubprocessorNotification = function() {
    return this.subprocessorNotification;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setEmailId(json["email_id"]);
		this.setFirstName(json["first_name"]);
		this.setLastName(json["last_name"]);
		this.setDataProtectionOfficer(json["data_protection_officer"]);
		this.setPrivacyRepresentative(json["privacy_representative"]);
		this.setAccountDisputeResolution(json["account_dispute_resolution"]);
		this.setBreachNotification(json["breach_notification"]);
		this.setSubprocessorNotification(json["subprocessor_notification"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getFirstName()) json += '"first_name"' + ":" + '"' + jsonEscape(this.getFirstName())  + '",';
		if(this.getLastName()) json += '"last_name"' + ":" + '"' + jsonEscape(this.getLastName())  + '",';
		if(this.getDataProtectionOfficer()) json += '"data_protection_officer"' + ":" + '"' + jsonEscape(this.getDataProtectionOfficer())  + '",';
		if(this.getPrivacyRepresentative()) json += '"privacy_representative"' + ":" + '"' + jsonEscape(this.getPrivacyRepresentative())  + '",';
		if(this.getAccountDisputeResolution()) json += '"account_dispute_resolution"' + ":" + '"' + jsonEscape(this.getAccountDisputeResolution())  + '",';
		if(this.getBreachNotification()) json += '"breach_notification"' + ":" + '"' + jsonEscape(this.getBreachNotification())  + '",';
		if(this.getSubprocessorNotification()) json += '"subprocessor_notification"' + ":" + '"' + jsonEscape(this.getSubprocessorNotification())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountKYCContact.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.firstName && !(/xss:throwerror/).test(this.firstName)) { throw new ValidationError(_formprefix + "first_name", ValidationError.PATTERN_FAILED);}
if(this.lastName && !(/xss:throwerror/).test(this.lastName)) { throw new ValidationError(_formprefix + "last_name", ValidationError.PATTERN_FAILED);}
if(this.dataProtectionOfficer && !Validator.BOOLEAN.test(this.dataProtectionOfficer)) { throw new ValidationError(_formprefix + "data_protection_officer", ValidationError.PATTERN_FAILED);}
if(this.privacyRepresentative && !Validator.BOOLEAN.test(this.privacyRepresentative)) { throw new ValidationError(_formprefix + "privacy_representative", ValidationError.PATTERN_FAILED);}
if(this.accountDisputeResolution && !Validator.BOOLEAN.test(this.accountDisputeResolution)) { throw new ValidationError(_formprefix + "account_dispute_resolution", ValidationError.PATTERN_FAILED);}
if(this.breachNotification && !Validator.BOOLEAN.test(this.breachNotification)) { throw new ValidationError(_formprefix + "breach_notification", ValidationError.PATTERN_FAILED);}
if(this.subprocessorNotification && !Validator.BOOLEAN.test(this.subprocessorNotification)) { throw new ValidationError(_formprefix + "subprocessor_notification", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountKYCContact.path = "accountkyccontact";
AccountKYCContact.newBuilder = function() {
    return new AccountKYCContact();
};

PasswordHistory = function() {
    var _formprefix = "";
    
var password = "";
this.setPassword = function(password) { 
    this.password = password;
    return this;
};
this.getPassword = function() {
    return this.password;
};
var salt = "";
this.setSalt = function(salt) { 
    this.salt = salt;
    return this;
};
this.getSalt = function() {
    return this.salt;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPassword(json["password"]);
		this.setSalt(json["salt"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPassword()) json += '"password"' + ":" + '"' + jsonEscape(this.getPassword())  + '",';
		if(this.getSalt()) json += '"salt"' + ":" + '"' + jsonEscape(this.getSalt())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(PasswordHistory.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.password && !(/dontdisturb/).test(this.password)) { throw new ValidationError(_formprefix + "password", ValidationError.PATTERN_FAILED);}
if(this.salt && !(/^([A-Za-z0-9_.\-]+)$/).test(this.salt)) { throw new ValidationError(_formprefix + "salt", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
PasswordHistory.path = "passwordhistory";
PasswordHistory.newBuilder = function() {
    return new PasswordHistory();
};

UserTPSecretGroup = function() {
    var _formprefix = "";
    
var groupId = "";
this.setGroupId = function(groupId) { 
    this.groupId = groupId;
    return this;
};
this.getGroupId = function() {
    return this.groupId;
};
var groupName = "";
this.setGroupName = function(groupName) { 
    this.groupName = groupName;
    return this;
};
this.getGroupName = function() {
    return this.groupName;
};
var groupDetails = "";
this.setGroupDetails = function(groupDetails) { 
    this.groupDetails = groupDetails;
    return this;
};
this.getGroupDetails = function() {
    return this.groupDetails;
};
var nextId = "-1";
this.setNextId = function(nextId) { 
    this.nextId = nextId;
    return this;
};
this.getNextId = function() {
    return this.nextId;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var userthirdpartysecretkeys = undefined;
this.setUserthirdpartysecretkeyss = function(userthirdpartysecretkeys) { 
    this.userthirdpartysecretkeys = userthirdpartysecretkeys;
    return this;
};
this.getUserthirdpartysecretkeyss = function() {
    return this.userthirdpartysecretkeys;
};
this.addUserthirdpartysecretkeys = function(userthirdpartysecretkeys) { 
 if(!this.userthirdpartysecretkeys) this.userthirdpartysecretkeys = new Array(); 
  this.userthirdpartysecretkeys.push(userthirdpartysecretkeys); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setGroupId(json["group_id"]);
		this.setGroupName(json["group_name"]);
		this.setGroupDetails(json["group_details"]);
		this.setNextId(json["next_id"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setUserthirdpartysecretkeyss(URI.getResourceArray(json["userThirdPartySecretKeys"],"userthirdpartysecretkeys"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getGroupId()) json += '"group_id"' + ":" + '"' + jsonEscape(this.getGroupId())  + '",';
		if(this.getGroupName()) json += '"group_name"' + ":" + '"' + jsonEscape(this.getGroupName())  + '",';
		if(this.getGroupDetails()) json += '"group_details"' + ":" + '"' + jsonEscape(this.getGroupDetails())  + '",';
		if(this.getNextId()) json += '"next_id"' + ":" + '"' + jsonEscape(this.getNextId())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getUserthirdpartysecretkeyss()) json += '"userThirdPartySecretKeys"' + ":" + URI.toJSONArray(this.getUserthirdpartysecretkeyss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserTPSecretGroup.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.groupId && !(/^[a-zA-Z0-9_\-]+$/).test(this.groupId)) { throw new ValidationError(_formprefix + "group_id", ValidationError.PATTERN_FAILED);}
if(this.groupName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.groupName)) { throw new ValidationError(_formprefix + "group_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.userthirdpartysecretkeys) { for(i=0; i < this.userthirdpartysecretkeys.length; i++ ) { this.userthirdpartysecretkeys[i].validate(); } }

	return this;
    }
}
UserTPSecretGroup.path = "usertpsecretgroup";
UserTPSecretGroup.newBuilder = function() {
    return new UserTPSecretGroup();
};

ServiceOrgMemberRole = function() {
    var _formprefix = "";
    
var zarid = "";
this.setZarid = function(zarid) { 
    this.zarid = zarid;
    return this;
};
this.getZarid = function() {
    return this.zarid;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZarid(json["zarid"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZarid()) json += '"zarid"' + ":" + '"' + jsonEscape(this.getZarid())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgMemberRole.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zarid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zarid)) { throw new ValidationError(_formprefix + "zarid", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgMemberRole.path = "serviceorgmemberrole";
ServiceOrgMemberRole.newBuilder = function() {
    return new ServiceOrgMemberRole();
};

TelesignLanguage = function() {
    var _formprefix = "";
    
var langName = "";
this.setLangName = function(langName) { 
    this.langName = langName;
    return this;
};
this.getLangName = function() {
    return this.langName;
};
var langCode = "";
this.setLangCode = function(langCode) { 
    this.langCode = langCode;
    return this;
};
this.getLangCode = function() {
    return this.langCode;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLangName(json["lang_name"]);
		this.setLangCode(json["lang_code"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLangName()) json += '"lang_name"' + ":" + '"' + jsonEscape(this.getLangName())  + '",';
		if(this.getLangCode()) json += '"lang_code"' + ":" + '"' + jsonEscape(this.getLangCode())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(TelesignLanguage.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.langName && !(/xss:throwerror/).test(this.langName)) { throw new ValidationError(_formprefix + "lang_name", ValidationError.PATTERN_FAILED);}
if(this.langCode && !(/^[a-zA-Z0-9]{2,5}$/).test(this.langCode)) { throw new ValidationError(_formprefix + "lang_code", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
TelesignLanguage.path = "telesignlanguage";
TelesignLanguage.newBuilder = function() {
    return new TelesignLanguage();
};

ManagedDeviceUsers = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidType = "1";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidType(json["zid_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ManagedDeviceUsers.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.zidType && !Validator.INTEGER.test(this.zidType)) { throw new ValidationError(_formprefix + "zid_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ManagedDeviceUsers.path = "manageddeviceusers";
ManagedDeviceUsers.newBuilder = function() {
    return new ManagedDeviceUsers();
};

UserGDPRDetails = function() {
    var _formprefix = "";
    
var dpaStatus = "0";
this.setDpaStatus = function(dpaStatus) { 
    this.dpaStatus = dpaStatus;
    return this;
};
this.getDpaStatus = function() {
    return this.dpaStatus;
};
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDpaStatus(json["dpa_status"]);
		this.setEmailId(json["email_id"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDpaStatus()) json += '"dpa_status"' + ":" + '"' + jsonEscape(this.getDpaStatus())  + '",';
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserGDPRDetails.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.dpaStatus && !Validator.INTEGER.test(this.dpaStatus)) { throw new ValidationError(_formprefix + "dpa_status", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserGDPRDetails.path = "usergdprdetails";
UserGDPRDetails.newBuilder = function() {
    return new UserGDPRDetails();
};

OAuthMobileUserDeviceSubClients = function() {
    var _formprefix = "";
    
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClientZid(json["client_zid"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthMobileUserDeviceSubClients.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.clientZid && !(/^[0-9]+\.[0-9]+$/).test(this.clientZid)) { throw new ValidationError(_formprefix + "client_zid", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthMobileUserDeviceSubClients.path = "oauthmobileuserdevicesubclients";
OAuthMobileUserDeviceSubClients.newBuilder = function() {
    return new OAuthMobileUserDeviceSubClients();
};

ServiceOrgDomain = function() {
    var _formprefix = "";
    
var zsoid = "";
this.setZsoid = function(zsoid) { 
    this.zsoid = zsoid;
    return this;
};
this.getZsoid = function() {
    return this.zsoid;
};
var domain = "";
this.setDomain = function(domain) { 
    this.domain = domain;
    return this;
};
this.getDomain = function() {
    return this.domain;
};
var isPrimary = "";
this.setIsPrimary = function(isPrimary) { 
    this.isPrimary = isPrimary;
    return this;
};
this.getIsPrimary = function() {
    return this.isPrimary;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var isVerified = "true";
this.setIsVerified = function(isVerified) { 
    this.isVerified = isVerified;
    return this;
};
this.getIsVerified = function() {
    return this.isVerified;
};
var domainType = "0";
this.setDomainType = function(domainType) { 
    this.domainType = domainType;
    return this;
};
this.getDomainType = function() {
    return this.domainType;
};
var environment = "1";
this.setEnvironment = function(environment) { 
    this.environment = environment;
    return this;
};
this.getEnvironment = function() {
    return this.environment;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZsoid(json["zsoid"]);
		this.setDomain(json["domain"]);
		this.setIsPrimary(json["is_primary"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setIsVerified(json["is_verified"]);
		this.setDomainType(json["domain_type"]);
		this.setEnvironment(json["environment"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZsoid()) json += '"zsoid"' + ":" + '"' + jsonEscape(this.getZsoid())  + '",';
		if(this.getDomain()) json += '"domain"' + ":" + '"' + jsonEscape(this.getDomain())  + '",';
		if(this.getIsPrimary()) json += '"is_primary"' + ":" + '"' + jsonEscape(this.getIsPrimary())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getIsVerified()) json += '"is_verified"' + ":" + '"' + jsonEscape(this.getIsVerified())  + '",';
		if(this.getDomainType()) json += '"domain_type"' + ":" + '"' + jsonEscape(this.getDomainType())  + '",';
		if(this.getEnvironment()) json += '"environment"' + ":" + '"' + jsonEscape(this.getEnvironment())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgDomain.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zsoid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zsoid)) { throw new ValidationError(_formprefix + "zsoid", ValidationError.PATTERN_FAILED);}
if(this.domain && !(/^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)|([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}$/).test(this.domain)) { throw new ValidationError(_formprefix + "domain", ValidationError.PATTERN_FAILED);}
if(this.isPrimary && !Validator.BOOLEAN.test(this.isPrimary)) { throw new ValidationError(_formprefix + "is_primary", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.isVerified && !Validator.BOOLEAN.test(this.isVerified)) { throw new ValidationError(_formprefix + "is_verified", ValidationError.PATTERN_FAILED);}
if(this.environment && !Validator.INTEGER.test(this.environment)) { throw new ValidationError(_formprefix + "environment", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgDomain.path = "serviceorgdomain";
ServiceOrgDomain.newBuilder = function() {
    return new ServiceOrgDomain();
};

OAuthMobileUserDeviceClients = function() {
    var _formprefix = "";
    
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
var userZuid = "";
this.setUserZuid = function(userZuid) { 
    this.userZuid = userZuid;
    return this;
};
this.getUserZuid = function() {
    return this.userZuid;
};
var refreshToken = "";
this.setRefreshToken = function(refreshToken) { 
    this.refreshToken = refreshToken;
    return this;
};
this.getRefreshToken = function() {
    return this.refreshToken;
};
var oauthmobileuserdevicesubclients = undefined;
this.setOauthmobileuserdevicesubclientss = function(oauthmobileuserdevicesubclients) { 
    this.oauthmobileuserdevicesubclients = oauthmobileuserdevicesubclients;
    return this;
};
this.getOauthmobileuserdevicesubclientss = function() {
    return this.oauthmobileuserdevicesubclients;
};
this.addOauthmobileuserdevicesubclients = function(oauthmobileuserdevicesubclients) { 
 if(!this.oauthmobileuserdevicesubclients) this.oauthmobileuserdevicesubclients = new Array(); 
  this.oauthmobileuserdevicesubclients.push(oauthmobileuserdevicesubclients); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClientZid(json["client_zid"]);
		this.setUserZuid(json["user_zuid"]);
		this.setRefreshToken(json["refresh_token"]);
		this.setOauthmobileuserdevicesubclientss(URI.getResourceArray(json["oAuthMobileUserDeviceSubClients"],"oauthmobileuserdevicesubclients"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';
		if(this.getUserZuid()) json += '"user_zuid"' + ":" + '"' + jsonEscape(this.getUserZuid())  + '",';
		if(this.getRefreshToken()) json += '"refresh_token"' + ":" + '"' + jsonEscape(this.getRefreshToken())  + '",';
		if(this.getOauthmobileuserdevicesubclientss()) json += '"oAuthMobileUserDeviceSubClients"' + ":" + URI.toJSONArray(this.getOauthmobileuserdevicesubclientss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthMobileUserDeviceClients.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.clientZid && !(/^[0-9]+\.[0-9]+$/).test(this.clientZid)) { throw new ValidationError(_formprefix + "client_zid", ValidationError.PATTERN_FAILED);}
if(this.userZuid && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.userZuid)) { throw new ValidationError(_formprefix + "user_zuid", ValidationError.PATTERN_FAILED);}
if(this.refreshToken && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.refreshToken)) { throw new ValidationError(_formprefix + "refresh_token", ValidationError.PATTERN_FAILED);}
if(this.oauthmobileuserdevicesubclients) { for(i=0; i < this.oauthmobileuserdevicesubclients.length; i++ ) { this.oauthmobileuserdevicesubclients[i].validate(); } }

	return this;
    }
}
OAuthMobileUserDeviceClients.path = "oauthmobileuserdeviceclients";
OAuthMobileUserDeviceClients.newBuilder = function() {
    return new OAuthMobileUserDeviceClients();
};

ServiceOrgType = function() {
    var _formprefix = "";
    
var serviceName = "";
this.setServiceName = function(serviceName) { 
    this.serviceName = serviceName;
    return this;
};
this.getServiceName = function() {
    return this.serviceName;
};
var orgType = "";
this.setOrgType = function(orgType) { 
    this.orgType = orgType;
    return this;
};
this.getOrgType = function() {
    return this.orgType;
};
var serviceorgdomain = undefined;
this.setServiceorgdomains = function(serviceorgdomain) { 
    this.serviceorgdomain = serviceorgdomain;
    return this;
};
this.getServiceorgdomains = function() {
    return this.serviceorgdomain;
};
this.addServiceorgdomain = function(serviceorgdomain) { 
 if(!this.serviceorgdomain) this.serviceorgdomain = new Array(); 
  this.serviceorgdomain.push(serviceorgdomain); 
 return this;
};

var serviceorg = undefined;
this.setServiceorgs = function(serviceorg) { 
    this.serviceorg = serviceorg;
    return this;
};
this.getServiceorgs = function() {
    return this.serviceorg;
};
this.addServiceorg = function(serviceorg) { 
 if(!this.serviceorg) this.serviceorg = new Array(); 
  this.serviceorg.push(serviceorg); 
 return this;
};

var serviceorgzaid = undefined;
this.setServiceorgzaids = function(serviceorgzaid) { 
    this.serviceorgzaid = serviceorgzaid;
    return this;
};
this.getServiceorgzaids = function() {
    return this.serviceorgzaid;
};
this.addServiceorgzaid = function(serviceorgzaid) { 
 if(!this.serviceorgzaid) this.serviceorgzaid = new Array(); 
  this.serviceorgzaid.push(serviceorgzaid); 
 return this;
};

var invitedorgdetails = undefined;
this.setInvitedorgdetailss = function(invitedorgdetails) { 
    this.invitedorgdetails = invitedorgdetails;
    return this;
};
this.getInvitedorgdetailss = function() {
    return this.invitedorgdetails;
};
this.addInvitedorgdetails = function(invitedorgdetails) { 
 if(!this.invitedorgdetails) this.invitedorgdetails = new Array(); 
  this.invitedorgdetails.push(invitedorgdetails); 
 return this;
};

var userserviceorgpreference = undefined;
this.setUserserviceorgpreferences = function(userserviceorgpreference) { 
    this.userserviceorgpreference = userserviceorgpreference;
    return this;
};
this.getUserserviceorgpreferences = function() {
    return this.userserviceorgpreference;
};
this.addUserserviceorgpreference = function(userserviceorgpreference) { 
 if(!this.userserviceorgpreference) this.userserviceorgpreference = new Array(); 
  this.userserviceorgpreference.push(userserviceorgpreference); 
 return this;
};

var partnerzaaid = undefined;
this.setPartnerzaaids = function(partnerzaaid) { 
    this.partnerzaaid = partnerzaaid;
    return this;
};
this.getPartnerzaaids = function() {
    return this.partnerzaaid;
};
this.addPartnerzaaid = function(partnerzaaid) { 
 if(!this.partnerzaaid) this.partnerzaaid = new Array(); 
  this.partnerzaaid.push(partnerzaaid); 
 return this;
};

var serviceorgtempaccess = undefined;
this.setServiceorgtempaccesss = function(serviceorgtempaccess) { 
    this.serviceorgtempaccess = serviceorgtempaccess;
    return this;
};
this.getServiceorgtempaccesss = function() {
    return this.serviceorgtempaccess;
};
this.addServiceorgtempaccess = function(serviceorgtempaccess) { 
 if(!this.serviceorgtempaccess) this.serviceorgtempaccess = new Array(); 
  this.serviceorgtempaccess.push(serviceorgtempaccess); 
 return this;
};

var serviceorgproductionzsoid = undefined;
this.setServiceorgproductionzsoids = function(serviceorgproductionzsoid) { 
    this.serviceorgproductionzsoid = serviceorgproductionzsoid;
    return this;
};
this.getServiceorgproductionzsoids = function() {
    return this.serviceorgproductionzsoid;
};
this.addServiceorgproductionzsoid = function(serviceorgproductionzsoid) { 
 if(!this.serviceorgproductionzsoid) this.serviceorgproductionzsoid = new Array(); 
  this.serviceorgproductionzsoid.push(serviceorgproductionzsoid); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setServiceName(json["service_name"]);
		this.setOrgType(json["org_type"]);
		this.setServiceorgdomains(URI.getResourceArray(json["serviceOrgDomain"],"serviceorgdomain"));
		this.setServiceorgs(URI.getResourceArray(json["serviceOrg"],"serviceorg"));
		this.setServiceorgzaids(URI.getResourceArray(json["serviceOrgZAID"],"serviceorgzaid"));
		this.setInvitedorgdetailss(URI.getResourceArray(json["invitedOrgDetails"],"invitedorgdetails"));
		this.setUserserviceorgpreferences(URI.getResourceArray(json["userServiceOrgPreference"],"userserviceorgpreference"));
		this.setPartnerzaaids(URI.getResourceArray(json["partnerZAAID"],"partnerzaaid"));
		this.setServiceorgtempaccesss(URI.getResourceArray(json["serviceOrgTempAccess"],"serviceorgtempaccess"));
		this.setServiceorgproductionzsoids(URI.getResourceArray(json["serviceOrgProductionZSOID"],"serviceorgproductionzsoid"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getServiceName()) json += '"service_name"' + ":" + '"' + jsonEscape(this.getServiceName())  + '",';
		if(this.getOrgType()) json += '"org_type"' + ":" + '"' + jsonEscape(this.getOrgType())  + '",';
		if(this.getServiceorgdomains()) json += '"serviceOrgDomain"' + ":" + URI.toJSONArray(this.getServiceorgdomains())  + ',';
		if(this.getServiceorgs()) json += '"serviceOrg"' + ":" + URI.toJSONArray(this.getServiceorgs())  + ',';
		if(this.getServiceorgzaids()) json += '"serviceOrgZAID"' + ":" + URI.toJSONArray(this.getServiceorgzaids())  + ',';
		if(this.getInvitedorgdetailss()) json += '"invitedOrgDetails"' + ":" + URI.toJSONArray(this.getInvitedorgdetailss())  + ',';
		if(this.getUserserviceorgpreferences()) json += '"userServiceOrgPreference"' + ":" + URI.toJSONArray(this.getUserserviceorgpreferences())  + ',';
		if(this.getPartnerzaaids()) json += '"partnerZAAID"' + ":" + URI.toJSONArray(this.getPartnerzaaids())  + ',';
		if(this.getServiceorgtempaccesss()) json += '"serviceOrgTempAccess"' + ":" + URI.toJSONArray(this.getServiceorgtempaccesss())  + ',';
		if(this.getServiceorgproductionzsoids()) json += '"serviceOrgProductionZSOID"' + ":" + URI.toJSONArray(this.getServiceorgproductionzsoids())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgType.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.orgType && !Validator.INTEGER.test(this.orgType)) { throw new ValidationError(_formprefix + "org_type", ValidationError.PATTERN_FAILED);}
if(this.serviceorgdomain) { for(i=0; i < this.serviceorgdomain.length; i++ ) { this.serviceorgdomain[i].validate(); } }
if(this.serviceorg) { for(i=0; i < this.serviceorg.length; i++ ) { this.serviceorg[i].validate(); } }
if(this.serviceorgzaid) { for(i=0; i < this.serviceorgzaid.length; i++ ) { this.serviceorgzaid[i].validate(); } }
if(this.invitedorgdetails) { for(i=0; i < this.invitedorgdetails.length; i++ ) { this.invitedorgdetails[i].validate(); } }
if(this.userserviceorgpreference) { for(i=0; i < this.userserviceorgpreference.length; i++ ) { this.userserviceorgpreference[i].validate(); } }
if(this.partnerzaaid) { for(i=0; i < this.partnerzaaid.length; i++ ) { this.partnerzaaid[i].validate(); } }
if(this.serviceorgtempaccess) { for(i=0; i < this.serviceorgtempaccess.length; i++ ) { this.serviceorgtempaccess[i].validate(); } }
if(this.serviceorgproductionzsoid) { for(i=0; i < this.serviceorgproductionzsoid.length; i++ ) { this.serviceorgproductionzsoid[i].validate(); } }

	return this;
    }
}
ServiceOrgType.path = "serviceorgtype";
ServiceOrgType.newBuilder = function() {
    return new ServiceOrgType();
};

ZGID = function() {
    var _formprefix = "";
    
var zgid = "";
this.setZgid = function(zgid) { 
    this.zgid = zgid;
    return this;
};
this.getZgid = function() {
    return this.zgid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZgid(json["zgid"]);
		this.setZaid(json["zaid"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZgid()) json += '"zgid"' + ":" + '"' + jsonEscape(this.getZgid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ZGID.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zgid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zgid)) { throw new ValidationError(_formprefix + "zgid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ZGID.path = "zgid";
ZGID.newBuilder = function() {
    return new ZGID();
};

AppLanguages = function() {
    var _formprefix = "";
    
var languageCode = "";
this.setLanguageCode = function(languageCode) { 
    this.languageCode = languageCode;
    return this;
};
this.getLanguageCode = function() {
    return this.languageCode;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var appi18n = undefined;
this.setAppi18ns = function(appi18n) { 
    this.appi18n = appi18n;
    return this;
};
this.getAppi18ns = function() {
    return this.appi18n;
};
this.addAppi18n = function(appi18n) { 
 if(!this.appi18n) this.appi18n = new Array(); 
  this.appi18n.push(appi18n); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLanguageCode(json["language_code"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setAppi18ns(URI.getResourceArray(json["appI18n"],"appi18n"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLanguageCode()) json += '"language_code"' + ":" + '"' + jsonEscape(this.getLanguageCode())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getAppi18ns()) json += '"appI18n"' + ":" + URI.toJSONArray(this.getAppi18ns())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppLanguages.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.languageCode && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.languageCode)) { throw new ValidationError(_formprefix + "language_code", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.appi18n) { for(i=0; i < this.appi18n.length; i++ ) { this.appi18n[i].validate(); } }

	return this;
    }
}
AppLanguages.path = "applanguages";
AppLanguages.newBuilder = function() {
    return new AppLanguages();
};

UserThirdPartySecretKeys = function() {
    var _formprefix = "";
    
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var label = "";
this.setLabel = function(label) { 
    this.label = label;
    return this;
};
this.getLabel = function() {
    return this.label;
};
var appSecret = "";
this.setAppSecret = function(appSecret) { 
    this.appSecret = appSecret;
    return this;
};
this.getAppSecret = function() {
    return this.appSecret;
};
var durations = "30";
this.setDurations = function(durations) { 
    this.durations = durations;
    return this;
};
this.getDurations = function() {
    return this.durations;
};
var appDetails = "";
this.setAppDetails = function(appDetails) { 
    this.appDetails = appDetails;
    return this;
};
this.getAppDetails = function() {
    return this.appDetails;
};
var appLogo = "0";
this.setAppLogo = function(appLogo) { 
    this.appLogo = appLogo;
    return this;
};
this.getAppLogo = function() {
    return this.appLogo;
};
var nextId = "-1";
this.setNextId = function(nextId) { 
    this.nextId = nextId;
    return this;
};
this.getNextId = function() {
    return this.nextId;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppId(json["app_id"]);
		this.setAppName(json["app_name"]);
		this.setLabel(json["label"]);
		this.setAppSecret(json["app_secret"]);
		this.setDurations(json["durations"]);
		this.setAppDetails(json["app_details"]);
		this.setAppLogo(json["app_logo"]);
		this.setNextId(json["next_id"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getLabel()) json += '"label"' + ":" + '"' + jsonEscape(this.getLabel())  + '",';
		if(this.getAppSecret()) json += '"app_secret"' + ":" + '"' + jsonEscape(this.getAppSecret())  + '",';
		if(this.getDurations()) json += '"durations"' + ":" + '"' + jsonEscape(this.getDurations())  + '",';
		if(this.getAppDetails()) json += '"app_details"' + ":" + '"' + jsonEscape(this.getAppDetails())  + '",';
		if(this.getAppLogo()) json += '"app_logo"' + ":" + '"' + jsonEscape(this.getAppLogo())  + '",';
		if(this.getNextId()) json += '"next_id"' + ":" + '"' + jsonEscape(this.getNextId())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserThirdPartySecretKeys.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.appId && !(/^[a-zA-Z0-9_\-]+$/).test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.label && !(/^([A-Za-z0-9_.\-]+)$/).test(this.label)) { throw new ValidationError(_formprefix + "label", ValidationError.PATTERN_FAILED);}
if(this.appSecret && !(/^([A-Za-z0-9_.\-]+)$/).test(this.appSecret)) { throw new ValidationError(_formprefix + "app_secret", ValidationError.PATTERN_FAILED);}
if(this.durations && !Validator.INTEGER.test(this.durations)) { throw new ValidationError(_formprefix + "durations", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserThirdPartySecretKeys.path = "userthirdpartysecretkeys";
UserThirdPartySecretKeys.newBuilder = function() {
    return new UserThirdPartySecretKeys();
};

DomainVsAuthSecret = function() {
    var _formprefix = "";
    
var authSecret = "";
this.setAuthSecret = function(authSecret) { 
    this.authSecret = authSecret;
    return this;
};
this.getAuthSecret = function() {
    return this.authSecret;
};
var accountName = "";
this.setAccountName = function(accountName) { 
    this.accountName = accountName;
    return this;
};
this.getAccountName = function() {
    return this.accountName;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAuthSecret(json["auth_secret"]);
		this.setAccountName(json["account_name"]);
		this.setZaid(json["zaid"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAuthSecret()) json += '"auth_secret"' + ":" + '"' + jsonEscape(this.getAuthSecret())  + '",';
		if(this.getAccountName()) json += '"account_name"' + ":" + '"' + jsonEscape(this.getAccountName())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(DomainVsAuthSecret.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.authSecret && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.authSecret)) { throw new ValidationError(_formprefix + "auth_secret", ValidationError.PATTERN_FAILED);}
if(this.accountName && !(/^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)|([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}$/).test(this.accountName)) { throw new ValidationError(_formprefix + "account_name", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
DomainVsAuthSecret.path = "domainvsauthsecret";
DomainVsAuthSecret.newBuilder = function() {
    return new DomainVsAuthSecret();
};

AcpSecret = function() {
    var _formprefix = "";
    
var secretKey = "";
this.setSecretKey = function(secretKey) { 
    this.secretKey = secretKey;
    return this;
};
this.getSecretKey = function() {
    return this.secretKey;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setSecretKey(json["secret_key"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getSecretKey()) json += '"secret_key"' + ":" + '"' + jsonEscape(this.getSecretKey())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AcpSecret.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.secretKey && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.secretKey)) { throw new ValidationError(_formprefix + "secret_key", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AcpSecret.path = "acpsecret";
AcpSecret.newBuilder = function() {
    return new AcpSecret();
};

RoutingPolicyUser = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidType = "1";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var isExcluded = "false";
this.setIsExcluded = function(isExcluded) { 
    this.isExcluded = isExcluded;
    return this;
};
this.getIsExcluded = function() {
    return this.isExcluded;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidType(json["zid_type"]);
		this.setIsExcluded(json["is_excluded"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getIsExcluded()) json += '"is_excluded"' + ":" + '"' + jsonEscape(this.getIsExcluded())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(RoutingPolicyUser.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.isExcluded && !Validator.BOOLEAN.test(this.isExcluded)) { throw new ValidationError(_formprefix + "is_excluded", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
RoutingPolicyUser.path = "routingpolicyuser";
RoutingPolicyUser.newBuilder = function() {
    return new RoutingPolicyUser();
};

Preference = function() {
    var _formprefix = "";
    
var theme = "";
this.setTheme = function(theme) { 
    this.theme = theme;
    return this;
};
this.getTheme = function() {
    return this.theme;
};
var dateFormat = "";
this.setDateFormat = function(dateFormat) { 
    this.dateFormat = dateFormat;
    return this;
};
this.getDateFormat = function() {
    return this.dateFormat;
};
var font = "";
this.setFont = function(font) { 
    this.font = font;
    return this;
};
this.getFont = function() {
    return this.font;
};
var alwaysSecure = "";
this.setAlwaysSecure = function(alwaysSecure) { 
    this.alwaysSecure = alwaysSecure;
    return this;
};
this.getAlwaysSecure = function() {
    return this.alwaysSecure;
};
var newsLetterSubscription = "";
this.setNewsLetterSubscription = function(newsLetterSubscription) { 
    this.newsLetterSubscription = newsLetterSubscription;
    return this;
};
this.getNewsLetterSubscription = function() {
    return this.newsLetterSubscription;
};
var notifyMeBy = "0";
this.setNotifyMeBy = function(notifyMeBy) { 
    this.notifyMeBy = notifyMeBy;
    return this;
};
this.getNotifyMeBy = function() {
    return this.notifyMeBy;
};
var userTfaStatus = "0";
this.setUserTfaStatus = function(userTfaStatus) { 
    this.userTfaStatus = userTfaStatus;
    return this;
};
this.getUserTfaStatus = function() {
    return this.userTfaStatus;
};
var tfaPrefOption = "-1";
this.setTfaPrefOption = function(tfaPrefOption) { 
    this.tfaPrefOption = tfaPrefOption;
    return this;
};
this.getTfaPrefOption = function() {
    return this.tfaPrefOption;
};
var passwordExpiryNotification = "true";
this.setPasswordExpiryNotification = function(passwordExpiryNotification) { 
    this.passwordExpiryNotification = passwordExpiryNotification;
    return this;
};
this.getPasswordExpiryNotification = function() {
    return this.passwordExpiryNotification;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTheme(json["theme"]);
		this.setDateFormat(json["date_format"]);
		this.setFont(json["font"]);
		this.setAlwaysSecure(json["always_secure"]);
		this.setNewsLetterSubscription(json["news_letter_subscription"]);
		this.setNotifyMeBy(json["notify_me_by"]);
		this.setUserTfaStatus(json["user_tfa_status"]);
		this.setTfaPrefOption(json["tfa_pref_option"]);
		this.setPasswordExpiryNotification(json["password_expiry_notification"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTheme()) json += '"theme"' + ":" + '"' + jsonEscape(this.getTheme())  + '",';
		if(this.getDateFormat()) json += '"date_format"' + ":" + '"' + jsonEscape(this.getDateFormat())  + '",';
		if(this.getFont()) json += '"font"' + ":" + '"' + jsonEscape(this.getFont())  + '",';
		if(this.getAlwaysSecure()) json += '"always_secure"' + ":" + '"' + jsonEscape(this.getAlwaysSecure())  + '",';
		if(this.getNewsLetterSubscription()) json += '"news_letter_subscription"' + ":" + '"' + jsonEscape(this.getNewsLetterSubscription())  + '",';
		if(this.getNotifyMeBy()) json += '"notify_me_by"' + ":" + '"' + jsonEscape(this.getNotifyMeBy())  + '",';
		if(this.getUserTfaStatus()) json += '"user_tfa_status"' + ":" + '"' + jsonEscape(this.getUserTfaStatus())  + '",';
		if(this.getTfaPrefOption()) json += '"tfa_pref_option"' + ":" + '"' + jsonEscape(this.getTfaPrefOption())  + '",';
		if(this.getPasswordExpiryNotification()) json += '"password_expiry_notification"' + ":" + '"' + jsonEscape(this.getPasswordExpiryNotification())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Preference.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.theme && !(/^([A-Za-z0-9_.\-]+)$/).test(this.theme)) { throw new ValidationError(_formprefix + "theme", ValidationError.PATTERN_FAILED);}
if(this.dateFormat && !(/xss:throwerror/).test(this.dateFormat)) { throw new ValidationError(_formprefix + "date_format", ValidationError.PATTERN_FAILED);}
if(this.font && !(/^([A-Za-z0-9_.\-]+)$/).test(this.font)) { throw new ValidationError(_formprefix + "font", ValidationError.PATTERN_FAILED);}
if(this.alwaysSecure && !Validator.BOOLEAN.test(this.alwaysSecure)) { throw new ValidationError(_formprefix + "always_secure", ValidationError.PATTERN_FAILED);}
if(this.newsLetterSubscription && !Validator.INTEGER.test(this.newsLetterSubscription)) { throw new ValidationError(_formprefix + "news_letter_subscription", ValidationError.PATTERN_FAILED);}
if(this.notifyMeBy && !Validator.INTEGER.test(this.notifyMeBy)) { throw new ValidationError(_formprefix + "notify_me_by", ValidationError.PATTERN_FAILED);}
if(this.userTfaStatus && !Validator.INTEGER.test(this.userTfaStatus)) { throw new ValidationError(_formprefix + "user_tfa_status", ValidationError.PATTERN_FAILED);}
if(this.tfaPrefOption && !Validator.INTEGER.test(this.tfaPrefOption)) { throw new ValidationError(_formprefix + "tfa_pref_option", ValidationError.PATTERN_FAILED);}
if(this.passwordExpiryNotification && !Validator.BOOLEAN.test(this.passwordExpiryNotification)) { throw new ValidationError(_formprefix + "password_expiry_notification", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Preference.path = "preference";
Preference.newBuilder = function() {
    return new Preference();
};

UserVerificationCode = function() {
    var _formprefix = "";
    
var vcid = "";
this.setVcid = function(vcid) { 
    this.vcid = vcid;
    return this;
};
this.getVcid = function() {
    return this.vcid;
};
var mobileNo = "";
this.setMobileNo = function(mobileNo) { 
    this.mobileNo = mobileNo;
    return this;
};
this.getMobileNo = function() {
    return this.mobileNo;
};
var verificationCode = "";
this.setVerificationCode = function(verificationCode) { 
    this.verificationCode = verificationCode;
    return this;
};
this.getVerificationCode = function() {
    return this.verificationCode;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setVcid(json["vcid"]);
		this.setMobileNo(json["mobile_no"]);
		this.setVerificationCode(json["verification_code"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getVcid()) json += '"vcid"' + ":" + '"' + jsonEscape(this.getVcid())  + '",';
		if(this.getMobileNo()) json += '"mobile_no"' + ":" + '"' + jsonEscape(this.getMobileNo())  + '",';
		if(this.getVerificationCode()) json += '"verification_code"' + ":" + '"' + jsonEscape(this.getVerificationCode())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserVerificationCode.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.vcid && !(/^[a-zA-Z0-9_\-]+$/).test(this.vcid)) { throw new ValidationError(_formprefix + "vcid", ValidationError.PATTERN_FAILED);}
if(this.mobileNo && !(/xss:throwerror/).test(this.mobileNo)) { throw new ValidationError(_formprefix + "mobile_no", ValidationError.PATTERN_FAILED);}
if(this.verificationCode && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.verificationCode)) { throw new ValidationError(_formprefix + "verification_code", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserVerificationCode.path = "userverificationcode";
UserVerificationCode.newBuilder = function() {
    return new UserVerificationCode();
};

ServiceOrgTempAccess = function() {
    var _formprefix = "";
    
var zsoid = "";
this.setZsoid = function(zsoid) { 
    this.zsoid = zsoid;
    return this;
};
this.getZsoid = function() {
    return this.zsoid;
};
var subOrgType = "-1";
this.setSubOrgType = function(subOrgType) { 
    this.subOrgType = subOrgType;
    return this;
};
this.getSubOrgType = function() {
    return this.subOrgType;
};
var enabledBy = "";
this.setEnabledBy = function(enabledBy) { 
    this.enabledBy = enabledBy;
    return this;
};
this.getEnabledBy = function() {
    return this.enabledBy;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZsoid(json["zsoid"]);
		this.setSubOrgType(json["sub_org_type"]);
		this.setEnabledBy(json["enabled_by"]);
		this.setExpiryTime(json["expiry_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZsoid()) json += '"zsoid"' + ":" + '"' + jsonEscape(this.getZsoid())  + '",';
		if(this.getSubOrgType()) json += '"sub_org_type"' + ":" + '"' + jsonEscape(this.getSubOrgType())  + '",';
		if(this.getEnabledBy()) json += '"enabled_by"' + ":" + '"' + jsonEscape(this.getEnabledBy())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgTempAccess.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zsoid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zsoid)) { throw new ValidationError(_formprefix + "zsoid", ValidationError.PATTERN_FAILED);}
if(this.subOrgType && !Validator.INTEGER.test(this.subOrgType)) { throw new ValidationError(_formprefix + "sub_org_type", ValidationError.PATTERN_FAILED);}
if(this.enabledBy && !(/^[a-zA-Z0-9_\-]+$/).test(this.enabledBy)) { throw new ValidationError(_formprefix + "enabled_by", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgTempAccess.path = "serviceorgtempaccess";
ServiceOrgTempAccess.newBuilder = function() {
    return new ServiceOrgTempAccess();
};

EmailAction = function() {
    var _formprefix = "";
    
var emailActionId = "";
this.setEmailActionId = function(emailActionId) { 
    this.emailActionId = emailActionId;
    return this;
};
this.getEmailActionId = function() {
    return this.emailActionId;
};
var emailIds = "";
this.setEmailIds = function(emailIds) { 
    this.emailIds = emailIds;
    return this;
};
this.getEmailIds = function() {
    return this.emailIds;
};
var emailTemplateUri = "";
this.setEmailTemplateUri = function(emailTemplateUri) { 
    this.emailTemplateUri = emailTemplateUri;
    return this;
};
this.getEmailTemplateUri = function() {
    return this.emailTemplateUri;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setEmailActionId(json["email_action_id"]);
		this.setEmailIds(json["email_ids"]);
		this.setEmailTemplateUri(json["email_template_uri"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getEmailActionId()) json += '"email_action_id"' + ":" + '"' + jsonEscape(this.getEmailActionId())  + '",';
		if(this.getEmailIds()) json += '"email_ids"' + ":" + '"' + jsonEscape(this.getEmailIds())  + '",';
		if(this.getEmailTemplateUri()) json += '"email_template_uri"' + ":" + '"' + jsonEscape(this.getEmailTemplateUri())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(EmailAction.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
EmailAction.path = "emailaction";
EmailAction.newBuilder = function() {
    return new EmailAction();
};

AppPassword = function() {
    var _formprefix = "";
    
var passwordId = "";
this.setPasswordId = function(passwordId) { 
    this.passwordId = passwordId;
    return this;
};
this.getPasswordId = function() {
    return this.passwordId;
};
var password = "";
this.setPassword = function(password) { 
    this.password = password;
    return this;
};
this.getPassword = function() {
    return this.password;
};
var keyLabel = "";
this.setKeyLabel = function(keyLabel) { 
    this.keyLabel = keyLabel;
    return this;
};
this.getKeyLabel = function() {
    return this.keyLabel;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var ipAuditInfo = "";
this.setIpAuditInfo = function(ipAuditInfo) { 
    this.ipAuditInfo = ipAuditInfo;
    return this;
};
this.getIpAuditInfo = function() {
    return this.ipAuditInfo;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPasswordId(json["password_id"]);
		this.setPassword(json["password"]);
		this.setKeyLabel(json["key_label"]);
		this.setIpAddress(json["ip_address"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);
		this.setIpAuditInfo(json["ip_audit_info"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPasswordId()) json += '"password_id"' + ":" + '"' + jsonEscape(this.getPasswordId())  + '",';
		if(this.getPassword()) json += '"password"' + ":" + '"' + jsonEscape(this.getPassword())  + '",';
		if(this.getKeyLabel()) json += '"key_label"' + ":" + '"' + jsonEscape(this.getKeyLabel())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getIpAuditInfo()) json += '"ip_audit_info"' + ":" + '"' + jsonEscape(this.getIpAuditInfo())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppPassword.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.passwordId && !(/^[a-zA-Z0-9_\-]+$/).test(this.passwordId)) { throw new ValidationError(_formprefix + "password_id", ValidationError.PATTERN_FAILED);}
if(this.password && !(/dontdisturb/).test(this.password)) { throw new ValidationError(_formprefix + "password", ValidationError.PATTERN_FAILED);}
if(this.keyLabel && !(/xss:throwerror/).test(this.keyLabel)) { throw new ValidationError(_formprefix + "key_label", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/xss:throwerror/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppPassword.path = "apppassword";
AppPassword.newBuilder = function() {
    return new AppPassword();
};

UserBaseDomainToken = function() {
    var _formprefix = "";
    
var baseDomainToken = "";
this.setBaseDomainToken = function(baseDomainToken) { 
    this.baseDomainToken = baseDomainToken;
    return this;
};
this.getBaseDomainToken = function() {
    return this.baseDomainToken;
};
var createdDomain = "";
this.setCreatedDomain = function(createdDomain) { 
    this.createdDomain = createdDomain;
    return this;
};
this.getCreatedDomain = function() {
    return this.createdDomain;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setBaseDomainToken(json["base_domain_token"]);
		this.setCreatedDomain(json["created_domain"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getBaseDomainToken()) json += '"base_domain_token"' + ":" + '"' + jsonEscape(this.getBaseDomainToken())  + '",';
		if(this.getCreatedDomain()) json += '"created_domain"' + ":" + '"' + jsonEscape(this.getCreatedDomain())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserBaseDomainToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.baseDomainToken && !(/^[a-zA-Z0-9\-\_]+$/).test(this.baseDomainToken)) { throw new ValidationError(_formprefix + "base_domain_token", ValidationError.PATTERN_FAILED);}
if(this.createdDomain && !(/^([\p{L}\p{M}\p{N}]([\p{L}\p{M}\p{N}\-]{0,61}[\p{L}\p{M}\p{N}])?\.)+[\p{L}\p{M}]{2,6}$/).test(this.createdDomain)) { throw new ValidationError(_formprefix + "created_domain", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserBaseDomainToken.path = "userbasedomaintoken";
UserBaseDomainToken.newBuilder = function() {
    return new UserBaseDomainToken();
};

UserAgentAudit = function() {
    var _formprefix = "";
    
var deviceType = "";
this.setDeviceType = function(deviceType) { 
    this.deviceType = deviceType;
    return this;
};
this.getDeviceType = function() {
    return this.deviceType;
};
var deviceName = "";
this.setDeviceName = function(deviceName) { 
    this.deviceName = deviceName;
    return this;
};
this.getDeviceName = function() {
    return this.deviceName;
};
var browser = "";
this.setBrowser = function(browser) { 
    this.browser = browser;
    return this;
};
this.getBrowser = function() {
    return this.browser;
};
var browserMajorVersion = "";
this.setBrowserMajorVersion = function(browserMajorVersion) { 
    this.browserMajorVersion = browserMajorVersion;
    return this;
};
this.getBrowserMajorVersion = function() {
    return this.browserMajorVersion;
};
var browserMinorVersion = "";
this.setBrowserMinorVersion = function(browserMinorVersion) { 
    this.browserMinorVersion = browserMinorVersion;
    return this;
};
this.getBrowserMinorVersion = function() {
    return this.browserMinorVersion;
};
var os = "";
this.setOs = function(os) { 
    this.os = os;
    return this;
};
this.getOs = function() {
    return this.os;
};
var osMajorVersion = "";
this.setOsMajorVersion = function(osMajorVersion) { 
    this.osMajorVersion = osMajorVersion;
    return this;
};
this.getOsMajorVersion = function() {
    return this.osMajorVersion;
};
var osMinorVersion = "";
this.setOsMinorVersion = function(osMinorVersion) { 
    this.osMinorVersion = osMinorVersion;
    return this;
};
this.getOsMinorVersion = function() {
    return this.osMinorVersion;
};
var product = "";
this.setProduct = function(product) { 
    this.product = product;
    return this;
};
this.getProduct = function() {
    return this.product;
};
var productVersion = "";
this.setProductVersion = function(productVersion) { 
    this.productVersion = productVersion;
    return this;
};
this.getProductVersion = function() {
    return this.productVersion;
};
var createdDate = "";
this.setCreatedDate = function(createdDate) { 
    this.createdDate = createdDate;
    return this;
};
this.getCreatedDate = function() {
    return this.createdDate;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDeviceType(json["device_type"]);
		this.setDeviceName(json["device_name"]);
		this.setBrowser(json["browser"]);
		this.setBrowserMajorVersion(json["browser_major_version"]);
		this.setBrowserMinorVersion(json["browser_minor_version"]);
		this.setOs(json["os"]);
		this.setOsMajorVersion(json["os_major_version"]);
		this.setOsMinorVersion(json["os_minor_version"]);
		this.setProduct(json["product"]);
		this.setProductVersion(json["product_version"]);
		this.setCreatedDate(json["created_date"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDeviceType()) json += '"device_type"' + ":" + '"' + jsonEscape(this.getDeviceType())  + '",';
		if(this.getDeviceName()) json += '"device_name"' + ":" + '"' + jsonEscape(this.getDeviceName())  + '",';
		if(this.getBrowser()) json += '"browser"' + ":" + '"' + jsonEscape(this.getBrowser())  + '",';
		if(this.getBrowserMajorVersion()) json += '"browser_major_version"' + ":" + '"' + jsonEscape(this.getBrowserMajorVersion())  + '",';
		if(this.getBrowserMinorVersion()) json += '"browser_minor_version"' + ":" + '"' + jsonEscape(this.getBrowserMinorVersion())  + '",';
		if(this.getOs()) json += '"os"' + ":" + '"' + jsonEscape(this.getOs())  + '",';
		if(this.getOsMajorVersion()) json += '"os_major_version"' + ":" + '"' + jsonEscape(this.getOsMajorVersion())  + '",';
		if(this.getOsMinorVersion()) json += '"os_minor_version"' + ":" + '"' + jsonEscape(this.getOsMinorVersion())  + '",';
		if(this.getProduct()) json += '"product"' + ":" + '"' + jsonEscape(this.getProduct())  + '",';
		if(this.getProductVersion()) json += '"product_version"' + ":" + '"' + jsonEscape(this.getProductVersion())  + '",';
		if(this.getCreatedDate()) json += '"created_date"' + ":" + '"' + jsonEscape(this.getCreatedDate())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserAgentAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.deviceType && !(/dontdisturb/).test(this.deviceType)) { throw new ValidationError(_formprefix + "device_type", ValidationError.PATTERN_FAILED);}
if(this.deviceName && !(/dontdisturb/).test(this.deviceName)) { throw new ValidationError(_formprefix + "device_name", ValidationError.PATTERN_FAILED);}
if(this.browser && !(/dontdisturb/).test(this.browser)) { throw new ValidationError(_formprefix + "browser", ValidationError.PATTERN_FAILED);}
if(this.browserMajorVersion && !Validator.INTEGER.test(this.browserMajorVersion)) { throw new ValidationError(_formprefix + "browser_major_version", ValidationError.PATTERN_FAILED);}
if(this.browserMinorVersion && !Validator.INTEGER.test(this.browserMinorVersion)) { throw new ValidationError(_formprefix + "browser_minor_version", ValidationError.PATTERN_FAILED);}
if(this.os && !(/dontdisturb/).test(this.os)) { throw new ValidationError(_formprefix + "os", ValidationError.PATTERN_FAILED);}
if(this.osMajorVersion && !Validator.INTEGER.test(this.osMajorVersion)) { throw new ValidationError(_formprefix + "os_major_version", ValidationError.PATTERN_FAILED);}
if(this.osMinorVersion && !Validator.INTEGER.test(this.osMinorVersion)) { throw new ValidationError(_formprefix + "os_minor_version", ValidationError.PATTERN_FAILED);}
if(this.product && !(/dontdisturb/).test(this.product)) { throw new ValidationError(_formprefix + "product", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserAgentAudit.path = "useragentaudit";
UserAgentAudit.newBuilder = function() {
    return new UserAgentAudit();
};

AccountName = function() {
    var _formprefix = "";
    
var accountName = "";
this.setAccountName = function(accountName) { 
    this.accountName = accountName;
    return this;
};
this.getAccountName = function() {
    return this.accountName;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var domainvsauthsecret = undefined;
this.setDomainvsauthsecrets = function(domainvsauthsecret) { 
    this.domainvsauthsecret = domainvsauthsecret;
    return this;
};
this.getDomainvsauthsecrets = function() {
    return this.domainvsauthsecret;
};
this.addDomainvsauthsecret = function(domainvsauthsecret) { 
 if(!this.domainvsauthsecret) this.domainvsauthsecret = new Array(); 
  this.domainvsauthsecret.push(domainvsauthsecret); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAccountName(json["account_name"]);
		this.setZaid(json["zaid"]);
		this.setDomainvsauthsecrets(URI.getResourceArray(json["domainVsAuthSecret"],"domainvsauthsecret"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAccountName()) json += '"account_name"' + ":" + '"' + jsonEscape(this.getAccountName())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getDomainvsauthsecrets()) json += '"domainVsAuthSecret"' + ":" + URI.toJSONArray(this.getDomainvsauthsecrets())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountName.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.accountName && !(/^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)|([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}$/).test(this.accountName)) { throw new ValidationError(_formprefix + "account_name", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.domainvsauthsecret) { for(i=0; i < this.domainvsauthsecret.length; i++ ) { this.domainvsauthsecret[i].validate(); } }

	return this;
    }
}
AccountName.path = "accountname";
AccountName.newBuilder = function() {
    return new AccountName();
};

NotifyAction = function() {
    var _formprefix = "";
    
var urlActionId = "";
this.setUrlActionId = function(urlActionId) { 
    this.urlActionId = urlActionId;
    return this;
};
this.getUrlActionId = function() {
    return this.urlActionId;
};
var uriToNotify = "";
this.setUriToNotify = function(uriToNotify) { 
    this.uriToNotify = uriToNotify;
    return this;
};
this.getUriToNotify = function() {
    return this.uriToNotify;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setUrlActionId(json["url_action_id"]);
		this.setUriToNotify(json["uri_to_notify"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getUrlActionId()) json += '"url_action_id"' + ":" + '"' + jsonEscape(this.getUrlActionId())  + '",';
		if(this.getUriToNotify()) json += '"uri_to_notify"' + ":" + '"' + jsonEscape(this.getUriToNotify())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(NotifyAction.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
NotifyAction.path = "notifyaction";
NotifyAction.newBuilder = function() {
    return new NotifyAction();
};

AppAccountConfiguration = function() {
    var _formprefix = "";
    
var configName = "";
this.setConfigName = function(configName) { 
    this.configName = configName;
    return this;
};
this.getConfigName = function() {
    return this.configName;
};
var configValue = "";
this.setConfigValue = function(configValue) { 
    this.configValue = configValue;
    return this;
};
this.getConfigValue = function() {
    return this.configValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setConfigName(json["config_name"]);
		this.setConfigValue(json["config_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getConfigName()) json += '"config_name"' + ":" + '"' + jsonEscape(this.getConfigName())  + '",';
		if(this.getConfigValue()) json += '"config_value"' + ":" + '"' + jsonEscape(this.getConfigValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccountConfiguration.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.configName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.configName)) { throw new ValidationError(_formprefix + "config_name", ValidationError.PATTERN_FAILED);}
if(this.configValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.configValue)) { throw new ValidationError(_formprefix + "config_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAccountConfiguration.path = "appaccountconfiguration";
AppAccountConfiguration.newBuilder = function() {
    return new AppAccountConfiguration();
};

UserMobile = function() {
    var _formprefix = "";
    
var mobile = "";
this.setMobile = function(mobile) { 
    this.mobile = mobile;
    return this;
};
this.getMobile = function() {
    return this.mobile;
};
var countryCode = "";
this.setCountryCode = function(countryCode) { 
    this.countryCode = countryCode;
    return this;
};
this.getCountryCode = function() {
    return this.countryCode;
};
var isVerified = "false";
this.setIsVerified = function(isVerified) { 
    this.isVerified = isVerified;
    return this;
};
this.getIsVerified = function() {
    return this.isVerified;
};
var verificationCode = "";
this.setVerificationCode = function(verificationCode) { 
    this.verificationCode = verificationCode;
    return this;
};
this.getVerificationCode = function() {
    return this.verificationCode;
};
var isPrimary = "";
this.setIsPrimary = function(isPrimary) { 
    this.isPrimary = isPrimary;
    return this;
};
this.getIsPrimary = function() {
    return this.isPrimary;
};
var verifyType = "0";
this.setVerifyType = function(verifyType) { 
    this.verifyType = verifyType;
    return this;
};
this.getVerifyType = function() {
    return this.verifyType;
};
var mode = "0";
this.setMode = function(mode) { 
    this.mode = mode;
    return this;
};
this.getMode = function() {
    return this.mode;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setMobile(json["mobile"]);
		this.setCountryCode(json["country_code"]);
		this.setIsVerified(json["is_verified"]);
		this.setVerificationCode(json["verification_code"]);
		this.setIsPrimary(json["is_primary"]);
		this.setVerifyType(json["verify_type"]);
		this.setMode(json["mode"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getMobile()) json += '"mobile"' + ":" + '"' + jsonEscape(this.getMobile())  + '",';
		if(this.getCountryCode()) json += '"country_code"' + ":" + '"' + jsonEscape(this.getCountryCode())  + '",';
		if(this.getIsVerified()) json += '"is_verified"' + ":" + '"' + jsonEscape(this.getIsVerified())  + '",';
		if(this.getVerificationCode()) json += '"verification_code"' + ":" + '"' + jsonEscape(this.getVerificationCode())  + '",';
		if(this.getIsPrimary()) json += '"is_primary"' + ":" + '"' + jsonEscape(this.getIsPrimary())  + '",';
		if(this.getVerifyType()) json += '"verify_type"' + ":" + '"' + jsonEscape(this.getVerifyType())  + '",';
		if(this.getMode()) json += '"mode"' + ":" + '"' + jsonEscape(this.getMode())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserMobile.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.mobile && !(/xss:throwerror/).test(this.mobile)) { throw new ValidationError(_formprefix + "mobile", ValidationError.PATTERN_FAILED);}
if(this.countryCode && !(/^[a-zA-Z0-9]{2,5}$/).test(this.countryCode)) { throw new ValidationError(_formprefix + "country_code", ValidationError.PATTERN_FAILED);}
if(this.isVerified && !Validator.BOOLEAN.test(this.isVerified)) { throw new ValidationError(_formprefix + "is_verified", ValidationError.PATTERN_FAILED);}
if(this.verificationCode && !(/^([A-Za-z0-9_.\-]+)$/).test(this.verificationCode)) { throw new ValidationError(_formprefix + "verification_code", ValidationError.PATTERN_FAILED);}
if(this.isPrimary && !Validator.BOOLEAN.test(this.isPrimary)) { throw new ValidationError(_formprefix + "is_primary", ValidationError.PATTERN_FAILED);}
if(this.verifyType && !Validator.INTEGER.test(this.verifyType)) { throw new ValidationError(_formprefix + "verify_type", ValidationError.PATTERN_FAILED);}
if(this.mode && !Validator.INTEGER.test(this.mode)) { throw new ValidationError(_formprefix + "mode", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserMobile.path = "usermobile";
UserMobile.newBuilder = function() {
    return new UserMobile();
};

AccountUpdateAudit = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var controlQueryString = "";
this.setControlQueryString = function(controlQueryString) { 
    this.controlQueryString = controlQueryString;
    return this;
};
this.getControlQueryString = function() {
    return this.controlQueryString;
};
var responseStatus = "";
this.setResponseStatus = function(responseStatus) { 
    this.responseStatus = responseStatus;
    return this;
};
this.getResponseStatus = function() {
    return this.responseStatus;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setZuid(json["zuid"]);
		this.setControlQueryString(json["control_query_string"]);
		this.setResponseStatus(json["response_status"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getControlQueryString()) json += '"control_query_string"' + ":" + '"' + jsonEscape(this.getControlQueryString())  + '",';
		if(this.getResponseStatus()) json += '"response_status"' + ":" + '"' + jsonEscape(this.getResponseStatus())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountUpdateAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.controlQueryString && !(/dontdisturb/).test(this.controlQueryString)) { throw new ValidationError(_formprefix + "control_query_string", ValidationError.PATTERN_FAILED);}
if(this.responseStatus && !Validator.INTEGER.test(this.responseStatus)) { throw new ValidationError(_formprefix + "response_status", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountUpdateAudit.path = "accountupdateaudit";
AccountUpdateAudit.newBuilder = function() {
    return new AccountUpdateAudit();
};

ZIDAudit = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var type = "";
this.setType = function(type) { 
    this.type = type;
    return this;
};
this.getType = function() {
    return this.type;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setType(json["type"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getType()) json += '"type"' + ":" + '"' + jsonEscape(this.getType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ZIDAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.type && !Validator.INTEGER.test(this.type)) { throw new ValidationError(_formprefix + "type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ZIDAudit.path = "zidaudit";
ZIDAudit.newBuilder = function() {
    return new ZIDAudit();
};

OAuthRefreshTokenKey = function() {
    var _formprefix = "";
    
var keyName = "";
this.setKeyName = function(keyName) { 
    this.keyName = keyName;
    return this;
};
this.getKeyName = function() {
    return this.keyName;
};
var keyValue = "";
this.setKeyValue = function(keyValue) { 
    this.keyValue = keyValue;
    return this;
};
this.getKeyValue = function() {
    return this.keyValue;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setKeyName(json["key_name"]);
		this.setKeyValue(json["key_value"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getKeyName()) json += '"key_name"' + ":" + '"' + jsonEscape(this.getKeyName())  + '",';
		if(this.getKeyValue()) json += '"key_value"' + ":" + '"' + jsonEscape(this.getKeyValue())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthRefreshTokenKey.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.keyName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.keyName)) { throw new ValidationError(_formprefix + "key_name", ValidationError.PATTERN_FAILED);}
if(this.keyValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.keyValue)) { throw new ValidationError(_formprefix + "key_value", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthRefreshTokenKey.path = "oauthrefreshtokenkey";
OAuthRefreshTokenKey.newBuilder = function() {
    return new OAuthRefreshTokenKey();
};

AppLicense = function() {
    var _formprefix = "";
    
var licenseAttributeKey = "";
this.setLicenseAttributeKey = function(licenseAttributeKey) { 
    this.licenseAttributeKey = licenseAttributeKey;
    return this;
};
this.getLicenseAttributeKey = function() {
    return this.licenseAttributeKey;
};
var defaultValue = "";
this.setDefaultValue = function(defaultValue) { 
    this.defaultValue = defaultValue;
    return this;
};
this.getDefaultValue = function() {
    return this.defaultValue;
};
var dataType = "";
this.setDataType = function(dataType) { 
    this.dataType = dataType;
    return this;
};
this.getDataType = function() {
    return this.dataType;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLicenseAttributeKey(json["license_attribute_key"]);
		this.setDefaultValue(json["default_value"]);
		this.setDataType(json["data_type"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLicenseAttributeKey()) json += '"license_attribute_key"' + ":" + '"' + jsonEscape(this.getLicenseAttributeKey())  + '",';
		if(this.getDefaultValue()) json += '"default_value"' + ":" + '"' + jsonEscape(this.getDefaultValue())  + '",';
		if(this.getDataType()) json += '"data_type"' + ":" + '"' + jsonEscape(this.getDataType())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppLicense.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.licenseAttributeKey && !(/^([A-Za-z0-9_.\-]+)$/).test(this.licenseAttributeKey)) { throw new ValidationError(_formprefix + "license_attribute_key", ValidationError.PATTERN_FAILED);}
if(this.defaultValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.defaultValue)) { throw new ValidationError(_formprefix + "default_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppLicense.path = "applicense";
AppLicense.newBuilder = function() {
    return new AppLicense();
};

OAuthOpenId = function() {
    var _formprefix = "";
    
var openId = "";
this.setOpenId = function(openId) { 
    this.openId = openId;
    return this;
};
this.getOpenId = function() {
    return this.openId;
};
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setOpenId(json["open_id"]);
		this.setZid(json["zid"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getOpenId()) json += '"open_id"' + ":" + '"' + jsonEscape(this.getOpenId())  + '",';
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthOpenId.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.openId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.openId)) { throw new ValidationError(_formprefix + "open_id", ValidationError.PATTERN_FAILED);}
if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthOpenId.path = "oauthopenid";
OAuthOpenId.newBuilder = function() {
    return new OAuthOpenId();
};

RegistrationAuditTemplate = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var regId = "";
this.setRegId = function(regId) { 
    this.regId = regId;
    return this;
};
this.getRegId = function() {
    return this.regId;
};
var appIp = "";
this.setAppIp = function(appIp) { 
    this.appIp = appIp;
    return this;
};
this.getAppIp = function() {
    return this.appIp;
};
var remoteIp = "";
this.setRemoteIp = function(remoteIp) { 
    this.remoteIp = remoteIp;
    return this;
};
this.getRemoteIp = function() {
    return this.remoteIp;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var status = "1";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var errors = "";
this.setErrors = function(errors) { 
    this.errors = errors;
    return this;
};
this.getErrors = function() {
    return this.errors;
};
var zuidAfterReg = "";
this.setZuidAfterReg = function(zuidAfterReg) { 
    this.zuidAfterReg = zuidAfterReg;
    return this;
};
this.getZuidAfterReg = function() {
    return this.zuidAfterReg;
};
var currentZuid = "";
this.setCurrentZuid = function(currentZuid) { 
    this.currentZuid = currentZuid;
    return this;
};
this.getCurrentZuid = function() {
    return this.currentZuid;
};
var getCount = "1";
this.setGetCount = function(getCount) { 
    this.getCount = getCount;
    return this;
};
this.getGetCount = function() {
    return this.getCount;
};
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var idp = "Z";
this.setIdp = function(idp) { 
    this.idp = idp;
    return this;
};
this.getIdp = function() {
    return this.idp;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var endTime = "";
this.setEndTime = function(endTime) { 
    this.endTime = endTime;
    return this;
};
this.getEndTime = function() {
    return this.endTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setRegId(json["reg_id"]);
		this.setAppIp(json["app_ip"]);
		this.setRemoteIp(json["remote_ip"]);
		this.setUserAgent(json["user_agent"]);
		this.setReferrer(json["referrer"]);
		this.setAppId(json["app_id"]);
		this.setStatus(json["status"]);
		this.setErrors(json["errors"]);
		this.setZuidAfterReg(json["zuid_after_reg"]);
		this.setCurrentZuid(json["current_zuid"]);
		this.setGetCount(json["get_count"]);
		this.setEmailId(json["email_id"]);
		this.setIdp(json["idp"]);
		this.setCreatedTime(json["created_time"]);
		this.setEndTime(json["end_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getRegId()) json += '"reg_id"' + ":" + '"' + jsonEscape(this.getRegId())  + '",';
		if(this.getAppIp()) json += '"app_ip"' + ":" + '"' + jsonEscape(this.getAppIp())  + '",';
		if(this.getRemoteIp()) json += '"remote_ip"' + ":" + '"' + jsonEscape(this.getRemoteIp())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getErrors()) json += '"errors"' + ":" + '"' + jsonEscape(this.getErrors())  + '",';
		if(this.getZuidAfterReg()) json += '"zuid_after_reg"' + ":" + '"' + jsonEscape(this.getZuidAfterReg())  + '",';
		if(this.getCurrentZuid()) json += '"current_zuid"' + ":" + '"' + jsonEscape(this.getCurrentZuid())  + '",';
		if(this.getGetCount()) json += '"get_count"' + ":" + '"' + jsonEscape(this.getGetCount())  + '",';
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getIdp()) json += '"idp"' + ":" + '"' + jsonEscape(this.getIdp())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getEndTime()) json += '"end_time"' + ":" + '"' + jsonEscape(this.getEndTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(RegistrationAuditTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.regId && !(/dontdisturb/).test(this.regId)) { throw new ValidationError(_formprefix + "reg_id", ValidationError.PATTERN_FAILED);}
if(this.appIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.appIp)) { throw new ValidationError(_formprefix + "app_ip", ValidationError.PATTERN_FAILED);}
if(this.remoteIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.remoteIp)) { throw new ValidationError(_formprefix + "remote_ip", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.appId && !Validator.INTEGER.test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.status && !Validator.INTEGER.test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.errors && !(/dontdisturb/).test(this.errors)) { throw new ValidationError(_formprefix + "errors", ValidationError.PATTERN_FAILED);}
if(this.zuidAfterReg && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuidAfterReg)) { throw new ValidationError(_formprefix + "zuid_after_reg", ValidationError.PATTERN_FAILED);}
if(this.currentZuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.currentZuid)) { throw new ValidationError(_formprefix + "current_zuid", ValidationError.PATTERN_FAILED);}
if(this.getCount && !Validator.INTEGER.test(this.getCount)) { throw new ValidationError(_formprefix + "get_count", ValidationError.PATTERN_FAILED);}
if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.endTime && !Validator.INTEGER.test(this.endTime)) { throw new ValidationError(_formprefix + "end_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
RegistrationAuditTemplate.path = "registrationaudittemplate";
RegistrationAuditTemplate.newBuilder = function() {
    return new RegistrationAuditTemplate();
};

OAuthRefreshTokenScopes = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var allowedOperations = "";
this.setAllowedOperations = function(allowedOperations) { 
    this.allowedOperations = allowedOperations;
    return this;
};
this.getAllowedOperations = function() {
    return this.allowedOperations;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setAllowedOperations(json["allowed_operations"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getAllowedOperations()) json += '"allowed_operations"' + ":" + '"' + jsonEscape(this.getAllowedOperations())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthRefreshTokenScopes.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.allowedOperations && !Validator.INTEGER.test(this.allowedOperations)) { throw new ValidationError(_formprefix + "allowed_operations", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthRefreshTokenScopes.path = "oauthrefreshtokenscopes";
OAuthRefreshTokenScopes.newBuilder = function() {
    return new OAuthRefreshTokenScopes();
};

TemplateImage = function() {
    var _formprefix = "";
    
var imageNameApl = "";
this.setImageNameApl = function(imageNameApl) { 
    this.imageNameApl = imageNameApl;
    return this;
};
this.getImageNameApl = function() {
    return this.imageNameApl;
};
var dfsLocation = "";
this.setDfsLocation = function(dfsLocation) { 
    this.dfsLocation = dfsLocation;
    return this;
};
this.getDfsLocation = function() {
    return this.dfsLocation;
};
var transmailId = "";
this.setTransmailId = function(transmailId) { 
    this.transmailId = transmailId;
    return this;
};
this.getTransmailId = function() {
    return this.transmailId;
};
var transmailStatus = "0";
this.setTransmailStatus = function(transmailStatus) { 
    this.transmailStatus = transmailStatus;
    return this;
};
this.getTransmailStatus = function() {
    return this.transmailStatus;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setImageNameApl(json["image_name_apl"]);
		this.setDfsLocation(json["dfs_location"]);
		this.setTransmailId(json["transmail_id"]);
		this.setTransmailStatus(json["transmail_status"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getImageNameApl()) json += '"image_name_apl"' + ":" + '"' + jsonEscape(this.getImageNameApl())  + '",';
		if(this.getDfsLocation()) json += '"dfs_location"' + ":" + '"' + jsonEscape(this.getDfsLocation())  + '",';
		if(this.getTransmailId()) json += '"transmail_id"' + ":" + '"' + jsonEscape(this.getTransmailId())  + '",';
		if(this.getTransmailStatus()) json += '"transmail_status"' + ":" + '"' + jsonEscape(this.getTransmailStatus())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(TemplateImage.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.imageNameApl && !(/xss:throwerror/).test(this.imageNameApl)) { throw new ValidationError(_formprefix + "image_name_apl", ValidationError.PATTERN_FAILED);}
if(this.dfsLocation && !(/^([A-Za-z0-9_.\-]+)$/).test(this.dfsLocation)) { throw new ValidationError(_formprefix + "dfs_location", ValidationError.PATTERN_FAILED);}
if(this.transmailId && !(/^([A-Za-z0-9_.\-]+)$/).test(this.transmailId)) { throw new ValidationError(_formprefix + "transmail_id", ValidationError.PATTERN_FAILED);}
if(this.transmailStatus && !Validator.INTEGER.test(this.transmailStatus)) { throw new ValidationError(_formprefix + "transmail_status", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
TemplateImage.path = "templateimage";
TemplateImage.newBuilder = function() {
    return new TemplateImage();
};

AuthDomainPolicy = function() {
    var _formprefix = "";
    
var policyKey = "";
this.setPolicyKey = function(policyKey) { 
    this.policyKey = policyKey;
    return this;
};
this.getPolicyKey = function() {
    return this.policyKey;
};
var policyValue = "";
this.setPolicyValue = function(policyValue) { 
    this.policyValue = policyValue;
    return this;
};
this.getPolicyValue = function() {
    return this.policyValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPolicyKey(json["policy_key"]);
		this.setPolicyValue(json["policy_value"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPolicyKey()) json += '"policy_key"' + ":" + '"' + jsonEscape(this.getPolicyKey())  + '",';
		if(this.getPolicyValue()) json += '"policy_value"' + ":" + '"' + jsonEscape(this.getPolicyValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AuthDomainPolicy.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.policyKey && !(/^([A-Za-z0-9_.\-]+)$/).test(this.policyKey)) { throw new ValidationError(_formprefix + "policy_key", ValidationError.PATTERN_FAILED);}
if(this.policyValue && !(/^([A-Za-z0-9_.\-]+)$/).test(this.policyValue)) { throw new ValidationError(_formprefix + "policy_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AuthDomainPolicy.path = "authdomainpolicy";
AuthDomainPolicy.newBuilder = function() {
    return new AuthDomainPolicy();
};

ParentGroup = function() {
    var _formprefix = "";
    
var parentZgid = "";
this.setParentZgid = function(parentZgid) { 
    this.parentZgid = parentZgid;
    return this;
};
this.getParentZgid = function() {
    return this.parentZgid;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setParentZgid(json["parent_zgid"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getParentZgid()) json += '"parent_zgid"' + ":" + '"' + jsonEscape(this.getParentZgid())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ParentGroup.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ParentGroup.path = "parentgroup";
ParentGroup.newBuilder = function() {
    return new ParentGroup();
};

AppAccountPreference = function() {
    var _formprefix = "";
    
var daylightSavingEnabled = "";
this.setDaylightSavingEnabled = function(daylightSavingEnabled) { 
    this.daylightSavingEnabled = daylightSavingEnabled;
    return this;
};
this.getDaylightSavingEnabled = function() {
    return this.daylightSavingEnabled;
};
var weekStartsOn = "";
this.setWeekStartsOn = function(weekStartsOn) { 
    this.weekStartsOn = weekStartsOn;
    return this;
};
this.getWeekStartsOn = function() {
    return this.weekStartsOn;
};
var nameFormat = "";
this.setNameFormat = function(nameFormat) { 
    this.nameFormat = nameFormat;
    return this;
};
this.getNameFormat = function() {
    return this.nameFormat;
};
var shortDateFormat = "";
this.setShortDateFormat = function(shortDateFormat) { 
    this.shortDateFormat = shortDateFormat;
    return this;
};
this.getShortDateFormat = function() {
    return this.shortDateFormat;
};
var mediumDateFormat = "";
this.setMediumDateFormat = function(mediumDateFormat) { 
    this.mediumDateFormat = mediumDateFormat;
    return this;
};
this.getMediumDateFormat = function() {
    return this.mediumDateFormat;
};
var longDateFormat = "";
this.setLongDateFormat = function(longDateFormat) { 
    this.longDateFormat = longDateFormat;
    return this;
};
this.getLongDateFormat = function() {
    return this.longDateFormat;
};
var shortTimeFormat = "";
this.setShortTimeFormat = function(shortTimeFormat) { 
    this.shortTimeFormat = shortTimeFormat;
    return this;
};
this.getShortTimeFormat = function() {
    return this.shortTimeFormat;
};
var mediumTimeFormat = "";
this.setMediumTimeFormat = function(mediumTimeFormat) { 
    this.mediumTimeFormat = mediumTimeFormat;
    return this;
};
this.getMediumTimeFormat = function() {
    return this.mediumTimeFormat;
};
var longTimeFormat = "";
this.setLongTimeFormat = function(longTimeFormat) { 
    this.longTimeFormat = longTimeFormat;
    return this;
};
this.getLongTimeFormat = function() {
    return this.longTimeFormat;
};
var use24hrTime = "";
this.setUse24hrTime = function(use24hrTime) { 
    this.use24hrTime = use24hrTime;
    return this;
};
this.getUse24hrTime = function() {
    return this.use24hrTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDaylightSavingEnabled(json["daylight_saving_enabled"]);
		this.setWeekStartsOn(json["week_starts_on"]);
		this.setNameFormat(json["name_format"]);
		this.setShortDateFormat(json["short_date_format"]);
		this.setMediumDateFormat(json["medium_date_format"]);
		this.setLongDateFormat(json["long_date_format"]);
		this.setShortTimeFormat(json["short_time_format"]);
		this.setMediumTimeFormat(json["medium_time_format"]);
		this.setLongTimeFormat(json["long_time_format"]);
		this.setUse24hrTime(json["use_24hr_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDaylightSavingEnabled()) json += '"daylight_saving_enabled"' + ":" + '"' + jsonEscape(this.getDaylightSavingEnabled())  + '",';
		if(this.getWeekStartsOn()) json += '"week_starts_on"' + ":" + '"' + jsonEscape(this.getWeekStartsOn())  + '",';
		if(this.getNameFormat()) json += '"name_format"' + ":" + '"' + jsonEscape(this.getNameFormat())  + '",';
		if(this.getShortDateFormat()) json += '"short_date_format"' + ":" + '"' + jsonEscape(this.getShortDateFormat())  + '",';
		if(this.getMediumDateFormat()) json += '"medium_date_format"' + ":" + '"' + jsonEscape(this.getMediumDateFormat())  + '",';
		if(this.getLongDateFormat()) json += '"long_date_format"' + ":" + '"' + jsonEscape(this.getLongDateFormat())  + '",';
		if(this.getShortTimeFormat()) json += '"short_time_format"' + ":" + '"' + jsonEscape(this.getShortTimeFormat())  + '",';
		if(this.getMediumTimeFormat()) json += '"medium_time_format"' + ":" + '"' + jsonEscape(this.getMediumTimeFormat())  + '",';
		if(this.getLongTimeFormat()) json += '"long_time_format"' + ":" + '"' + jsonEscape(this.getLongTimeFormat())  + '",';
		if(this.getUse24hrTime()) json += '"use_24hr_time"' + ":" + '"' + jsonEscape(this.getUse24hrTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccountPreference.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.daylightSavingEnabled && !Validator.BOOLEAN.test(this.daylightSavingEnabled)) { throw new ValidationError(_formprefix + "daylight_saving_enabled", ValidationError.PATTERN_FAILED);}
if(this.use24hrTime && !Validator.BOOLEAN.test(this.use24hrTime)) { throw new ValidationError(_formprefix + "use_24hr_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAccountPreference.path = "appaccountpreference";
AppAccountPreference.newBuilder = function() {
    return new AppAccountPreference();
};

ShortenURL = function() {
    var _formprefix = "";
    
var shortenId = "";
this.setShortenId = function(shortenId) { 
    this.shortenId = shortenId;
    return this;
};
this.getShortenId = function() {
    return this.shortenId;
};
var url = "";
this.setUrl = function(url) { 
    this.url = url;
    return this;
};
this.getUrl = function() {
    return this.url;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setShortenId(json["shorten_id"]);
		this.setUrl(json["url"]);
		this.setExpiryTime(json["expiry_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getShortenId()) json += '"shorten_id"' + ":" + '"' + jsonEscape(this.getShortenId())  + '",';
		if(this.getUrl()) json += '"url"' + ":" + '"' + jsonEscape(this.getUrl())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ShortenURL.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.shortenId && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.shortenId)) { throw new ValidationError(_formprefix + "shorten_id", ValidationError.PATTERN_FAILED);}
if(this.url && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.url)) { throw new ValidationError(_formprefix + "url", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ShortenURL.path = "shortenurl";
ShortenURL.newBuilder = function() {
    return new ShortenURL();
};

UserSigninLocation = function() {
    var _formprefix = "";
    
var location = "";
this.setLocation = function(location) { 
    this.location = location;
    return this;
};
this.getLocation = function() {
    return this.location;
};
var latitude = "";
this.setLatitude = function(latitude) { 
    this.latitude = latitude;
    return this;
};
this.getLatitude = function() {
    return this.latitude;
};
var longitude = "";
this.setLongitude = function(longitude) { 
    this.longitude = longitude;
    return this;
};
this.getLongitude = function() {
    return this.longitude;
};
var usersigninuseragent = undefined;
this.setUsersigninuseragents = function(usersigninuseragent) { 
    this.usersigninuseragent = usersigninuseragent;
    return this;
};
this.getUsersigninuseragents = function() {
    return this.usersigninuseragent;
};
this.addUsersigninuseragent = function(usersigninuseragent) { 
 if(!this.usersigninuseragent) this.usersigninuseragent = new Array(); 
  this.usersigninuseragent.push(usersigninuseragent); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLocation(json["location"]);
		this.setLatitude(json["latitude"]);
		this.setLongitude(json["longitude"]);
		this.setUsersigninuseragents(URI.getResourceArray(json["userSigninUserAgent"],"usersigninuseragent"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLocation()) json += '"location"' + ":" + '"' + jsonEscape(this.getLocation())  + '",';
		if(this.getLatitude()) json += '"latitude"' + ":" + '"' + jsonEscape(this.getLatitude())  + '",';
		if(this.getLongitude()) json += '"longitude"' + ":" + '"' + jsonEscape(this.getLongitude())  + '",';
		if(this.getUsersigninuseragents()) json += '"userSigninUserAgent"' + ":" + URI.toJSONArray(this.getUsersigninuseragents())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserSigninLocation.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.latitude && !(/^[0-9\-\.]*$/).test(this.latitude)) { throw new ValidationError(_formprefix + "latitude", ValidationError.PATTERN_FAILED);}
if(this.longitude && !(/^[0-9\-\.]*$/).test(this.longitude)) { throw new ValidationError(_formprefix + "longitude", ValidationError.PATTERN_FAILED);}
if(this.usersigninuseragent) { for(i=0; i < this.usersigninuseragent.length; i++ ) { this.usersigninuseragent[i].validate(); } }

	return this;
    }
}
UserSigninLocation.path = "usersigninlocation";
UserSigninLocation.newBuilder = function() {
    return new UserSigninLocation();
};

AccountOAuthAccessGrant = function() {
    var _formprefix = "";
    
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var accountoauthaccessgrantscopes = undefined;
this.setAccountoauthaccessgrantscopess = function(accountoauthaccessgrantscopes) { 
    this.accountoauthaccessgrantscopes = accountoauthaccessgrantscopes;
    return this;
};
this.getAccountoauthaccessgrantscopess = function() {
    return this.accountoauthaccessgrantscopes;
};
this.addAccountoauthaccessgrantscopes = function(accountoauthaccessgrantscopes) { 
 if(!this.accountoauthaccessgrantscopes) this.accountoauthaccessgrantscopes = new Array(); 
  this.accountoauthaccessgrantscopes.push(accountoauthaccessgrantscopes); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClientZid(json["client_zid"]);
		this.setIpAddress(json["ip_address"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);
		this.setAccountoauthaccessgrantscopess(URI.getResourceArray(json["accountOAuthAccessGrantScopes"],"accountoauthaccessgrantscopes"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getAccountoauthaccessgrantscopess()) json += '"accountOAuthAccessGrantScopes"' + ":" + URI.toJSONArray(this.getAccountoauthaccessgrantscopess())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountOAuthAccessGrant.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.clientZid && !(/^[0-9]+\.[0-9]+$/).test(this.clientZid)) { throw new ValidationError(_formprefix + "client_zid", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/xss:throwerror/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.accountoauthaccessgrantscopes) { for(i=0; i < this.accountoauthaccessgrantscopes.length; i++ ) { this.accountoauthaccessgrantscopes[i].validate(); } }

	return this;
    }
}
AccountOAuthAccessGrant.path = "accountoauthaccessgrant";
AccountOAuthAccessGrant.newBuilder = function() {
    return new AccountOAuthAccessGrant();
};

WebSignInFailedAudit = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var loginId = "";
this.setLoginId = function(loginId) { 
    this.loginId = loginId;
    return this;
};
this.getLoginId = function() {
    return this.loginId;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var errorCode = "";
this.setErrorCode = function(errorCode) { 
    this.errorCode = errorCode;
    return this;
};
this.getErrorCode = function() {
    return this.errorCode;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var country = "";
this.setCountry = function(country) { 
    this.country = country;
    return this;
};
this.getCountry = function() {
    return this.country;
};
var signinId = "";
this.setSigninId = function(signinId) { 
    this.signinId = signinId;
    return this;
};
this.getSigninId = function() {
    return this.signinId;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setLoginId(json["login_id"]);
		this.setZuid(json["zuid"]);
		this.setErrorCode(json["error_code"]);
		this.setIpAddress(json["ip_address"]);
		this.setUserAgent(json["user_agent"]);
		this.setCountry(json["country"]);
		this.setSigninId(json["signin_id"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getLoginId()) json += '"login_id"' + ":" + '"' + jsonEscape(this.getLoginId())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getErrorCode()) json += '"error_code"' + ":" + '"' + jsonEscape(this.getErrorCode())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCountry()) json += '"country"' + ":" + '"' + jsonEscape(this.getCountry())  + '",';
		if(this.getSigninId()) json += '"signin_id"' + ":" + '"' + jsonEscape(this.getSigninId())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(WebSignInFailedAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.loginId && !(/^([\p{L}\p{M}\p{N}\_\.]+)|[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.loginId)) { throw new ValidationError(_formprefix + "login_id", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.country && !(/^[a-zA-Z0-9]{2,5}$/).test(this.country)) { throw new ValidationError(_formprefix + "country", ValidationError.PATTERN_FAILED);}
if(this.signinId && !(/dontdisturb/).test(this.signinId)) { throw new ValidationError(_formprefix + "signin_id", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
WebSignInFailedAudit.path = "websigninfailedaudit";
WebSignInFailedAudit.newBuilder = function() {
    return new WebSignInFailedAudit();
};

UserDomain = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var zidType = "1";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var isExcluded = "false";
this.setIsExcluded = function(isExcluded) { 
    this.isExcluded = isExcluded;
    return this;
};
this.getIsExcluded = function() {
    return this.isExcluded;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setZidType(json["zid_type"]);
		this.setIsExcluded(json["is_excluded"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getIsExcluded()) json += '"is_excluded"' + ":" + '"' + jsonEscape(this.getIsExcluded())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserDomain.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.zidType && !Validator.INTEGER.test(this.zidType)) { throw new ValidationError(_formprefix + "zid_type", ValidationError.PATTERN_FAILED);}
if(this.isExcluded && !Validator.BOOLEAN.test(this.isExcluded)) { throw new ValidationError(_formprefix + "is_excluded", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserDomain.path = "userdomain";
UserDomain.newBuilder = function() {
    return new UserDomain();
};

SubScopes = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SubScopes.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[a-zA-Z0-9_\-]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SubScopes.path = "subscopes";
SubScopes.newBuilder = function() {
    return new SubScopes();
};

OAuthSessionGrant = function() {
    var _formprefix = "";
    
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
var type = "1";
this.setType = function(type) { 
    this.type = type;
    return this;
};
this.getType = function() {
    return this.type;
};
var orgInfo = "";
this.setOrgInfo = function(orgInfo) { 
    this.orgInfo = orgInfo;
    return this;
};
this.getOrgInfo = function() {
    return this.orgInfo;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClientZid(json["client_zid"]);
		this.setType(json["type"]);
		this.setOrgInfo(json["org_info"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';
		if(this.getType()) json += '"type"' + ":" + '"' + jsonEscape(this.getType())  + '",';
		if(this.getOrgInfo()) json += '"org_info"' + ":" + '"' + jsonEscape(this.getOrgInfo())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthSessionGrant.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.clientZid && !(/^[0-9]+\.[0-9]+$/).test(this.clientZid)) { throw new ValidationError(_formprefix + "client_zid", ValidationError.PATTERN_FAILED);}
if(this.type && !Validator.INTEGER.test(this.type)) { throw new ValidationError(_formprefix + "type", ValidationError.PATTERN_FAILED);}
if(this.orgInfo && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.orgInfo)) { throw new ValidationError(_formprefix + "org_info", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthSessionGrant.path = "oauthsessiongrant";
OAuthSessionGrant.newBuilder = function() {
    return new OAuthSessionGrant();
};

OAuthDeviceToken = function() {
    var _formprefix = "";
    
var userZid = "";
this.setUserZid = function(userZid) { 
    this.userZid = userZid;
    return this;
};
this.getUserZid = function() {
    return this.userZid;
};
var zidType = "1";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var deviceToken = "";
this.setDeviceToken = function(deviceToken) { 
    this.deviceToken = deviceToken;
    return this;
};
this.getDeviceToken = function() {
    return this.deviceToken;
};
var grantType = "";
this.setGrantType = function(grantType) { 
    this.grantType = grantType;
    return this;
};
this.getGrantType = function() {
    return this.grantType;
};
var verificationCode = "";
this.setVerificationCode = function(verificationCode) { 
    this.verificationCode = verificationCode;
    return this;
};
this.getVerificationCode = function() {
    return this.verificationCode;
};
var verificationStatus = "0";
this.setVerificationStatus = function(verificationStatus) { 
    this.verificationStatus = verificationStatus;
    return this;
};
this.getVerificationStatus = function() {
    return this.verificationStatus;
};
var accessType = "1";
this.setAccessType = function(accessType) { 
    this.accessType = accessType;
    return this;
};
this.getAccessType = function() {
    return this.accessType;
};
var userLocation = "NULL";
this.setUserLocation = function(userLocation) { 
    this.userLocation = userLocation;
    return this;
};
this.getUserLocation = function() {
    return this.userLocation;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var oauthdevicetokenscopes = undefined;
this.setOauthdevicetokenscopess = function(oauthdevicetokenscopes) { 
    this.oauthdevicetokenscopes = oauthdevicetokenscopes;
    return this;
};
this.getOauthdevicetokenscopess = function() {
    return this.oauthdevicetokenscopes;
};
this.addOauthdevicetokenscopes = function(oauthdevicetokenscopes) { 
 if(!this.oauthdevicetokenscopes) this.oauthdevicetokenscopes = new Array(); 
  this.oauthdevicetokenscopes.push(oauthdevicetokenscopes); 
 return this;
};

var oauthdevicetokenorginfo = undefined;
this.setOauthdevicetokenorginfos = function(oauthdevicetokenorginfo) { 
    this.oauthdevicetokenorginfo = oauthdevicetokenorginfo;
    return this;
};
this.getOauthdevicetokenorginfos = function() {
    return this.oauthdevicetokenorginfo;
};
this.addOauthdevicetokenorginfo = function(oauthdevicetokenorginfo) { 
 if(!this.oauthdevicetokenorginfo) this.oauthdevicetokenorginfo = new Array(); 
  this.oauthdevicetokenorginfo.push(oauthdevicetokenorginfo); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setUserZid(json["user_zid"]);
		this.setZidType(json["zid_type"]);
		this.setDeviceToken(json["device_token"]);
		this.setGrantType(json["grant_type"]);
		this.setVerificationCode(json["verification_code"]);
		this.setVerificationStatus(json["verification_status"]);
		this.setAccessType(json["access_type"]);
		this.setUserLocation(json["user_location"]);
		this.setCreatedTime(json["created_time"]);
		this.setOauthdevicetokenscopess(URI.getResourceArray(json["oAuthDeviceTokenScopes"],"oauthdevicetokenscopes"));
		this.setOauthdevicetokenorginfos(URI.getResourceArray(json["oAuthDeviceTokenOrgInfo"],"oauthdevicetokenorginfo"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getUserZid()) json += '"user_zid"' + ":" + '"' + jsonEscape(this.getUserZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getDeviceToken()) json += '"device_token"' + ":" + '"' + jsonEscape(this.getDeviceToken())  + '",';
		if(this.getGrantType()) json += '"grant_type"' + ":" + '"' + jsonEscape(this.getGrantType())  + '",';
		if(this.getVerificationCode()) json += '"verification_code"' + ":" + '"' + jsonEscape(this.getVerificationCode())  + '",';
		if(this.getVerificationStatus()) json += '"verification_status"' + ":" + '"' + jsonEscape(this.getVerificationStatus())  + '",';
		if(this.getAccessType()) json += '"access_type"' + ":" + '"' + jsonEscape(this.getAccessType())  + '",';
		if(this.getUserLocation()) json += '"user_location"' + ":" + '"' + jsonEscape(this.getUserLocation())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getOauthdevicetokenscopess()) json += '"oAuthDeviceTokenScopes"' + ":" + URI.toJSONArray(this.getOauthdevicetokenscopess())  + ',';
		if(this.getOauthdevicetokenorginfos()) json += '"oAuthDeviceTokenOrgInfo"' + ":" + URI.toJSONArray(this.getOauthdevicetokenorginfos())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthDeviceToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.userZid && !(/^[a-zA-Z0-9_\-]+$/).test(this.userZid)) { throw new ValidationError(_formprefix + "user_zid", ValidationError.PATTERN_FAILED);}
if(this.zidType && !Validator.INTEGER.test(this.zidType)) { throw new ValidationError(_formprefix + "zid_type", ValidationError.PATTERN_FAILED);}
if(this.deviceToken && !(/xss:throwerror/).test(this.deviceToken)) { throw new ValidationError(_formprefix + "device_token", ValidationError.PATTERN_FAILED);}
if(this.grantType && !(/xss:throwerror/).test(this.grantType)) { throw new ValidationError(_formprefix + "grant_type", ValidationError.PATTERN_FAILED);}
if(this.verificationCode && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.verificationCode)) { throw new ValidationError(_formprefix + "verification_code", ValidationError.PATTERN_FAILED);}
if(this.verificationStatus && !Validator.INTEGER.test(this.verificationStatus)) { throw new ValidationError(_formprefix + "verification_status", ValidationError.PATTERN_FAILED);}
if(this.accessType && !Validator.INTEGER.test(this.accessType)) { throw new ValidationError(_formprefix + "access_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.oauthdevicetokenscopes) { for(i=0; i < this.oauthdevicetokenscopes.length; i++ ) { this.oauthdevicetokenscopes[i].validate(); } }
if(this.oauthdevicetokenorginfo) { for(i=0; i < this.oauthdevicetokenorginfo.length; i++ ) { this.oauthdevicetokenorginfo[i].validate(); } }

	return this;
    }
}
OAuthDeviceToken.path = "oauthdevicetoken";
OAuthDeviceToken.newBuilder = function() {
    return new OAuthDeviceToken();
};

CacheCluster = function() {
    var _formprefix = "";
    
var clusterName = "";
this.setClusterName = function(clusterName) { 
    this.clusterName = clusterName;
    return this;
};
this.getClusterName = function() {
    return this.clusterName;
};
var isSyncEnabled = "true";
this.setIsSyncEnabled = function(isSyncEnabled) { 
    this.isSyncEnabled = isSyncEnabled;
    return this;
};
this.getIsSyncEnabled = function() {
    return this.isSyncEnabled;
};
var syncClusterName = "";
this.setSyncClusterName = function(syncClusterName) { 
    this.syncClusterName = syncClusterName;
    return this;
};
this.getSyncClusterName = function() {
    return this.syncClusterName;
};
var isSyncEnabledForGet = "false";
this.setIsSyncEnabledForGet = function(isSyncEnabledForGet) { 
    this.isSyncEnabledForGet = isSyncEnabledForGet;
    return this;
};
this.getIsSyncEnabledForGet = function() {
    return this.isSyncEnabledForGet;
};
var clusternode = undefined;
this.setClusternodes = function(clusternode) { 
    this.clusternode = clusternode;
    return this;
};
this.getClusternodes = function() {
    return this.clusternode;
};
this.addClusternode = function(clusternode) { 
 if(!this.clusternode) this.clusternode = new Array(); 
  this.clusternode.push(clusternode); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClusterName(json["cluster_name"]);
		this.setIsSyncEnabled(json["is_sync_enabled"]);
		this.setSyncClusterName(json["sync_cluster_name"]);
		this.setIsSyncEnabledForGet(json["is_sync_enabled_for_get"]);
		this.setClusternodes(URI.getResourceArray(json["clusterNode"],"clusternode"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClusterName()) json += '"cluster_name"' + ":" + '"' + jsonEscape(this.getClusterName())  + '",';
		if(this.getIsSyncEnabled()) json += '"is_sync_enabled"' + ":" + '"' + jsonEscape(this.getIsSyncEnabled())  + '",';
		if(this.getSyncClusterName()) json += '"sync_cluster_name"' + ":" + '"' + jsonEscape(this.getSyncClusterName())  + '",';
		if(this.getIsSyncEnabledForGet()) json += '"is_sync_enabled_for_get"' + ":" + '"' + jsonEscape(this.getIsSyncEnabledForGet())  + '",';
		if(this.getClusternodes()) json += '"clusterNode"' + ":" + URI.toJSONArray(this.getClusternodes())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(CacheCluster.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.clusterName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.clusterName)) { throw new ValidationError(_formprefix + "cluster_name", ValidationError.PATTERN_FAILED);}
if(this.isSyncEnabled && !Validator.BOOLEAN.test(this.isSyncEnabled)) { throw new ValidationError(_formprefix + "is_sync_enabled", ValidationError.PATTERN_FAILED);}
if(this.syncClusterName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.syncClusterName)) { throw new ValidationError(_formprefix + "sync_cluster_name", ValidationError.PATTERN_FAILED);}
if(this.isSyncEnabledForGet && !Validator.BOOLEAN.test(this.isSyncEnabledForGet)) { throw new ValidationError(_formprefix + "is_sync_enabled_for_get", ValidationError.PATTERN_FAILED);}
if(this.clusternode) { for(i=0; i < this.clusternode.length; i++ ) { this.clusternode[i].validate(); } }

	return this;
    }
}
CacheCluster.path = "cachecluster";
CacheCluster.newBuilder = function() {
    return new CacheCluster();
};

OAuthDcDetails = function() {
    var _formprefix = "";
    
var dcLocation = "";
this.setDcLocation = function(dcLocation) { 
    this.dcLocation = dcLocation;
    return this;
};
this.getDcLocation = function() {
    return this.dcLocation;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDcLocation(json["dc_location"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDcLocation()) json += '"dc_location"' + ":" + '"' + jsonEscape(this.getDcLocation())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthDcDetails.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthDcDetails.path = "oauthdcdetails";
OAuthDcDetails.newBuilder = function() {
    return new OAuthDcDetails();
};

Partner = function() {
    var _formprefix = "";
    
var partnerDomain = "";
this.setPartnerDomain = function(partnerDomain) { 
    this.partnerDomain = partnerDomain;
    return this;
};
this.getPartnerDomain = function() {
    return this.partnerDomain;
};
var partnerZuid = "";
this.setPartnerZuid = function(partnerZuid) { 
    this.partnerZuid = partnerZuid;
    return this;
};
this.getPartnerZuid = function() {
    return this.partnerZuid;
};
var partnerName = "";
this.setPartnerName = function(partnerName) { 
    this.partnerName = partnerName;
    return this;
};
this.getPartnerName = function() {
    return this.partnerName;
};
var partnerEmailid = "";
this.setPartnerEmailid = function(partnerEmailid) { 
    this.partnerEmailid = partnerEmailid;
    return this;
};
this.getPartnerEmailid = function() {
    return this.partnerEmailid;
};
var partnerStatus = "0";
this.setPartnerStatus = function(partnerStatus) { 
    this.partnerStatus = partnerStatus;
    return this;
};
this.getPartnerStatus = function() {
    return this.partnerStatus;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPartnerDomain(json["partner_domain"]);
		this.setPartnerZuid(json["partner_zuid"]);
		this.setPartnerName(json["partner_name"]);
		this.setPartnerEmailid(json["partner_emailid"]);
		this.setPartnerStatus(json["partner_status"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPartnerDomain()) json += '"partner_domain"' + ":" + '"' + jsonEscape(this.getPartnerDomain())  + '",';
		if(this.getPartnerZuid()) json += '"partner_zuid"' + ":" + '"' + jsonEscape(this.getPartnerZuid())  + '",';
		if(this.getPartnerName()) json += '"partner_name"' + ":" + '"' + jsonEscape(this.getPartnerName())  + '",';
		if(this.getPartnerEmailid()) json += '"partner_emailid"' + ":" + '"' + jsonEscape(this.getPartnerEmailid())  + '",';
		if(this.getPartnerStatus()) json += '"partner_status"' + ":" + '"' + jsonEscape(this.getPartnerStatus())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Partner.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.partnerDomain && !(/^([\p{L}\p{M}\p{N}]([\p{L}\p{M}\p{N}\-]{0,61}[\p{L}\p{M}\p{N}])?\.)+[\p{L}\p{M}]{2,6}$/).test(this.partnerDomain)) { throw new ValidationError(_formprefix + "partner_domain", ValidationError.PATTERN_FAILED);}
if(this.partnerZuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.partnerZuid)) { throw new ValidationError(_formprefix + "partner_zuid", ValidationError.PATTERN_FAILED);}
if(this.partnerName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.partnerName)) { throw new ValidationError(_formprefix + "partner_name", ValidationError.PATTERN_FAILED);}
if(this.partnerEmailid && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.partnerEmailid)) { throw new ValidationError(_formprefix + "partner_emailid", ValidationError.PATTERN_FAILED);}
if(this.partnerStatus && !Validator.INTEGER.test(this.partnerStatus)) { throw new ValidationError(_formprefix + "partner_status", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Partner.path = "partner";
Partner.newBuilder = function() {
    return new Partner();
};

JWTAuthentication = function() {
    var _formprefix = "";
    
var jwtId = "";
this.setJwtId = function(jwtId) { 
    this.jwtId = jwtId;
    return this;
};
this.getJwtId = function() {
    return this.jwtId;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var loginUrl = "";
this.setLoginUrl = function(loginUrl) { 
    this.loginUrl = loginUrl;
    return this;
};
this.getLoginUrl = function() {
    return this.loginUrl;
};
var logoutUrl = "";
this.setLogoutUrl = function(logoutUrl) { 
    this.logoutUrl = logoutUrl;
    return this;
};
this.getLogoutUrl = function() {
    return this.logoutUrl;
};
var algorithm = "";
this.setAlgorithm = function(algorithm) { 
    this.algorithm = algorithm;
    return this;
};
this.getAlgorithm = function() {
    return this.algorithm;
};
var key = "";
this.setKey = function(key) { 
    this.key = key;
    return this;
};
this.getKey = function() {
    return this.key;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var jwtreqparam = undefined;
this.setJwtreqparams = function(jwtreqparam) { 
    this.jwtreqparam = jwtreqparam;
    return this;
};
this.getJwtreqparams = function() {
    return this.jwtreqparam;
};
this.addJwtreqparam = function(jwtreqparam) { 
 if(!this.jwtreqparam) this.jwtreqparam = new Array(); 
  this.jwtreqparam.push(jwtreqparam); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setJwtId(json["jwt_id"]);
		this.setDisplayName(json["display_name"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setLoginUrl(json["login_url"]);
		this.setLogoutUrl(json["logout_url"]);
		this.setAlgorithm(json["algorithm"]);
		this.setKey(json["key"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setJwtreqparams(URI.getResourceArray(json["jWTReqParam"],"jwtreqparam"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getJwtId()) json += '"jwt_id"' + ":" + '"' + jsonEscape(this.getJwtId())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getLoginUrl()) json += '"login_url"' + ":" + '"' + jsonEscape(this.getLoginUrl())  + '",';
		if(this.getLogoutUrl()) json += '"logout_url"' + ":" + '"' + jsonEscape(this.getLogoutUrl())  + '",';
		if(this.getAlgorithm()) json += '"algorithm"' + ":" + '"' + jsonEscape(this.getAlgorithm())  + '",';
		if(this.getKey()) json += '"key"' + ":" + '"' + jsonEscape(this.getKey())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getJwtreqparams()) json += '"jWTReqParam"' + ":" + URI.toJSONArray(this.getJwtreqparams())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(JWTAuthentication.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.jwtreqparam) { for(i=0; i < this.jwtreqparam.length; i++ ) { this.jwtreqparam[i].validate(); } }

	return this;
    }
}
JWTAuthentication.path = "jwtauthentication";
JWTAuthentication.newBuilder = function() {
    return new JWTAuthentication();
};

OAuthRefreshTokenOrgInfo = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidtype = "";
this.setZidtype = function(zidtype) { 
    this.zidtype = zidtype;
    return this;
};
this.getZidtype = function() {
    return this.zidtype;
};
var serviceName = "";
this.setServiceName = function(serviceName) { 
    this.serviceName = serviceName;
    return this;
};
this.getServiceName = function() {
    return this.serviceName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidtype(json["zidtype"]);
		this.setServiceName(json["service_name"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidtype()) json += '"zidtype"' + ":" + '"' + jsonEscape(this.getZidtype())  + '",';
		if(this.getServiceName()) json += '"service_name"' + ":" + '"' + jsonEscape(this.getServiceName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthRefreshTokenOrgInfo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.zidtype && !Validator.INTEGER.test(this.zidtype)) { throw new ValidationError(_formprefix + "zidtype", ValidationError.PATTERN_FAILED);}
if(this.serviceName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.serviceName)) { throw new ValidationError(_formprefix + "service_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthRefreshTokenOrgInfo.path = "oauthrefreshtokenorginfo";
OAuthRefreshTokenOrgInfo.newBuilder = function() {
    return new OAuthRefreshTokenOrgInfo();
};

UserAuthorizedIp = function() {
    var _formprefix = "";
    
var ipid = "";
this.setIpid = function(ipid) { 
    this.ipid = ipid;
    return this;
};
this.getIpid = function() {
    return this.ipid;
};
var ipName = "";
this.setIpName = function(ipName) { 
    this.ipName = ipName;
    return this;
};
this.getIpName = function() {
    return this.ipName;
};
var fromIp = "";
this.setFromIp = function(fromIp) { 
    this.fromIp = fromIp;
    return this;
};
this.getFromIp = function() {
    return this.fromIp;
};
var toIp = "";
this.setToIp = function(toIp) { 
    this.toIp = toIp;
    return this;
};
this.getToIp = function() {
    return this.toIp;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var ipAuditInfo = "";
this.setIpAuditInfo = function(ipAuditInfo) { 
    this.ipAuditInfo = ipAuditInfo;
    return this;
};
this.getIpAuditInfo = function() {
    return this.ipAuditInfo;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setIpid(json["ipid"]);
		this.setIpName(json["ip_name"]);
		this.setFromIp(json["from_ip"]);
		this.setToIp(json["to_ip"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setIpAuditInfo(json["ip_audit_info"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getIpid()) json += '"ipid"' + ":" + '"' + jsonEscape(this.getIpid())  + '",';
		if(this.getIpName()) json += '"ip_name"' + ":" + '"' + jsonEscape(this.getIpName())  + '",';
		if(this.getFromIp()) json += '"from_ip"' + ":" + '"' + jsonEscape(this.getFromIp())  + '",';
		if(this.getToIp()) json += '"to_ip"' + ":" + '"' + jsonEscape(this.getToIp())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getIpAuditInfo()) json += '"ip_audit_info"' + ":" + '"' + jsonEscape(this.getIpAuditInfo())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserAuthorizedIp.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.ipid && !Validator.INTEGER.test(this.ipid)) { throw new ValidationError(_formprefix + "ipid", ValidationError.PATTERN_FAILED);}
if(this.ipName && !(/xss:throwerror/).test(this.ipName)) { throw new ValidationError(_formprefix + "ip_name", ValidationError.PATTERN_FAILED);}
if(this.fromIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.fromIp)) { throw new ValidationError(_formprefix + "from_ip", ValidationError.PATTERN_FAILED);}
if(this.toIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.toIp)) { throw new ValidationError(_formprefix + "to_ip", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/xss:throwerror/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserAuthorizedIp.path = "userauthorizedip";
UserAuthorizedIp.newBuilder = function() {
    return new UserAuthorizedIp();
};

ServiceOrgInvitationTemplate = function() {
    var _formprefix = "";
    
var templateId = "";
this.setTemplateId = function(templateId) { 
    this.templateId = templateId;
    return this;
};
this.getTemplateId = function() {
    return this.templateId;
};
var templateName = "";
this.setTemplateName = function(templateName) { 
    this.templateName = templateName;
    return this;
};
this.getTemplateName = function() {
    return this.templateName;
};
var senderEmailId = "";
this.setSenderEmailId = function(senderEmailId) { 
    this.senderEmailId = senderEmailId;
    return this;
};
this.getSenderEmailId = function() {
    return this.senderEmailId;
};
var replyToEmailId = "";
this.setReplyToEmailId = function(replyToEmailId) { 
    this.replyToEmailId = replyToEmailId;
    return this;
};
this.getReplyToEmailId = function() {
    return this.replyToEmailId;
};
var emailSubject = "";
this.setEmailSubject = function(emailSubject) { 
    this.emailSubject = emailSubject;
    return this;
};
this.getEmailSubject = function() {
    return this.emailSubject;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTemplateId(json["template_id"]);
		this.setTemplateName(json["template_name"]);
		this.setSenderEmailId(json["sender_email_id"]);
		this.setReplyToEmailId(json["reply_to_email_id"]);
		this.setEmailSubject(json["email_subject"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTemplateId()) json += '"template_id"' + ":" + '"' + jsonEscape(this.getTemplateId())  + '",';
		if(this.getTemplateName()) json += '"template_name"' + ":" + '"' + jsonEscape(this.getTemplateName())  + '",';
		if(this.getSenderEmailId()) json += '"sender_email_id"' + ":" + '"' + jsonEscape(this.getSenderEmailId())  + '",';
		if(this.getReplyToEmailId()) json += '"reply_to_email_id"' + ":" + '"' + jsonEscape(this.getReplyToEmailId())  + '",';
		if(this.getEmailSubject()) json += '"email_subject"' + ":" + '"' + jsonEscape(this.getEmailSubject())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgInvitationTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.templateId && !Validator.INTEGER.test(this.templateId)) { throw new ValidationError(_formprefix + "template_id", ValidationError.PATTERN_FAILED);}
if(this.templateName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.templateName)) { throw new ValidationError(_formprefix + "template_name", ValidationError.PATTERN_FAILED);}
if(this.senderEmailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.senderEmailId)) { throw new ValidationError(_formprefix + "sender_email_id", ValidationError.PATTERN_FAILED);}
if(this.replyToEmailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.replyToEmailId)) { throw new ValidationError(_formprefix + "reply_to_email_id", ValidationError.PATTERN_FAILED);}
if(this.emailSubject && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.emailSubject)) { throw new ValidationError(_formprefix + "email_subject", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgInvitationTemplate.path = "serviceorginvitationtemplate";
ServiceOrgInvitationTemplate.newBuilder = function() {
    return new ServiceOrgInvitationTemplate();
};

OAuthGrantTokenOrgInfo = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidtype = "";
this.setZidtype = function(zidtype) { 
    this.zidtype = zidtype;
    return this;
};
this.getZidtype = function() {
    return this.zidtype;
};
var serviceName = "";
this.setServiceName = function(serviceName) { 
    this.serviceName = serviceName;
    return this;
};
this.getServiceName = function() {
    return this.serviceName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidtype(json["zidtype"]);
		this.setServiceName(json["service_name"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidtype()) json += '"zidtype"' + ":" + '"' + jsonEscape(this.getZidtype())  + '",';
		if(this.getServiceName()) json += '"service_name"' + ":" + '"' + jsonEscape(this.getServiceName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthGrantTokenOrgInfo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.zidtype && !Validator.INTEGER.test(this.zidtype)) { throw new ValidationError(_formprefix + "zidtype", ValidationError.PATTERN_FAILED);}
if(this.serviceName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.serviceName)) { throw new ValidationError(_formprefix + "service_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthGrantTokenOrgInfo.path = "oauthgranttokenorginfo";
OAuthGrantTokenOrgInfo.newBuilder = function() {
    return new OAuthGrantTokenOrgInfo();
};

RoutingPolicy = function() {
    var _formprefix = "";
    
var policyId = "";
this.setPolicyId = function(policyId) { 
    this.policyId = policyId;
    return this;
};
this.getPolicyId = function() {
    return this.policyId;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var appliesTo = "0";
this.setAppliesTo = function(appliesTo) { 
    this.appliesTo = appliesTo;
    return this;
};
this.getAppliesTo = function() {
    return this.appliesTo;
};
var allowedModes = "0";
this.setAllowedModes = function(allowedModes) { 
    this.allowedModes = allowedModes;
    return this;
};
this.getAllowedModes = function() {
    return this.allowedModes;
};
var idleTimeout = "0";
this.setIdleTimeout = function(idleTimeout) { 
    this.idleTimeout = idleTimeout;
    return this;
};
this.getIdleTimeout = function() {
    return this.idleTimeout;
};
var sessionTimeout = "0";
this.setSessionTimeout = function(sessionTimeout) { 
    this.sessionTimeout = sessionTimeout;
    return this;
};
this.getSessionTimeout = function() {
    return this.sessionTimeout;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var routingpolicymode = undefined;
this.setRoutingpolicymodes = function(routingpolicymode) { 
    this.routingpolicymode = routingpolicymode;
    return this;
};
this.getRoutingpolicymodes = function() {
    return this.routingpolicymode;
};
this.addRoutingpolicymode = function(routingpolicymode) { 
 if(!this.routingpolicymode) this.routingpolicymode = new Array(); 
  this.routingpolicymode.push(routingpolicymode); 
 return this;
};

var routingpolicyuser = undefined;
this.setRoutingpolicyusers = function(routingpolicyuser) { 
    this.routingpolicyuser = routingpolicyuser;
    return this;
};
this.getRoutingpolicyusers = function() {
    return this.routingpolicyuser;
};
this.addRoutingpolicyuser = function(routingpolicyuser) { 
 if(!this.routingpolicyuser) this.routingpolicyuser = new Array(); 
  this.routingpolicyuser.push(routingpolicyuser); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPolicyId(json["policy_id"]);
		this.setDisplayName(json["display_name"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setAppliesTo(json["applies_to"]);
		this.setAllowedModes(json["allowed_modes"]);
		this.setIdleTimeout(json["idle_timeout"]);
		this.setSessionTimeout(json["session_timeout"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setRoutingpolicymodes(URI.getResourceArray(json["routingPolicyMode"],"routingpolicymode"));
		this.setRoutingpolicyusers(URI.getResourceArray(json["routingPolicyUser"],"routingpolicyuser"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPolicyId()) json += '"policy_id"' + ":" + '"' + jsonEscape(this.getPolicyId())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getAppliesTo()) json += '"applies_to"' + ":" + '"' + jsonEscape(this.getAppliesTo())  + '",';
		if(this.getAllowedModes()) json += '"allowed_modes"' + ":" + '"' + jsonEscape(this.getAllowedModes())  + '",';
		if(this.getIdleTimeout()) json += '"idle_timeout"' + ":" + '"' + jsonEscape(this.getIdleTimeout())  + '",';
		if(this.getSessionTimeout()) json += '"session_timeout"' + ":" + '"' + jsonEscape(this.getSessionTimeout())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getRoutingpolicymodes()) json += '"routingPolicyMode"' + ":" + URI.toJSONArray(this.getRoutingpolicymodes())  + ',';
		if(this.getRoutingpolicyusers()) json += '"routingPolicyUser"' + ":" + URI.toJSONArray(this.getRoutingpolicyusers())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(RoutingPolicy.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.policyId && !(/^([A-Za-z0-9_.\-]+)$/).test(this.policyId)) { throw new ValidationError(_formprefix + "policy_id", ValidationError.PATTERN_FAILED);}
if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.allowedModes && !Validator.INTEGER.test(this.allowedModes)) { throw new ValidationError(_formprefix + "allowed_modes", ValidationError.PATTERN_FAILED);}
if(this.idleTimeout && !Validator.INTEGER.test(this.idleTimeout)) { throw new ValidationError(_formprefix + "idle_timeout", ValidationError.PATTERN_FAILED);}
if(this.sessionTimeout && !Validator.INTEGER.test(this.sessionTimeout)) { throw new ValidationError(_formprefix + "session_timeout", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.routingpolicymode) { for(i=0; i < this.routingpolicymode.length; i++ ) { this.routingpolicymode[i].validate(); } }
if(this.routingpolicyuser) { for(i=0; i < this.routingpolicyuser.length; i++ ) { this.routingpolicyuser[i].validate(); } }

	return this;
    }
}
RoutingPolicy.path = "routingpolicy";
RoutingPolicy.newBuilder = function() {
    return new RoutingPolicy();
};

RoutingPolicyMode = function() {
    var _formprefix = "";
    
var authType = "0";
this.setAuthType = function(authType) { 
    this.authType = authType;
    return this;
};
this.getAuthType = function() {
    return this.authType;
};
var authMode = "";
this.setAuthMode = function(authMode) { 
    this.authMode = authMode;
    return this;
};
this.getAuthMode = function() {
    return this.authMode;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAuthType(json["auth_type"]);
		this.setAuthMode(json["auth_mode"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAuthType()) json += '"auth_type"' + ":" + '"' + jsonEscape(this.getAuthType())  + '",';
		if(this.getAuthMode()) json += '"auth_mode"' + ":" + '"' + jsonEscape(this.getAuthMode())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(RoutingPolicyMode.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
RoutingPolicyMode.path = "routingpolicymode";
RoutingPolicyMode.newBuilder = function() {
    return new RoutingPolicyMode();
};

UserDevice = function() {
    var _formprefix = "";
    
var deviceTokenApl = "";
this.setDeviceTokenApl = function(deviceTokenApl) { 
    this.deviceTokenApl = deviceTokenApl;
    return this;
};
this.getDeviceTokenApl = function() {
    return this.deviceTokenApl;
};
var deviceToken = "";
this.setDeviceToken = function(deviceToken) { 
    this.deviceToken = deviceToken;
    return this;
};
this.getDeviceToken = function() {
    return this.deviceToken;
};
var deviceName = "";
this.setDeviceName = function(deviceName) { 
    this.deviceName = deviceName;
    return this;
};
this.getDeviceName = function() {
    return this.deviceName;
};
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var apnsMode = "";
this.setApnsMode = function(apnsMode) { 
    this.apnsMode = apnsMode;
    return this;
};
this.getApnsMode = function() {
    return this.apnsMode;
};
var deviceType = "";
this.setDeviceType = function(deviceType) { 
    this.deviceType = deviceType;
    return this;
};
this.getDeviceType = function() {
    return this.deviceType;
};
var deviceOsVersion = "";
this.setDeviceOsVersion = function(deviceOsVersion) { 
    this.deviceOsVersion = deviceOsVersion;
    return this;
};
this.getDeviceOsVersion = function() {
    return this.deviceOsVersion;
};
var deviceInfo = "";
this.setDeviceInfo = function(deviceInfo) { 
    this.deviceInfo = deviceInfo;
    return this;
};
this.getDeviceInfo = function() {
    return this.deviceInfo;
};
var setupMode = "0";
this.setSetupMode = function(setupMode) { 
    this.setupMode = setupMode;
    return this;
};
this.getSetupMode = function() {
    return this.setupMode;
};
var isPrimary = "false";
this.setIsPrimary = function(isPrimary) { 
    this.isPrimary = isPrimary;
    return this;
};
this.getIsPrimary = function() {
    return this.isPrimary;
};
var isVerified = "false";
this.setIsVerified = function(isVerified) { 
    this.isVerified = isVerified;
    return this;
};
this.getIsVerified = function() {
    return this.isVerified;
};
var isLocked = "false";
this.setIsLocked = function(isLocked) { 
    this.isLocked = isLocked;
    return this;
};
this.getIsLocked = function() {
    return this.isLocked;
};
var publicKey = "";
this.setPublicKey = function(publicKey) { 
    this.publicKey = publicKey;
    return this;
};
this.getPublicKey = function() {
    return this.publicKey;
};
var location = "";
this.setLocation = function(location) { 
    this.location = location;
    return this;
};
this.getLocation = function() {
    return this.location;
};
var refreshToken = "";
this.setRefreshToken = function(refreshToken) { 
    this.refreshToken = refreshToken;
    return this;
};
this.getRefreshToken = function() {
    return this.refreshToken;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var appVersion = "";
this.setAppVersion = function(appVersion) { 
    this.appVersion = appVersion;
    return this;
};
this.getAppVersion = function() {
    return this.appVersion;
};
var mode = "";
this.setMode = function(mode) { 
    this.mode = mode;
    return this;
};
this.getMode = function() {
    return this.mode;
};
var prefOption = "";
this.setPrefOption = function(prefOption) { 
    this.prefOption = prefOption;
    return this;
};
this.getPrefOption = function() {
    return this.prefOption;
};
var secretKey = "";
this.setSecretKey = function(secretKey) { 
    this.secretKey = secretKey;
    return this;
};
this.getSecretKey = function() {
    return this.secretKey;
};
var bioType = "";
this.setBioType = function(bioType) { 
    this.bioType = bioType;
    return this;
};
this.getBioType = function() {
    return this.bioType;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDeviceTokenApl(json["device_token_apl"]);
		this.setDeviceToken(json["device_token"]);
		this.setDeviceName(json["device_name"]);
		this.setAppId(json["app_id"]);
		this.setApnsMode(json["apns_mode"]);
		this.setDeviceType(json["device_type"]);
		this.setDeviceOsVersion(json["device_os_version"]);
		this.setDeviceInfo(json["device_info"]);
		this.setSetupMode(json["setup_mode"]);
		this.setIsPrimary(json["is_primary"]);
		this.setIsVerified(json["is_verified"]);
		this.setIsLocked(json["is_locked"]);
		this.setPublicKey(json["public_key"]);
		this.setLocation(json["location"]);
		this.setRefreshToken(json["refresh_token"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setAppVersion(json["app_version"]);
		this.setMode(json["mode"]);
		this.setPrefOption(json["pref_option"]);
		this.setSecretKey(json["secret_key"]);
		this.setBioType(json["bio_type"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDeviceTokenApl()) json += '"device_token_apl"' + ":" + '"' + jsonEscape(this.getDeviceTokenApl())  + '",';
		if(this.getDeviceToken()) json += '"device_token"' + ":" + '"' + jsonEscape(this.getDeviceToken())  + '",';
		if(this.getDeviceName()) json += '"device_name"' + ":" + '"' + jsonEscape(this.getDeviceName())  + '",';
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getApnsMode()) json += '"apns_mode"' + ":" + '"' + jsonEscape(this.getApnsMode())  + '",';
		if(this.getDeviceType()) json += '"device_type"' + ":" + '"' + jsonEscape(this.getDeviceType())  + '",';
		if(this.getDeviceOsVersion()) json += '"device_os_version"' + ":" + '"' + jsonEscape(this.getDeviceOsVersion())  + '",';
		if(this.getDeviceInfo()) json += '"device_info"' + ":" + '"' + jsonEscape(this.getDeviceInfo())  + '",';
		if(this.getSetupMode()) json += '"setup_mode"' + ":" + '"' + jsonEscape(this.getSetupMode())  + '",';
		if(this.getIsPrimary()) json += '"is_primary"' + ":" + '"' + jsonEscape(this.getIsPrimary())  + '",';
		if(this.getIsVerified()) json += '"is_verified"' + ":" + '"' + jsonEscape(this.getIsVerified())  + '",';
		if(this.getIsLocked()) json += '"is_locked"' + ":" + '"' + jsonEscape(this.getIsLocked())  + '",';
		if(this.getPublicKey()) json += '"public_key"' + ":" + '"' + jsonEscape(this.getPublicKey())  + '",';
		if(this.getLocation()) json += '"location"' + ":" + '"' + jsonEscape(this.getLocation())  + '",';
		if(this.getRefreshToken()) json += '"refresh_token"' + ":" + '"' + jsonEscape(this.getRefreshToken())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getAppVersion()) json += '"app_version"' + ":" + '"' + jsonEscape(this.getAppVersion())  + '",';
		if(this.getMode()) json += '"mode"' + ":" + '"' + jsonEscape(this.getMode())  + '",';
		if(this.getPrefOption()) json += '"pref_option"' + ":" + '"' + jsonEscape(this.getPrefOption())  + '",';
		if(this.getSecretKey()) json += '"secret_key"' + ":" + '"' + jsonEscape(this.getSecretKey())  + '",';
		if(this.getBioType()) json += '"bio_type"' + ":" + '"' + jsonEscape(this.getBioType())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserDevice.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.deviceTokenApl && !(/xss:throwerror/).test(this.deviceTokenApl)) { throw new ValidationError(_formprefix + "device_token_apl", ValidationError.PATTERN_FAILED);}
if(this.deviceToken && !(/xss:throwerror/).test(this.deviceToken)) { throw new ValidationError(_formprefix + "device_token", ValidationError.PATTERN_FAILED);}
if(this.deviceName && !(/xss:throwerror/).test(this.deviceName)) { throw new ValidationError(_formprefix + "device_name", ValidationError.PATTERN_FAILED);}
if(this.appId && !(/xss:throwerror/).test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.apnsMode && !(/xss:throwerror/).test(this.apnsMode)) { throw new ValidationError(_formprefix + "apns_mode", ValidationError.PATTERN_FAILED);}
if(this.deviceType && !Validator.INTEGER.test(this.deviceType)) { throw new ValidationError(_formprefix + "device_type", ValidationError.PATTERN_FAILED);}
if(this.deviceOsVersion && !(/^([A-Za-z0-9_.\-]+)$/).test(this.deviceOsVersion)) { throw new ValidationError(_formprefix + "device_os_version", ValidationError.PATTERN_FAILED);}
if(this.deviceInfo && !(/xss:throwerror/).test(this.deviceInfo)) { throw new ValidationError(_formprefix + "device_info", ValidationError.PATTERN_FAILED);}
if(this.setupMode && !Validator.INTEGER.test(this.setupMode)) { throw new ValidationError(_formprefix + "setup_mode", ValidationError.PATTERN_FAILED);}
if(this.isPrimary && !Validator.BOOLEAN.test(this.isPrimary)) { throw new ValidationError(_formprefix + "is_primary", ValidationError.PATTERN_FAILED);}
if(this.isVerified && !Validator.BOOLEAN.test(this.isVerified)) { throw new ValidationError(_formprefix + "is_verified", ValidationError.PATTERN_FAILED);}
if(this.isLocked && !Validator.BOOLEAN.test(this.isLocked)) { throw new ValidationError(_formprefix + "is_locked", ValidationError.PATTERN_FAILED);}
if(this.publicKey && !(/^([A-Za-z0-9_.\-]+)$/).test(this.publicKey)) { throw new ValidationError(_formprefix + "public_key", ValidationError.PATTERN_FAILED);}
if(this.location && !(/^([A-Za-z0-9_.\-]+)$/).test(this.location)) { throw new ValidationError(_formprefix + "location", ValidationError.PATTERN_FAILED);}
if(this.refreshToken && !(/^([A-Za-z0-9_.\-]+)$/).test(this.refreshToken)) { throw new ValidationError(_formprefix + "refresh_token", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.appVersion && !(/^([A-Za-z0-9_.\-]+)$/).test(this.appVersion)) { throw new ValidationError(_formprefix + "app_version", ValidationError.PATTERN_FAILED);}
if(this.mode && !Validator.INTEGER.test(this.mode)) { throw new ValidationError(_formprefix + "mode", ValidationError.PATTERN_FAILED);}
if(this.prefOption && !Validator.INTEGER.test(this.prefOption)) { throw new ValidationError(_formprefix + "pref_option", ValidationError.PATTERN_FAILED);}
if(this.secretKey && !(/dontdisturb/).test(this.secretKey)) { throw new ValidationError(_formprefix + "secret_key", ValidationError.PATTERN_FAILED);}
if(this.bioType && !Validator.INTEGER.test(this.bioType)) { throw new ValidationError(_formprefix + "bio_type", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserDevice.path = "userdevice";
UserDevice.newBuilder = function() {
    return new UserDevice();
};

SAMLReqParam = function() {
    var _formprefix = "";
    
var requestType = "";
this.setRequestType = function(requestType) { 
    this.requestType = requestType;
    return this;
};
this.getRequestType = function() {
    return this.requestType;
};
var paramName = "";
this.setParamName = function(paramName) { 
    this.paramName = paramName;
    return this;
};
this.getParamName = function() {
    return this.paramName;
};
var paramValue = "";
this.setParamValue = function(paramValue) { 
    this.paramValue = paramValue;
    return this;
};
this.getParamValue = function() {
    return this.paramValue;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRequestType(json["request_type"]);
		this.setParamName(json["param_name"]);
		this.setParamValue(json["param_value"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRequestType()) json += '"request_type"' + ":" + '"' + jsonEscape(this.getRequestType())  + '",';
		if(this.getParamName()) json += '"param_name"' + ":" + '"' + jsonEscape(this.getParamName())  + '",';
		if(this.getParamValue()) json += '"param_value"' + ":" + '"' + jsonEscape(this.getParamValue())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SAMLReqParam.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SAMLReqParam.path = "samlreqparam";
SAMLReqParam.newBuilder = function() {
    return new SAMLReqParam();
};

ResourceAuditTemplate = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var ownerZuid = "";
this.setOwnerZuid = function(ownerZuid) { 
    this.ownerZuid = ownerZuid;
    return this;
};
this.getOwnerZuid = function() {
    return this.ownerZuid;
};
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var requestId = "";
this.setRequestId = function(requestId) { 
    this.requestId = requestId;
    return this;
};
this.getRequestId = function() {
    return this.requestId;
};
var resourceType = "";
this.setResourceType = function(resourceType) { 
    this.resourceType = resourceType;
    return this;
};
this.getResourceType = function() {
    return this.resourceType;
};
var operation = "";
this.setOperation = function(operation) { 
    this.operation = operation;
    return this;
};
this.getOperation = function() {
    return this.operation;
};
var oldData = "";
this.setOldData = function(oldData) { 
    this.oldData = oldData;
    return this;
};
this.getOldData = function() {
    return this.oldData;
};
var newData = "";
this.setNewData = function(newData) { 
    this.newData = newData;
    return this;
};
this.getNewData = function() {
    return this.newData;
};
var restUrl = "";
this.setRestUrl = function(restUrl) { 
    this.restUrl = restUrl;
    return this;
};
this.getRestUrl = function() {
    return this.restUrl;
};
var tokenDigest = "";
this.setTokenDigest = function(tokenDigest) { 
    this.tokenDigest = tokenDigest;
    return this;
};
this.getTokenDigest = function() {
    return this.tokenDigest;
};
var threadId = "";
this.setThreadId = function(threadId) { 
    this.threadId = threadId;
    return this;
};
this.getThreadId = function() {
    return this.threadId;
};
var appIp = "";
this.setAppIp = function(appIp) { 
    this.appIp = appIp;
    return this;
};
this.getAppIp = function() {
    return this.appIp;
};
var remoteIp = "";
this.setRemoteIp = function(remoteIp) { 
    this.remoteIp = remoteIp;
    return this;
};
this.getRemoteIp = function() {
    return this.remoteIp;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var auditedTime = "";
this.setAuditedTime = function(auditedTime) { 
    this.auditedTime = auditedTime;
    return this;
};
this.getAuditedTime = function() {
    return this.auditedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setZuid(json["zuid"]);
		this.setOwnerZuid(json["owner_zuid"]);
		this.setAppId(json["app_id"]);
		this.setRequestId(json["request_id"]);
		this.setResourceType(json["resource_type"]);
		this.setOperation(json["operation"]);
		this.setOldData(json["old_data"]);
		this.setNewData(json["new_data"]);
		this.setRestUrl(json["rest_url"]);
		this.setTokenDigest(json["token_digest"]);
		this.setThreadId(json["thread_id"]);
		this.setAppIp(json["app_ip"]);
		this.setRemoteIp(json["remote_ip"]);
		this.setUserAgent(json["user_agent"]);
		this.setAuditedTime(json["audited_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getOwnerZuid()) json += '"owner_zuid"' + ":" + '"' + jsonEscape(this.getOwnerZuid())  + '",';
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getRequestId()) json += '"request_id"' + ":" + '"' + jsonEscape(this.getRequestId())  + '",';
		if(this.getResourceType()) json += '"resource_type"' + ":" + '"' + jsonEscape(this.getResourceType())  + '",';
		if(this.getOperation()) json += '"operation"' + ":" + '"' + jsonEscape(this.getOperation())  + '",';
		if(this.getOldData()) json += '"old_data"' + ":" + '"' + jsonEscape(this.getOldData())  + '",';
		if(this.getNewData()) json += '"new_data"' + ":" + '"' + jsonEscape(this.getNewData())  + '",';
		if(this.getRestUrl()) json += '"rest_url"' + ":" + '"' + jsonEscape(this.getRestUrl())  + '",';
		if(this.getTokenDigest()) json += '"token_digest"' + ":" + '"' + jsonEscape(this.getTokenDigest())  + '",';
		if(this.getThreadId()) json += '"thread_id"' + ":" + '"' + jsonEscape(this.getThreadId())  + '",';
		if(this.getAppIp()) json += '"app_ip"' + ":" + '"' + jsonEscape(this.getAppIp())  + '",';
		if(this.getRemoteIp()) json += '"remote_ip"' + ":" + '"' + jsonEscape(this.getRemoteIp())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getAuditedTime()) json += '"audited_time"' + ":" + '"' + jsonEscape(this.getAuditedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ResourceAuditTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.ownerZuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.ownerZuid)) { throw new ValidationError(_formprefix + "owner_zuid", ValidationError.PATTERN_FAILED);}
if(this.appId && !Validator.INTEGER.test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.requestId && !(/^[a-zA-Z0-9_\-]+$/).test(this.requestId)) { throw new ValidationError(_formprefix + "request_id", ValidationError.PATTERN_FAILED);}
if(this.resourceType && !(/^[a-zA-Z0-9_]+$/).test(this.resourceType)) { throw new ValidationError(_formprefix + "resource_type", ValidationError.PATTERN_FAILED);}
if(this.oldData && !(/dontdisturb/).test(this.oldData)) { throw new ValidationError(_formprefix + "old_data", ValidationError.PATTERN_FAILED);}
if(this.newData && !(/dontdisturb/).test(this.newData)) { throw new ValidationError(_formprefix + "new_data", ValidationError.PATTERN_FAILED);}
if(this.restUrl && !(/dontdisturb/).test(this.restUrl)) { throw new ValidationError(_formprefix + "rest_url", ValidationError.PATTERN_FAILED);}
if(this.tokenDigest && !(/^[a-f0-9]+$/).test(this.tokenDigest)) { throw new ValidationError(_formprefix + "token_digest", ValidationError.PATTERN_FAILED);}
if(this.threadId && !(/dontdisturb/).test(this.threadId)) { throw new ValidationError(_formprefix + "thread_id", ValidationError.PATTERN_FAILED);}
if(this.appIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.appIp)) { throw new ValidationError(_formprefix + "app_ip", ValidationError.PATTERN_FAILED);}
if(this.remoteIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.remoteIp)) { throw new ValidationError(_formprefix + "remote_ip", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.auditedTime && !Validator.INTEGER.test(this.auditedTime)) { throw new ValidationError(_formprefix + "audited_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ResourceAuditTemplate.path = "resourceaudittemplate";
ResourceAuditTemplate.newBuilder = function() {
    return new ResourceAuditTemplate();
};

TagItem = function() {
    var _formprefix = "";
    
var resourceId = "";
this.setResourceId = function(resourceId) { 
    this.resourceId = resourceId;
    return this;
};
this.getResourceId = function() {
    return this.resourceId;
};
var resourceType = "";
this.setResourceType = function(resourceType) { 
    this.resourceType = resourceType;
    return this;
};
this.getResourceType = function() {
    return this.resourceType;
};
var resourceUrl = "";
this.setResourceUrl = function(resourceUrl) { 
    this.resourceUrl = resourceUrl;
    return this;
};
this.getResourceUrl = function() {
    return this.resourceUrl;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setResourceId(json["resource_id"]);
		this.setResourceType(json["resource_type"]);
		this.setResourceUrl(json["resource_url"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getResourceId()) json += '"resource_id"' + ":" + '"' + jsonEscape(this.getResourceId())  + '",';
		if(this.getResourceType()) json += '"resource_type"' + ":" + '"' + jsonEscape(this.getResourceType())  + '",';
		if(this.getResourceUrl()) json += '"resource_url"' + ":" + '"' + jsonEscape(this.getResourceUrl())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(TagItem.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.resourceId && !(/^[a-zA-Z0-9_\-]+$/).test(this.resourceId)) { throw new ValidationError(_formprefix + "resource_id", ValidationError.PATTERN_FAILED);}
if(this.resourceType && !(/^[a-zA-Z0-9_]+$/).test(this.resourceType)) { throw new ValidationError(_formprefix + "resource_type", ValidationError.PATTERN_FAILED);}
if(this.resourceUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.resourceUrl)) { throw new ValidationError(_formprefix + "resource_url", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
TagItem.path = "tagitem";
TagItem.newBuilder = function() {
    return new TagItem();
};

CacheDataStore = function() {
    var _formprefix = "";
    
var key = "";
this.setKey = function(key) { 
    this.key = key;
    return this;
};
this.getKey = function() {
    return this.key;
};
var value = "";
this.setValue = function(value) { 
    this.value = value;
    return this;
};
this.getValue = function() {
    return this.value;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setKey(json["key"]);
		this.setValue(json["value"]);
		this.setExpiryTime(json["expiry_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getKey()) json += '"key"' + ":" + '"' + jsonEscape(this.getKey())  + '",';
		if(this.getValue()) json += '"value"' + ":" + '"' + jsonEscape(this.getValue())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(CacheDataStore.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.key && !(/^([A-Za-z0-9_.\-]+)$/).test(this.key)) { throw new ValidationError(_formprefix + "key", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
CacheDataStore.path = "cachedatastore";
CacheDataStore.newBuilder = function() {
    return new CacheDataStore();
};

AppAccountMember = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidType = "User";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var zarid = "";
this.setZarid = function(zarid) { 
    this.zarid = zarid;
    return this;
};
this.getZarid = function() {
    return this.zarid;
};
var isActive = "1";
this.setIsActive = function(isActive) { 
    this.isActive = isActive;
    return this;
};
this.getIsActive = function() {
    return this.isActive;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidType(json["zid_type"]);
		this.setZarid(json["zarid"]);
		this.setIsActive(json["is_active"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getZarid()) json += '"zarid"' + ":" + '"' + jsonEscape(this.getZarid())  + '",';
		if(this.getIsActive()) json += '"is_active"' + ":" + '"' + jsonEscape(this.getIsActive())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccountMember.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.zarid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zarid)) { throw new ValidationError(_formprefix + "zarid", ValidationError.PATTERN_FAILED);}
if(this.isActive && !Validator.INTEGER.test(this.isActive)) { throw new ValidationError(_formprefix + "is_active", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAccountMember.path = "appaccountmember";
AppAccountMember.newBuilder = function() {
    return new AppAccountMember();
};

SAMLSpAppAttribute = function() {
    var _formprefix = "";
    
var attributeNameApl = "";
this.setAttributeNameApl = function(attributeNameApl) { 
    this.attributeNameApl = attributeNameApl;
    return this;
};
this.getAttributeNameApl = function() {
    return this.attributeNameApl;
};
var attributeName = "";
this.setAttributeName = function(attributeName) { 
    this.attributeName = attributeName;
    return this;
};
this.getAttributeName = function() {
    return this.attributeName;
};
var attributeValue = "-1";
this.setAttributeValue = function(attributeValue) { 
    this.attributeValue = attributeValue;
    return this;
};
this.getAttributeValue = function() {
    return this.attributeValue;
};
var customAttributeValue = "";
this.setCustomAttributeValue = function(customAttributeValue) { 
    this.customAttributeValue = customAttributeValue;
    return this;
};
this.getCustomAttributeValue = function() {
    return this.customAttributeValue;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAttributeNameApl(json["attribute_name_apl"]);
		this.setAttributeName(json["attribute_name"]);
		this.setAttributeValue(json["attribute_value"]);
		this.setCustomAttributeValue(json["custom_attribute_value"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAttributeNameApl()) json += '"attribute_name_apl"' + ":" + '"' + jsonEscape(this.getAttributeNameApl())  + '",';
		if(this.getAttributeName()) json += '"attribute_name"' + ":" + '"' + jsonEscape(this.getAttributeName())  + '",';
		if(this.getAttributeValue()) json += '"attribute_value"' + ":" + '"' + jsonEscape(this.getAttributeValue())  + '",';
		if(this.getCustomAttributeValue()) json += '"custom_attribute_value"' + ":" + '"' + jsonEscape(this.getCustomAttributeValue())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SAMLSpAppAttribute.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.attributeNameApl && !(/xss:throwerror/).test(this.attributeNameApl)) { throw new ValidationError(_formprefix + "attribute_name_apl", ValidationError.PATTERN_FAILED);}
if(this.attributeName && !(/xss:throwerror/).test(this.attributeName)) { throw new ValidationError(_formprefix + "attribute_name", ValidationError.PATTERN_FAILED);}
if(this.attributeValue && !Validator.INTEGER.test(this.attributeValue)) { throw new ValidationError(_formprefix + "attribute_value", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SAMLSpAppAttribute.path = "samlspappattribute";
SAMLSpAppAttribute.newBuilder = function() {
    return new SAMLSpAppAttribute();
};

OAuthKeys = function() {
    var _formprefix = "";
    
var keyId = "";
this.setKeyId = function(keyId) { 
    this.keyId = keyId;
    return this;
};
this.getKeyId = function() {
    return this.keyId;
};
var publicKey = "";
this.setPublicKey = function(publicKey) { 
    this.publicKey = publicKey;
    return this;
};
this.getPublicKey = function() {
    return this.publicKey;
};
var privateKey = "";
this.setPrivateKey = function(privateKey) { 
    this.privateKey = privateKey;
    return this;
};
this.getPrivateKey = function() {
    return this.privateKey;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setKeyId(json["key_id"]);
		this.setPublicKey(json["public_key"]);
		this.setPrivateKey(json["private_key"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getKeyId()) json += '"key_id"' + ":" + '"' + jsonEscape(this.getKeyId())  + '",';
		if(this.getPublicKey()) json += '"public_key"' + ":" + '"' + jsonEscape(this.getPublicKey())  + '",';
		if(this.getPrivateKey()) json += '"private_key"' + ":" + '"' + jsonEscape(this.getPrivateKey())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthKeys.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.keyId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.keyId)) { throw new ValidationError(_formprefix + "key_id", ValidationError.PATTERN_FAILED);}
if(this.publicKey && !(/^[a-zA-Z0-9_\-]+$/).test(this.publicKey)) { throw new ValidationError(_formprefix + "public_key", ValidationError.PATTERN_FAILED);}
if(this.privateKey && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.privateKey)) { throw new ValidationError(_formprefix + "private_key", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthKeys.path = "oauthkeys";
OAuthKeys.newBuilder = function() {
    return new OAuthKeys();
};

AuthDomain = function() {
    var _formprefix = "";
    
var domainName = "";
this.setDomainName = function(domainName) { 
    this.domainName = domainName;
    return this;
};
this.getDomainName = function() {
    return this.domainName;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var allowedAuthTypes = "0";
this.setAllowedAuthTypes = function(allowedAuthTypes) { 
    this.allowedAuthTypes = allowedAuthTypes;
    return this;
};
this.getAllowedAuthTypes = function() {
    return this.allowedAuthTypes;
};
var configuredAuthTypes = "0";
this.setConfiguredAuthTypes = function(configuredAuthTypes) { 
    this.configuredAuthTypes = configuredAuthTypes;
    return this;
};
this.getConfiguredAuthTypes = function() {
    return this.configuredAuthTypes;
};
var allowedFailedLoginAttempts = "-1";
this.setAllowedFailedLoginAttempts = function(allowedFailedLoginAttempts) { 
    this.allowedFailedLoginAttempts = allowedFailedLoginAttempts;
    return this;
};
this.getAllowedFailedLoginAttempts = function() {
    return this.allowedFailedLoginAttempts;
};
var lockPeriod = "";
this.setLockPeriod = function(lockPeriod) { 
    this.lockPeriod = lockPeriod;
    return this;
};
this.getLockPeriod = function() {
    return this.lockPeriod;
};
var duration = "";
this.setDuration = function(duration) { 
    this.duration = duration;
    return this;
};
this.getDuration = function() {
    return this.duration;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var authdomainsignup = undefined;
this.setAuthdomainsignup = function(authdomainsignup) { 
    this.authdomainsignup = authdomainsignup;
    return this;
};
this.getAuthdomainsignup = function() {
    return this.authdomainsignup;
};
var authsecret = undefined;
this.setAuthsecrets = function(authsecret) { 
    this.authsecret = authsecret;
    return this;
};
this.getAuthsecrets = function() {
    return this.authsecret;
};
this.addAuthsecret = function(authsecret) { 
 if(!this.authsecret) this.authsecret = new Array(); 
  this.authsecret.push(authsecret); 
 return this;
};

var saml = undefined;
this.setSaml = function(saml) { 
    this.saml = saml;
    return this;
};
this.getSaml = function() {
    return this.saml;
};
var authorizedip = undefined;
this.setAuthorizedips = function(authorizedip) { 
    this.authorizedip = authorizedip;
    return this;
};
this.getAuthorizedips = function() {
    return this.authorizedip;
};
this.addAuthorizedip = function(authorizedip) { 
 if(!this.authorizedip) this.authorizedip = new Array(); 
  this.authorizedip.push(authorizedip); 
 return this;
};

var passwordpolicy = undefined;
this.setPasswordpolicy = function(passwordpolicy) { 
    this.passwordpolicy = passwordpolicy;
    return this;
};
this.getPasswordpolicy = function() {
    return this.passwordpolicy;
};
var userdomain = undefined;
this.setUserdomains = function(userdomain) { 
    this.userdomain = userdomain;
    return this;
};
this.getUserdomains = function() {
    return this.userdomain;
};
this.addUserdomain = function(userdomain) { 
 if(!this.userdomain) this.userdomain = new Array(); 
  this.userdomain.push(userdomain); 
 return this;
};

var authdomainpolicy = undefined;
this.setAuthdomainpolicys = function(authdomainpolicy) { 
    this.authdomainpolicy = authdomainpolicy;
    return this;
};
this.getAuthdomainpolicys = function() {
    return this.authdomainpolicy;
};
this.addAuthdomainpolicy = function(authdomainpolicy) { 
 if(!this.authdomainpolicy) this.authdomainpolicy = new Array(); 
  this.authdomainpolicy.push(authdomainpolicy); 
 return this;
};

var mfapolicy = undefined;
this.setMfapolicy = function(mfapolicy) { 
    this.mfapolicy = mfapolicy;
    return this;
};
this.getMfapolicy = function() {
    return this.mfapolicy;
};
var jwtconfiguration = undefined;
this.setJwtconfiguration = function(jwtconfiguration) { 
    this.jwtconfiguration = jwtconfiguration;
    return this;
};
this.getJwtconfiguration = function() {
    return this.jwtconfiguration;
};
var whitelistedclients = undefined;
this.setWhitelistedclientss = function(whitelistedclients) { 
    this.whitelistedclients = whitelistedclients;
    return this;
};
this.getWhitelistedclientss = function() {
    return this.whitelistedclients;
};
this.addWhitelistedclients = function(whitelistedclients) { 
 if(!this.whitelistedclients) this.whitelistedclients = new Array(); 
  this.whitelistedclients.push(whitelistedclients); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDomainName(json["domain_name"]);
		this.setDisplayName(json["display_name"]);
		this.setAllowedAuthTypes(json["allowed_auth_types"]);
		this.setConfiguredAuthTypes(json["configured_auth_types"]);
		this.setAllowedFailedLoginAttempts(json["allowed_failed_login_attempts"]);
		this.setLockPeriod(json["lock_period"]);
		this.setDuration(json["duration"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setAuthdomainsignup(URI.getResource(json["authDomainSignup"],"authdomainsignup"));
		this.setAuthsecrets(URI.getResourceArray(json["authSecret"],"authsecret"));
		this.setSaml(URI.getResource(json["saml"],"saml"));
		this.setAuthorizedips(URI.getResourceArray(json["authorizedIp"],"authorizedip"));
		this.setPasswordpolicy(URI.getResource(json["passwordPolicy"],"passwordpolicy"));
		this.setUserdomains(URI.getResourceArray(json["userDomain"],"userdomain"));
		this.setAuthdomainpolicys(URI.getResourceArray(json["authDomainPolicy"],"authdomainpolicy"));
		this.setMfapolicy(URI.getResource(json["mFAPolicy"],"mfapolicy"));
		this.setJwtconfiguration(URI.getResource(json["jWTConfiguration"],"jwtconfiguration"));
		this.setWhitelistedclientss(URI.getResourceArray(json["whiteListedClients"],"whitelistedclients"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDomainName()) json += '"domain_name"' + ":" + '"' + jsonEscape(this.getDomainName())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getAllowedAuthTypes()) json += '"allowed_auth_types"' + ":" + '"' + jsonEscape(this.getAllowedAuthTypes())  + '",';
		if(this.getConfiguredAuthTypes()) json += '"configured_auth_types"' + ":" + '"' + jsonEscape(this.getConfiguredAuthTypes())  + '",';
		if(this.getAllowedFailedLoginAttempts()) json += '"allowed_failed_login_attempts"' + ":" + '"' + jsonEscape(this.getAllowedFailedLoginAttempts())  + '",';
		if(this.getLockPeriod()) json += '"lock_period"' + ":" + '"' + jsonEscape(this.getLockPeriod())  + '",';
		if(this.getDuration()) json += '"duration"' + ":" + '"' + jsonEscape(this.getDuration())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getAuthdomainsignup()) json += '"authDomainSignup"' + ":" + this.getAuthdomainsignup().toJSON()  + ',';
		if(this.getAuthsecrets()) json += '"authSecret"' + ":" + URI.toJSONArray(this.getAuthsecrets())  + ',';
		if(this.getSaml()) json += '"saml"' + ":" + this.getSaml().toJSON()  + ',';
		if(this.getAuthorizedips()) json += '"authorizedIp"' + ":" + URI.toJSONArray(this.getAuthorizedips())  + ',';
		if(this.getPasswordpolicy()) json += '"passwordPolicy"' + ":" + this.getPasswordpolicy().toJSON()  + ',';
		if(this.getUserdomains()) json += '"userDomain"' + ":" + URI.toJSONArray(this.getUserdomains())  + ',';
		if(this.getAuthdomainpolicys()) json += '"authDomainPolicy"' + ":" + URI.toJSONArray(this.getAuthdomainpolicys())  + ',';
		if(this.getMfapolicy()) json += '"mFAPolicy"' + ":" + this.getMfapolicy().toJSON()  + ',';
		if(this.getJwtconfiguration()) json += '"jWTConfiguration"' + ":" + this.getJwtconfiguration().toJSON()  + ',';
		if(this.getWhitelistedclientss()) json += '"whiteListedClients"' + ":" + URI.toJSONArray(this.getWhitelistedclientss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AuthDomain.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.domainName && !(/^([\p{L}\p{M}\p{N}]([\p{L}\p{M}\p{N}\-]{0,61}[\p{L}\p{M}\p{N}])?\.)+[\p{L}\p{M}]{2,6}$/).test(this.domainName)) { throw new ValidationError(_formprefix + "domain_name", ValidationError.PATTERN_FAILED);}
if(this.allowedAuthTypes && !Validator.INTEGER.test(this.allowedAuthTypes)) { throw new ValidationError(_formprefix + "allowed_auth_types", ValidationError.PATTERN_FAILED);}
if(this.configuredAuthTypes && !Validator.INTEGER.test(this.configuredAuthTypes)) { throw new ValidationError(_formprefix + "configured_auth_types", ValidationError.PATTERN_FAILED);}
if(this.allowedFailedLoginAttempts && !Validator.INTEGER.test(this.allowedFailedLoginAttempts)) { throw new ValidationError(_formprefix + "allowed_failed_login_attempts", ValidationError.PATTERN_FAILED);}
if(this.lockPeriod && !Validator.INTEGER.test(this.lockPeriod)) { throw new ValidationError(_formprefix + "lock_period", ValidationError.PATTERN_FAILED);}
if(this.duration && !Validator.INTEGER.test(this.duration)) { throw new ValidationError(_formprefix + "duration", ValidationError.PATTERN_FAILED);}
if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.authdomainsignup) { this.authdomainsignup.validate(); }
if(this.authsecret) { for(i=0; i < this.authsecret.length; i++ ) { this.authsecret[i].validate(); } }
if(this.saml) { this.saml.validate(); }
if(this.authorizedip) { for(i=0; i < this.authorizedip.length; i++ ) { this.authorizedip[i].validate(); } }
if(this.passwordpolicy) { this.passwordpolicy.validate(); }
if(this.userdomain) { for(i=0; i < this.userdomain.length; i++ ) { this.userdomain[i].validate(); } }
if(this.authdomainpolicy) { for(i=0; i < this.authdomainpolicy.length; i++ ) { this.authdomainpolicy[i].validate(); } }
if(this.mfapolicy) { this.mfapolicy.validate(); }
if(this.jwtconfiguration) { this.jwtconfiguration.validate(); }
if(this.whitelistedclients) { for(i=0; i < this.whitelistedclients.length; i++ ) { this.whitelistedclients[i].validate(); } }

	return this;
    }
}
AuthDomain.path = "authdomain";
AuthDomain.newBuilder = function() {
    return new AuthDomain();
};

Tag = function() {
    var _formprefix = "";
    
var tagName = "";
this.setTagName = function(tagName) { 
    this.tagName = tagName;
    return this;
};
this.getTagName = function() {
    return this.tagName;
};
var tagType = "";
this.setTagType = function(tagType) { 
    this.tagType = tagType;
    return this;
};
this.getTagType = function() {
    return this.tagType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var tagitem = undefined;
this.setTagitems = function(tagitem) { 
    this.tagitem = tagitem;
    return this;
};
this.getTagitems = function() {
    return this.tagitem;
};
this.addTagitem = function(tagitem) { 
 if(!this.tagitem) this.tagitem = new Array(); 
  this.tagitem.push(tagitem); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTagName(json["tag_name"]);
		this.setTagType(json["tag_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setTagitems(URI.getResourceArray(json["tagItem"],"tagitem"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTagName()) json += '"tag_name"' + ":" + '"' + jsonEscape(this.getTagName())  + '",';
		if(this.getTagType()) json += '"tag_type"' + ":" + '"' + jsonEscape(this.getTagType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getTagitems()) json += '"tagItem"' + ":" + URI.toJSONArray(this.getTagitems())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Tag.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.tagName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.tagName)) { throw new ValidationError(_formprefix + "tag_name", ValidationError.PATTERN_FAILED);}
if(this.tagType && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.tagType)) { throw new ValidationError(_formprefix + "tag_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.tagitem) { for(i=0; i < this.tagitem.length; i++ ) { this.tagitem[i].validate(); } }

	return this;
    }
}
Tag.path = "tag";
Tag.newBuilder = function() {
    return new Tag();
};

UserSecretKey = function() {
    var _formprefix = "";
    
var secretKey = "";
this.setSecretKey = function(secretKey) { 
    this.secretKey = secretKey;
    return this;
};
this.getSecretKey = function() {
    return this.secretKey;
};
var tokenId = "";
this.setTokenId = function(tokenId) { 
    this.tokenId = tokenId;
    return this;
};
this.getTokenId = function() {
    return this.tokenId;
};
var keyLabel = "";
this.setKeyLabel = function(keyLabel) { 
    this.keyLabel = keyLabel;
    return this;
};
this.getKeyLabel = function() {
    return this.keyLabel;
};
var type = "Smart Phone";
this.setType = function(type) { 
    this.type = type;
    return this;
};
this.getType = function() {
    return this.type;
};
var timePeriod = "30";
this.setTimePeriod = function(timePeriod) { 
    this.timePeriod = timePeriod;
    return this;
};
this.getTimePeriod = function() {
    return this.timePeriod;
};
var codeSize = "6";
this.setCodeSize = function(codeSize) { 
    this.codeSize = codeSize;
    return this;
};
this.getCodeSize = function() {
    return this.codeSize;
};
var isVerified = "false";
this.setIsVerified = function(isVerified) { 
    this.isVerified = isVerified;
    return this;
};
this.getIsVerified = function() {
    return this.isVerified;
};
var isPrimary = "false";
this.setIsPrimary = function(isPrimary) { 
    this.isPrimary = isPrimary;
    return this;
};
this.getIsPrimary = function() {
    return this.isPrimary;
};
var keyType = "0";
this.setKeyType = function(keyType) { 
    this.keyType = keyType;
    return this;
};
this.getKeyType = function() {
    return this.keyType;
};
var hmacAlgorithm = "SHA1";
this.setHmacAlgorithm = function(hmacAlgorithm) { 
    this.hmacAlgorithm = hmacAlgorithm;
    return this;
};
this.getHmacAlgorithm = function() {
    return this.hmacAlgorithm;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setSecretKey(json["secret_key"]);
		this.setTokenId(json["token_id"]);
		this.setKeyLabel(json["key_label"]);
		this.setType(json["type"]);
		this.setTimePeriod(json["time_period"]);
		this.setCodeSize(json["code_size"]);
		this.setIsVerified(json["is_verified"]);
		this.setIsPrimary(json["is_primary"]);
		this.setKeyType(json["key_type"]);
		this.setHmacAlgorithm(json["hmac_algorithm"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getSecretKey()) json += '"secret_key"' + ":" + '"' + jsonEscape(this.getSecretKey())  + '",';
		if(this.getTokenId()) json += '"token_id"' + ":" + '"' + jsonEscape(this.getTokenId())  + '",';
		if(this.getKeyLabel()) json += '"key_label"' + ":" + '"' + jsonEscape(this.getKeyLabel())  + '",';
		if(this.getType()) json += '"type"' + ":" + '"' + jsonEscape(this.getType())  + '",';
		if(this.getTimePeriod()) json += '"time_period"' + ":" + '"' + jsonEscape(this.getTimePeriod())  + '",';
		if(this.getCodeSize()) json += '"code_size"' + ":" + '"' + jsonEscape(this.getCodeSize())  + '",';
		if(this.getIsVerified()) json += '"is_verified"' + ":" + '"' + jsonEscape(this.getIsVerified())  + '",';
		if(this.getIsPrimary()) json += '"is_primary"' + ":" + '"' + jsonEscape(this.getIsPrimary())  + '",';
		if(this.getKeyType()) json += '"key_type"' + ":" + '"' + jsonEscape(this.getKeyType())  + '",';
		if(this.getHmacAlgorithm()) json += '"hmac_algorithm"' + ":" + '"' + jsonEscape(this.getHmacAlgorithm())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserSecretKey.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.secretKey && !(/dontdisturb/).test(this.secretKey)) { throw new ValidationError(_formprefix + "secret_key", ValidationError.PATTERN_FAILED);}
if(this.tokenId && !Validator.INTEGER.test(this.tokenId)) { throw new ValidationError(_formprefix + "token_id", ValidationError.PATTERN_FAILED);}
if(this.keyLabel && !(/xss:throwerror/).test(this.keyLabel)) { throw new ValidationError(_formprefix + "key_label", ValidationError.PATTERN_FAILED);}
if(this.timePeriod && !Validator.INTEGER.test(this.timePeriod)) { throw new ValidationError(_formprefix + "time_period", ValidationError.PATTERN_FAILED);}
if(this.codeSize && !Validator.INTEGER.test(this.codeSize)) { throw new ValidationError(_formprefix + "code_size", ValidationError.PATTERN_FAILED);}
if(this.isVerified && !Validator.BOOLEAN.test(this.isVerified)) { throw new ValidationError(_formprefix + "is_verified", ValidationError.PATTERN_FAILED);}
if(this.isPrimary && !Validator.BOOLEAN.test(this.isPrimary)) { throw new ValidationError(_formprefix + "is_primary", ValidationError.PATTERN_FAILED);}
if(this.keyType && !Validator.INTEGER.test(this.keyType)) { throw new ValidationError(_formprefix + "key_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserSecretKey.path = "usersecretkey";
UserSecretKey.newBuilder = function() {
    return new UserSecretKey();
};

Policy = function() {
    var _formprefix = "";
    
var policyKey = "";
this.setPolicyKey = function(policyKey) { 
    this.policyKey = policyKey;
    return this;
};
this.getPolicyKey = function() {
    return this.policyKey;
};
var policyValue = "";
this.setPolicyValue = function(policyValue) { 
    this.policyValue = policyValue;
    return this;
};
this.getPolicyValue = function() {
    return this.policyValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPolicyKey(json["policy_key"]);
		this.setPolicyValue(json["policy_value"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPolicyKey()) json += '"policy_key"' + ":" + '"' + jsonEscape(this.getPolicyKey())  + '",';
		if(this.getPolicyValue()) json += '"policy_value"' + ":" + '"' + jsonEscape(this.getPolicyValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Policy.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.policyKey && !(/^([A-Za-z0-9_.\-]+)$/).test(this.policyKey)) { throw new ValidationError(_formprefix + "policy_key", ValidationError.PATTERN_FAILED);}
if(this.policyValue && !(/^([A-Za-z0-9_.\-]+)$/).test(this.policyValue)) { throw new ValidationError(_formprefix + "policy_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Policy.path = "policy";
Policy.newBuilder = function() {
    return new Policy();
};

ServiceOrgConfiguration = function() {
    var _formprefix = "";
    
var configName = "";
this.setConfigName = function(configName) { 
    this.configName = configName;
    return this;
};
this.getConfigName = function() {
    return this.configName;
};
var configValue = "";
this.setConfigValue = function(configValue) { 
    this.configValue = configValue;
    return this;
};
this.getConfigValue = function() {
    return this.configValue;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setConfigName(json["config_name"]);
		this.setConfigValue(json["config_value"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getConfigName()) json += '"config_name"' + ":" + '"' + jsonEscape(this.getConfigName())  + '",';
		if(this.getConfigValue()) json += '"config_value"' + ":" + '"' + jsonEscape(this.getConfigValue())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgConfiguration.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.configName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.configName)) { throw new ValidationError(_formprefix + "config_name", ValidationError.PATTERN_FAILED);}
if(this.configValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.configValue)) { throw new ValidationError(_formprefix + "config_value", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgConfiguration.path = "serviceorgconfiguration";
ServiceOrgConfiguration.newBuilder = function() {
    return new ServiceOrgConfiguration();
};

ConditionalAccess = function() {
    var _formprefix = "";
    
var conditionType = "1";
this.setConditionType = function(conditionType) { 
    this.conditionType = conditionType;
    return this;
};
this.getConditionType = function() {
    return this.conditionType;
};
var conditionCriteria = "1";
this.setConditionCriteria = function(conditionCriteria) { 
    this.conditionCriteria = conditionCriteria;
    return this;
};
this.getConditionCriteria = function() {
    return this.conditionCriteria;
};
var conditionValue = "";
this.setConditionValue = function(conditionValue) { 
    this.conditionValue = conditionValue;
    return this;
};
this.getConditionValue = function() {
    return this.conditionValue;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setConditionType(json["condition_type"]);
		this.setConditionCriteria(json["condition_criteria"]);
		this.setConditionValue(json["condition_value"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getConditionType()) json += '"condition_type"' + ":" + '"' + jsonEscape(this.getConditionType())  + '",';
		if(this.getConditionCriteria()) json += '"condition_criteria"' + ":" + '"' + jsonEscape(this.getConditionCriteria())  + '",';
		if(this.getConditionValue()) json += '"condition_value"' + ":" + '"' + jsonEscape(this.getConditionValue())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ConditionalAccess.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ConditionalAccess.path = "conditionalaccess";
ConditionalAccess.newBuilder = function() {
    return new ConditionalAccess();
};

MailTemplateProps = function() {
    var _formprefix = "";
    
var subject = "";
this.setSubject = function(subject) { 
    this.subject = subject;
    return this;
};
this.getSubject = function() {
    return this.subject;
};
var fromAddress = "";
this.setFromAddress = function(fromAddress) { 
    this.fromAddress = fromAddress;
    return this;
};
this.getFromAddress = function() {
    return this.fromAddress;
};
var replyToAddress = "";
this.setReplyToAddress = function(replyToAddress) { 
    this.replyToAddress = replyToAddress;
    return this;
};
this.getReplyToAddress = function() {
    return this.replyToAddress;
};
var plainText = "";
this.setPlainText = function(plainText) { 
    this.plainText = plainText;
    return this;
};
this.getPlainText = function() {
    return this.plainText;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setSubject(json["subject"]);
		this.setFromAddress(json["from_address"]);
		this.setReplyToAddress(json["reply_to_address"]);
		this.setPlainText(json["plain_text"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getSubject()) json += '"subject"' + ":" + '"' + jsonEscape(this.getSubject())  + '",';
		if(this.getFromAddress()) json += '"from_address"' + ":" + '"' + jsonEscape(this.getFromAddress())  + '",';
		if(this.getReplyToAddress()) json += '"reply_to_address"' + ":" + '"' + jsonEscape(this.getReplyToAddress())  + '",';
		if(this.getPlainText()) json += '"plain_text"' + ":" + '"' + jsonEscape(this.getPlainText())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MailTemplateProps.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.subject && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.subject)) { throw new ValidationError(_formprefix + "subject", ValidationError.PATTERN_FAILED);}
if(this.fromAddress && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.fromAddress)) { throw new ValidationError(_formprefix + "from_address", ValidationError.PATTERN_FAILED);}
if(this.replyToAddress && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.replyToAddress)) { throw new ValidationError(_formprefix + "reply_to_address", ValidationError.PATTERN_FAILED);}
if(this.plainText && !(/dontdisturb/).test(this.plainText)) { throw new ValidationError(_formprefix + "plain_text", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
MailTemplateProps.path = "mailtemplateprops";
MailTemplateProps.newBuilder = function() {
    return new MailTemplateProps();
};

SystemOpenId = function() {
    var _formprefix = "";
    
var openIdApl = "";
this.setOpenIdApl = function(openIdApl) { 
    this.openIdApl = openIdApl;
    return this;
};
this.getOpenIdApl = function() {
    return this.openIdApl;
};
var openId = "";
this.setOpenId = function(openId) { 
    this.openId = openId;
    return this;
};
this.getOpenId = function() {
    return this.openId;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var idp = "0";
this.setIdp = function(idp) { 
    this.idp = idp;
    return this;
};
this.getIdp = function() {
    return this.idp;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setOpenIdApl(json["open_id_apl"]);
		this.setOpenId(json["open_id"]);
		this.setZuid(json["zuid"]);
		this.setEmailId(json["email_id"]);
		this.setIdp(json["idp"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getOpenIdApl()) json += '"open_id_apl"' + ":" + '"' + jsonEscape(this.getOpenIdApl())  + '",';
		if(this.getOpenId()) json += '"open_id"' + ":" + '"' + jsonEscape(this.getOpenId())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getIdp()) json += '"idp"' + ":" + '"' + jsonEscape(this.getIdp())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SystemOpenId.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.openIdApl && !(/xss:throwerror/).test(this.openIdApl)) { throw new ValidationError(_formprefix + "open_id_apl", ValidationError.PATTERN_FAILED);}
if(this.openId && !(/^([A-Za-z0-9_.\-]+)$/).test(this.openId)) { throw new ValidationError(_formprefix + "open_id", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.idp && !Validator.INTEGER.test(this.idp)) { throw new ValidationError(_formprefix + "idp", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SystemOpenId.path = "systemopenid";
SystemOpenId.newBuilder = function() {
    return new SystemOpenId();
};

OAuthAccessGrantScopes = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var allowedOperations = "";
this.setAllowedOperations = function(allowedOperations) { 
    this.allowedOperations = allowedOperations;
    return this;
};
this.getAllowedOperations = function() {
    return this.allowedOperations;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setAllowedOperations(json["allowed_operations"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getAllowedOperations()) json += '"allowed_operations"' + ":" + '"' + jsonEscape(this.getAllowedOperations())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthAccessGrantScopes.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.allowedOperations && !Validator.INTEGER.test(this.allowedOperations)) { throw new ValidationError(_formprefix + "allowed_operations", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthAccessGrantScopes.path = "oauthaccessgrantscopes";
OAuthAccessGrantScopes.newBuilder = function() {
    return new OAuthAccessGrantScopes();
};

ZAAID = function() {
    var _formprefix = "";
    
var zaaid = "";
this.setZaaid = function(zaaid) { 
    this.zaaid = zaaid;
    return this;
};
this.getZaaid = function() {
    return this.zaaid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZaaid(json["zaaid"]);
		this.setZaid(json["zaid"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZaaid()) json += '"zaaid"' + ":" + '"' + jsonEscape(this.getZaaid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ZAAID.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaaid)) { throw new ValidationError(_formprefix + "zaaid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ZAAID.path = "zaaid";
ZAAID.newBuilder = function() {
    return new ZAAID();
};

AccountKYC = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var organisationName = "";
this.setOrganisationName = function(organisationName) { 
    this.organisationName = organisationName;
    return this;
};
this.getOrganisationName = function() {
    return this.organisationName;
};
var industry = "";
this.setIndustry = function(industry) { 
    this.industry = industry;
    return this;
};
this.getIndustry = function() {
    return this.industry;
};
var employeeCount = "-1";
this.setEmployeeCount = function(employeeCount) { 
    this.employeeCount = employeeCount;
    return this;
};
this.getEmployeeCount = function() {
    return this.employeeCount;
};
var orgContactEmailid = "";
this.setOrgContactEmailid = function(orgContactEmailid) { 
    this.orgContactEmailid = orgContactEmailid;
    return this;
};
this.getOrgContactEmailid = function() {
    return this.orgContactEmailid;
};
var firstName = "";
this.setFirstName = function(firstName) { 
    this.firstName = firstName;
    return this;
};
this.getFirstName = function() {
    return this.firstName;
};
var lastName = "";
this.setLastName = function(lastName) { 
    this.lastName = lastName;
    return this;
};
this.getLastName = function() {
    return this.lastName;
};
var mobileNumber = "";
this.setMobileNumber = function(mobileNumber) { 
    this.mobileNumber = mobileNumber;
    return this;
};
this.getMobileNumber = function() {
    return this.mobileNumber;
};
var designation = "";
this.setDesignation = function(designation) { 
    this.designation = designation;
    return this;
};
this.getDesignation = function() {
    return this.designation;
};
var accountkyccontact = undefined;
this.setAccountkyccontacts = function(accountkyccontact) { 
    this.accountkyccontact = accountkyccontact;
    return this;
};
this.getAccountkyccontacts = function() {
    return this.accountkyccontact;
};
this.addAccountkyccontact = function(accountkyccontact) { 
 if(!this.accountkyccontact) this.accountkyccontact = new Array(); 
  this.accountkyccontact.push(accountkyccontact); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setOrganisationName(json["organisation_name"]);
		this.setIndustry(json["industry"]);
		this.setEmployeeCount(json["employee_count"]);
		this.setOrgContactEmailid(json["org_contact_emailid"]);
		this.setFirstName(json["first_name"]);
		this.setLastName(json["last_name"]);
		this.setMobileNumber(json["mobile_number"]);
		this.setDesignation(json["designation"]);
		this.setAccountkyccontacts(URI.getResourceArray(json["accountKYCContact"],"accountkyccontact"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getOrganisationName()) json += '"organisation_name"' + ":" + '"' + jsonEscape(this.getOrganisationName())  + '",';
		if(this.getIndustry()) json += '"industry"' + ":" + '"' + jsonEscape(this.getIndustry())  + '",';
		if(this.getEmployeeCount()) json += '"employee_count"' + ":" + '"' + jsonEscape(this.getEmployeeCount())  + '",';
		if(this.getOrgContactEmailid()) json += '"org_contact_emailid"' + ":" + '"' + jsonEscape(this.getOrgContactEmailid())  + '",';
		if(this.getFirstName()) json += '"first_name"' + ":" + '"' + jsonEscape(this.getFirstName())  + '",';
		if(this.getLastName()) json += '"last_name"' + ":" + '"' + jsonEscape(this.getLastName())  + '",';
		if(this.getMobileNumber()) json += '"mobile_number"' + ":" + '"' + jsonEscape(this.getMobileNumber())  + '",';
		if(this.getDesignation()) json += '"designation"' + ":" + '"' + jsonEscape(this.getDesignation())  + '",';
		if(this.getAccountkyccontacts()) json += '"accountKYCContact"' + ":" + URI.toJSONArray(this.getAccountkyccontacts())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountKYC.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.organisationName && !(/xss:throwerror/).test(this.organisationName)) { throw new ValidationError(_formprefix + "organisation_name", ValidationError.PATTERN_FAILED);}
if(this.industry && !(/xss:throwerror/).test(this.industry)) { throw new ValidationError(_formprefix + "industry", ValidationError.PATTERN_FAILED);}
if(this.employeeCount && !Validator.INTEGER.test(this.employeeCount)) { throw new ValidationError(_formprefix + "employee_count", ValidationError.PATTERN_FAILED);}
if(this.orgContactEmailid && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.orgContactEmailid)) { throw new ValidationError(_formprefix + "org_contact_emailid", ValidationError.PATTERN_FAILED);}
if(this.firstName && !(/xss:throwerror/).test(this.firstName)) { throw new ValidationError(_formprefix + "first_name", ValidationError.PATTERN_FAILED);}
if(this.lastName && !(/xss:throwerror/).test(this.lastName)) { throw new ValidationError(_formprefix + "last_name", ValidationError.PATTERN_FAILED);}
if(this.mobileNumber && !(/xss:throwerror/).test(this.mobileNumber)) { throw new ValidationError(_formprefix + "mobile_number", ValidationError.PATTERN_FAILED);}
if(this.designation && !(/xss:throwerror/).test(this.designation)) { throw new ValidationError(_formprefix + "designation", ValidationError.PATTERN_FAILED);}
if(this.accountkyccontact) { for(i=0; i < this.accountkyccontact.length; i++ ) { this.accountkyccontact[i].validate(); } }

	return this;
    }
}
AccountKYC.path = "accountkyc";
AccountKYC.newBuilder = function() {
    return new AccountKYC();
};

TFAAuditTemplate = function() {
    var _formprefix = "";
    
var tfaauditId = "";
this.setTfaauditId = function(tfaauditId) { 
    this.tfaauditId = tfaauditId;
    return this;
};
this.getTfaauditId = function() {
    return this.tfaauditId;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var operationId = "1";
this.setOperationId = function(operationId) { 
    this.operationId = operationId;
    return this;
};
this.getOperationId = function() {
    return this.operationId;
};
var status = "";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var errors = "";
this.setErrors = function(errors) { 
    this.errors = errors;
    return this;
};
this.getErrors = function() {
    return this.errors;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var startedTime = "";
this.setStartedTime = function(startedTime) { 
    this.startedTime = startedTime;
    return this;
};
this.getStartedTime = function() {
    return this.startedTime;
};
var alteredTime = "";
this.setAlteredTime = function(alteredTime) { 
    this.alteredTime = alteredTime;
    return this;
};
this.getAlteredTime = function() {
    return this.alteredTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTfaauditId(json["tfaaudit_id"]);
		this.setZaid(json["zaid"]);
		this.setZid(json["zid"]);
		this.setAppId(json["app_id"]);
		this.setOperationId(json["operation_id"]);
		this.setStatus(json["status"]);
		this.setErrors(json["errors"]);
		this.setUserAgent(json["user_agent"]);
		this.setReferrer(json["referrer"]);
		this.setStartedTime(json["started_time"]);
		this.setAlteredTime(json["altered_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTfaauditId()) json += '"tfaaudit_id"' + ":" + '"' + jsonEscape(this.getTfaauditId())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getOperationId()) json += '"operation_id"' + ":" + '"' + jsonEscape(this.getOperationId())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getErrors()) json += '"errors"' + ":" + '"' + jsonEscape(this.getErrors())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getStartedTime()) json += '"started_time"' + ":" + '"' + jsonEscape(this.getStartedTime())  + '",';
		if(this.getAlteredTime()) json += '"altered_time"' + ":" + '"' + jsonEscape(this.getAlteredTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(TFAAuditTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.tfaauditId && !(/dontdisturb/).test(this.tfaauditId)) { throw new ValidationError(_formprefix + "tfaaudit_id", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.appId && !Validator.INTEGER.test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.operationId && !Validator.INTEGER.test(this.operationId)) { throw new ValidationError(_formprefix + "operation_id", ValidationError.PATTERN_FAILED);}
if(this.status && !(/dontdisturb/).test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.errors && !(/dontdisturb/).test(this.errors)) { throw new ValidationError(_formprefix + "errors", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.startedTime && !Validator.INTEGER.test(this.startedTime)) { throw new ValidationError(_formprefix + "started_time", ValidationError.PATTERN_FAILED);}
if(this.alteredTime && !Validator.INTEGER.test(this.alteredTime)) { throw new ValidationError(_formprefix + "altered_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
TFAAuditTemplate.path = "tfaaudittemplate";
TFAAuditTemplate.newBuilder = function() {
    return new TFAAuditTemplate();
};

Template = function() {
    var _formprefix = "";
    
var templateName = "";
this.setTemplateName = function(templateName) { 
    this.templateName = templateName;
    return this;
};
this.getTemplateName = function() {
    return this.templateName;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var subject = "";
this.setSubject = function(subject) { 
    this.subject = subject;
    return this;
};
this.getSubject = function() {
    return this.subject;
};
var fromAddress = "";
this.setFromAddress = function(fromAddress) { 
    this.fromAddress = fromAddress;
    return this;
};
this.getFromAddress = function() {
    return this.fromAddress;
};
var replyToAddress = "";
this.setReplyToAddress = function(replyToAddress) { 
    this.replyToAddress = replyToAddress;
    return this;
};
this.getReplyToAddress = function() {
    return this.replyToAddress;
};
var templateHtml = "";
this.setTemplateHtml = function(templateHtml) { 
    this.templateHtml = templateHtml;
    return this;
};
this.getTemplateHtml = function() {
    return this.templateHtml;
};
var plainText = "";
this.setPlainText = function(plainText) { 
    this.plainText = plainText;
    return this;
};
this.getPlainText = function() {
    return this.plainText;
};
var overridable = "true";
this.setOverridable = function(overridable) { 
    this.overridable = overridable;
    return this;
};
this.getOverridable = function() {
    return this.overridable;
};
var templateType = "0";
this.setTemplateType = function(templateType) { 
    this.templateType = templateType;
    return this;
};
this.getTemplateType = function() {
    return this.templateType;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var templateimage = undefined;
this.setTemplateimages = function(templateimage) { 
    this.templateimage = templateimage;
    return this;
};
this.getTemplateimages = function() {
    return this.templateimage;
};
this.addTemplateimage = function(templateimage) { 
 if(!this.templateimage) this.templateimage = new Array(); 
  this.templateimage.push(templateimage); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTemplateName(json["template_name"]);
		this.setDescription(json["description"]);
		this.setSubject(json["subject"]);
		this.setFromAddress(json["from_address"]);
		this.setReplyToAddress(json["reply_to_address"]);
		this.setTemplateHtml(json["template_html"]);
		this.setPlainText(json["plain_text"]);
		this.setOverridable(json["overridable"]);
		this.setTemplateType(json["template_type"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setTemplateimages(URI.getResourceArray(json["templateImage"],"templateimage"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTemplateName()) json += '"template_name"' + ":" + '"' + jsonEscape(this.getTemplateName())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getSubject()) json += '"subject"' + ":" + '"' + jsonEscape(this.getSubject())  + '",';
		if(this.getFromAddress()) json += '"from_address"' + ":" + '"' + jsonEscape(this.getFromAddress())  + '",';
		if(this.getReplyToAddress()) json += '"reply_to_address"' + ":" + '"' + jsonEscape(this.getReplyToAddress())  + '",';
		if(this.getTemplateHtml()) json += '"template_html"' + ":" + '"' + jsonEscape(this.getTemplateHtml())  + '",';
		if(this.getPlainText()) json += '"plain_text"' + ":" + '"' + jsonEscape(this.getPlainText())  + '",';
		if(this.getOverridable()) json += '"overridable"' + ":" + '"' + jsonEscape(this.getOverridable())  + '",';
		if(this.getTemplateType()) json += '"template_type"' + ":" + '"' + jsonEscape(this.getTemplateType())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getTemplateimages()) json += '"templateImage"' + ":" + URI.toJSONArray(this.getTemplateimages())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Template.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.templateName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.templateName)) { throw new ValidationError(_formprefix + "template_name", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.subject && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.subject)) { throw new ValidationError(_formprefix + "subject", ValidationError.PATTERN_FAILED);}
if(this.fromAddress && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.fromAddress)) { throw new ValidationError(_formprefix + "from_address", ValidationError.PATTERN_FAILED);}
if(this.replyToAddress && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.replyToAddress)) { throw new ValidationError(_formprefix + "reply_to_address", ValidationError.PATTERN_FAILED);}
if(this.templateHtml && !(/dontdisturb/).test(this.templateHtml)) { throw new ValidationError(_formprefix + "template_html", ValidationError.PATTERN_FAILED);}
if(this.plainText && !(/dontdisturb/).test(this.plainText)) { throw new ValidationError(_formprefix + "plain_text", ValidationError.PATTERN_FAILED);}
if(this.overridable && !Validator.BOOLEAN.test(this.overridable)) { throw new ValidationError(_formprefix + "overridable", ValidationError.PATTERN_FAILED);}
if(this.templateType && !Validator.INTEGER.test(this.templateType)) { throw new ValidationError(_formprefix + "template_type", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.templateimage) { for(i=0; i < this.templateimage.length; i++ ) { this.templateimage[i].validate(); } }

	return this;
    }
}
Template.path = "template";
Template.newBuilder = function() {
    return new Template();
};

UserOAuthApps = function() {
    var _formprefix = "";
    
var appClientZid = "";
this.setAppClientZid = function(appClientZid) { 
    this.appClientZid = appClientZid;
    return this;
};
this.getAppClientZid = function() {
    return this.appClientZid;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppClientZid(json["app_client_zid"]);
		this.setIpAddress(json["ip_address"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppClientZid()) json += '"app_client_zid"' + ":" + '"' + jsonEscape(this.getAppClientZid())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserOAuthApps.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.appClientZid && !(/^[a-zA-Z0-9_\-]+$/).test(this.appClientZid)) { throw new ValidationError(_formprefix + "app_client_zid", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserOAuthApps.path = "useroauthapps";
UserOAuthApps.newBuilder = function() {
    return new UserOAuthApps();
};

OAuthMobileUserDevice = function() {
    var _formprefix = "";
    
var deviceId = "";
this.setDeviceId = function(deviceId) { 
    this.deviceId = deviceId;
    return this;
};
this.getDeviceId = function() {
    return this.deviceId;
};
var deviceName = "";
this.setDeviceName = function(deviceName) { 
    this.deviceName = deviceName;
    return this;
};
this.getDeviceName = function() {
    return this.deviceName;
};
var deviceModel = "";
this.setDeviceModel = function(deviceModel) { 
    this.deviceModel = deviceModel;
    return this;
};
this.getDeviceModel = function() {
    return this.deviceModel;
};
var deviceType = "0";
this.setDeviceType = function(deviceType) { 
    this.deviceType = deviceType;
    return this;
};
this.getDeviceType = function() {
    return this.deviceType;
};
var mdmToken = "";
this.setMdmToken = function(mdmToken) { 
    this.mdmToken = mdmToken;
    return this;
};
this.getMdmToken = function() {
    return this.mdmToken;
};
var oauthmobileuserdeviceclients = undefined;
this.setOauthmobileuserdeviceclientss = function(oauthmobileuserdeviceclients) { 
    this.oauthmobileuserdeviceclients = oauthmobileuserdeviceclients;
    return this;
};
this.getOauthmobileuserdeviceclientss = function() {
    return this.oauthmobileuserdeviceclients;
};
this.addOauthmobileuserdeviceclients = function(oauthmobileuserdeviceclients) { 
 if(!this.oauthmobileuserdeviceclients) this.oauthmobileuserdeviceclients = new Array(); 
  this.oauthmobileuserdeviceclients.push(oauthmobileuserdeviceclients); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDeviceId(json["device_id"]);
		this.setDeviceName(json["device_name"]);
		this.setDeviceModel(json["device_model"]);
		this.setDeviceType(json["device_type"]);
		this.setMdmToken(json["mdm_token"]);
		this.setOauthmobileuserdeviceclientss(URI.getResourceArray(json["oAuthMobileUserDeviceClients"],"oauthmobileuserdeviceclients"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDeviceId()) json += '"device_id"' + ":" + '"' + jsonEscape(this.getDeviceId())  + '",';
		if(this.getDeviceName()) json += '"device_name"' + ":" + '"' + jsonEscape(this.getDeviceName())  + '",';
		if(this.getDeviceModel()) json += '"device_model"' + ":" + '"' + jsonEscape(this.getDeviceModel())  + '",';
		if(this.getDeviceType()) json += '"device_type"' + ":" + '"' + jsonEscape(this.getDeviceType())  + '",';
		if(this.getMdmToken()) json += '"mdm_token"' + ":" + '"' + jsonEscape(this.getMdmToken())  + '",';
		if(this.getOauthmobileuserdeviceclientss()) json += '"oAuthMobileUserDeviceClients"' + ":" + URI.toJSONArray(this.getOauthmobileuserdeviceclientss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthMobileUserDevice.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.deviceId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.deviceId)) { throw new ValidationError(_formprefix + "device_id", ValidationError.PATTERN_FAILED);}
if(this.deviceName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.deviceName)) { throw new ValidationError(_formprefix + "device_name", ValidationError.PATTERN_FAILED);}
if(this.deviceModel && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.deviceModel)) { throw new ValidationError(_formprefix + "device_model", ValidationError.PATTERN_FAILED);}
if(this.deviceType && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.deviceType)) { throw new ValidationError(_formprefix + "device_type", ValidationError.PATTERN_FAILED);}
if(this.mdmToken && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.mdmToken)) { throw new ValidationError(_formprefix + "mdm_token", ValidationError.PATTERN_FAILED);}
if(this.oauthmobileuserdeviceclients) { for(i=0; i < this.oauthmobileuserdeviceclients.length; i++ ) { this.oauthmobileuserdeviceclients[i].validate(); } }

	return this;
    }
}
OAuthMobileUserDevice.path = "oauthmobileuserdevice";
OAuthMobileUserDevice.newBuilder = function() {
    return new OAuthMobileUserDevice();
};

WhiteListedClients = function() {
    var _formprefix = "";
    
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
var isWhitelisted = "0";
this.setIsWhitelisted = function(isWhitelisted) { 
    this.isWhitelisted = isWhitelisted;
    return this;
};
this.getIsWhitelisted = function() {
    return this.isWhitelisted;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClientZid(json["client_zid"]);
		this.setIsWhitelisted(json["is_whitelisted"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';
		if(this.getIsWhitelisted()) json += '"is_whitelisted"' + ":" + '"' + jsonEscape(this.getIsWhitelisted())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(WhiteListedClients.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.clientZid && !(/^[0-9]+\.[0-9]+$/).test(this.clientZid)) { throw new ValidationError(_formprefix + "client_zid", ValidationError.PATTERN_FAILED);}
if(this.isWhitelisted && !Validator.INTEGER.test(this.isWhitelisted)) { throw new ValidationError(_formprefix + "is_whitelisted", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
WhiteListedClients.path = "whitelistedclients";
WhiteListedClients.newBuilder = function() {
    return new WhiteListedClients();
};

UserLocation = function() {
    var _formprefix = "";
    
var locationNameApl = "";
this.setLocationNameApl = function(locationNameApl) { 
    this.locationNameApl = locationNameApl;
    return this;
};
this.getLocationNameApl = function() {
    return this.locationNameApl;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLocationNameApl(json["location_name_apl"]);
		this.setZuid(json["zuid"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLocationNameApl()) json += '"location_name_apl"' + ":" + '"' + jsonEscape(this.getLocationNameApl())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserLocation.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.locationNameApl && !(/xss:throwerror/).test(this.locationNameApl)) { throw new ValidationError(_formprefix + "location_name_apl", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserLocation.path = "userlocation";
UserLocation.newBuilder = function() {
    return new UserLocation();
};

UniqueIdRange = function() {
    var _formprefix = "";
    
var uniqueIdRangeName = "";
this.setUniqueIdRangeName = function(uniqueIdRangeName) { 
    this.uniqueIdRangeName = uniqueIdRangeName;
    return this;
};
this.getUniqueIdRangeName = function() {
    return this.uniqueIdRangeName;
};
var rangeSize = "";
this.setRangeSize = function(rangeSize) { 
    this.rangeSize = rangeSize;
    return this;
};
this.getRangeSize = function() {
    return this.rangeSize;
};
var rangeResetThreshold = "10";
this.setRangeResetThreshold = function(rangeResetThreshold) { 
    this.rangeResetThreshold = rangeResetThreshold;
    return this;
};
this.getRangeResetThreshold = function() {
    return this.rangeResetThreshold;
};
var reservedUpto = "-1";
this.setReservedUpto = function(reservedUpto) { 
    this.reservedUpto = reservedUpto;
    return this;
};
this.getReservedUpto = function() {
    return this.reservedUpto;
};
var dcRangeResetThreshold = "50";
this.setDcRangeResetThreshold = function(dcRangeResetThreshold) { 
    this.dcRangeResetThreshold = dcRangeResetThreshold;
    return this;
};
this.getDcRangeResetThreshold = function() {
    return this.dcRangeResetThreshold;
};
var dcReservedUpto = "-1";
this.setDcReservedUpto = function(dcReservedUpto) { 
    this.dcReservedUpto = dcReservedUpto;
    return this;
};
this.getDcReservedUpto = function() {
    return this.dcReservedUpto;
};
var uniqueidrangegenerationaudit = undefined;
this.setUniqueidrangegenerationaudits = function(uniqueidrangegenerationaudit) { 
    this.uniqueidrangegenerationaudit = uniqueidrangegenerationaudit;
    return this;
};
this.getUniqueidrangegenerationaudits = function() {
    return this.uniqueidrangegenerationaudit;
};
this.addUniqueidrangegenerationaudit = function(uniqueidrangegenerationaudit) { 
 if(!this.uniqueidrangegenerationaudit) this.uniqueidrangegenerationaudit = new Array(); 
  this.uniqueidrangegenerationaudit.push(uniqueidrangegenerationaudit); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setUniqueIdRangeName(json["unique_id_range_name"]);
		this.setRangeSize(json["range_size"]);
		this.setRangeResetThreshold(json["range_reset_threshold"]);
		this.setReservedUpto(json["reserved_upto"]);
		this.setDcRangeResetThreshold(json["dc_range_reset_threshold"]);
		this.setDcReservedUpto(json["dc_reserved_upto"]);
		this.setUniqueidrangegenerationaudits(URI.getResourceArray(json["uniqueIdRangeGenerationAudit"],"uniqueidrangegenerationaudit"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getUniqueIdRangeName()) json += '"unique_id_range_name"' + ":" + '"' + jsonEscape(this.getUniqueIdRangeName())  + '",';
		if(this.getRangeSize()) json += '"range_size"' + ":" + '"' + jsonEscape(this.getRangeSize())  + '",';
		if(this.getRangeResetThreshold()) json += '"range_reset_threshold"' + ":" + '"' + jsonEscape(this.getRangeResetThreshold())  + '",';
		if(this.getReservedUpto()) json += '"reserved_upto"' + ":" + '"' + jsonEscape(this.getReservedUpto())  + '",';
		if(this.getDcRangeResetThreshold()) json += '"dc_range_reset_threshold"' + ":" + '"' + jsonEscape(this.getDcRangeResetThreshold())  + '",';
		if(this.getDcReservedUpto()) json += '"dc_reserved_upto"' + ":" + '"' + jsonEscape(this.getDcReservedUpto())  + '",';
		if(this.getUniqueidrangegenerationaudits()) json += '"uniqueIdRangeGenerationAudit"' + ":" + URI.toJSONArray(this.getUniqueidrangegenerationaudits())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UniqueIdRange.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.uniqueIdRangeName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.uniqueIdRangeName)) { throw new ValidationError(_formprefix + "unique_id_range_name", ValidationError.PATTERN_FAILED);}
if(this.rangeSize && !Validator.INTEGER.test(this.rangeSize)) { throw new ValidationError(_formprefix + "range_size", ValidationError.PATTERN_FAILED);}
if(this.rangeResetThreshold && !Validator.INTEGER.test(this.rangeResetThreshold)) { throw new ValidationError(_formprefix + "range_reset_threshold", ValidationError.PATTERN_FAILED);}
if(this.reservedUpto && !Validator.INTEGER.test(this.reservedUpto)) { throw new ValidationError(_formprefix + "reserved_upto", ValidationError.PATTERN_FAILED);}
if(this.dcRangeResetThreshold && !Validator.INTEGER.test(this.dcRangeResetThreshold)) { throw new ValidationError(_formprefix + "dc_range_reset_threshold", ValidationError.PATTERN_FAILED);}
if(this.dcReservedUpto && !Validator.INTEGER.test(this.dcReservedUpto)) { throw new ValidationError(_formprefix + "dc_reserved_upto", ValidationError.PATTERN_FAILED);}
if(this.uniqueidrangegenerationaudit) { for(i=0; i < this.uniqueidrangegenerationaudit.length; i++ ) { this.uniqueidrangegenerationaudit[i].validate(); } }

	return this;
    }
}
UniqueIdRange.path = "uniqueidrange";
UniqueIdRange.newBuilder = function() {
    return new UniqueIdRange();
};

UserServiceOrgPreference = function() {
    var _formprefix = "";
    
var orgType = "-1";
this.setOrgType = function(orgType) { 
    this.orgType = orgType;
    return this;
};
this.getOrgType = function() {
    return this.orgType;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var preferenceKey = "";
this.setPreferenceKey = function(preferenceKey) { 
    this.preferenceKey = preferenceKey;
    return this;
};
this.getPreferenceKey = function() {
    return this.preferenceKey;
};
var preferenceValue = "";
this.setPreferenceValue = function(preferenceValue) { 
    this.preferenceValue = preferenceValue;
    return this;
};
this.getPreferenceValue = function() {
    return this.preferenceValue;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setOrgType(json["org_type"]);
		this.setZuid(json["zuid"]);
		this.setPreferenceKey(json["preference_key"]);
		this.setPreferenceValue(json["preference_value"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getOrgType()) json += '"org_type"' + ":" + '"' + jsonEscape(this.getOrgType())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getPreferenceKey()) json += '"preference_key"' + ":" + '"' + jsonEscape(this.getPreferenceKey())  + '",';
		if(this.getPreferenceValue()) json += '"preference_value"' + ":" + '"' + jsonEscape(this.getPreferenceValue())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserServiceOrgPreference.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.orgType && !Validator.INTEGER.test(this.orgType)) { throw new ValidationError(_formprefix + "org_type", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.preferenceKey && !(/^[a-zA-Z0-9_\-]+$/).test(this.preferenceKey)) { throw new ValidationError(_formprefix + "preference_key", ValidationError.PATTERN_FAILED);}
if(this.preferenceValue && !(/^[a-zA-Z0-9_\-]+$/).test(this.preferenceValue)) { throw new ValidationError(_formprefix + "preference_value", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserServiceOrgPreference.path = "userserviceorgpreference";
UserServiceOrgPreference.newBuilder = function() {
    return new UserServiceOrgPreference();
};

OneAuthPreference = function() {
    var _formprefix = "";
    
var privateKey = "";
this.setPrivateKey = function(privateKey) { 
    this.privateKey = privateKey;
    return this;
};
this.getPrivateKey = function() {
    return this.privateKey;
};
var publicKey = "";
this.setPublicKey = function(publicKey) { 
    this.publicKey = publicKey;
    return this;
};
this.getPublicKey = function() {
    return this.publicKey;
};
var secretKey = "";
this.setSecretKey = function(secretKey) { 
    this.secretKey = secretKey;
    return this;
};
this.getSecretKey = function() {
    return this.secretKey;
};
var passPhrase = "";
this.setPassPhrase = function(passPhrase) { 
    this.passPhrase = passPhrase;
    return this;
};
this.getPassPhrase = function() {
    return this.passPhrase;
};
var passPhraseTime = "";
this.setPassPhraseTime = function(passPhraseTime) { 
    this.passPhraseTime = passPhraseTime;
    return this;
};
this.getPassPhraseTime = function() {
    return this.passPhraseTime;
};
var restrictSignin = "false";
this.setRestrictSignin = function(restrictSignin) { 
    this.restrictSignin = restrictSignin;
    return this;
};
this.getRestrictSignin = function() {
    return this.restrictSignin;
};
var tpSecretSync = "false";
this.setTpSecretSync = function(tpSecretSync) { 
    this.tpSecretSync = tpSecretSync;
    return this;
};
this.getTpSecretSync = function() {
    return this.tpSecretSync;
};
var encProvider = "";
this.setEncProvider = function(encProvider) { 
    this.encProvider = encProvider;
    return this;
};
this.getEncProvider = function() {
    return this.encProvider;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPrivateKey(json["private_key"]);
		this.setPublicKey(json["public_key"]);
		this.setSecretKey(json["secret_key"]);
		this.setPassPhrase(json["pass_phrase"]);
		this.setPassPhraseTime(json["pass_phrase_time"]);
		this.setRestrictSignin(json["restrict_signin"]);
		this.setTpSecretSync(json["tp_secret_sync"]);
		this.setEncProvider(json["enc_provider"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPrivateKey()) json += '"private_key"' + ":" + '"' + jsonEscape(this.getPrivateKey())  + '",';
		if(this.getPublicKey()) json += '"public_key"' + ":" + '"' + jsonEscape(this.getPublicKey())  + '",';
		if(this.getSecretKey()) json += '"secret_key"' + ":" + '"' + jsonEscape(this.getSecretKey())  + '",';
		if(this.getPassPhrase()) json += '"pass_phrase"' + ":" + '"' + jsonEscape(this.getPassPhrase())  + '",';
		if(this.getPassPhraseTime()) json += '"pass_phrase_time"' + ":" + '"' + jsonEscape(this.getPassPhraseTime())  + '",';
		if(this.getRestrictSignin()) json += '"restrict_signin"' + ":" + '"' + jsonEscape(this.getRestrictSignin())  + '",';
		if(this.getTpSecretSync()) json += '"tp_secret_sync"' + ":" + '"' + jsonEscape(this.getTpSecretSync())  + '",';
		if(this.getEncProvider()) json += '"enc_provider"' + ":" + '"' + jsonEscape(this.getEncProvider())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OneAuthPreference.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.secretKey && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.secretKey)) { throw new ValidationError(_formprefix + "secret_key", ValidationError.PATTERN_FAILED);}
if(this.passPhrase && !(/^([A-Za-z0-9_.\-]+)$/).test(this.passPhrase)) { throw new ValidationError(_formprefix + "pass_phrase", ValidationError.PATTERN_FAILED);}
if(this.passPhraseTime && !Validator.INTEGER.test(this.passPhraseTime)) { throw new ValidationError(_formprefix + "pass_phrase_time", ValidationError.PATTERN_FAILED);}
if(this.restrictSignin && !Validator.BOOLEAN.test(this.restrictSignin)) { throw new ValidationError(_formprefix + "restrict_signin", ValidationError.PATTERN_FAILED);}
if(this.tpSecretSync && !Validator.BOOLEAN.test(this.tpSecretSync)) { throw new ValidationError(_formprefix + "tp_secret_sync", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OneAuthPreference.path = "oneauthpreference";
OneAuthPreference.newBuilder = function() {
    return new OneAuthPreference();
};

ClusterNode = function() {
    var _formprefix = "";
    
var nodeName = "";
this.setNodeName = function(nodeName) { 
    this.nodeName = nodeName;
    return this;
};
this.getNodeName = function() {
    return this.nodeName;
};
var cacheType = "";
this.setCacheType = function(cacheType) { 
    this.cacheType = cacheType;
    return this;
};
this.getCacheType = function() {
    return this.cacheType;
};
var serverIpPort = "";
this.setServerIpPort = function(serverIpPort) { 
    this.serverIpPort = serverIpPort;
    return this;
};
this.getServerIpPort = function() {
    return this.serverIpPort;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var cacheProperties = "";
this.setCacheProperties = function(cacheProperties) { 
    this.cacheProperties = cacheProperties;
    return this;
};
this.getCacheProperties = function() {
    return this.cacheProperties;
};
var noderange = undefined;
this.setNoderanges = function(noderange) { 
    this.noderange = noderange;
    return this;
};
this.getNoderanges = function() {
    return this.noderange;
};
this.addNoderange = function(noderange) { 
 if(!this.noderange) this.noderange = new Array(); 
  this.noderange.push(noderange); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setNodeName(json["node_name"]);
		this.setCacheType(json["cache_type"]);
		this.setServerIpPort(json["server_ip_port"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setCacheProperties(json["cache_properties"]);
		this.setNoderanges(URI.getResourceArray(json["nodeRange"],"noderange"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getNodeName()) json += '"node_name"' + ":" + '"' + jsonEscape(this.getNodeName())  + '",';
		if(this.getCacheType()) json += '"cache_type"' + ":" + '"' + jsonEscape(this.getCacheType())  + '",';
		if(this.getServerIpPort()) json += '"server_ip_port"' + ":" + '"' + jsonEscape(this.getServerIpPort())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getCacheProperties()) json += '"cache_properties"' + ":" + '"' + jsonEscape(this.getCacheProperties())  + '",';
		if(this.getNoderanges()) json += '"nodeRange"' + ":" + URI.toJSONArray(this.getNoderanges())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ClusterNode.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.nodeName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.nodeName)) { throw new ValidationError(_formprefix + "node_name", ValidationError.PATTERN_FAILED);}
if(this.cacheType && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.cacheType)) { throw new ValidationError(_formprefix + "cache_type", ValidationError.PATTERN_FAILED);}
if(this.serverIpPort && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.serverIpPort)) { throw new ValidationError(_formprefix + "server_ip_port", ValidationError.PATTERN_FAILED);}
if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.noderange) { for(i=0; i < this.noderange.length; i++ ) { this.noderange[i].validate(); } }

	return this;
    }
}
ClusterNode.path = "clusternode";
ClusterNode.newBuilder = function() {
    return new ClusterNode();
};

BreachedPassword = function() {
    var _formprefix = "";
    
var password = "";
this.setPassword = function(password) { 
    this.password = password;
    return this;
};
this.getPassword = function() {
    return this.password;
};
var count = "0";
this.setCount = function(count) { 
    this.count = count;
    return this;
};
this.getCount = function() {
    return this.count;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPassword(json["password"]);
		this.setCount(json["count"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPassword()) json += '"password"' + ":" + '"' + jsonEscape(this.getPassword())  + '",';
		if(this.getCount()) json += '"count"' + ":" + '"' + jsonEscape(this.getCount())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(BreachedPassword.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.password && !(/dontdisturb/).test(this.password)) { throw new ValidationError(_formprefix + "password", ValidationError.PATTERN_FAILED);}
if(this.count && !Validator.INTEGER.test(this.count)) { throw new ValidationError(_formprefix + "count", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
BreachedPassword.path = "breachedpassword";
BreachedPassword.newBuilder = function() {
    return new BreachedPassword();
};

SAMLSpAppLogo = function() {
    var _formprefix = "";
    
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SAMLSpAppLogo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SAMLSpAppLogo.path = "samlspapplogo";
SAMLSpAppLogo.newBuilder = function() {
    return new SAMLSpAppLogo();
};

AppAllowedMethods = function() {
    var _formprefix = "";
    
var methodId = "";
this.setMethodId = function(methodId) { 
    this.methodId = methodId;
    return this;
};
this.getMethodId = function() {
    return this.methodId;
};
var methodName = "";
this.setMethodName = function(methodName) { 
    this.methodName = methodName;
    return this;
};
this.getMethodName = function() {
    return this.methodName;
};
var isAllowed = "true";
this.setIsAllowed = function(isAllowed) { 
    this.isAllowed = isAllowed;
    return this;
};
this.getIsAllowed = function() {
    return this.isAllowed;
};
var isAclEnabled = "true";
this.setIsAclEnabled = function(isAclEnabled) { 
    this.isAclEnabled = isAclEnabled;
    return this;
};
this.getIsAclEnabled = function() {
    return this.isAclEnabled;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setMethodId(json["method_id"]);
		this.setMethodName(json["method_name"]);
		this.setIsAllowed(json["is_allowed"]);
		this.setIsAclEnabled(json["is_acl_enabled"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getMethodId()) json += '"method_id"' + ":" + '"' + jsonEscape(this.getMethodId())  + '",';
		if(this.getMethodName()) json += '"method_name"' + ":" + '"' + jsonEscape(this.getMethodName())  + '",';
		if(this.getIsAllowed()) json += '"is_allowed"' + ":" + '"' + jsonEscape(this.getIsAllowed())  + '",';
		if(this.getIsAclEnabled()) json += '"is_acl_enabled"' + ":" + '"' + jsonEscape(this.getIsAclEnabled())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAllowedMethods.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.methodId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.methodId)) { throw new ValidationError(_formprefix + "method_id", ValidationError.PATTERN_FAILED);}
if(this.methodName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.methodName)) { throw new ValidationError(_formprefix + "method_name", ValidationError.PATTERN_FAILED);}
if(this.isAllowed && !Validator.BOOLEAN.test(this.isAllowed)) { throw new ValidationError(_formprefix + "is_allowed", ValidationError.PATTERN_FAILED);}
if(this.isAclEnabled && !Validator.BOOLEAN.test(this.isAclEnabled)) { throw new ValidationError(_formprefix + "is_acl_enabled", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAllowedMethods.path = "appallowedmethods";
AppAllowedMethods.newBuilder = function() {
    return new AppAllowedMethods();
};

GroupLogo = function() {
    var _formprefix = "";
    
var viewPermission = "";
this.setViewPermission = function(viewPermission) { 
    this.viewPermission = viewPermission;
    return this;
};
this.getViewPermission = function() {
    return this.viewPermission;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setViewPermission(json["view_permission"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getViewPermission()) json += '"view_permission"' + ":" + '"' + jsonEscape(this.getViewPermission())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(GroupLogo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.viewPermission && !Validator.INTEGER.test(this.viewPermission)) { throw new ValidationError(_formprefix + "view_permission", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
GroupLogo.path = "grouplogo";
GroupLogo.newBuilder = function() {
    return new GroupLogo();
};

ServiceOrgKYC = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var employeeCount = "-1";
this.setEmployeeCount = function(employeeCount) { 
    this.employeeCount = employeeCount;
    return this;
};
this.getEmployeeCount = function() {
    return this.employeeCount;
};
var organisationName = "";
this.setOrganisationName = function(organisationName) { 
    this.organisationName = organisationName;
    return this;
};
this.getOrganisationName = function() {
    return this.organisationName;
};
var industry = "";
this.setIndustry = function(industry) { 
    this.industry = industry;
    return this;
};
this.getIndustry = function() {
    return this.industry;
};
var orgContactEmailid = "";
this.setOrgContactEmailid = function(orgContactEmailid) { 
    this.orgContactEmailid = orgContactEmailid;
    return this;
};
this.getOrgContactEmailid = function() {
    return this.orgContactEmailid;
};
var firstName = "";
this.setFirstName = function(firstName) { 
    this.firstName = firstName;
    return this;
};
this.getFirstName = function() {
    return this.firstName;
};
var lastName = "";
this.setLastName = function(lastName) { 
    this.lastName = lastName;
    return this;
};
this.getLastName = function() {
    return this.lastName;
};
var mobileNumber = "";
this.setMobileNumber = function(mobileNumber) { 
    this.mobileNumber = mobileNumber;
    return this;
};
this.getMobileNumber = function() {
    return this.mobileNumber;
};
var designation = "";
this.setDesignation = function(designation) { 
    this.designation = designation;
    return this;
};
this.getDesignation = function() {
    return this.designation;
};
var serviceorgkyccontact = undefined;
this.setServiceorgkyccontacts = function(serviceorgkyccontact) { 
    this.serviceorgkyccontact = serviceorgkyccontact;
    return this;
};
this.getServiceorgkyccontacts = function() {
    return this.serviceorgkyccontact;
};
this.addServiceorgkyccontact = function(serviceorgkyccontact) { 
 if(!this.serviceorgkyccontact) this.serviceorgkyccontact = new Array(); 
  this.serviceorgkyccontact.push(serviceorgkyccontact); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setEmployeeCount(json["employee_count"]);
		this.setOrganisationName(json["organisation_name"]);
		this.setIndustry(json["industry"]);
		this.setOrgContactEmailid(json["org_contact_emailid"]);
		this.setFirstName(json["first_name"]);
		this.setLastName(json["last_name"]);
		this.setMobileNumber(json["mobile_number"]);
		this.setDesignation(json["designation"]);
		this.setServiceorgkyccontacts(URI.getResourceArray(json["serviceOrgKYCContact"],"serviceorgkyccontact"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getEmployeeCount()) json += '"employee_count"' + ":" + '"' + jsonEscape(this.getEmployeeCount())  + '",';
		if(this.getOrganisationName()) json += '"organisation_name"' + ":" + '"' + jsonEscape(this.getOrganisationName())  + '",';
		if(this.getIndustry()) json += '"industry"' + ":" + '"' + jsonEscape(this.getIndustry())  + '",';
		if(this.getOrgContactEmailid()) json += '"org_contact_emailid"' + ":" + '"' + jsonEscape(this.getOrgContactEmailid())  + '",';
		if(this.getFirstName()) json += '"first_name"' + ":" + '"' + jsonEscape(this.getFirstName())  + '",';
		if(this.getLastName()) json += '"last_name"' + ":" + '"' + jsonEscape(this.getLastName())  + '",';
		if(this.getMobileNumber()) json += '"mobile_number"' + ":" + '"' + jsonEscape(this.getMobileNumber())  + '",';
		if(this.getDesignation()) json += '"designation"' + ":" + '"' + jsonEscape(this.getDesignation())  + '",';
		if(this.getServiceorgkyccontacts()) json += '"serviceOrgKYCContact"' + ":" + URI.toJSONArray(this.getServiceorgkyccontacts())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgKYC.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.employeeCount && !Validator.INTEGER.test(this.employeeCount)) { throw new ValidationError(_formprefix + "employee_count", ValidationError.PATTERN_FAILED);}
if(this.organisationName && !(/xss:throwerror/).test(this.organisationName)) { throw new ValidationError(_formprefix + "organisation_name", ValidationError.PATTERN_FAILED);}
if(this.industry && !(/xss:throwerror/).test(this.industry)) { throw new ValidationError(_formprefix + "industry", ValidationError.PATTERN_FAILED);}
if(this.orgContactEmailid && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.orgContactEmailid)) { throw new ValidationError(_formprefix + "org_contact_emailid", ValidationError.PATTERN_FAILED);}
if(this.firstName && !(/xss:throwerror/).test(this.firstName)) { throw new ValidationError(_formprefix + "first_name", ValidationError.PATTERN_FAILED);}
if(this.lastName && !(/xss:throwerror/).test(this.lastName)) { throw new ValidationError(_formprefix + "last_name", ValidationError.PATTERN_FAILED);}
if(this.mobileNumber && !(/xss:throwerror/).test(this.mobileNumber)) { throw new ValidationError(_formprefix + "mobile_number", ValidationError.PATTERN_FAILED);}
if(this.designation && !(/xss:throwerror/).test(this.designation)) { throw new ValidationError(_formprefix + "designation", ValidationError.PATTERN_FAILED);}
if(this.serviceorgkyccontact) { for(i=0; i < this.serviceorgkyccontact.length; i++ ) { this.serviceorgkyccontact[i].validate(); } }

	return this;
    }
}
ServiceOrgKYC.path = "serviceorgkyc";
ServiceOrgKYC.newBuilder = function() {
    return new ServiceOrgKYC();
};

OAuthRedirectURL = function() {
    var _formprefix = "";
    
var redirectUrl = "";
this.setRedirectUrl = function(redirectUrl) { 
    this.redirectUrl = redirectUrl;
    return this;
};
this.getRedirectUrl = function() {
    return this.redirectUrl;
};
var redirectUrlApl = "";
this.setRedirectUrlApl = function(redirectUrlApl) { 
    this.redirectUrlApl = redirectUrlApl;
    return this;
};
this.getRedirectUrlApl = function() {
    return this.redirectUrlApl;
};
var redirectUrlType = "1";
this.setRedirectUrlType = function(redirectUrlType) { 
    this.redirectUrlType = redirectUrlType;
    return this;
};
this.getRedirectUrlType = function() {
    return this.redirectUrlType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRedirectUrl(json["redirect_url"]);
		this.setRedirectUrlApl(json["redirect_url_apl"]);
		this.setRedirectUrlType(json["redirect_url_type"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRedirectUrl()) json += '"redirect_url"' + ":" + '"' + jsonEscape(this.getRedirectUrl())  + '",';
		if(this.getRedirectUrlApl()) json += '"redirect_url_apl"' + ":" + '"' + jsonEscape(this.getRedirectUrlApl())  + '",';
		if(this.getRedirectUrlType()) json += '"redirect_url_type"' + ":" + '"' + jsonEscape(this.getRedirectUrlType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthRedirectURL.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.redirectUrl && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.redirectUrl)) { throw new ValidationError(_formprefix + "redirect_url", ValidationError.PATTERN_FAILED);}
if(this.redirectUrlApl && !(/xss:throwerror/).test(this.redirectUrlApl)) { throw new ValidationError(_formprefix + "redirect_url_apl", ValidationError.PATTERN_FAILED);}
if(this.redirectUrlType && !Validator.INTEGER.test(this.redirectUrlType)) { throw new ValidationError(_formprefix + "redirect_url_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthRedirectURL.path = "oauthredirecturl";
OAuthRedirectURL.newBuilder = function() {
    return new OAuthRedirectURL();
};

Invitation = function() {
    var _formprefix = "";
    
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var inviteStatus = "0";
this.setInviteStatus = function(inviteStatus) { 
    this.inviteStatus = inviteStatus;
    return this;
};
this.getInviteStatus = function() {
    return this.inviteStatus;
};
var sendMail = "true";
this.setSendMail = function(sendMail) { 
    this.sendMail = sendMail;
    return this;
};
this.getSendMail = function() {
    return this.sendMail;
};
var resendLimit = "0";
this.setResendLimit = function(resendLimit) { 
    this.resendLimit = resendLimit;
    return this;
};
this.getResendLimit = function() {
    return this.resendLimit;
};
var fromUrl = "";
this.setFromUrl = function(fromUrl) { 
    this.fromUrl = fromUrl;
    return this;
};
this.getFromUrl = function() {
    return this.fromUrl;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var idp = "0";
this.setIdp = function(idp) { 
    this.idp = idp;
    return this;
};
this.getIdp = function() {
    return this.idp;
};
var argsData = "";
this.setArgsData = function(argsData) { 
    this.argsData = argsData;
    return this;
};
this.getArgsData = function() {
    return this.argsData;
};
var invitedBy = "";
this.setInvitedBy = function(invitedBy) { 
    this.invitedBy = invitedBy;
    return this;
};
this.getInvitedBy = function() {
    return this.invitedBy;
};
var firstName = "";
this.setFirstName = function(firstName) { 
    this.firstName = firstName;
    return this;
};
this.getFirstName = function() {
    return this.firstName;
};
var lastName = "";
this.setLastName = function(lastName) { 
    this.lastName = lastName;
    return this;
};
this.getLastName = function() {
    return this.lastName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var invitationdetails = undefined;
this.setInvitationdetailss = function(invitationdetails) { 
    this.invitationdetails = invitationdetails;
    return this;
};
this.getInvitationdetailss = function() {
    return this.invitationdetails;
};
this.addInvitationdetails = function(invitationdetails) { 
 if(!this.invitationdetails) this.invitationdetails = new Array(); 
  this.invitationdetails.push(invitationdetails); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setEmailId(json["email_id"]);
		this.setInviteStatus(json["invite_status"]);
		this.setSendMail(json["send_mail"]);
		this.setResendLimit(json["resend_limit"]);
		this.setFromUrl(json["from_url"]);
		this.setIpAddress(json["ip_address"]);
		this.setIdp(json["idp"]);
		this.setArgsData(json["args_data"]);
		this.setInvitedBy(json["invited_by"]);
		this.setFirstName(json["first_name"]);
		this.setLastName(json["last_name"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setInvitationdetailss(URI.getResourceArray(json["invitationDetails"],"invitationdetails"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getInviteStatus()) json += '"invite_status"' + ":" + '"' + jsonEscape(this.getInviteStatus())  + '",';
		if(this.getSendMail()) json += '"send_mail"' + ":" + '"' + jsonEscape(this.getSendMail())  + '",';
		if(this.getResendLimit()) json += '"resend_limit"' + ":" + '"' + jsonEscape(this.getResendLimit())  + '",';
		if(this.getFromUrl()) json += '"from_url"' + ":" + '"' + jsonEscape(this.getFromUrl())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getIdp()) json += '"idp"' + ":" + '"' + jsonEscape(this.getIdp())  + '",';
		if(this.getArgsData()) json += '"args_data"' + ":" + '"' + jsonEscape(this.getArgsData())  + '",';
		if(this.getInvitedBy()) json += '"invited_by"' + ":" + '"' + jsonEscape(this.getInvitedBy())  + '",';
		if(this.getFirstName()) json += '"first_name"' + ":" + '"' + jsonEscape(this.getFirstName())  + '",';
		if(this.getLastName()) json += '"last_name"' + ":" + '"' + jsonEscape(this.getLastName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getInvitationdetailss()) json += '"invitationDetails"' + ":" + URI.toJSONArray(this.getInvitationdetailss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Invitation.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.inviteStatus && !Validator.INTEGER.test(this.inviteStatus)) { throw new ValidationError(_formprefix + "invite_status", ValidationError.PATTERN_FAILED);}
if(this.sendMail && !Validator.BOOLEAN.test(this.sendMail)) { throw new ValidationError(_formprefix + "send_mail", ValidationError.PATTERN_FAILED);}
if(this.resendLimit && !Validator.INTEGER.test(this.resendLimit)) { throw new ValidationError(_formprefix + "resend_limit", ValidationError.PATTERN_FAILED);}
if(this.fromUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.fromUrl)) { throw new ValidationError(_formprefix + "from_url", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.idp && !Validator.INTEGER.test(this.idp)) { throw new ValidationError(_formprefix + "idp", ValidationError.PATTERN_FAILED);}
if(this.invitedBy && !(/^[a-zA-Z0-9_\-]+$/).test(this.invitedBy)) { throw new ValidationError(_formprefix + "invited_by", ValidationError.PATTERN_FAILED);}
if(this.firstName && !(/xss:throwerror/).test(this.firstName)) { throw new ValidationError(_formprefix + "first_name", ValidationError.PATTERN_FAILED);}
if(this.lastName && !(/xss:throwerror/).test(this.lastName)) { throw new ValidationError(_formprefix + "last_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.invitationdetails) { for(i=0; i < this.invitationdetails.length; i++ ) { this.invitationdetails[i].validate(); } }

	return this;
    }
}
Invitation.path = "invitation";
Invitation.newBuilder = function() {
    return new Invitation();
};

InvitedOrgDetails = function() {
    var _formprefix = "";
    
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var orgId = "";
this.setOrgId = function(orgId) { 
    this.orgId = orgId;
    return this;
};
this.getOrgId = function() {
    return this.orgId;
};
var orgType = "";
this.setOrgType = function(orgType) { 
    this.orgType = orgType;
    return this;
};
this.getOrgType = function() {
    return this.orgType;
};
var status = "1";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var argsData = "";
this.setArgsData = function(argsData) { 
    this.argsData = argsData;
    return this;
};
this.getArgsData = function() {
    return this.argsData;
};
var invitationTime = "";
this.setInvitationTime = function(invitationTime) { 
    this.invitationTime = invitationTime;
    return this;
};
this.getInvitationTime = function() {
    return this.invitationTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setEmailId(json["email_id"]);
		this.setOrgId(json["org_id"]);
		this.setOrgType(json["org_type"]);
		this.setStatus(json["status"]);
		this.setArgsData(json["args_data"]);
		this.setInvitationTime(json["invitation_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getOrgId()) json += '"org_id"' + ":" + '"' + jsonEscape(this.getOrgId())  + '",';
		if(this.getOrgType()) json += '"org_type"' + ":" + '"' + jsonEscape(this.getOrgType())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getArgsData()) json += '"args_data"' + ":" + '"' + jsonEscape(this.getArgsData())  + '",';
		if(this.getInvitationTime()) json += '"invitation_time"' + ":" + '"' + jsonEscape(this.getInvitationTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(InvitedOrgDetails.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.orgId && !(/^[a-zA-Z0-9_\-]+$/).test(this.orgId)) { throw new ValidationError(_formprefix + "org_id", ValidationError.PATTERN_FAILED);}
if(this.orgType && !Validator.INTEGER.test(this.orgType)) { throw new ValidationError(_formprefix + "org_type", ValidationError.PATTERN_FAILED);}
if(this.invitationTime && !Validator.INTEGER.test(this.invitationTime)) { throw new ValidationError(_formprefix + "invitation_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
InvitedOrgDetails.path = "invitedorgdetails";
InvitedOrgDetails.newBuilder = function() {
    return new InvitedOrgDetails();
};

RoleResourceMappings = function() {
    var _formprefix = "";
    
var resource = "";
this.setResource = function(resource) { 
    this.resource = resource;
    return this;
};
this.getResource = function() {
    return this.resource;
};
var operationsAllowed = "NONE";
this.setOperationsAllowed = function(operationsAllowed) { 
    this.operationsAllowed = operationsAllowed;
    return this;
};
this.getOperationsAllowed = function() {
    return this.operationsAllowed;
};
var inheritAllowed = "true";
this.setInheritAllowed = function(inheritAllowed) { 
    this.inheritAllowed = inheritAllowed;
    return this;
};
this.getInheritAllowed = function() {
    return this.inheritAllowed;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setResource(json["resource"]);
		this.setOperationsAllowed(json["operations_allowed"]);
		this.setInheritAllowed(json["inherit_allowed"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getResource()) json += '"resource"' + ":" + '"' + jsonEscape(this.getResource())  + '",';
		if(this.getOperationsAllowed()) json += '"operations_allowed"' + ":" + '"' + jsonEscape(this.getOperationsAllowed())  + '",';
		if(this.getInheritAllowed()) json += '"inherit_allowed"' + ":" + '"' + jsonEscape(this.getInheritAllowed())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(RoleResourceMappings.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.inheritAllowed && !Validator.BOOLEAN.test(this.inheritAllowed)) { throw new ValidationError(_formprefix + "inherit_allowed", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
RoleResourceMappings.path = "roleresourcemappings";
RoleResourceMappings.newBuilder = function() {
    return new RoleResourceMappings();
};

MailClientAuditTemplate = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var auditedTime = "";
this.setAuditedTime = function(auditedTime) { 
    this.auditedTime = auditedTime;
    return this;
};
this.getAuditedTime = function() {
    return this.auditedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZuid(json["zuid"]);
		this.setEmailId(json["email_id"]);
		this.setAppName(json["app_name"]);
		this.setIpAddress(json["ip_address"]);
		this.setUserAgent(json["user_agent"]);
		this.setAuditedTime(json["audited_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getAuditedTime()) json += '"audited_time"' + ":" + '"' + jsonEscape(this.getAuditedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MailClientAuditTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.auditedTime && !Validator.INTEGER.test(this.auditedTime)) { throw new ValidationError(_formprefix + "audited_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
MailClientAuditTemplate.path = "mailclientaudittemplate";
MailClientAuditTemplate.newBuilder = function() {
    return new MailClientAuditTemplate();
};

RoleAccessCheck = function() {
    var _formprefix = "";
    
var role = "";
this.setRole = function(role) { 
    this.role = role;
    return this;
};
this.getRole = function() {
    return this.role;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var roleresourcemappings = undefined;
this.setRoleresourcemappingss = function(roleresourcemappings) { 
    this.roleresourcemappings = roleresourcemappings;
    return this;
};
this.getRoleresourcemappingss = function() {
    return this.roleresourcemappings;
};
this.addRoleresourcemappings = function(roleresourcemappings) { 
 if(!this.roleresourcemappings) this.roleresourcemappings = new Array(); 
  this.roleresourcemappings.push(roleresourcemappings); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRole(json["role"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setRoleresourcemappingss(URI.getResourceArray(json["roleResourceMappings"],"roleresourcemappings"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRole()) json += '"role"' + ":" + '"' + jsonEscape(this.getRole())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getRoleresourcemappingss()) json += '"roleResourceMappings"' + ":" + URI.toJSONArray(this.getRoleresourcemappingss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(RoleAccessCheck.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.roleresourcemappings) { for(i=0; i < this.roleresourcemappings.length; i++ ) { this.roleresourcemappings[i].validate(); } }

	return this;
    }
}
RoleAccessCheck.path = "roleaccesscheck";
RoleAccessCheck.newBuilder = function() {
    return new RoleAccessCheck();
};

CustomFields = function() {
    var _formprefix = "";
    
var customFieldId = "";
this.setCustomFieldId = function(customFieldId) { 
    this.customFieldId = customFieldId;
    return this;
};
this.getCustomFieldId = function() {
    return this.customFieldId;
};
var customFieldName = "";
this.setCustomFieldName = function(customFieldName) { 
    this.customFieldName = customFieldName;
    return this;
};
this.getCustomFieldName = function() {
    return this.customFieldName;
};
var dataType = "";
this.setDataType = function(dataType) { 
    this.dataType = dataType;
    return this;
};
this.getDataType = function() {
    return this.dataType;
};
var nullable = "";
this.setNullable = function(nullable) { 
    this.nullable = nullable;
    return this;
};
this.getNullable = function() {
    return this.nullable;
};
var defaultValue = "";
this.setDefaultValue = function(defaultValue) { 
    this.defaultValue = defaultValue;
    return this;
};
this.getDefaultValue = function() {
    return this.defaultValue;
};
var columnNumber = "";
this.setColumnNumber = function(columnNumber) { 
    this.columnNumber = columnNumber;
    return this;
};
this.getColumnNumber = function() {
    return this.columnNumber;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setCustomFieldId(json["custom_field_id"]);
		this.setCustomFieldName(json["custom_field_name"]);
		this.setDataType(json["data_type"]);
		this.setNullable(json["nullable"]);
		this.setDefaultValue(json["default_value"]);
		this.setColumnNumber(json["column_number"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getCustomFieldId()) json += '"custom_field_id"' + ":" + '"' + jsonEscape(this.getCustomFieldId())  + '",';
		if(this.getCustomFieldName()) json += '"custom_field_name"' + ":" + '"' + jsonEscape(this.getCustomFieldName())  + '",';
		if(this.getDataType()) json += '"data_type"' + ":" + '"' + jsonEscape(this.getDataType())  + '",';
		if(this.getNullable()) json += '"nullable"' + ":" + '"' + jsonEscape(this.getNullable())  + '",';
		if(this.getDefaultValue()) json += '"default_value"' + ":" + '"' + jsonEscape(this.getDefaultValue())  + '",';
		if(this.getColumnNumber()) json += '"column_number"' + ":" + '"' + jsonEscape(this.getColumnNumber())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(CustomFields.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.customFieldId && !(/^[a-zA-Z0-9_\-]+$/).test(this.customFieldId)) { throw new ValidationError(_formprefix + "custom_field_id", ValidationError.PATTERN_FAILED);}
if(this.customFieldName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.customFieldName)) { throw new ValidationError(_formprefix + "custom_field_name", ValidationError.PATTERN_FAILED);}
if(this.nullable && !Validator.BOOLEAN.test(this.nullable)) { throw new ValidationError(_formprefix + "nullable", ValidationError.PATTERN_FAILED);}
if(this.defaultValue && !(/xss:throwerror/).test(this.defaultValue)) { throw new ValidationError(_formprefix + "default_value", ValidationError.PATTERN_FAILED);}
if(this.columnNumber && !Validator.INTEGER.test(this.columnNumber)) { throw new ValidationError(_formprefix + "column_number", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
CustomFields.path = "customfields";
CustomFields.newBuilder = function() {
    return new CustomFields();
};

JWTReqParam = function() {
    var _formprefix = "";
    
var requestType = "";
this.setRequestType = function(requestType) { 
    this.requestType = requestType;
    return this;
};
this.getRequestType = function() {
    return this.requestType;
};
var paramName = "";
this.setParamName = function(paramName) { 
    this.paramName = paramName;
    return this;
};
this.getParamName = function() {
    return this.paramName;
};
var paramValue = "";
this.setParamValue = function(paramValue) { 
    this.paramValue = paramValue;
    return this;
};
this.getParamValue = function() {
    return this.paramValue;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRequestType(json["request_type"]);
		this.setParamName(json["param_name"]);
		this.setParamValue(json["param_value"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRequestType()) json += '"request_type"' + ":" + '"' + jsonEscape(this.getRequestType())  + '",';
		if(this.getParamName()) json += '"param_name"' + ":" + '"' + jsonEscape(this.getParamName())  + '",';
		if(this.getParamValue()) json += '"param_value"' + ":" + '"' + jsonEscape(this.getParamValue())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(JWTReqParam.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
JWTReqParam.path = "jwtreqparam";
JWTReqParam.newBuilder = function() {
    return new JWTReqParam();
};

ServiceOrgSubService = function() {
    var _formprefix = "";
    
var subOrgType = "-1";
this.setSubOrgType = function(subOrgType) { 
    this.subOrgType = subOrgType;
    return this;
};
this.getSubOrgType = function() {
    return this.subOrgType;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var accountStatus = "1";
this.setAccountStatus = function(accountStatus) { 
    this.accountStatus = accountStatus;
    return this;
};
this.getAccountStatus = function() {
    return this.accountStatus;
};
var migratedToOrg = "";
this.setMigratedToOrg = function(migratedToOrg) { 
    this.migratedToOrg = migratedToOrg;
    return this;
};
this.getMigratedToOrg = function() {
    return this.migratedToOrg;
};
var parentZaaid = "";
this.setParentZaaid = function(parentZaaid) { 
    this.parentZaaid = parentZaaid;
    return this;
};
this.getParentZaaid = function() {
    return this.parentZaaid;
};
var directoryZaaid = "";
this.setDirectoryZaaid = function(directoryZaaid) { 
    this.directoryZaaid = directoryZaaid;
    return this;
};
this.getDirectoryZaaid = function() {
    return this.directoryZaaid;
};
var isExposed = "1";
this.setIsExposed = function(isExposed) { 
    this.isExposed = isExposed;
    return this;
};
this.getIsExposed = function() {
    return this.isExposed;
};
var parentOrgType = "";
this.setParentOrgType = function(parentOrgType) { 
    this.parentOrgType = parentOrgType;
    return this;
};
this.getParentOrgType = function() {
    return this.parentOrgType;
};
var environment = "1";
this.setEnvironment = function(environment) { 
    this.environment = environment;
    return this;
};
this.getEnvironment = function() {
    return this.environment;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var serviceorgconfiguration = undefined;
this.setServiceorgconfigurations = function(serviceorgconfiguration) { 
    this.serviceorgconfiguration = serviceorgconfiguration;
    return this;
};
this.getServiceorgconfigurations = function() {
    return this.serviceorgconfiguration;
};
this.addServiceorgconfiguration = function(serviceorgconfiguration) { 
 if(!this.serviceorgconfiguration) this.serviceorgconfiguration = new Array(); 
  this.serviceorgconfiguration.push(serviceorgconfiguration); 
 return this;
};

var serviceorgoauthaccessgrant = undefined;
this.setServiceorgoauthaccessgrants = function(serviceorgoauthaccessgrant) { 
    this.serviceorgoauthaccessgrant = serviceorgoauthaccessgrant;
    return this;
};
this.getServiceorgoauthaccessgrants = function() {
    return this.serviceorgoauthaccessgrant;
};
this.addServiceorgoauthaccessgrant = function(serviceorgoauthaccessgrant) { 
 if(!this.serviceorgoauthaccessgrant) this.serviceorgoauthaccessgrant = new Array(); 
  this.serviceorgoauthaccessgrant.push(serviceorgoauthaccessgrant); 
 return this;
};

var serviceorgmember = undefined;
this.setServiceorgmembers = function(serviceorgmember) { 
    this.serviceorgmember = serviceorgmember;
    return this;
};
this.getServiceorgmembers = function() {
    return this.serviceorgmember;
};
this.addServiceorgmember = function(serviceorgmember) { 
 if(!this.serviceorgmember) this.serviceorgmember = new Array(); 
  this.serviceorgmember.push(serviceorgmember); 
 return this;
};

var serviceorginvitation = undefined;
this.setServiceorginvitations = function(serviceorginvitation) { 
    this.serviceorginvitation = serviceorginvitation;
    return this;
};
this.getServiceorginvitations = function() {
    return this.serviceorginvitation;
};
this.addServiceorginvitation = function(serviceorginvitation) { 
 if(!this.serviceorginvitation) this.serviceorginvitation = new Array(); 
  this.serviceorginvitation.push(serviceorginvitation); 
 return this;
};

var serviceorginvitationtemplate = undefined;
this.setServiceorginvitationtemplates = function(serviceorginvitationtemplate) { 
    this.serviceorginvitationtemplate = serviceorginvitationtemplate;
    return this;
};
this.getServiceorginvitationtemplates = function() {
    return this.serviceorginvitationtemplate;
};
this.addServiceorginvitationtemplate = function(serviceorginvitationtemplate) { 
 if(!this.serviceorginvitationtemplate) this.serviceorginvitationtemplate = new Array(); 
  this.serviceorginvitationtemplate.push(serviceorginvitationtemplate); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setSubOrgType(json["sub_org_type"]);
		this.setZuid(json["zuid"]);
		this.setDescription(json["description"]);
		this.setAccountStatus(json["account_status"]);
		this.setMigratedToOrg(json["migrated_to_org"]);
		this.setParentZaaid(json["parent_zaaid"]);
		this.setDirectoryZaaid(json["directory_zaaid"]);
		this.setIsExposed(json["is_exposed"]);
		this.setParentOrgType(json["parent_org_type"]);
		this.setEnvironment(json["environment"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setServiceorgconfigurations(URI.getResourceArray(json["serviceOrgConfiguration"],"serviceorgconfiguration"));
		this.setServiceorgoauthaccessgrants(URI.getResourceArray(json["serviceOrgOAuthAccessGrant"],"serviceorgoauthaccessgrant"));
		this.setServiceorgmembers(URI.getResourceArray(json["serviceOrgMember"],"serviceorgmember"));
		this.setServiceorginvitations(URI.getResourceArray(json["serviceOrgInvitation"],"serviceorginvitation"));
		this.setServiceorginvitationtemplates(URI.getResourceArray(json["serviceOrgInvitationTemplate"],"serviceorginvitationtemplate"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getSubOrgType()) json += '"sub_org_type"' + ":" + '"' + jsonEscape(this.getSubOrgType())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getAccountStatus()) json += '"account_status"' + ":" + '"' + jsonEscape(this.getAccountStatus())  + '",';
		if(this.getMigratedToOrg()) json += '"migrated_to_org"' + ":" + '"' + jsonEscape(this.getMigratedToOrg())  + '",';
		if(this.getParentZaaid()) json += '"parent_zaaid"' + ":" + '"' + jsonEscape(this.getParentZaaid())  + '",';
		if(this.getDirectoryZaaid()) json += '"directory_zaaid"' + ":" + '"' + jsonEscape(this.getDirectoryZaaid())  + '",';
		if(this.getIsExposed()) json += '"is_exposed"' + ":" + '"' + jsonEscape(this.getIsExposed())  + '",';
		if(this.getParentOrgType()) json += '"parent_org_type"' + ":" + '"' + jsonEscape(this.getParentOrgType())  + '",';
		if(this.getEnvironment()) json += '"environment"' + ":" + '"' + jsonEscape(this.getEnvironment())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getServiceorgconfigurations()) json += '"serviceOrgConfiguration"' + ":" + URI.toJSONArray(this.getServiceorgconfigurations())  + ',';
		if(this.getServiceorgoauthaccessgrants()) json += '"serviceOrgOAuthAccessGrant"' + ":" + URI.toJSONArray(this.getServiceorgoauthaccessgrants())  + ',';
		if(this.getServiceorgmembers()) json += '"serviceOrgMember"' + ":" + URI.toJSONArray(this.getServiceorgmembers())  + ',';
		if(this.getServiceorginvitations()) json += '"serviceOrgInvitation"' + ":" + URI.toJSONArray(this.getServiceorginvitations())  + ',';
		if(this.getServiceorginvitationtemplates()) json += '"serviceOrgInvitationTemplate"' + ":" + URI.toJSONArray(this.getServiceorginvitationtemplates())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgSubService.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.subOrgType && !Validator.INTEGER.test(this.subOrgType)) { throw new ValidationError(_formprefix + "sub_org_type", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.accountStatus && !Validator.INTEGER.test(this.accountStatus)) { throw new ValidationError(_formprefix + "account_status", ValidationError.PATTERN_FAILED);}
if(this.migratedToOrg && !Validator.BOOLEAN.test(this.migratedToOrg)) { throw new ValidationError(_formprefix + "migrated_to_org", ValidationError.PATTERN_FAILED);}
if(this.parentZaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.parentZaaid)) { throw new ValidationError(_formprefix + "parent_zaaid", ValidationError.PATTERN_FAILED);}
if(this.directoryZaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.directoryZaaid)) { throw new ValidationError(_formprefix + "directory_zaaid", ValidationError.PATTERN_FAILED);}
if(this.isExposed && !Validator.INTEGER.test(this.isExposed)) { throw new ValidationError(_formprefix + "is_exposed", ValidationError.PATTERN_FAILED);}
if(this.parentOrgType && !Validator.INTEGER.test(this.parentOrgType)) { throw new ValidationError(_formprefix + "parent_org_type", ValidationError.PATTERN_FAILED);}
if(this.environment && !Validator.INTEGER.test(this.environment)) { throw new ValidationError(_formprefix + "environment", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.serviceorgconfiguration) { for(i=0; i < this.serviceorgconfiguration.length; i++ ) { this.serviceorgconfiguration[i].validate(); } }
if(this.serviceorgoauthaccessgrant) { for(i=0; i < this.serviceorgoauthaccessgrant.length; i++ ) { this.serviceorgoauthaccessgrant[i].validate(); } }
if(this.serviceorgmember) { for(i=0; i < this.serviceorgmember.length; i++ ) { this.serviceorgmember[i].validate(); } }
if(this.serviceorginvitation) { for(i=0; i < this.serviceorginvitation.length; i++ ) { this.serviceorginvitation[i].validate(); } }
if(this.serviceorginvitationtemplate) { for(i=0; i < this.serviceorginvitationtemplate.length; i++ ) { this.serviceorginvitationtemplate[i].validate(); } }

	return this;
    }
}
ServiceOrgSubService.path = "serviceorgsubservice";
ServiceOrgSubService.newBuilder = function() {
    return new ServiceOrgSubService();
};

UserAnnouncementStatus = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var announcementId = "";
this.setAnnouncementId = function(announcementId) { 
    this.announcementId = announcementId;
    return this;
};
this.getAnnouncementId = function() {
    return this.announcementId;
};
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var status = "0";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var visitedTime = "";
this.setVisitedTime = function(visitedTime) { 
    this.visitedTime = visitedTime;
    return this;
};
this.getVisitedTime = function() {
    return this.visitedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setAnnouncementId(json["announcement_id"]);
		this.setArid(json["arid"]);
		this.setStatus(json["status"]);
		this.setVisitedTime(json["visited_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getAnnouncementId()) json += '"announcement_id"' + ":" + '"' + jsonEscape(this.getAnnouncementId())  + '",';
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getVisitedTime()) json += '"visited_time"' + ":" + '"' + jsonEscape(this.getVisitedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserAnnouncementStatus.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.announcementId && !(/dontdisturb/).test(this.announcementId)) { throw new ValidationError(_formprefix + "announcement_id", ValidationError.PATTERN_FAILED);}
if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.status && !Validator.INTEGER.test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.visitedTime && !Validator.INTEGER.test(this.visitedTime)) { throw new ValidationError(_formprefix + "visited_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserAnnouncementStatus.path = "userannouncementstatus";
UserAnnouncementStatus.newBuilder = function() {
    return new UserAnnouncementStatus();
};

AccountConfiguration = function() {
    var _formprefix = "";
    
var configName = "";
this.setConfigName = function(configName) { 
    this.configName = configName;
    return this;
};
this.getConfigName = function() {
    return this.configName;
};
var configValue = "";
this.setConfigValue = function(configValue) { 
    this.configValue = configValue;
    return this;
};
this.getConfigValue = function() {
    return this.configValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setConfigName(json["config_name"]);
		this.setConfigValue(json["config_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getConfigName()) json += '"config_name"' + ":" + '"' + jsonEscape(this.getConfigName())  + '",';
		if(this.getConfigValue()) json += '"config_value"' + ":" + '"' + jsonEscape(this.getConfigValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountConfiguration.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.configName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.configName)) { throw new ValidationError(_formprefix + "config_name", ValidationError.PATTERN_FAILED);}
if(this.configValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.configValue)) { throw new ValidationError(_formprefix + "config_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountConfiguration.path = "accountconfiguration";
AccountConfiguration.newBuilder = function() {
    return new AccountConfiguration();
};

MobileScreenName = function() {
    var _formprefix = "";
    
var mobileScreenName = "";
this.setMobileScreenName = function(mobileScreenName) { 
    this.mobileScreenName = mobileScreenName;
    return this;
};
this.getMobileScreenName = function() {
    return this.mobileScreenName;
};
var userMobileStatus = "0";
this.setUserMobileStatus = function(userMobileStatus) { 
    this.userMobileStatus = userMobileStatus;
    return this;
};
this.getUserMobileStatus = function() {
    return this.userMobileStatus;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setMobileScreenName(json["mobile_screen_name"]);
		this.setUserMobileStatus(json["user_mobile_status"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getMobileScreenName()) json += '"mobile_screen_name"' + ":" + '"' + jsonEscape(this.getMobileScreenName())  + '",';
		if(this.getUserMobileStatus()) json += '"user_mobile_status"' + ":" + '"' + jsonEscape(this.getUserMobileStatus())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MobileScreenName.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.mobileScreenName && !(/^([\p{L}\p{M}\p{N}\_\.]+)$/).test(this.mobileScreenName)) { throw new ValidationError(_formprefix + "mobile_screen_name", ValidationError.PATTERN_FAILED);}
if(this.userMobileStatus && !Validator.INTEGER.test(this.userMobileStatus)) { throw new ValidationError(_formprefix + "user_mobile_status", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
MobileScreenName.path = "mobilescreenname";
MobileScreenName.newBuilder = function() {
    return new MobileScreenName();
};

ZUID = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var primaryZuid = "";
this.setPrimaryZuid = function(primaryZuid) { 
    this.primaryZuid = primaryZuid;
    return this;
};
this.getPrimaryZuid = function() {
    return this.primaryZuid;
};
var userDeletedTime = "-1";
this.setUserDeletedTime = function(userDeletedTime) { 
    this.userDeletedTime = userDeletedTime;
    return this;
};
this.getUserDeletedTime = function() {
    return this.userDeletedTime;
};
var authType = "ZOHO";
this.setAuthType = function(authType) { 
    this.authType = authType;
    return this;
};
this.getAuthType = function() {
    return this.authType;
};
var email = undefined;
this.setEmails = function(email) { 
    this.email = email;
    return this;
};
this.getEmails = function() {
    return this.email;
};
this.addEmail = function(email) { 
 if(!this.email) this.email = new Array(); 
  this.email.push(email); 
 return this;
};

var username = undefined;
this.setUsernames = function(username) { 
    this.username = username;
    return this;
};
this.getUsernames = function() {
    return this.username;
};
this.addUsername = function(username) { 
 if(!this.username) this.username = new Array(); 
  this.username.push(username); 
 return this;
};

var iscticket = undefined;
this.setIsctickets = function(iscticket) { 
    this.iscticket = iscticket;
    return this;
};
this.getIsctickets = function() {
    return this.iscticket;
};
this.addIscticket = function(iscticket) { 
 if(!this.iscticket) this.iscticket = new Array(); 
  this.iscticket.push(iscticket); 
 return this;
};

var orgupauthtoken = undefined;
this.setOrgupauthtokens = function(orgupauthtoken) { 
    this.orgupauthtoken = orgupauthtoken;
    return this;
};
this.getOrgupauthtokens = function() {
    return this.orgupauthtoken;
};
this.addOrgupauthtoken = function(orgupauthtoken) { 
 if(!this.orgupauthtoken) this.orgupauthtoken = new Array(); 
  this.orgupauthtoken.push(orgupauthtoken); 
 return this;
};

var systemopenid = undefined;
this.setSystemopenids = function(systemopenid) { 
    this.systemopenid = systemopenid;
    return this;
};
this.getSystemopenids = function() {
    return this.systemopenid;
};
this.addSystemopenid = function(systemopenid) { 
 if(!this.systemopenid) this.systemopenid = new Array(); 
  this.systemopenid.push(systemopenid); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setZaid(json["zaid"]);
		this.setPrimaryZuid(json["primary_zuid"]);
		this.setUserDeletedTime(json["user_deleted_time"]);
		this.setAuthType(json["auth_type"]);
		this.setEmails(URI.getResourceArray(json["email"],"email"));
		this.setUsernames(URI.getResourceArray(json["userName"],"username"));
		this.setIsctickets(URI.getResourceArray(json["iSCTicket"],"iscticket"));
		this.setOrgupauthtokens(URI.getResourceArray(json["orgUPAuthToken"],"orgupauthtoken"));
		this.setSystemopenids(URI.getResourceArray(json["systemOpenId"],"systemopenid"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getPrimaryZuid()) json += '"primary_zuid"' + ":" + '"' + jsonEscape(this.getPrimaryZuid())  + '",';
		if(this.getUserDeletedTime()) json += '"user_deleted_time"' + ":" + '"' + jsonEscape(this.getUserDeletedTime())  + '",';
		if(this.getAuthType()) json += '"auth_type"' + ":" + '"' + jsonEscape(this.getAuthType())  + '",';
		if(this.getEmails()) json += '"email"' + ":" + URI.toJSONArray(this.getEmails())  + ',';
		if(this.getUsernames()) json += '"userName"' + ":" + URI.toJSONArray(this.getUsernames())  + ',';
		if(this.getIsctickets()) json += '"iSCTicket"' + ":" + URI.toJSONArray(this.getIsctickets())  + ',';
		if(this.getOrgupauthtokens()) json += '"orgUPAuthToken"' + ":" + URI.toJSONArray(this.getOrgupauthtokens())  + ',';
		if(this.getSystemopenids()) json += '"systemOpenId"' + ":" + URI.toJSONArray(this.getSystemopenids())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ZUID.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.primaryZuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.primaryZuid)) { throw new ValidationError(_formprefix + "primary_zuid", ValidationError.PATTERN_FAILED);}
if(this.userDeletedTime && !Validator.INTEGER.test(this.userDeletedTime)) { throw new ValidationError(_formprefix + "user_deleted_time", ValidationError.PATTERN_FAILED);}
if(this.authType && !(/^([A-Za-z0-9_.\-]+)$/).test(this.authType)) { throw new ValidationError(_formprefix + "auth_type", ValidationError.PATTERN_FAILED);}
if(this.email) { for(i=0; i < this.email.length; i++ ) { this.email[i].validate(); } }
if(this.username) { for(i=0; i < this.username.length; i++ ) { this.username[i].validate(); } }
if(this.iscticket) { for(i=0; i < this.iscticket.length; i++ ) { this.iscticket[i].validate(); } }
if(this.orgupauthtoken) { for(i=0; i < this.orgupauthtoken.length; i++ ) { this.orgupauthtoken[i].validate(); } }
if(this.systemopenid) { for(i=0; i < this.systemopenid.length; i++ ) { this.systemopenid[i].validate(); } }

	return this;
    }
}
ZUID.path = "zuid";
ZUID.newBuilder = function() {
    return new ZUID();
};

MFAAuditTemplate = function() {
    var _formprefix = "";
    
var mfaauditId = "";
this.setMfaauditId = function(mfaauditId) { 
    this.mfaauditId = mfaauditId;
    return this;
};
this.getMfaauditId = function() {
    return this.mfaauditId;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var operationId = "1";
this.setOperationId = function(operationId) { 
    this.operationId = operationId;
    return this;
};
this.getOperationId = function() {
    return this.operationId;
};
var status = "";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var errors = "";
this.setErrors = function(errors) { 
    this.errors = errors;
    return this;
};
this.getErrors = function() {
    return this.errors;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var deviceToken = "";
this.setDeviceToken = function(deviceToken) { 
    this.deviceToken = deviceToken;
    return this;
};
this.getDeviceToken = function() {
    return this.deviceToken;
};
var deviceName = "";
this.setDeviceName = function(deviceName) { 
    this.deviceName = deviceName;
    return this;
};
this.getDeviceName = function() {
    return this.deviceName;
};
var location = "";
this.setLocation = function(location) { 
    this.location = location;
    return this;
};
this.getLocation = function() {
    return this.location;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var startedTime = "";
this.setStartedTime = function(startedTime) { 
    this.startedTime = startedTime;
    return this;
};
this.getStartedTime = function() {
    return this.startedTime;
};
var alteredTime = "";
this.setAlteredTime = function(alteredTime) { 
    this.alteredTime = alteredTime;
    return this;
};
this.getAlteredTime = function() {
    return this.alteredTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setMfaauditId(json["mfaaudit_id"]);
		this.setZuid(json["zuid"]);
		this.setOperationId(json["operation_id"]);
		this.setStatus(json["status"]);
		this.setErrors(json["errors"]);
		this.setUserAgent(json["user_agent"]);
		this.setDeviceToken(json["device_token"]);
		this.setDeviceName(json["device_name"]);
		this.setLocation(json["location"]);
		this.setReferrer(json["referrer"]);
		this.setStartedTime(json["started_time"]);
		this.setAlteredTime(json["altered_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getMfaauditId()) json += '"mfaaudit_id"' + ":" + '"' + jsonEscape(this.getMfaauditId())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getOperationId()) json += '"operation_id"' + ":" + '"' + jsonEscape(this.getOperationId())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getErrors()) json += '"errors"' + ":" + '"' + jsonEscape(this.getErrors())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getDeviceToken()) json += '"device_token"' + ":" + '"' + jsonEscape(this.getDeviceToken())  + '",';
		if(this.getDeviceName()) json += '"device_name"' + ":" + '"' + jsonEscape(this.getDeviceName())  + '",';
		if(this.getLocation()) json += '"location"' + ":" + '"' + jsonEscape(this.getLocation())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getStartedTime()) json += '"started_time"' + ":" + '"' + jsonEscape(this.getStartedTime())  + '",';
		if(this.getAlteredTime()) json += '"altered_time"' + ":" + '"' + jsonEscape(this.getAlteredTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MFAAuditTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.mfaauditId && !(/^([A-Za-z0-9_.\-]+)$/).test(this.mfaauditId)) { throw new ValidationError(_formprefix + "mfaaudit_id", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.operationId && !Validator.INTEGER.test(this.operationId)) { throw new ValidationError(_formprefix + "operation_id", ValidationError.PATTERN_FAILED);}
if(this.status && !(/dontdisturb/).test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.errors && !(/dontdisturb/).test(this.errors)) { throw new ValidationError(_formprefix + "errors", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.deviceToken && !(/xss:throwerror/).test(this.deviceToken)) { throw new ValidationError(_formprefix + "device_token", ValidationError.PATTERN_FAILED);}
if(this.deviceName && !(/xss:throwerror/).test(this.deviceName)) { throw new ValidationError(_formprefix + "device_name", ValidationError.PATTERN_FAILED);}
if(this.location && !(/^([A-Za-z0-9_.\-]+)$/).test(this.location)) { throw new ValidationError(_formprefix + "location", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.startedTime && !Validator.INTEGER.test(this.startedTime)) { throw new ValidationError(_formprefix + "started_time", ValidationError.PATTERN_FAILED);}
if(this.alteredTime && !Validator.INTEGER.test(this.alteredTime)) { throw new ValidationError(_formprefix + "altered_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
MFAAuditTemplate.path = "mfaaudittemplate";
MFAAuditTemplate.newBuilder = function() {
    return new MFAAuditTemplate();
};

GroupProperties = function() {
    var _formprefix = "";
    
var propName = "";
this.setPropName = function(propName) { 
    this.propName = propName;
    return this;
};
this.getPropName = function() {
    return this.propName;
};
var propValue = "";
this.setPropValue = function(propValue) { 
    this.propValue = propValue;
    return this;
};
this.getPropValue = function() {
    return this.propValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPropName(json["prop_name"]);
		this.setPropValue(json["prop_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPropName()) json += '"prop_name"' + ":" + '"' + jsonEscape(this.getPropName())  + '",';
		if(this.getPropValue()) json += '"prop_value"' + ":" + '"' + jsonEscape(this.getPropValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(GroupProperties.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.propName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.propName)) { throw new ValidationError(_formprefix + "prop_name", ValidationError.PATTERN_FAILED);}
if(this.propValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.propValue)) { throw new ValidationError(_formprefix + "prop_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
GroupProperties.path = "groupproperties";
GroupProperties.newBuilder = function() {
    return new GroupProperties();
};

OAuthAccessTokenScopes = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var allowedOperations = "";
this.setAllowedOperations = function(allowedOperations) { 
    this.allowedOperations = allowedOperations;
    return this;
};
this.getAllowedOperations = function() {
    return this.allowedOperations;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setAllowedOperations(json["allowed_operations"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getAllowedOperations()) json += '"allowed_operations"' + ":" + '"' + jsonEscape(this.getAllowedOperations())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthAccessTokenScopes.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.allowedOperations && !Validator.INTEGER.test(this.allowedOperations)) { throw new ValidationError(_formprefix + "allowed_operations", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthAccessTokenScopes.path = "oauthaccesstokenscopes";
OAuthAccessTokenScopes.newBuilder = function() {
    return new OAuthAccessTokenScopes();
};

OAuthAccessTokenOrgInfo = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidtype = "";
this.setZidtype = function(zidtype) { 
    this.zidtype = zidtype;
    return this;
};
this.getZidtype = function() {
    return this.zidtype;
};
var serviceName = "";
this.setServiceName = function(serviceName) { 
    this.serviceName = serviceName;
    return this;
};
this.getServiceName = function() {
    return this.serviceName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidtype(json["zidtype"]);
		this.setServiceName(json["service_name"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidtype()) json += '"zidtype"' + ":" + '"' + jsonEscape(this.getZidtype())  + '",';
		if(this.getServiceName()) json += '"service_name"' + ":" + '"' + jsonEscape(this.getServiceName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthAccessTokenOrgInfo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.zidtype && !Validator.INTEGER.test(this.zidtype)) { throw new ValidationError(_formprefix + "zidtype", ValidationError.PATTERN_FAILED);}
if(this.serviceName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.serviceName)) { throw new ValidationError(_formprefix + "service_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthAccessTokenOrgInfo.path = "oauthaccesstokenorginfo";
OAuthAccessTokenOrgInfo.newBuilder = function() {
    return new OAuthAccessTokenOrgInfo();
};

DCLocation = function() {
    var _formprefix = "";
    
var location = "";
this.setLocation = function(location) { 
    this.location = location;
    return this;
};
this.getLocation = function() {
    return this.location;
};
var basedomain = "";
this.setBasedomain = function(basedomain) { 
    this.basedomain = basedomain;
    return this;
};
this.getBasedomain = function() {
    return this.basedomain;
};
var equivalentBasedomains = "";
this.setEquivalentBasedomains = function(equivalentBasedomains) { 
    this.equivalentBasedomains = equivalentBasedomains;
    return this;
};
this.getEquivalentBasedomains = function() {
    return this.equivalentBasedomains;
};
var isPrefixed = "true";
this.setIsPrefixed = function(isPrefixed) { 
    this.isPrefixed = isPrefixed;
    return this;
};
this.getIsPrefixed = function() {
    return this.isPrefixed;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var serverUrl = "";
this.setServerUrl = function(serverUrl) { 
    this.serverUrl = serverUrl;
    return this;
};
this.getServerUrl = function() {
    return this.serverUrl;
};
var salt = "";
this.setSalt = function(salt) { 
    this.salt = salt;
    return this;
};
this.getSalt = function() {
    return this.salt;
};
var symmetricKey = "";
this.setSymmetricKey = function(symmetricKey) { 
    this.symmetricKey = symmetricKey;
    return this;
};
this.getSymmetricKey = function() {
    return this.symmetricKey;
};
var timeZones = "";
this.setTimeZones = function(timeZones) { 
    this.timeZones = timeZones;
    return this;
};
this.getTimeZones = function() {
    return this.timeZones;
};
var dcOrdinal = "";
this.setDcOrdinal = function(dcOrdinal) { 
    this.dcOrdinal = dcOrdinal;
    return this;
};
this.getDcOrdinal = function() {
    return this.dcOrdinal;
};
var dccustomdomains = undefined;
this.setDccustomdomainss = function(dccustomdomains) { 
    this.dccustomdomains = dccustomdomains;
    return this;
};
this.getDccustomdomainss = function() {
    return this.dccustomdomains;
};
this.addDccustomdomains = function(dccustomdomains) { 
 if(!this.dccustomdomains) this.dccustomdomains = new Array(); 
  this.dccustomdomains.push(dccustomdomains); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLocation(json["location"]);
		this.setBasedomain(json["basedomain"]);
		this.setEquivalentBasedomains(json["equivalent_basedomains"]);
		this.setIsPrefixed(json["is_prefixed"]);
		this.setDescription(json["description"]);
		this.setServerUrl(json["server_url"]);
		this.setSalt(json["salt"]);
		this.setSymmetricKey(json["symmetric_key"]);
		this.setTimeZones(json["time_zones"]);
		this.setDcOrdinal(json["dc_ordinal"]);
		this.setDccustomdomainss(URI.getResourceArray(json["dCCustomDomains"],"dccustomdomains"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLocation()) json += '"location"' + ":" + '"' + jsonEscape(this.getLocation())  + '",';
		if(this.getBasedomain()) json += '"basedomain"' + ":" + '"' + jsonEscape(this.getBasedomain())  + '",';
		if(this.getEquivalentBasedomains()) json += '"equivalent_basedomains"' + ":" + '"' + jsonEscape(this.getEquivalentBasedomains())  + '",';
		if(this.getIsPrefixed()) json += '"is_prefixed"' + ":" + '"' + jsonEscape(this.getIsPrefixed())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getServerUrl()) json += '"server_url"' + ":" + '"' + jsonEscape(this.getServerUrl())  + '",';
		if(this.getSalt()) json += '"salt"' + ":" + '"' + jsonEscape(this.getSalt())  + '",';
		if(this.getSymmetricKey()) json += '"symmetric_key"' + ":" + '"' + jsonEscape(this.getSymmetricKey())  + '",';
		if(this.getTimeZones()) json += '"time_zones"' + ":" + '"' + jsonEscape(this.getTimeZones())  + '",';
		if(this.getDcOrdinal()) json += '"dc_ordinal"' + ":" + '"' + jsonEscape(this.getDcOrdinal())  + '",';
		if(this.getDccustomdomainss()) json += '"dCCustomDomains"' + ":" + URI.toJSONArray(this.getDccustomdomainss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(DCLocation.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.isPrefixed && !Validator.BOOLEAN.test(this.isPrefixed)) { throw new ValidationError(_formprefix + "is_prefixed", ValidationError.PATTERN_FAILED);}
if(this.dccustomdomains) { for(i=0; i < this.dccustomdomains.length; i++ ) { this.dccustomdomains[i].validate(); } }

	return this;
    }
}
DCLocation.path = "dclocation";
DCLocation.newBuilder = function() {
    return new DCLocation();
};

OAuthInternalApiToken = function() {
    var _formprefix = "";
    
var tokenName = "";
this.setTokenName = function(tokenName) { 
    this.tokenName = tokenName;
    return this;
};
this.getTokenName = function() {
    return this.tokenName;
};
var tokenValue = "";
this.setTokenValue = function(tokenValue) { 
    this.tokenValue = tokenValue;
    return this;
};
this.getTokenValue = function() {
    return this.tokenValue;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTokenName(json["token_name"]);
		this.setTokenValue(json["token_value"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTokenName()) json += '"token_name"' + ":" + '"' + jsonEscape(this.getTokenName())  + '",';
		if(this.getTokenValue()) json += '"token_value"' + ":" + '"' + jsonEscape(this.getTokenValue())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthInternalApiToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.tokenName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.tokenName)) { throw new ValidationError(_formprefix + "token_name", ValidationError.PATTERN_FAILED);}
if(this.tokenValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.tokenValue)) { throw new ValidationError(_formprefix + "token_value", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthInternalApiToken.path = "oauthinternalapitoken";
OAuthInternalApiToken.newBuilder = function() {
    return new OAuthInternalApiToken();
};

User = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var firstName = "";
this.setFirstName = function(firstName) { 
    this.firstName = firstName;
    return this;
};
this.getFirstName = function() {
    return this.firstName;
};
var lastName = "";
this.setLastName = function(lastName) { 
    this.lastName = lastName;
    return this;
};
this.getLastName = function() {
    return this.lastName;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var userStatus = "1";
this.setUserStatus = function(userStatus) { 
    this.userStatus = userStatus;
    return this;
};
this.getUserStatus = function() {
    return this.userStatus;
};
var userRole = "0";
this.setUserRole = function(userRole) { 
    this.userRole = userRole;
    return this;
};
this.getUserRole = function() {
    return this.userRole;
};
var userType = "";
this.setUserType = function(userType) { 
    this.userType = userType;
    return this;
};
this.getUserType = function() {
    return this.userType;
};
var gender = "N";
this.setGender = function(gender) { 
    this.gender = gender;
    return this;
};
this.getGender = function() {
    return this.gender;
};
var countryCode = "";
this.setCountryCode = function(countryCode) { 
    this.countryCode = countryCode;
    return this;
};
this.getCountryCode = function() {
    return this.countryCode;
};
var languageCode = "";
this.setLanguageCode = function(languageCode) { 
    this.languageCode = languageCode;
    return this;
};
this.getLanguageCode = function() {
    return this.languageCode;
};
var languageVariant = "";
this.setLanguageVariant = function(languageVariant) { 
    this.languageVariant = languageVariant;
    return this;
};
this.getLanguageVariant = function() {
    return this.languageVariant;
};
var timezone = "";
this.setTimezone = function(timezone) { 
    this.timezone = timezone;
    return this;
};
this.getTimezone = function() {
    return this.timezone;
};
var dateOfBirth = "";
this.setDateOfBirth = function(dateOfBirth) { 
    this.dateOfBirth = dateOfBirth;
    return this;
};
this.getDateOfBirth = function() {
    return this.dateOfBirth;
};
var dateOfJoining = "";
this.setDateOfJoining = function(dateOfJoining) { 
    this.dateOfJoining = dateOfJoining;
    return this;
};
this.getDateOfJoining = function() {
    return this.dateOfJoining;
};
var aboutMe = "";
this.setAboutMe = function(aboutMe) { 
    this.aboutMe = aboutMe;
    return this;
};
this.getAboutMe = function() {
    return this.aboutMe;
};
var idp = "0";
this.setIdp = function(idp) { 
    this.idp = idp;
    return this;
};
this.getIdp = function() {
    return this.idp;
};
var registrationIpAddress = "";
this.setRegistrationIpAddress = function(registrationIpAddress) { 
    this.registrationIpAddress = registrationIpAddress;
    return this;
};
this.getRegistrationIpAddress = function() {
    return this.registrationIpAddress;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var skypeId = "";
this.setSkypeId = function(skypeId) { 
    this.skypeId = skypeId;
    return this;
};
this.getSkypeId = function() {
    return this.skypeId;
};
var authType = "ZOHO";
this.setAuthType = function(authType) { 
    this.authType = authType;
    return this;
};
this.getAuthType = function() {
    return this.authType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var userinfo = undefined;
this.setUserinfo = function(userinfo) { 
    this.userinfo = userinfo;
    return this;
};
this.getUserinfo = function() {
    return this.userinfo;
};
var userlocation = undefined;
this.setUserlocation = function(userlocation) { 
    this.userlocation = userlocation;
    return this;
};
this.getUserlocation = function() {
    return this.userlocation;
};
var screenname = undefined;
this.setScreennames = function(screenname) { 
    this.screenname = screenname;
    return this;
};
this.getScreennames = function() {
    return this.screenname;
};
this.addScreenname = function(screenname) { 
 if(!this.screenname) this.screenname = new Array(); 
  this.screenname.push(screenname); 
 return this;
};

var mobilescreenname = undefined;
this.setMobilescreennames = function(mobilescreenname) { 
    this.mobilescreenname = mobilescreenname;
    return this;
};
this.getMobilescreennames = function() {
    return this.mobilescreenname;
};
this.addMobilescreenname = function(mobilescreenname) { 
 if(!this.mobilescreenname) this.mobilescreenname = new Array(); 
  this.mobilescreenname.push(mobilescreenname); 
 return this;
};

var useremail = undefined;
this.setUseremails = function(useremail) { 
    this.useremail = useremail;
    return this;
};
this.getUseremails = function() {
    return this.useremail;
};
this.addUseremail = function(useremail) { 
 if(!this.useremail) this.useremail = new Array(); 
  this.useremail.push(useremail); 
 return this;
};

var password = undefined;
this.setPassword = function(password) { 
    this.password = password;
    return this;
};
this.getPassword = function() {
    return this.password;
};
var apppassword = undefined;
this.setApppasswords = function(apppassword) { 
    this.apppassword = apppassword;
    return this;
};
this.getApppasswords = function() {
    return this.apppassword;
};
this.addApppassword = function(apppassword) { 
 if(!this.apppassword) this.apppassword = new Array(); 
  this.apppassword.push(apppassword); 
 return this;
};

var securityqa = undefined;
this.setSecurityqas = function(securityqa) { 
    this.securityqa = securityqa;
    return this;
};
this.getSecurityqas = function() {
    return this.securityqa;
};
this.addSecurityqa = function(securityqa) { 
 if(!this.securityqa) this.securityqa = new Array(); 
  this.securityqa.push(securityqa); 
 return this;
};

var usersecretkey = undefined;
this.setUsersecretkeys = function(usersecretkey) { 
    this.usersecretkey = usersecretkey;
    return this;
};
this.getUsersecretkeys = function() {
    return this.usersecretkey;
};
this.addUsersecretkey = function(usersecretkey) { 
 if(!this.usersecretkey) this.usersecretkey = new Array(); 
  this.usersecretkey.push(usersecretkey); 
 return this;
};

var preference = undefined;
this.setPreference = function(preference) { 
    this.preference = preference;
    return this;
};
this.getPreference = function() {
    return this.preference;
};
var address = undefined;
this.setAddresss = function(address) { 
    this.address = address;
    return this;
};
this.getAddresss = function() {
    return this.address;
};
this.addAddress = function(address) { 
 if(!this.address) this.address = new Array(); 
  this.address.push(address); 
 return this;
};

var properties = undefined;
this.setPropertiess = function(properties) { 
    this.properties = properties;
    return this;
};
this.getPropertiess = function() {
    return this.properties;
};
this.addProperties = function(properties) { 
 if(!this.properties) this.properties = new Array(); 
  this.properties.push(properties); 
 return this;
};

var trusteddomain = undefined;
this.setTrusteddomains = function(trusteddomain) { 
    this.trusteddomain = trusteddomain;
    return this;
};
this.getTrusteddomains = function() {
    return this.trusteddomain;
};
this.addTrusteddomain = function(trusteddomain) { 
 if(!this.trusteddomain) this.trusteddomain = new Array(); 
  this.trusteddomain.push(trusteddomain); 
 return this;
};

var usermobile = undefined;
this.setUsermobiles = function(usermobile) { 
    this.usermobile = usermobile;
    return this;
};
this.getUsermobiles = function() {
    return this.usermobile;
};
this.addUsermobile = function(usermobile) { 
 if(!this.usermobile) this.usermobile = new Array(); 
  this.usermobile.push(usermobile); 
 return this;
};

var userdevice = undefined;
this.setUserdevices = function(userdevice) { 
    this.userdevice = userdevice;
    return this;
};
this.getUserdevices = function() {
    return this.userdevice;
};
this.addUserdevice = function(userdevice) { 
 if(!this.userdevice) this.userdevice = new Array(); 
  this.userdevice.push(userdevice); 
 return this;
};

var signinpreference = undefined;
this.setSigninpreference = function(signinpreference) { 
    this.signinpreference = signinpreference;
    return this;
};
this.getSigninpreference = function() {
    return this.signinpreference;
};
var usertpsecretgroup = undefined;
this.setUsertpsecretgroups = function(usertpsecretgroup) { 
    this.usertpsecretgroup = usertpsecretgroup;
    return this;
};
this.getUsertpsecretgroups = function() {
    return this.usertpsecretgroup;
};
this.addUsertpsecretgroup = function(usertpsecretgroup) { 
 if(!this.usertpsecretgroup) this.usertpsecretgroup = new Array(); 
  this.usertpsecretgroup.push(usertpsecretgroup); 
 return this;
};

var userthirdpartysecretkeys = undefined;
this.setUserthirdpartysecretkeyss = function(userthirdpartysecretkeys) { 
    this.userthirdpartysecretkeys = userthirdpartysecretkeys;
    return this;
};
this.getUserthirdpartysecretkeyss = function() {
    return this.userthirdpartysecretkeys;
};
this.addUserthirdpartysecretkeys = function(userthirdpartysecretkeys) { 
 if(!this.userthirdpartysecretkeys) this.userthirdpartysecretkeys = new Array(); 
  this.userthirdpartysecretkeys.push(userthirdpartysecretkeys); 
 return this;
};

var openid = undefined;
this.setOpenids = function(openid) { 
    this.openid = openid;
    return this;
};
this.getOpenids = function() {
    return this.openid;
};
this.addOpenid = function(openid) { 
 if(!this.openid) this.openid = new Array(); 
  this.openid.push(openid); 
 return this;
};

var passwordhistory = undefined;
this.setPasswordhistorys = function(passwordhistory) { 
    this.passwordhistory = passwordhistory;
    return this;
};
this.getPasswordhistorys = function() {
    return this.passwordhistory;
};
this.addPasswordhistory = function(passwordhistory) { 
 if(!this.passwordhistory) this.passwordhistory = new Array(); 
  this.passwordhistory.push(passwordhistory); 
 return this;
};

var userauthorizedip = undefined;
this.setUserauthorizedips = function(userauthorizedip) { 
    this.userauthorizedip = userauthorizedip;
    return this;
};
this.getUserauthorizedips = function() {
    return this.userauthorizedip;
};
this.addUserauthorizedip = function(userauthorizedip) { 
 if(!this.userauthorizedip) this.userauthorizedip = new Array(); 
  this.userauthorizedip.push(userauthorizedip); 
 return this;
};

var usercustomfield = undefined;
this.setUsercustomfields = function(usercustomfield) { 
    this.usercustomfield = usercustomfield;
    return this;
};
this.getUsercustomfields = function() {
    return this.usercustomfield;
};
this.addUsercustomfield = function(usercustomfield) { 
 if(!this.usercustomfield) this.usercustomfield = new Array(); 
  this.usercustomfield.push(usercustomfield); 
 return this;
};

var recoverycode = undefined;
this.setRecoverycodes = function(recoverycode) { 
    this.recoverycode = recoverycode;
    return this;
};
this.getRecoverycodes = function() {
    return this.recoverycode;
};
this.addRecoverycode = function(recoverycode) { 
 if(!this.recoverycode) this.recoverycode = new Array(); 
  this.recoverycode.push(recoverycode); 
 return this;
};

var usersystemproperties = undefined;
this.setUsersystemproperties = function(usersystemproperties) { 
    this.usersystemproperties = usersystemproperties;
    return this;
};
this.getUsersystemproperties = function() {
    return this.usersystemproperties;
};
var userservicedetails = undefined;
this.setUserservicedetailss = function(userservicedetails) { 
    this.userservicedetails = userservicedetails;
    return this;
};
this.getUserservicedetailss = function() {
    return this.userservicedetails;
};
this.addUserservicedetails = function(userservicedetails) { 
 if(!this.userservicedetails) this.userservicedetails = new Array(); 
  this.userservicedetails.push(userservicedetails); 
 return this;
};

var userverificationcode = undefined;
this.setUserverificationcodes = function(userverificationcode) { 
    this.userverificationcode = userverificationcode;
    return this;
};
this.getUserverificationcodes = function() {
    return this.userverificationcode;
};
this.addUserverificationcode = function(userverificationcode) { 
 if(!this.userverificationcode) this.userverificationcode = new Array(); 
  this.userverificationcode.push(userverificationcode); 
 return this;
};

var useraccountsproperties = undefined;
this.setUseraccountsproperties = function(useraccountsproperties) { 
    this.useraccountsproperties = useraccountsproperties;
    return this;
};
this.getUseraccountsproperties = function() {
    return this.useraccountsproperties;
};
var oauthaccessgrant = undefined;
this.setOauthaccessgrants = function(oauthaccessgrant) { 
    this.oauthaccessgrant = oauthaccessgrant;
    return this;
};
this.getOauthaccessgrants = function() {
    return this.oauthaccessgrant;
};
this.addOauthaccessgrant = function(oauthaccessgrant) { 
 if(!this.oauthaccessgrant) this.oauthaccessgrant = new Array(); 
  this.oauthaccessgrant.push(oauthaccessgrant); 
 return this;
};

var useroauthapps = undefined;
this.setUseroauthappss = function(useroauthapps) { 
    this.useroauthapps = useroauthapps;
    return this;
};
this.getUseroauthappss = function() {
    return this.useroauthapps;
};
this.addUseroauthapps = function(useroauthapps) { 
 if(!this.useroauthapps) this.useroauthapps = new Array(); 
  this.useroauthapps.push(useroauthapps); 
 return this;
};

var oauthallowedclients = undefined;
this.setOauthallowedclientss = function(oauthallowedclients) { 
    this.oauthallowedclients = oauthallowedclients;
    return this;
};
this.getOauthallowedclientss = function() {
    return this.oauthallowedclients;
};
this.addOauthallowedclients = function(oauthallowedclients) { 
 if(!this.oauthallowedclients) this.oauthallowedclients = new Array(); 
  this.oauthallowedclients.push(oauthallowedclients); 
 return this;
};

var usergdprdetails = undefined;
this.setUsergdprdetails = function(usergdprdetails) { 
    this.usergdprdetails = usergdprdetails;
    return this;
};
this.getUsergdprdetails = function() {
    return this.usergdprdetails;
};
var usersigninlocation = undefined;
this.setUsersigninlocations = function(usersigninlocation) { 
    this.usersigninlocation = usersigninlocation;
    return this;
};
this.getUsersigninlocations = function() {
    return this.usersigninlocation;
};
this.addUsersigninlocation = function(usersigninlocation) { 
 if(!this.usersigninlocation) this.usersigninlocation = new Array(); 
  this.usersigninlocation.push(usersigninlocation); 
 return this;
};

var userextendedinfo = undefined;
this.setUserextendedinfo = function(userextendedinfo) { 
    this.userextendedinfo = userextendedinfo;
    return this;
};
this.getUserextendedinfo = function() {
    return this.userextendedinfo;
};
var usermailfetchlocation = undefined;
this.setUsermailfetchlocations = function(usermailfetchlocation) { 
    this.usermailfetchlocation = usermailfetchlocation;
    return this;
};
this.getUsermailfetchlocations = function() {
    return this.usermailfetchlocation;
};
this.addUsermailfetchlocation = function(usermailfetchlocation) { 
 if(!this.usermailfetchlocation) this.usermailfetchlocation = new Array(); 
  this.usermailfetchlocation.push(usermailfetchlocation); 
 return this;
};

var yubikeyregistrationdata = undefined;
this.setYubikeyregistrationdatas = function(yubikeyregistrationdata) { 
    this.yubikeyregistrationdata = yubikeyregistrationdata;
    return this;
};
this.getYubikeyregistrationdatas = function() {
    return this.yubikeyregistrationdata;
};
this.addYubikeyregistrationdata = function(yubikeyregistrationdata) { 
 if(!this.yubikeyregistrationdata) this.yubikeyregistrationdata = new Array(); 
  this.yubikeyregistrationdata.push(yubikeyregistrationdata); 
 return this;
};

var oneauthpreference = undefined;
this.setOneauthpreference = function(oneauthpreference) { 
    this.oneauthpreference = oneauthpreference;
    return this;
};
this.getOneauthpreference = function() {
    return this.oneauthpreference;
};
var userappkeystore = undefined;
this.setUserappkeystores = function(userappkeystore) { 
    this.userappkeystore = userappkeystore;
    return this;
};
this.getUserappkeystores = function() {
    return this.userappkeystore;
};
this.addUserappkeystore = function(userappkeystore) { 
 if(!this.userappkeystore) this.userappkeystore = new Array(); 
  this.userappkeystore.push(userappkeystore); 
 return this;
};

var attribute = undefined;
this.setAttributes = function(attribute) { 
    this.attribute = attribute;
    return this;
};
this.getAttributes = function() {
    return this.attribute;
};
this.addAttribute = function(attribute) { 
 if(!this.attribute) this.attribute = new Array(); 
  this.attribute.push(attribute); 
 return this;
};

var userphoto = undefined;
this.setUserphoto = function(userphoto) { 
    this.userphoto = userphoto;
    return this;
};
this.getUserphoto = function() {
    return this.userphoto;
};
var authtoken = undefined;
this.setAuthtokens = function(authtoken) { 
    this.authtoken = authtoken;
    return this;
};
this.getAuthtokens = function() {
    return this.authtoken;
};
this.addAuthtoken = function(authtoken) { 
 if(!this.authtoken) this.authtoken = new Array(); 
  this.authtoken.push(authtoken); 
 return this;
};

var useralldomainstoken = undefined;
this.setUseralldomainstokens = function(useralldomainstoken) { 
    this.useralldomainstoken = useralldomainstoken;
    return this;
};
this.getUseralldomainstokens = function() {
    return this.useralldomainstoken;
};
this.addUseralldomainstoken = function(useralldomainstoken) { 
 if(!this.useralldomainstoken) this.useralldomainstoken = new Array(); 
  this.useralldomainstoken.push(useralldomainstoken); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setFirstName(json["first_name"]);
		this.setLastName(json["last_name"]);
		this.setDisplayName(json["display_name"]);
		this.setUserStatus(json["user_status"]);
		this.setUserRole(json["user_role"]);
		this.setUserType(json["user_type"]);
		this.setGender(json["gender"]);
		this.setCountryCode(json["country_code"]);
		this.setLanguageCode(json["language_code"]);
		this.setLanguageVariant(json["language_variant"]);
		this.setTimezone(json["timezone"]);
		this.setDateOfBirth(json["date_of_birth"]);
		this.setDateOfJoining(json["date_of_joining"]);
		this.setAboutMe(json["about_me"]);
		this.setIdp(json["idp"]);
		this.setRegistrationIpAddress(json["registration_ip_address"]);
		this.setReferrer(json["referrer"]);
		this.setSkypeId(json["skype_id"]);
		this.setAuthType(json["auth_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setUserinfo(URI.getResource(json["userInfo"],"userinfo"));
		this.setUserlocation(URI.getResource(json["userLocation"],"userlocation"));
		this.setScreennames(URI.getResourceArray(json["screenName"],"screenname"));
		this.setMobilescreennames(URI.getResourceArray(json["mobileScreenName"],"mobilescreenname"));
		this.setUseremails(URI.getResourceArray(json["userEmail"],"useremail"));
		this.setPassword(URI.getResource(json["password"],"password"));
		this.setApppasswords(URI.getResourceArray(json["appPassword"],"apppassword"));
		this.setSecurityqas(URI.getResourceArray(json["securityQA"],"securityqa"));
		this.setUsersecretkeys(URI.getResourceArray(json["userSecretKey"],"usersecretkey"));
		this.setPreference(URI.getResource(json["preference"],"preference"));
		this.setAddresss(URI.getResourceArray(json["address"],"address"));
		this.setPropertiess(URI.getResourceArray(json["properties"],"properties"));
		this.setTrusteddomains(URI.getResourceArray(json["trustedDomain"],"trusteddomain"));
		this.setUsermobiles(URI.getResourceArray(json["userMobile"],"usermobile"));
		this.setUserdevices(URI.getResourceArray(json["userDevice"],"userdevice"));
		this.setSigninpreference(URI.getResource(json["signinPreference"],"signinpreference"));
		this.setUsertpsecretgroups(URI.getResourceArray(json["userTPSecretGroup"],"usertpsecretgroup"));
		this.setUserthirdpartysecretkeyss(URI.getResourceArray(json["userThirdPartySecretKeys"],"userthirdpartysecretkeys"));
		this.setOpenids(URI.getResourceArray(json["openId"],"openid"));
		this.setPasswordhistorys(URI.getResourceArray(json["passwordHistory"],"passwordhistory"));
		this.setUserauthorizedips(URI.getResourceArray(json["userAuthorizedIp"],"userauthorizedip"));
		this.setUsercustomfields(URI.getResourceArray(json["userCustomField"],"usercustomfield"));
		this.setRecoverycodes(URI.getResourceArray(json["recoveryCode"],"recoverycode"));
		this.setUsersystemproperties(URI.getResource(json["userSystemProperties"],"usersystemproperties"));
		this.setUserservicedetailss(URI.getResourceArray(json["userServiceDetails"],"userservicedetails"));
		this.setUserverificationcodes(URI.getResourceArray(json["userVerificationCode"],"userverificationcode"));
		this.setUseraccountsproperties(URI.getResource(json["userAccountsProperties"],"useraccountsproperties"));
		this.setOauthaccessgrants(URI.getResourceArray(json["oAuthAccessGrant"],"oauthaccessgrant"));
		this.setUseroauthappss(URI.getResourceArray(json["userOAuthApps"],"useroauthapps"));
		this.setOauthallowedclientss(URI.getResourceArray(json["oAuthAllowedClients"],"oauthallowedclients"));
		this.setUsergdprdetails(URI.getResource(json["userGDPRDetails"],"usergdprdetails"));
		this.setUsersigninlocations(URI.getResourceArray(json["userSigninLocation"],"usersigninlocation"));
		this.setUserextendedinfo(URI.getResource(json["userExtendedInfo"],"userextendedinfo"));
		this.setUsermailfetchlocations(URI.getResourceArray(json["userMailFetchLocation"],"usermailfetchlocation"));
		this.setYubikeyregistrationdatas(URI.getResourceArray(json["yubikeyRegistrationData"],"yubikeyregistrationdata"));
		this.setOneauthpreference(URI.getResource(json["oneAuthPreference"],"oneauthpreference"));
		this.setUserappkeystores(URI.getResourceArray(json["userAppKeyStore"],"userappkeystore"));
		this.setAttributes(URI.getResourceArray(json["attribute"],"attribute"));
		this.setUserphoto(URI.getResource(json["userPhoto"],"userphoto"));
		this.setAuthtokens(URI.getResourceArray(json["authToken"],"authtoken"));
		this.setUseralldomainstokens(URI.getResourceArray(json["userAllDomainsToken"],"useralldomainstoken"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getFirstName()) json += '"first_name"' + ":" + '"' + jsonEscape(this.getFirstName())  + '",';
		if(this.getLastName()) json += '"last_name"' + ":" + '"' + jsonEscape(this.getLastName())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getUserStatus()) json += '"user_status"' + ":" + '"' + jsonEscape(this.getUserStatus())  + '",';
		if(this.getUserRole()) json += '"user_role"' + ":" + '"' + jsonEscape(this.getUserRole())  + '",';
		if(this.getUserType()) json += '"user_type"' + ":" + '"' + jsonEscape(this.getUserType())  + '",';
		if(this.getGender()) json += '"gender"' + ":" + '"' + jsonEscape(this.getGender())  + '",';
		if(this.getCountryCode()) json += '"country_code"' + ":" + '"' + jsonEscape(this.getCountryCode())  + '",';
		if(this.getLanguageCode()) json += '"language_code"' + ":" + '"' + jsonEscape(this.getLanguageCode())  + '",';
		if(this.getLanguageVariant()) json += '"language_variant"' + ":" + '"' + jsonEscape(this.getLanguageVariant())  + '",';
		if(this.getTimezone()) json += '"timezone"' + ":" + '"' + jsonEscape(this.getTimezone())  + '",';
		if(this.getDateOfBirth()) json += '"date_of_birth"' + ":" + '"' + jsonEscape(this.getDateOfBirth())  + '",';
		if(this.getDateOfJoining()) json += '"date_of_joining"' + ":" + '"' + jsonEscape(this.getDateOfJoining())  + '",';
		if(this.getAboutMe()) json += '"about_me"' + ":" + '"' + jsonEscape(this.getAboutMe())  + '",';
		if(this.getIdp()) json += '"idp"' + ":" + '"' + jsonEscape(this.getIdp())  + '",';
		if(this.getRegistrationIpAddress()) json += '"registration_ip_address"' + ":" + '"' + jsonEscape(this.getRegistrationIpAddress())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getSkypeId()) json += '"skype_id"' + ":" + '"' + jsonEscape(this.getSkypeId())  + '",';
		if(this.getAuthType()) json += '"auth_type"' + ":" + '"' + jsonEscape(this.getAuthType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getUserinfo()) json += '"userInfo"' + ":" + this.getUserinfo().toJSON()  + ',';
		if(this.getUserlocation()) json += '"userLocation"' + ":" + this.getUserlocation().toJSON()  + ',';
		if(this.getScreennames()) json += '"screenName"' + ":" + URI.toJSONArray(this.getScreennames())  + ',';
		if(this.getMobilescreennames()) json += '"mobileScreenName"' + ":" + URI.toJSONArray(this.getMobilescreennames())  + ',';
		if(this.getUseremails()) json += '"userEmail"' + ":" + URI.toJSONArray(this.getUseremails())  + ',';
		if(this.getPassword()) json += '"password"' + ":" + this.getPassword().toJSON()  + ',';
		if(this.getApppasswords()) json += '"appPassword"' + ":" + URI.toJSONArray(this.getApppasswords())  + ',';
		if(this.getSecurityqas()) json += '"securityQA"' + ":" + URI.toJSONArray(this.getSecurityqas())  + ',';
		if(this.getUsersecretkeys()) json += '"userSecretKey"' + ":" + URI.toJSONArray(this.getUsersecretkeys())  + ',';
		if(this.getPreference()) json += '"preference"' + ":" + this.getPreference().toJSON()  + ',';
		if(this.getAddresss()) json += '"address"' + ":" + URI.toJSONArray(this.getAddresss())  + ',';
		if(this.getPropertiess()) json += '"properties"' + ":" + URI.toJSONArray(this.getPropertiess())  + ',';
		if(this.getTrusteddomains()) json += '"trustedDomain"' + ":" + URI.toJSONArray(this.getTrusteddomains())  + ',';
		if(this.getUsermobiles()) json += '"userMobile"' + ":" + URI.toJSONArray(this.getUsermobiles())  + ',';
		if(this.getUserdevices()) json += '"userDevice"' + ":" + URI.toJSONArray(this.getUserdevices())  + ',';
		if(this.getSigninpreference()) json += '"signinPreference"' + ":" + this.getSigninpreference().toJSON()  + ',';
		if(this.getUsertpsecretgroups()) json += '"userTPSecretGroup"' + ":" + URI.toJSONArray(this.getUsertpsecretgroups())  + ',';
		if(this.getUserthirdpartysecretkeyss()) json += '"userThirdPartySecretKeys"' + ":" + URI.toJSONArray(this.getUserthirdpartysecretkeyss())  + ',';
		if(this.getOpenids()) json += '"openId"' + ":" + URI.toJSONArray(this.getOpenids())  + ',';
		if(this.getPasswordhistorys()) json += '"passwordHistory"' + ":" + URI.toJSONArray(this.getPasswordhistorys())  + ',';
		if(this.getUserauthorizedips()) json += '"userAuthorizedIp"' + ":" + URI.toJSONArray(this.getUserauthorizedips())  + ',';
		if(this.getUsercustomfields()) json += '"userCustomField"' + ":" + URI.toJSONArray(this.getUsercustomfields())  + ',';
		if(this.getRecoverycodes()) json += '"recoveryCode"' + ":" + URI.toJSONArray(this.getRecoverycodes())  + ',';
		if(this.getUsersystemproperties()) json += '"userSystemProperties"' + ":" + this.getUsersystemproperties().toJSON()  + ',';
		if(this.getUserservicedetailss()) json += '"userServiceDetails"' + ":" + URI.toJSONArray(this.getUserservicedetailss())  + ',';
		if(this.getUserverificationcodes()) json += '"userVerificationCode"' + ":" + URI.toJSONArray(this.getUserverificationcodes())  + ',';
		if(this.getUseraccountsproperties()) json += '"userAccountsProperties"' + ":" + this.getUseraccountsproperties().toJSON()  + ',';
		if(this.getOauthaccessgrants()) json += '"oAuthAccessGrant"' + ":" + URI.toJSONArray(this.getOauthaccessgrants())  + ',';
		if(this.getUseroauthappss()) json += '"userOAuthApps"' + ":" + URI.toJSONArray(this.getUseroauthappss())  + ',';
		if(this.getOauthallowedclientss()) json += '"oAuthAllowedClients"' + ":" + URI.toJSONArray(this.getOauthallowedclientss())  + ',';
		if(this.getUsergdprdetails()) json += '"userGDPRDetails"' + ":" + this.getUsergdprdetails().toJSON()  + ',';
		if(this.getUsersigninlocations()) json += '"userSigninLocation"' + ":" + URI.toJSONArray(this.getUsersigninlocations())  + ',';
		if(this.getUserextendedinfo()) json += '"userExtendedInfo"' + ":" + this.getUserextendedinfo().toJSON()  + ',';
		if(this.getUsermailfetchlocations()) json += '"userMailFetchLocation"' + ":" + URI.toJSONArray(this.getUsermailfetchlocations())  + ',';
		if(this.getYubikeyregistrationdatas()) json += '"yubikeyRegistrationData"' + ":" + URI.toJSONArray(this.getYubikeyregistrationdatas())  + ',';
		if(this.getOneauthpreference()) json += '"oneAuthPreference"' + ":" + this.getOneauthpreference().toJSON()  + ',';
		if(this.getUserappkeystores()) json += '"userAppKeyStore"' + ":" + URI.toJSONArray(this.getUserappkeystores())  + ',';
		if(this.getAttributes()) json += '"attribute"' + ":" + URI.toJSONArray(this.getAttributes())  + ',';
		if(this.getUserphoto()) json += '"userPhoto"' + ":" + this.getUserphoto().toJSON()  + ',';
		if(this.getAuthtokens()) json += '"authToken"' + ":" + URI.toJSONArray(this.getAuthtokens())  + ',';
		if(this.getUseralldomainstokens()) json += '"userAllDomainsToken"' + ":" + URI.toJSONArray(this.getUseralldomainstokens())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(User.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.firstName && !(/xss:throwerror/).test(this.firstName)) { throw new ValidationError(_formprefix + "first_name", ValidationError.PATTERN_FAILED);}
if(this.lastName && !(/xss:throwerror/).test(this.lastName)) { throw new ValidationError(_formprefix + "last_name", ValidationError.PATTERN_FAILED);}
if(this.displayName && !(/xss:throwerror/).test(this.displayName)) { throw new ValidationError(_formprefix + "display_name", ValidationError.PATTERN_FAILED);}
if(this.userStatus && !Validator.INTEGER.test(this.userStatus)) { throw new ValidationError(_formprefix + "user_status", ValidationError.PATTERN_FAILED);}
if(this.userRole && !Validator.INTEGER.test(this.userRole)) { throw new ValidationError(_formprefix + "user_role", ValidationError.PATTERN_FAILED);}
if(this.userType && !(/^([A-Za-z0-9_.\-]+)$/).test(this.userType)) { throw new ValidationError(_formprefix + "user_type", ValidationError.PATTERN_FAILED);}
if(this.countryCode && !(/^[a-zA-Z0-9]{2,5}$/).test(this.countryCode)) { throw new ValidationError(_formprefix + "country_code", ValidationError.PATTERN_FAILED);}
if(this.languageCode && !(/^[a-zA-Z-]{0,5}$/).test(this.languageCode)) { throw new ValidationError(_formprefix + "language_code", ValidationError.PATTERN_FAILED);}
if(this.languageVariant && !(/^[a-z0-9]{0,30}$/).test(this.languageVariant)) { throw new ValidationError(_formprefix + "language_variant", ValidationError.PATTERN_FAILED);}
if(this.timezone && !(/xss:throwerror/).test(this.timezone)) { throw new ValidationError(_formprefix + "timezone", ValidationError.PATTERN_FAILED);}
if(this.dateOfBirth && !Validator.INTEGER.test(this.dateOfBirth)) { throw new ValidationError(_formprefix + "date_of_birth", ValidationError.PATTERN_FAILED);}
if(this.dateOfJoining && !Validator.INTEGER.test(this.dateOfJoining)) { throw new ValidationError(_formprefix + "date_of_joining", ValidationError.PATTERN_FAILED);}
if(this.aboutMe && !(/xss:throwerror/).test(this.aboutMe)) { throw new ValidationError(_formprefix + "about_me", ValidationError.PATTERN_FAILED);}
if(this.idp && !Validator.INTEGER.test(this.idp)) { throw new ValidationError(_formprefix + "idp", ValidationError.PATTERN_FAILED);}
if(this.registrationIpAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.registrationIpAddress)) { throw new ValidationError(_formprefix + "registration_ip_address", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/xss:throwerror/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.skypeId && !(/^([A-Za-z0-9_.\-]+)$/).test(this.skypeId)) { throw new ValidationError(_formprefix + "skype_id", ValidationError.PATTERN_FAILED);}
if(this.authType && !(/^([A-Za-z0-9_.\-]+)$/).test(this.authType)) { throw new ValidationError(_formprefix + "auth_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.userinfo) { this.userinfo.validate(); }
if(this.userlocation) { this.userlocation.validate(); }
if(this.screenname) { for(i=0; i < this.screenname.length; i++ ) { this.screenname[i].validate(); } }
if(this.mobilescreenname) { for(i=0; i < this.mobilescreenname.length; i++ ) { this.mobilescreenname[i].validate(); } }
if(this.useremail) { for(i=0; i < this.useremail.length; i++ ) { this.useremail[i].validate(); } }
if(this.password) { this.password.validate(); }
if(this.apppassword) { for(i=0; i < this.apppassword.length; i++ ) { this.apppassword[i].validate(); } }
if(this.securityqa) { for(i=0; i < this.securityqa.length; i++ ) { this.securityqa[i].validate(); } }
if(this.usersecretkey) { for(i=0; i < this.usersecretkey.length; i++ ) { this.usersecretkey[i].validate(); } }
if(this.preference) { this.preference.validate(); }
if(this.address) { for(i=0; i < this.address.length; i++ ) { this.address[i].validate(); } }
if(this.properties) { for(i=0; i < this.properties.length; i++ ) { this.properties[i].validate(); } }
if(this.trusteddomain) { for(i=0; i < this.trusteddomain.length; i++ ) { this.trusteddomain[i].validate(); } }
if(this.usermobile) { for(i=0; i < this.usermobile.length; i++ ) { this.usermobile[i].validate(); } }
if(this.userdevice) { for(i=0; i < this.userdevice.length; i++ ) { this.userdevice[i].validate(); } }
if(this.signinpreference) { this.signinpreference.validate(); }
if(this.usertpsecretgroup) { for(i=0; i < this.usertpsecretgroup.length; i++ ) { this.usertpsecretgroup[i].validate(); } }
if(this.userthirdpartysecretkeys) { for(i=0; i < this.userthirdpartysecretkeys.length; i++ ) { this.userthirdpartysecretkeys[i].validate(); } }
if(this.openid) { for(i=0; i < this.openid.length; i++ ) { this.openid[i].validate(); } }
if(this.passwordhistory) { for(i=0; i < this.passwordhistory.length; i++ ) { this.passwordhistory[i].validate(); } }
if(this.userauthorizedip) { for(i=0; i < this.userauthorizedip.length; i++ ) { this.userauthorizedip[i].validate(); } }
if(this.usercustomfield) { for(i=0; i < this.usercustomfield.length; i++ ) { this.usercustomfield[i].validate(); } }
if(this.recoverycode) { for(i=0; i < this.recoverycode.length; i++ ) { this.recoverycode[i].validate(); } }
if(this.usersystemproperties) { this.usersystemproperties.validate(); }
if(this.userservicedetails) { for(i=0; i < this.userservicedetails.length; i++ ) { this.userservicedetails[i].validate(); } }
if(this.userverificationcode) { for(i=0; i < this.userverificationcode.length; i++ ) { this.userverificationcode[i].validate(); } }
if(this.useraccountsproperties) { this.useraccountsproperties.validate(); }
if(this.oauthaccessgrant) { for(i=0; i < this.oauthaccessgrant.length; i++ ) { this.oauthaccessgrant[i].validate(); } }
if(this.useroauthapps) { for(i=0; i < this.useroauthapps.length; i++ ) { this.useroauthapps[i].validate(); } }
if(this.oauthallowedclients) { for(i=0; i < this.oauthallowedclients.length; i++ ) { this.oauthallowedclients[i].validate(); } }
if(this.usergdprdetails) { this.usergdprdetails.validate(); }
if(this.usersigninlocation) { for(i=0; i < this.usersigninlocation.length; i++ ) { this.usersigninlocation[i].validate(); } }
if(this.userextendedinfo) { this.userextendedinfo.validate(); }
if(this.usermailfetchlocation) { for(i=0; i < this.usermailfetchlocation.length; i++ ) { this.usermailfetchlocation[i].validate(); } }
if(this.yubikeyregistrationdata) { for(i=0; i < this.yubikeyregistrationdata.length; i++ ) { this.yubikeyregistrationdata[i].validate(); } }
if(this.oneauthpreference) { this.oneauthpreference.validate(); }
if(this.userappkeystore) { for(i=0; i < this.userappkeystore.length; i++ ) { this.userappkeystore[i].validate(); } }
if(this.attribute) { for(i=0; i < this.attribute.length; i++ ) { this.attribute[i].validate(); } }
if(this.userphoto) { this.userphoto.validate(); }
if(this.authtoken) { for(i=0; i < this.authtoken.length; i++ ) { this.authtoken[i].validate(); } }
if(this.useralldomainstoken) { for(i=0; i < this.useralldomainstoken.length; i++ ) { this.useralldomainstoken[i].validate(); } }

	return this;
    }
}
User.path = "user";
User.newBuilder = function() {
    return new User();
};

AccountMember = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidType = "User";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var zarid = "";
this.setZarid = function(zarid) { 
    this.zarid = zarid;
    return this;
};
this.getZarid = function() {
    return this.zarid;
};
var isActive = "1";
this.setIsActive = function(isActive) { 
    this.isActive = isActive;
    return this;
};
this.getIsActive = function() {
    return this.isActive;
};
var userType = "";
this.setUserType = function(userType) { 
    this.userType = userType;
    return this;
};
this.getUserType = function() {
    return this.userType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var accountmemberrole = undefined;
this.setAccountmemberroles = function(accountmemberrole) { 
    this.accountmemberrole = accountmemberrole;
    return this;
};
this.getAccountmemberroles = function() {
    return this.accountmemberrole;
};
this.addAccountmemberrole = function(accountmemberrole) { 
 if(!this.accountmemberrole) this.accountmemberrole = new Array(); 
  this.accountmemberrole.push(accountmemberrole); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidType(json["zid_type"]);
		this.setZarid(json["zarid"]);
		this.setIsActive(json["is_active"]);
		this.setUserType(json["user_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setAccountmemberroles(URI.getResourceArray(json["accountMemberRole"],"accountmemberrole"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getZarid()) json += '"zarid"' + ":" + '"' + jsonEscape(this.getZarid())  + '",';
		if(this.getIsActive()) json += '"is_active"' + ":" + '"' + jsonEscape(this.getIsActive())  + '",';
		if(this.getUserType()) json += '"user_type"' + ":" + '"' + jsonEscape(this.getUserType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getAccountmemberroles()) json += '"accountMemberRole"' + ":" + URI.toJSONArray(this.getAccountmemberroles())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountMember.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.zarid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zarid)) { throw new ValidationError(_formprefix + "zarid", ValidationError.PATTERN_FAILED);}
if(this.isActive && !Validator.INTEGER.test(this.isActive)) { throw new ValidationError(_formprefix + "is_active", ValidationError.PATTERN_FAILED);}
if(this.userType && !Validator.INTEGER.test(this.userType)) { throw new ValidationError(_formprefix + "user_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.accountmemberrole) { for(i=0; i < this.accountmemberrole.length; i++ ) { this.accountmemberrole[i].validate(); } }

	return this;
    }
}
AccountMember.path = "accountmember";
AccountMember.newBuilder = function() {
    return new AccountMember();
};

ServiceOrgKYCContact = function() {
    var _formprefix = "";
    
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var firstName = "";
this.setFirstName = function(firstName) { 
    this.firstName = firstName;
    return this;
};
this.getFirstName = function() {
    return this.firstName;
};
var lastName = "";
this.setLastName = function(lastName) { 
    this.lastName = lastName;
    return this;
};
this.getLastName = function() {
    return this.lastName;
};
var dataProtectionOfficer = "false";
this.setDataProtectionOfficer = function(dataProtectionOfficer) { 
    this.dataProtectionOfficer = dataProtectionOfficer;
    return this;
};
this.getDataProtectionOfficer = function() {
    return this.dataProtectionOfficer;
};
var privacyRepresentative = "false";
this.setPrivacyRepresentative = function(privacyRepresentative) { 
    this.privacyRepresentative = privacyRepresentative;
    return this;
};
this.getPrivacyRepresentative = function() {
    return this.privacyRepresentative;
};
var accountDisputeResolution = "false";
this.setAccountDisputeResolution = function(accountDisputeResolution) { 
    this.accountDisputeResolution = accountDisputeResolution;
    return this;
};
this.getAccountDisputeResolution = function() {
    return this.accountDisputeResolution;
};
var breachNotification = "false";
this.setBreachNotification = function(breachNotification) { 
    this.breachNotification = breachNotification;
    return this;
};
this.getBreachNotification = function() {
    return this.breachNotification;
};
var subprocessorNotification = "false";
this.setSubprocessorNotification = function(subprocessorNotification) { 
    this.subprocessorNotification = subprocessorNotification;
    return this;
};
this.getSubprocessorNotification = function() {
    return this.subprocessorNotification;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setEmailId(json["email_id"]);
		this.setFirstName(json["first_name"]);
		this.setLastName(json["last_name"]);
		this.setDataProtectionOfficer(json["data_protection_officer"]);
		this.setPrivacyRepresentative(json["privacy_representative"]);
		this.setAccountDisputeResolution(json["account_dispute_resolution"]);
		this.setBreachNotification(json["breach_notification"]);
		this.setSubprocessorNotification(json["subprocessor_notification"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getFirstName()) json += '"first_name"' + ":" + '"' + jsonEscape(this.getFirstName())  + '",';
		if(this.getLastName()) json += '"last_name"' + ":" + '"' + jsonEscape(this.getLastName())  + '",';
		if(this.getDataProtectionOfficer()) json += '"data_protection_officer"' + ":" + '"' + jsonEscape(this.getDataProtectionOfficer())  + '",';
		if(this.getPrivacyRepresentative()) json += '"privacy_representative"' + ":" + '"' + jsonEscape(this.getPrivacyRepresentative())  + '",';
		if(this.getAccountDisputeResolution()) json += '"account_dispute_resolution"' + ":" + '"' + jsonEscape(this.getAccountDisputeResolution())  + '",';
		if(this.getBreachNotification()) json += '"breach_notification"' + ":" + '"' + jsonEscape(this.getBreachNotification())  + '",';
		if(this.getSubprocessorNotification()) json += '"subprocessor_notification"' + ":" + '"' + jsonEscape(this.getSubprocessorNotification())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgKYCContact.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.firstName && !(/xss:throwerror/).test(this.firstName)) { throw new ValidationError(_formprefix + "first_name", ValidationError.PATTERN_FAILED);}
if(this.lastName && !(/xss:throwerror/).test(this.lastName)) { throw new ValidationError(_formprefix + "last_name", ValidationError.PATTERN_FAILED);}
if(this.dataProtectionOfficer && !Validator.BOOLEAN.test(this.dataProtectionOfficer)) { throw new ValidationError(_formprefix + "data_protection_officer", ValidationError.PATTERN_FAILED);}
if(this.privacyRepresentative && !Validator.BOOLEAN.test(this.privacyRepresentative)) { throw new ValidationError(_formprefix + "privacy_representative", ValidationError.PATTERN_FAILED);}
if(this.accountDisputeResolution && !Validator.BOOLEAN.test(this.accountDisputeResolution)) { throw new ValidationError(_formprefix + "account_dispute_resolution", ValidationError.PATTERN_FAILED);}
if(this.breachNotification && !Validator.BOOLEAN.test(this.breachNotification)) { throw new ValidationError(_formprefix + "breach_notification", ValidationError.PATTERN_FAILED);}
if(this.subprocessorNotification && !Validator.BOOLEAN.test(this.subprocessorNotification)) { throw new ValidationError(_formprefix + "subprocessor_notification", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgKYCContact.path = "serviceorgkyccontact";
ServiceOrgKYCContact.newBuilder = function() {
    return new ServiceOrgKYCContact();
};

OAuthClient = function() {
    var _formprefix = "";
    
var clientName = "";
this.setClientName = function(clientName) { 
    this.clientName = clientName;
    return this;
};
this.getClientName = function() {
    return this.clientName;
};
var clientId = "";
this.setClientId = function(clientId) { 
    this.clientId = clientId;
    return this;
};
this.getClientId = function() {
    return this.clientId;
};
var clientSecret = "";
this.setClientSecret = function(clientSecret) { 
    this.clientSecret = clientSecret;
    return this;
};
this.getClientSecret = function() {
    return this.clientSecret;
};
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
var clientDomain = "";
this.setClientDomain = function(clientDomain) { 
    this.clientDomain = clientDomain;
    return this;
};
this.getClientDomain = function() {
    return this.clientDomain;
};
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidType = "1";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var status = "1";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var clientType = "1";
this.setClientType = function(clientType) { 
    this.clientType = clientType;
    return this;
};
this.getClientType = function() {
    return this.clientType;
};
var isRestricted = "0";
this.setIsRestricted = function(isRestricted) { 
    this.isRestricted = isRestricted;
    return this;
};
this.getIsRestricted = function() {
    return this.isRestricted;
};
var homePageUrl = "";
this.setHomePageUrl = function(homePageUrl) { 
    this.homePageUrl = homePageUrl;
    return this;
};
this.getHomePageUrl = function() {
    return this.homePageUrl;
};
var createdBy = "";
this.setCreatedBy = function(createdBy) { 
    this.createdBy = createdBy;
    return this;
};
this.getCreatedBy = function() {
    return this.createdBy;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var primaryDc = "";
this.setPrimaryDc = function(primaryDc) { 
    this.primaryDc = primaryDc;
    return this;
};
this.getPrimaryDc = function() {
    return this.primaryDc;
};
var lastPrimarySyncTime = "";
this.setLastPrimarySyncTime = function(lastPrimarySyncTime) { 
    this.lastPrimarySyncTime = lastPrimarySyncTime;
    return this;
};
this.getLastPrimarySyncTime = function() {
    return this.lastPrimarySyncTime;
};
var oauthclientscopes = undefined;
this.setOauthclientscopess = function(oauthclientscopes) { 
    this.oauthclientscopes = oauthclientscopes;
    return this;
};
this.getOauthclientscopess = function() {
    return this.oauthclientscopes;
};
this.addOauthclientscopes = function(oauthclientscopes) { 
 if(!this.oauthclientscopes) this.oauthclientscopes = new Array(); 
  this.oauthclientscopes.push(oauthclientscopes); 
 return this;
};

var oauthopenid = undefined;
this.setOauthopenids = function(oauthopenid) { 
    this.oauthopenid = oauthopenid;
    return this;
};
this.getOauthopenids = function() {
    return this.oauthopenid;
};
this.addOauthopenid = function(oauthopenid) { 
 if(!this.oauthopenid) this.oauthopenid = new Array(); 
  this.oauthopenid.push(oauthopenid); 
 return this;
};

var oauthredirecturl = undefined;
this.setOauthredirecturls = function(oauthredirecturl) { 
    this.oauthredirecturl = oauthredirecturl;
    return this;
};
this.getOauthredirecturls = function() {
    return this.oauthredirecturl;
};
this.addOauthredirecturl = function(oauthredirecturl) { 
 if(!this.oauthredirecturl) this.oauthredirecturl = new Array(); 
  this.oauthredirecturl.push(oauthredirecturl); 
 return this;
};

var oauthgranttoken = undefined;
this.setOauthgranttokens = function(oauthgranttoken) { 
    this.oauthgranttoken = oauthgranttoken;
    return this;
};
this.getOauthgranttokens = function() {
    return this.oauthgranttoken;
};
this.addOauthgranttoken = function(oauthgranttoken) { 
 if(!this.oauthgranttoken) this.oauthgranttoken = new Array(); 
  this.oauthgranttoken.push(oauthgranttoken); 
 return this;
};

var oauthrefreshtoken = undefined;
this.setOauthrefreshtokens = function(oauthrefreshtoken) { 
    this.oauthrefreshtoken = oauthrefreshtoken;
    return this;
};
this.getOauthrefreshtokens = function() {
    return this.oauthrefreshtoken;
};
this.addOauthrefreshtoken = function(oauthrefreshtoken) { 
 if(!this.oauthrefreshtoken) this.oauthrefreshtoken = new Array(); 
  this.oauthrefreshtoken.push(oauthrefreshtoken); 
 return this;
};

var oauthaccesstoken = undefined;
this.setOauthaccesstokens = function(oauthaccesstoken) { 
    this.oauthaccesstoken = oauthaccesstoken;
    return this;
};
this.getOauthaccesstokens = function() {
    return this.oauthaccesstoken;
};
this.addOauthaccesstoken = function(oauthaccesstoken) { 
 if(!this.oauthaccesstoken) this.oauthaccesstoken = new Array(); 
  this.oauthaccesstoken.push(oauthaccesstoken); 
 return this;
};

var oauthdevicetoken = undefined;
this.setOauthdevicetokens = function(oauthdevicetoken) { 
    this.oauthdevicetoken = oauthdevicetoken;
    return this;
};
this.getOauthdevicetokens = function() {
    return this.oauthdevicetoken;
};
this.addOauthdevicetoken = function(oauthdevicetoken) { 
 if(!this.oauthdevicetoken) this.oauthdevicetoken = new Array(); 
  this.oauthdevicetoken.push(oauthdevicetoken); 
 return this;
};

var oauthapitoken = undefined;
this.setOauthapitokens = function(oauthapitoken) { 
    this.oauthapitoken = oauthapitoken;
    return this;
};
this.getOauthapitokens = function() {
    return this.oauthapitoken;
};
this.addOauthapitoken = function(oauthapitoken) { 
 if(!this.oauthapitoken) this.oauthapitoken = new Array(); 
  this.oauthapitoken.push(oauthapitoken); 
 return this;
};

var oauthclientproperties = undefined;
this.setOauthclientpropertiess = function(oauthclientproperties) { 
    this.oauthclientproperties = oauthclientproperties;
    return this;
};
this.getOauthclientpropertiess = function() {
    return this.oauthclientproperties;
};
this.addOauthclientproperties = function(oauthclientproperties) { 
 if(!this.oauthclientproperties) this.oauthclientproperties = new Array(); 
  this.oauthclientproperties.push(oauthclientproperties); 
 return this;
};

var oauthdcdigest = undefined;
this.setOauthdcdigests = function(oauthdcdigest) { 
    this.oauthdcdigest = oauthdcdigest;
    return this;
};
this.getOauthdcdigests = function() {
    return this.oauthdcdigest;
};
this.addOauthdcdigest = function(oauthdcdigest) { 
 if(!this.oauthdcdigest) this.oauthdcdigest = new Array(); 
  this.oauthdcdigest.push(oauthdcdigest); 
 return this;
};

var oauthdcdetails = undefined;
this.setOauthdcdetailss = function(oauthdcdetails) { 
    this.oauthdcdetails = oauthdcdetails;
    return this;
};
this.getOauthdcdetailss = function() {
    return this.oauthdcdetails;
};
this.addOauthdcdetails = function(oauthdcdetails) { 
 if(!this.oauthdcdetails) this.oauthdcdetails = new Array(); 
  this.oauthdcdetails.push(oauthdcdetails); 
 return this;
};

var oauthjavascriptdomains = undefined;
this.setOauthjavascriptdomainss = function(oauthjavascriptdomains) { 
    this.oauthjavascriptdomains = oauthjavascriptdomains;
    return this;
};
this.getOauthjavascriptdomainss = function() {
    return this.oauthjavascriptdomains;
};
this.addOauthjavascriptdomains = function(oauthjavascriptdomains) { 
 if(!this.oauthjavascriptdomains) this.oauthjavascriptdomains = new Array(); 
  this.oauthjavascriptdomains.push(oauthjavascriptdomains); 
 return this;
};

var clientaccessip = undefined;
this.setClientaccessips = function(clientaccessip) { 
    this.clientaccessip = clientaccessip;
    return this;
};
this.getClientaccessips = function() {
    return this.clientaccessip;
};
this.addClientaccessip = function(clientaccessip) { 
 if(!this.clientaccessip) this.clientaccessip = new Array(); 
  this.clientaccessip.push(clientaccessip); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClientName(json["client_name"]);
		this.setClientId(json["client_id"]);
		this.setClientSecret(json["client_secret"]);
		this.setClientZid(json["client_zid"]);
		this.setClientDomain(json["client_domain"]);
		this.setZid(json["zid"]);
		this.setZidType(json["zid_type"]);
		this.setStatus(json["status"]);
		this.setClientType(json["client_type"]);
		this.setIsRestricted(json["is_restricted"]);
		this.setHomePageUrl(json["home_page_url"]);
		this.setCreatedBy(json["created_by"]);
		this.setDescription(json["description"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setPrimaryDc(json["primary_dc"]);
		this.setLastPrimarySyncTime(json["last_primary_sync_time"]);
		this.setOauthclientscopess(URI.getResourceArray(json["oAuthClientScopes"],"oauthclientscopes"));
		this.setOauthopenids(URI.getResourceArray(json["oAuthOpenId"],"oauthopenid"));
		this.setOauthredirecturls(URI.getResourceArray(json["oAuthRedirectURL"],"oauthredirecturl"));
		this.setOauthgranttokens(URI.getResourceArray(json["oAuthGrantToken"],"oauthgranttoken"));
		this.setOauthrefreshtokens(URI.getResourceArray(json["oAuthRefreshToken"],"oauthrefreshtoken"));
		this.setOauthaccesstokens(URI.getResourceArray(json["oAuthAccessToken"],"oauthaccesstoken"));
		this.setOauthdevicetokens(URI.getResourceArray(json["oAuthDeviceToken"],"oauthdevicetoken"));
		this.setOauthapitokens(URI.getResourceArray(json["oAuthApiToken"],"oauthapitoken"));
		this.setOauthclientpropertiess(URI.getResourceArray(json["oAuthClientProperties"],"oauthclientproperties"));
		this.setOauthdcdigests(URI.getResourceArray(json["oAuthDCDigest"],"oauthdcdigest"));
		this.setOauthdcdetailss(URI.getResourceArray(json["oAuthDcDetails"],"oauthdcdetails"));
		this.setOauthjavascriptdomainss(URI.getResourceArray(json["oAuthJavaScriptDomains"],"oauthjavascriptdomains"));
		this.setClientaccessips(URI.getResourceArray(json["clientAccessIp"],"clientaccessip"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClientName()) json += '"client_name"' + ":" + '"' + jsonEscape(this.getClientName())  + '",';
		if(this.getClientId()) json += '"client_id"' + ":" + '"' + jsonEscape(this.getClientId())  + '",';
		if(this.getClientSecret()) json += '"client_secret"' + ":" + '"' + jsonEscape(this.getClientSecret())  + '",';
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';
		if(this.getClientDomain()) json += '"client_domain"' + ":" + '"' + jsonEscape(this.getClientDomain())  + '",';
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getClientType()) json += '"client_type"' + ":" + '"' + jsonEscape(this.getClientType())  + '",';
		if(this.getIsRestricted()) json += '"is_restricted"' + ":" + '"' + jsonEscape(this.getIsRestricted())  + '",';
		if(this.getHomePageUrl()) json += '"home_page_url"' + ":" + '"' + jsonEscape(this.getHomePageUrl())  + '",';
		if(this.getCreatedBy()) json += '"created_by"' + ":" + '"' + jsonEscape(this.getCreatedBy())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getPrimaryDc()) json += '"primary_dc"' + ":" + '"' + jsonEscape(this.getPrimaryDc())  + '",';
		if(this.getLastPrimarySyncTime()) json += '"last_primary_sync_time"' + ":" + '"' + jsonEscape(this.getLastPrimarySyncTime())  + '",';
		if(this.getOauthclientscopess()) json += '"oAuthClientScopes"' + ":" + URI.toJSONArray(this.getOauthclientscopess())  + ',';
		if(this.getOauthopenids()) json += '"oAuthOpenId"' + ":" + URI.toJSONArray(this.getOauthopenids())  + ',';
		if(this.getOauthredirecturls()) json += '"oAuthRedirectURL"' + ":" + URI.toJSONArray(this.getOauthredirecturls())  + ',';
		if(this.getOauthgranttokens()) json += '"oAuthGrantToken"' + ":" + URI.toJSONArray(this.getOauthgranttokens())  + ',';
		if(this.getOauthrefreshtokens()) json += '"oAuthRefreshToken"' + ":" + URI.toJSONArray(this.getOauthrefreshtokens())  + ',';
		if(this.getOauthaccesstokens()) json += '"oAuthAccessToken"' + ":" + URI.toJSONArray(this.getOauthaccesstokens())  + ',';
		if(this.getOauthdevicetokens()) json += '"oAuthDeviceToken"' + ":" + URI.toJSONArray(this.getOauthdevicetokens())  + ',';
		if(this.getOauthapitokens()) json += '"oAuthApiToken"' + ":" + URI.toJSONArray(this.getOauthapitokens())  + ',';
		if(this.getOauthclientpropertiess()) json += '"oAuthClientProperties"' + ":" + URI.toJSONArray(this.getOauthclientpropertiess())  + ',';
		if(this.getOauthdcdigests()) json += '"oAuthDCDigest"' + ":" + URI.toJSONArray(this.getOauthdcdigests())  + ',';
		if(this.getOauthdcdetailss()) json += '"oAuthDcDetails"' + ":" + URI.toJSONArray(this.getOauthdcdetailss())  + ',';
		if(this.getOauthjavascriptdomainss()) json += '"oAuthJavaScriptDomains"' + ":" + URI.toJSONArray(this.getOauthjavascriptdomainss())  + ',';
		if(this.getClientaccessips()) json += '"clientAccessIp"' + ":" + URI.toJSONArray(this.getClientaccessips())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthClient.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.clientName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.clientName)) { throw new ValidationError(_formprefix + "client_name", ValidationError.PATTERN_FAILED);}
if(this.clientId && !(/^[a-zA-Z0-9_\-]+$/).test(this.clientId)) { throw new ValidationError(_formprefix + "client_id", ValidationError.PATTERN_FAILED);}
if(this.clientSecret && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.clientSecret)) { throw new ValidationError(_formprefix + "client_secret", ValidationError.PATTERN_FAILED);}
if(this.clientZid && !(/^[0-9]+\.[0-9]+$/).test(this.clientZid)) { throw new ValidationError(_formprefix + "client_zid", ValidationError.PATTERN_FAILED);}
if(this.clientDomain && !(/^([\p{L}\p{M}\p{N}]([\p{L}\p{M}\p{N}\-]{0,61}[\p{L}\p{M}\p{N}])?\.)+[\p{L}\p{M}]{2,6}$/).test(this.clientDomain)) { throw new ValidationError(_formprefix + "client_domain", ValidationError.PATTERN_FAILED);}
if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.zidType && !Validator.INTEGER.test(this.zidType)) { throw new ValidationError(_formprefix + "zid_type", ValidationError.PATTERN_FAILED);}
if(this.status && !Validator.INTEGER.test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.clientType && !Validator.INTEGER.test(this.clientType)) { throw new ValidationError(_formprefix + "client_type", ValidationError.PATTERN_FAILED);}
if(this.isRestricted && !Validator.INTEGER.test(this.isRestricted)) { throw new ValidationError(_formprefix + "is_restricted", ValidationError.PATTERN_FAILED);}
if(this.homePageUrl && !(/^([\p{L}\p{M}\p{N}]([\p{L}\p{M}\p{N}\-]{0,61}[\p{L}\p{M}\p{N}])?\.)+[\p{L}\p{M}]{2,6}$/).test(this.homePageUrl)) { throw new ValidationError(_formprefix + "home_page_url", ValidationError.PATTERN_FAILED);}
if(this.createdBy && !(/^[a-zA-Z0-9_\-]+$/).test(this.createdBy)) { throw new ValidationError(_formprefix + "created_by", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.primaryDc && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.primaryDc)) { throw new ValidationError(_formprefix + "primary_dc", ValidationError.PATTERN_FAILED);}
if(this.lastPrimarySyncTime && !Validator.INTEGER.test(this.lastPrimarySyncTime)) { throw new ValidationError(_formprefix + "last_primary_sync_time", ValidationError.PATTERN_FAILED);}
if(this.oauthclientscopes) { for(i=0; i < this.oauthclientscopes.length; i++ ) { this.oauthclientscopes[i].validate(); } }
if(this.oauthopenid) { for(i=0; i < this.oauthopenid.length; i++ ) { this.oauthopenid[i].validate(); } }
if(this.oauthredirecturl) { for(i=0; i < this.oauthredirecturl.length; i++ ) { this.oauthredirecturl[i].validate(); } }
if(this.oauthgranttoken) { for(i=0; i < this.oauthgranttoken.length; i++ ) { this.oauthgranttoken[i].validate(); } }
if(this.oauthrefreshtoken) { for(i=0; i < this.oauthrefreshtoken.length; i++ ) { this.oauthrefreshtoken[i].validate(); } }
if(this.oauthaccesstoken) { for(i=0; i < this.oauthaccesstoken.length; i++ ) { this.oauthaccesstoken[i].validate(); } }
if(this.oauthdevicetoken) { for(i=0; i < this.oauthdevicetoken.length; i++ ) { this.oauthdevicetoken[i].validate(); } }
if(this.oauthapitoken) { for(i=0; i < this.oauthapitoken.length; i++ ) { this.oauthapitoken[i].validate(); } }
if(this.oauthclientproperties) { for(i=0; i < this.oauthclientproperties.length; i++ ) { this.oauthclientproperties[i].validate(); } }
if(this.oauthdcdigest) { for(i=0; i < this.oauthdcdigest.length; i++ ) { this.oauthdcdigest[i].validate(); } }
if(this.oauthdcdetails) { for(i=0; i < this.oauthdcdetails.length; i++ ) { this.oauthdcdetails[i].validate(); } }
if(this.oauthjavascriptdomains) { for(i=0; i < this.oauthjavascriptdomains.length; i++ ) { this.oauthjavascriptdomains[i].validate(); } }
if(this.clientaccessip) { for(i=0; i < this.clientaccessip.length; i++ ) { this.clientaccessip[i].validate(); } }

	return this;
    }
}
OAuthClient.path = "oauthclient";
OAuthClient.newBuilder = function() {
    return new OAuthClient();
};

AccountUpdateAuditTemplate = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var controlQueryString = "";
this.setControlQueryString = function(controlQueryString) { 
    this.controlQueryString = controlQueryString;
    return this;
};
this.getControlQueryString = function() {
    return this.controlQueryString;
};
var responseStatus = "";
this.setResponseStatus = function(responseStatus) { 
    this.responseStatus = responseStatus;
    return this;
};
this.getResponseStatus = function() {
    return this.responseStatus;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setZuid(json["zuid"]);
		this.setControlQueryString(json["control_query_string"]);
		this.setResponseStatus(json["response_status"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getControlQueryString()) json += '"control_query_string"' + ":" + '"' + jsonEscape(this.getControlQueryString())  + '",';
		if(this.getResponseStatus()) json += '"response_status"' + ":" + '"' + jsonEscape(this.getResponseStatus())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountUpdateAuditTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.controlQueryString && !(/dontdisturb/).test(this.controlQueryString)) { throw new ValidationError(_formprefix + "control_query_string", ValidationError.PATTERN_FAILED);}
if(this.responseStatus && !Validator.INTEGER.test(this.responseStatus)) { throw new ValidationError(_formprefix + "response_status", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountUpdateAuditTemplate.path = "accountupdateaudittemplate";
AccountUpdateAuditTemplate.newBuilder = function() {
    return new AccountUpdateAuditTemplate();
};

SAMLAttribute = function() {
    var _formprefix = "";
    
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var fieldName = "";
this.setFieldName = function(fieldName) { 
    this.fieldName = fieldName;
    return this;
};
this.getFieldName = function() {
    return this.fieldName;
};
var attributeName = "";
this.setAttributeName = function(attributeName) { 
    this.attributeName = attributeName;
    return this;
};
this.getAttributeName = function() {
    return this.attributeName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppId(json["app_id"]);
		this.setFieldName(json["field_name"]);
		this.setAttributeName(json["attribute_name"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getFieldName()) json += '"field_name"' + ":" + '"' + jsonEscape(this.getFieldName())  + '",';
		if(this.getAttributeName()) json += '"attribute_name"' + ":" + '"' + jsonEscape(this.getAttributeName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SAMLAttribute.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SAMLAttribute.path = "samlattribute";
SAMLAttribute.newBuilder = function() {
    return new SAMLAttribute();
};

Operation = function() {
    var _formprefix = "";
    
var operationId = "";
this.setOperationId = function(operationId) { 
    this.operationId = operationId;
    return this;
};
this.getOperationId = function() {
    return this.operationId;
};
var operationName = "";
this.setOperationName = function(operationName) { 
    this.operationName = operationName;
    return this;
};
this.getOperationName = function() {
    return this.operationName;
};
var resourceUri = "";
this.setResourceUri = function(resourceUri) { 
    this.resourceUri = resourceUri;
    return this;
};
this.getResourceUri = function() {
    return this.resourceUri;
};
var operationParams = "";
this.setOperationParams = function(operationParams) { 
    this.operationParams = operationParams;
    return this;
};
this.getOperationParams = function() {
    return this.operationParams;
};
var operationStatus = "";
this.setOperationStatus = function(operationStatus) { 
    this.operationStatus = operationStatus;
    return this;
};
this.getOperationStatus = function() {
    return this.operationStatus;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setOperationId(json["operation_id"]);
		this.setOperationName(json["operation_name"]);
		this.setResourceUri(json["resource_uri"]);
		this.setOperationParams(json["operation_params"]);
		this.setOperationStatus(json["operation_status"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getOperationId()) json += '"operation_id"' + ":" + '"' + jsonEscape(this.getOperationId())  + '",';
		if(this.getOperationName()) json += '"operation_name"' + ":" + '"' + jsonEscape(this.getOperationName())  + '",';
		if(this.getResourceUri()) json += '"resource_uri"' + ":" + '"' + jsonEscape(this.getResourceUri())  + '",';
		if(this.getOperationParams()) json += '"operation_params"' + ":" + '"' + jsonEscape(this.getOperationParams())  + '",';
		if(this.getOperationStatus()) json += '"operation_status"' + ":" + '"' + jsonEscape(this.getOperationStatus())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Operation.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.operationId && !(/^[a-zA-Z0-9_\-]+$/).test(this.operationId)) { throw new ValidationError(_formprefix + "operation_id", ValidationError.PATTERN_FAILED);}
if(this.operationName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.operationName)) { throw new ValidationError(_formprefix + "operation_name", ValidationError.PATTERN_FAILED);}
if(this.operationStatus && !Validator.INTEGER.test(this.operationStatus)) { throw new ValidationError(_formprefix + "operation_status", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Operation.path = "operation";
Operation.newBuilder = function() {
    return new Operation();
};

OAuthKeyPair = function() {
    var _formprefix = "";
    
var keyId = "";
this.setKeyId = function(keyId) { 
    this.keyId = keyId;
    return this;
};
this.getKeyId = function() {
    return this.keyId;
};
var keyType = "0";
this.setKeyType = function(keyType) { 
    this.keyType = keyType;
    return this;
};
this.getKeyType = function() {
    return this.keyType;
};
var algorithm = "";
this.setAlgorithm = function(algorithm) { 
    this.algorithm = algorithm;
    return this;
};
this.getAlgorithm = function() {
    return this.algorithm;
};
var publicKey = "";
this.setPublicKey = function(publicKey) { 
    this.publicKey = publicKey;
    return this;
};
this.getPublicKey = function() {
    return this.publicKey;
};
var privateKey = "";
this.setPrivateKey = function(privateKey) { 
    this.privateKey = privateKey;
    return this;
};
this.getPrivateKey = function() {
    return this.privateKey;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setKeyId(json["key_id"]);
		this.setKeyType(json["key_type"]);
		this.setAlgorithm(json["algorithm"]);
		this.setPublicKey(json["public_key"]);
		this.setPrivateKey(json["private_key"]);
		this.setCreatedTime(json["created_time"]);
		this.setExpiryTime(json["expiry_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getKeyId()) json += '"key_id"' + ":" + '"' + jsonEscape(this.getKeyId())  + '",';
		if(this.getKeyType()) json += '"key_type"' + ":" + '"' + jsonEscape(this.getKeyType())  + '",';
		if(this.getAlgorithm()) json += '"algorithm"' + ":" + '"' + jsonEscape(this.getAlgorithm())  + '",';
		if(this.getPublicKey()) json += '"public_key"' + ":" + '"' + jsonEscape(this.getPublicKey())  + '",';
		if(this.getPrivateKey()) json += '"private_key"' + ":" + '"' + jsonEscape(this.getPrivateKey())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthKeyPair.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.keyId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.keyId)) { throw new ValidationError(_formprefix + "key_id", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthKeyPair.path = "oauthkeypair";
OAuthKeyPair.newBuilder = function() {
    return new OAuthKeyPair();
};

AppKeyStore = function() {
    var _formprefix = "";
    
var label = "isc";
this.setLabel = function(label) { 
    this.label = label;
    return this;
};
this.getLabel = function() {
    return this.label;
};
var publicKey = "";
this.setPublicKey = function(publicKey) { 
    this.publicKey = publicKey;
    return this;
};
this.getPublicKey = function() {
    return this.publicKey;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLabel(json["label"]);
		this.setPublicKey(json["public_key"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLabel()) json += '"label"' + ":" + '"' + jsonEscape(this.getLabel())  + '",';
		if(this.getPublicKey()) json += '"public_key"' + ":" + '"' + jsonEscape(this.getPublicKey())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppKeyStore.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.label && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.label)) { throw new ValidationError(_formprefix + "label", ValidationError.PATTERN_FAILED);}
if(this.publicKey && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.publicKey)) { throw new ValidationError(_formprefix + "public_key", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppKeyStore.path = "appkeystore";
AppKeyStore.newBuilder = function() {
    return new AppKeyStore();
};

ISCTicket = function() {
    var _formprefix = "";
    
var iscTicket = "";
this.setIscTicket = function(iscTicket) { 
    this.iscTicket = iscTicket;
    return this;
};
this.getIscTicket = function() {
    return this.iscTicket;
};
var csTicket = "";
this.setCsTicket = function(csTicket) { 
    this.csTicket = csTicket;
    return this;
};
this.getCsTicket = function() {
    return this.csTicket;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var internal = "1";
this.setInternal = function(internal) { 
    this.internal = internal;
    return this;
};
this.getInternal = function() {
    return this.internal;
};
var isEnabled = "false";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var validityPeriod = "";
this.setValidityPeriod = function(validityPeriod) { 
    this.validityPeriod = validityPeriod;
    return this;
};
this.getValidityPeriod = function() {
    return this.validityPeriod;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var ipAuditInfo = "";
this.setIpAuditInfo = function(ipAuditInfo) { 
    this.ipAuditInfo = ipAuditInfo;
    return this;
};
this.getIpAuditInfo = function() {
    return this.ipAuditInfo;
};
var iscticketscope = undefined;
this.setIscticketscopes = function(iscticketscope) { 
    this.iscticketscope = iscticketscope;
    return this;
};
this.getIscticketscopes = function() {
    return this.iscticketscope;
};
this.addIscticketscope = function(iscticketscope) { 
 if(!this.iscticketscope) this.iscticketscope = new Array(); 
  this.iscticketscope.push(iscticketscope); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setIscTicket(json["isc_ticket"]);
		this.setCsTicket(json["cs_ticket"]);
		this.setZuid(json["zuid"]);
		this.setDisplayName(json["display_name"]);
		this.setInternal(json["internal"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setValidityPeriod(json["validity_period"]);
		this.setIpAddress(json["ip_address"]);
		this.setCreatedTime(json["created_time"]);
		this.setIpAuditInfo(json["ip_audit_info"]);
		this.setIscticketscopes(URI.getResourceArray(json["iSCTicketScope"],"iscticketscope"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getIscTicket()) json += '"isc_ticket"' + ":" + '"' + jsonEscape(this.getIscTicket())  + '",';
		if(this.getCsTicket()) json += '"cs_ticket"' + ":" + '"' + jsonEscape(this.getCsTicket())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getInternal()) json += '"internal"' + ":" + '"' + jsonEscape(this.getInternal())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getValidityPeriod()) json += '"validity_period"' + ":" + '"' + jsonEscape(this.getValidityPeriod())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getIpAuditInfo()) json += '"ip_audit_info"' + ":" + '"' + jsonEscape(this.getIpAuditInfo())  + '",';
		if(this.getIscticketscopes()) json += '"iSCTicketScope"' + ":" + URI.toJSONArray(this.getIscticketscopes())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ISCTicket.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.iscTicket && !(/^(?:[a-z0-9\.\-])+$/).test(this.iscTicket)) { throw new ValidationError(_formprefix + "isc_ticket", ValidationError.PATTERN_FAILED);}
if(this.csTicket && !(/^(?:[a-z0-9\.\-])+$/).test(this.csTicket)) { throw new ValidationError(_formprefix + "cs_ticket", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.displayName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.displayName)) { throw new ValidationError(_formprefix + "display_name", ValidationError.PATTERN_FAILED);}
if(this.internal && !Validator.INTEGER.test(this.internal)) { throw new ValidationError(_formprefix + "internal", ValidationError.PATTERN_FAILED);}
if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.validityPeriod && !Validator.INTEGER.test(this.validityPeriod)) { throw new ValidationError(_formprefix + "validity_period", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.iscticketscope) { for(i=0; i < this.iscticketscope.length; i++ ) { this.iscticketscope[i].validate(); } }

	return this;
    }
}
ISCTicket.path = "iscticket";
ISCTicket.newBuilder = function() {
    return new ISCTicket();
};

UserPhoto = function() {
    var _formprefix = "";
    
var viewPermission = "1";
this.setViewPermission = function(viewPermission) { 
    this.viewPermission = viewPermission;
    return this;
};
this.getViewPermission = function() {
    return this.viewPermission;
};
var isPhotoExists = "false";
this.setIsPhotoExists = function(isPhotoExists) { 
    this.isPhotoExists = isPhotoExists;
    return this;
};
this.getIsPhotoExists = function() {
    return this.isPhotoExists;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setViewPermission(json["view_permission"]);
		this.setIsPhotoExists(json["is_photo_exists"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getViewPermission()) json += '"view_permission"' + ":" + '"' + jsonEscape(this.getViewPermission())  + '",';
		if(this.getIsPhotoExists()) json += '"is_photo_exists"' + ":" + '"' + jsonEscape(this.getIsPhotoExists())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserPhoto.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.viewPermission && !Validator.INTEGER.test(this.viewPermission)) { throw new ValidationError(_formprefix + "view_permission", ValidationError.PATTERN_FAILED);}
if(this.isPhotoExists && !Validator.BOOLEAN.test(this.isPhotoExists)) { throw new ValidationError(_formprefix + "is_photo_exists", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserPhoto.path = "userphoto";
UserPhoto.newBuilder = function() {
    return new UserPhoto();
};

OAuthZID = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidType = "";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var zidOrgType = "-1";
this.setZidOrgType = function(zidOrgType) { 
    this.zidOrgType = zidOrgType;
    return this;
};
this.getZidOrgType = function() {
    return this.zidOrgType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var userrestrictedscope = undefined;
this.setUserrestrictedscope = function(userrestrictedscope) { 
    this.userrestrictedscope = userrestrictedscope;
    return this;
};
this.getUserrestrictedscope = function() {
    return this.userrestrictedscope;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidType(json["zid_type"]);
		this.setZidOrgType(json["zid_org_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setUserrestrictedscope(URI.getResource(json["userRestrictedScope"],"userrestrictedscope"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getZidOrgType()) json += '"zid_org_type"' + ":" + '"' + jsonEscape(this.getZidOrgType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getUserrestrictedscope()) json += '"userRestrictedScope"' + ":" + this.getUserrestrictedscope().toJSON()  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthZID.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.zidType && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.zidType)) { throw new ValidationError(_formprefix + "zid_type", ValidationError.PATTERN_FAILED);}
if(this.zidOrgType && !(/^[a-zA-Z0-9_\-]+$/).test(this.zidOrgType)) { throw new ValidationError(_formprefix + "zid_org_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.userrestrictedscope) { this.userrestrictedscope.validate(); }

	return this;
    }
}
OAuthZID.path = "oauthzid";
OAuthZID.newBuilder = function() {
    return new OAuthZID();
};

SecurityQA = function() {
    var _formprefix = "";
    
var questionApl = "";
this.setQuestionApl = function(questionApl) { 
    this.questionApl = questionApl;
    return this;
};
this.getQuestionApl = function() {
    return this.questionApl;
};
var question = "";
this.setQuestion = function(question) { 
    this.question = question;
    return this;
};
this.getQuestion = function() {
    return this.question;
};
var answer = "";
this.setAnswer = function(answer) { 
    this.answer = answer;
    return this;
};
this.getAnswer = function() {
    return this.answer;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setQuestionApl(json["question_apl"]);
		this.setQuestion(json["question"]);
		this.setAnswer(json["answer"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getQuestionApl()) json += '"question_apl"' + ":" + '"' + jsonEscape(this.getQuestionApl())  + '",';
		if(this.getQuestion()) json += '"question"' + ":" + '"' + jsonEscape(this.getQuestion())  + '",';
		if(this.getAnswer()) json += '"answer"' + ":" + '"' + jsonEscape(this.getAnswer())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SecurityQA.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.questionApl && !(/xss:throwerror/).test(this.questionApl)) { throw new ValidationError(_formprefix + "question_apl", ValidationError.PATTERN_FAILED);}
if(this.question && !(/xss:throwerror/).test(this.question)) { throw new ValidationError(_formprefix + "question", ValidationError.PATTERN_FAILED);}
if(this.answer && !(/xss:throwerror/).test(this.answer)) { throw new ValidationError(_formprefix + "answer", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SecurityQA.path = "securityqa";
SecurityQA.newBuilder = function() {
    return new SecurityQA();
};

MailDetails = function() {
    var _formprefix = "";
    
var connectorName = "isc";
this.setConnectorName = function(connectorName) { 
    this.connectorName = connectorName;
    return this;
};
this.getConnectorName = function() {
    return this.connectorName;
};
var connectorKey = "";
this.setConnectorKey = function(connectorKey) { 
    this.connectorKey = connectorKey;
    return this;
};
this.getConnectorKey = function() {
    return this.connectorKey;
};
var connectorId = "";
this.setConnectorId = function(connectorId) { 
    this.connectorId = connectorId;
    return this;
};
this.getConnectorId = function() {
    return this.connectorId;
};
var defaultMailFrom = "";
this.setDefaultMailFrom = function(defaultMailFrom) { 
    this.defaultMailFrom = defaultMailFrom;
    return this;
};
this.getDefaultMailFrom = function() {
    return this.defaultMailFrom;
};
var mailSenderType = "";
this.setMailSenderType = function(mailSenderType) { 
    this.mailSenderType = mailSenderType;
    return this;
};
this.getMailSenderType = function() {
    return this.mailSenderType;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var mailsender = undefined;
this.setMailsenders = function(mailsender) { 
    this.mailsender = mailsender;
    return this;
};
this.getMailsenders = function() {
    return this.mailsender;
};
this.addMailsender = function(mailsender) { 
 if(!this.mailsender) this.mailsender = new Array(); 
  this.mailsender.push(mailsender); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setConnectorName(json["connector_name"]);
		this.setConnectorKey(json["connector_key"]);
		this.setConnectorId(json["connector_id"]);
		this.setDefaultMailFrom(json["default_mail_from"]);
		this.setMailSenderType(json["mail_sender_type"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setMailsenders(URI.getResourceArray(json["mailSender"],"mailsender"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getConnectorName()) json += '"connector_name"' + ":" + '"' + jsonEscape(this.getConnectorName())  + '",';
		if(this.getConnectorKey()) json += '"connector_key"' + ":" + '"' + jsonEscape(this.getConnectorKey())  + '",';
		if(this.getConnectorId()) json += '"connector_id"' + ":" + '"' + jsonEscape(this.getConnectorId())  + '",';
		if(this.getDefaultMailFrom()) json += '"default_mail_from"' + ":" + '"' + jsonEscape(this.getDefaultMailFrom())  + '",';
		if(this.getMailSenderType()) json += '"mail_sender_type"' + ":" + '"' + jsonEscape(this.getMailSenderType())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getMailsenders()) json += '"mailSender"' + ":" + URI.toJSONArray(this.getMailsenders())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MailDetails.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.connectorName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.connectorName)) { throw new ValidationError(_formprefix + "connector_name", ValidationError.PATTERN_FAILED);}
if(this.connectorKey && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.connectorKey)) { throw new ValidationError(_formprefix + "connector_key", ValidationError.PATTERN_FAILED);}
if(this.connectorId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.connectorId)) { throw new ValidationError(_formprefix + "connector_id", ValidationError.PATTERN_FAILED);}
if(this.defaultMailFrom && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.defaultMailFrom)) { throw new ValidationError(_formprefix + "default_mail_from", ValidationError.PATTERN_FAILED);}
if(this.mailSenderType && !Validator.INTEGER.test(this.mailSenderType)) { throw new ValidationError(_formprefix + "mail_sender_type", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.mailsender) { for(i=0; i < this.mailsender.length; i++ ) { this.mailsender[i].validate(); } }

	return this;
    }
}
MailDetails.path = "maildetails";
MailDetails.newBuilder = function() {
    return new MailDetails();
};

MailStatusQueue = function() {
    var _formprefix = "";
    
var queueId = "";
this.setQueueId = function(queueId) { 
    this.queueId = queueId;
    return this;
};
this.getQueueId = function() {
    return this.queueId;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var type = "";
this.setType = function(type) { 
    this.type = type;
    return this;
};
this.getType = function() {
    return this.type;
};
var sendBy = "0";
this.setSendBy = function(sendBy) { 
    this.sendBy = sendBy;
    return this;
};
this.getSendBy = function() {
    return this.sendBy;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var mobile = "";
this.setMobile = function(mobile) { 
    this.mobile = mobile;
    return this;
};
this.getMobile = function() {
    return this.mobile;
};
var failCount = "0";
this.setFailCount = function(failCount) { 
    this.failCount = failCount;
    return this;
};
this.getFailCount = function() {
    return this.failCount;
};
var status = "0";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var data = "";
this.setData = function(data) { 
    this.data = data;
    return this;
};
this.getData = function() {
    return this.data;
};
var languageCode = "en";
this.setLanguageCode = function(languageCode) { 
    this.languageCode = languageCode;
    return this;
};
this.getLanguageCode = function() {
    return this.languageCode;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setQueueId(json["queue_id"]);
		this.setZaid(json["zaid"]);
		this.setType(json["type"]);
		this.setSendBy(json["send_by"]);
		this.setAppName(json["app_name"]);
		this.setEmailId(json["email_id"]);
		this.setMobile(json["mobile"]);
		this.setFailCount(json["fail_count"]);
		this.setStatus(json["status"]);
		this.setData(json["data"]);
		this.setLanguageCode(json["language_code"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getQueueId()) json += '"queue_id"' + ":" + '"' + jsonEscape(this.getQueueId())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getType()) json += '"type"' + ":" + '"' + jsonEscape(this.getType())  + '",';
		if(this.getSendBy()) json += '"send_by"' + ":" + '"' + jsonEscape(this.getSendBy())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getMobile()) json += '"mobile"' + ":" + '"' + jsonEscape(this.getMobile())  + '",';
		if(this.getFailCount()) json += '"fail_count"' + ":" + '"' + jsonEscape(this.getFailCount())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getData()) json += '"data"' + ":" + '"' + jsonEscape(this.getData())  + '",';
		if(this.getLanguageCode()) json += '"language_code"' + ":" + '"' + jsonEscape(this.getLanguageCode())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MailStatusQueue.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.queueId && !Validator.INTEGER.test(this.queueId)) { throw new ValidationError(_formprefix + "queue_id", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.type && !(/^([A-Za-z0-9_.\-]+)$/).test(this.type)) { throw new ValidationError(_formprefix + "type", ValidationError.PATTERN_FAILED);}
if(this.sendBy && !Validator.INTEGER.test(this.sendBy)) { throw new ValidationError(_formprefix + "send_by", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.mobile && !(/dontdisturb/).test(this.mobile)) { throw new ValidationError(_formprefix + "mobile", ValidationError.PATTERN_FAILED);}
if(this.failCount && !Validator.INTEGER.test(this.failCount)) { throw new ValidationError(_formprefix + "fail_count", ValidationError.PATTERN_FAILED);}
if(this.status && !Validator.INTEGER.test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.data && !(/dontdisturb/).test(this.data)) { throw new ValidationError(_formprefix + "data", ValidationError.PATTERN_FAILED);}
if(this.languageCode && !(/^[a-zA-Z-]{0,5}$/).test(this.languageCode)) { throw new ValidationError(_formprefix + "language_code", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
MailStatusQueue.path = "mailstatusqueue";
MailStatusQueue.newBuilder = function() {
    return new MailStatusQueue();
};

AppAccountLogo = function() {
    var _formprefix = "";
    
var viewPermission = "";
this.setViewPermission = function(viewPermission) { 
    this.viewPermission = viewPermission;
    return this;
};
this.getViewPermission = function() {
    return this.viewPermission;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setViewPermission(json["view_permission"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getViewPermission()) json += '"view_permission"' + ":" + '"' + jsonEscape(this.getViewPermission())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccountLogo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.viewPermission && !Validator.INTEGER.test(this.viewPermission)) { throw new ValidationError(_formprefix + "view_permission", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAccountLogo.path = "appaccountlogo";
AppAccountLogo.newBuilder = function() {
    return new AppAccountLogo();
};

AppAnnouncement = function() {
    var _formprefix = "";
    
var announcementId = "";
this.setAnnouncementId = function(announcementId) { 
    this.announcementId = announcementId;
    return this;
};
this.getAnnouncementId = function() {
    return this.announcementId;
};
var name = "";
this.setName = function(name) { 
    this.name = name;
    return this;
};
this.getName = function() {
    return this.name;
};
var className = "";
this.setClassName = function(className) { 
    this.className = className;
    return this;
};
this.getClassName = function() {
    return this.className;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var announcementType = "0";
this.setAnnouncementType = function(announcementType) { 
    this.announcementType = announcementType;
    return this;
};
this.getAnnouncementType = function() {
    return this.announcementType;
};
var priority = "-1";
this.setPriority = function(priority) { 
    this.priority = priority;
    return this;
};
this.getPriority = function() {
    return this.priority;
};
var periodOfDays = "";
this.setPeriodOfDays = function(periodOfDays) { 
    this.periodOfDays = periodOfDays;
    return this;
};
this.getPeriodOfDays = function() {
    return this.periodOfDays;
};
var announcementSkipType = "0";
this.setAnnouncementSkipType = function(announcementSkipType) { 
    this.announcementSkipType = announcementSkipType;
    return this;
};
this.getAnnouncementSkipType = function() {
    return this.announcementSkipType;
};
var url = "";
this.setUrl = function(url) { 
    this.url = url;
    return this;
};
this.getUrl = function() {
    return this.url;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAnnouncementId(json["announcement_id"]);
		this.setName(json["name"]);
		this.setClassName(json["class_name"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setAnnouncementType(json["announcement_type"]);
		this.setPriority(json["priority"]);
		this.setPeriodOfDays(json["period_of_days"]);
		this.setAnnouncementSkipType(json["announcement_skip_type"]);
		this.setUrl(json["url"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAnnouncementId()) json += '"announcement_id"' + ":" + '"' + jsonEscape(this.getAnnouncementId())  + '",';
		if(this.getName()) json += '"name"' + ":" + '"' + jsonEscape(this.getName())  + '",';
		if(this.getClassName()) json += '"class_name"' + ":" + '"' + jsonEscape(this.getClassName())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getAnnouncementType()) json += '"announcement_type"' + ":" + '"' + jsonEscape(this.getAnnouncementType())  + '",';
		if(this.getPriority()) json += '"priority"' + ":" + '"' + jsonEscape(this.getPriority())  + '",';
		if(this.getPeriodOfDays()) json += '"period_of_days"' + ":" + '"' + jsonEscape(this.getPeriodOfDays())  + '",';
		if(this.getAnnouncementSkipType()) json += '"announcement_skip_type"' + ":" + '"' + jsonEscape(this.getAnnouncementSkipType())  + '",';
		if(this.getUrl()) json += '"url"' + ":" + '"' + jsonEscape(this.getUrl())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAnnouncement.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.announcementType && !Validator.INTEGER.test(this.announcementType)) { throw new ValidationError(_formprefix + "announcement_type", ValidationError.PATTERN_FAILED);}
if(this.priority && !Validator.INTEGER.test(this.priority)) { throw new ValidationError(_formprefix + "priority", ValidationError.PATTERN_FAILED);}
if(this.periodOfDays && !Validator.INTEGER.test(this.periodOfDays)) { throw new ValidationError(_formprefix + "period_of_days", ValidationError.PATTERN_FAILED);}
if(this.url && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.url)) { throw new ValidationError(_formprefix + "url", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAnnouncement.path = "appannouncement";
AppAnnouncement.newBuilder = function() {
    return new AppAnnouncement();
};

OAuthMobileDevices = function() {
    var _formprefix = "";
    
var packageName = "";
this.setPackageName = function(packageName) { 
    this.packageName = packageName;
    return this;
};
this.getPackageName = function() {
    return this.packageName;
};
var oauthClientId = "";
this.setOauthClientId = function(oauthClientId) { 
    this.oauthClientId = oauthClientId;
    return this;
};
this.getOauthClientId = function() {
    return this.oauthClientId;
};
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
var clientType = "";
this.setClientType = function(clientType) { 
    this.clientType = clientType;
    return this;
};
this.getClientType = function() {
    return this.clientType;
};
var appType = "";
this.setAppType = function(appType) { 
    this.appType = appType;
    return this;
};
this.getAppType = function() {
    return this.appType;
};
var signature = "";
this.setSignature = function(signature) { 
    this.signature = signature;
    return this;
};
this.getSignature = function() {
    return this.signature;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var oauthmobiledevicesdetails = undefined;
this.setOauthmobiledevicesdetailss = function(oauthmobiledevicesdetails) { 
    this.oauthmobiledevicesdetails = oauthmobiledevicesdetails;
    return this;
};
this.getOauthmobiledevicesdetailss = function() {
    return this.oauthmobiledevicesdetails;
};
this.addOauthmobiledevicesdetails = function(oauthmobiledevicesdetails) { 
 if(!this.oauthmobiledevicesdetails) this.oauthmobiledevicesdetails = new Array(); 
  this.oauthmobiledevicesdetails.push(oauthmobiledevicesdetails); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPackageName(json["package_name"]);
		this.setOauthClientId(json["oauth_client_id"]);
		this.setClientZid(json["client_zid"]);
		this.setClientType(json["client_type"]);
		this.setAppType(json["app_type"]);
		this.setSignature(json["signature"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setOauthmobiledevicesdetailss(URI.getResourceArray(json["oAuthMobileDevicesDetails"],"oauthmobiledevicesdetails"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPackageName()) json += '"package_name"' + ":" + '"' + jsonEscape(this.getPackageName())  + '",';
		if(this.getOauthClientId()) json += '"oauth_client_id"' + ":" + '"' + jsonEscape(this.getOauthClientId())  + '",';
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';
		if(this.getClientType()) json += '"client_type"' + ":" + '"' + jsonEscape(this.getClientType())  + '",';
		if(this.getAppType()) json += '"app_type"' + ":" + '"' + jsonEscape(this.getAppType())  + '",';
		if(this.getSignature()) json += '"signature"' + ":" + '"' + jsonEscape(this.getSignature())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getOauthmobiledevicesdetailss()) json += '"oAuthMobileDevicesDetails"' + ":" + URI.toJSONArray(this.getOauthmobiledevicesdetailss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthMobileDevices.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.packageName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.packageName)) { throw new ValidationError(_formprefix + "package_name", ValidationError.PATTERN_FAILED);}
if(this.oauthClientId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.oauthClientId)) { throw new ValidationError(_formprefix + "oauth_client_id", ValidationError.PATTERN_FAILED);}
if(this.clientZid && !(/^[0-9]+\.[0-9]+$/).test(this.clientZid)) { throw new ValidationError(_formprefix + "client_zid", ValidationError.PATTERN_FAILED);}
if(this.clientType && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.clientType)) { throw new ValidationError(_formprefix + "client_type", ValidationError.PATTERN_FAILED);}
if(this.appType && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.appType)) { throw new ValidationError(_formprefix + "app_type", ValidationError.PATTERN_FAILED);}
if(this.signature && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.signature)) { throw new ValidationError(_formprefix + "signature", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.oauthmobiledevicesdetails) { for(i=0; i < this.oauthmobiledevicesdetails.length; i++ ) { this.oauthmobiledevicesdetails[i].validate(); } }

	return this;
    }
}
OAuthMobileDevices.path = "oauthmobiledevices";
OAuthMobileDevices.newBuilder = function() {
    return new OAuthMobileDevices();
};

SignInFailedAuditTemplate = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var loginId = "";
this.setLoginId = function(loginId) { 
    this.loginId = loginId;
    return this;
};
this.getLoginId = function() {
    return this.loginId;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var errorCode = "";
this.setErrorCode = function(errorCode) { 
    this.errorCode = errorCode;
    return this;
};
this.getErrorCode = function() {
    return this.errorCode;
};
var country = "";
this.setCountry = function(country) { 
    this.country = country;
    return this;
};
this.getCountry = function() {
    return this.country;
};
var requestType = "";
this.setRequestType = function(requestType) { 
    this.requestType = requestType;
    return this;
};
this.getRequestType = function() {
    return this.requestType;
};
var signinId = "";
this.setSigninId = function(signinId) { 
    this.signinId = signinId;
    return this;
};
this.getSigninId = function() {
    return this.signinId;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setLoginId(json["login_id"]);
		this.setZuid(json["zuid"]);
		this.setIpAddress(json["ip_address"]);
		this.setAppId(json["app_id"]);
		this.setReferrer(json["referrer"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);
		this.setErrorCode(json["error_code"]);
		this.setCountry(json["country"]);
		this.setRequestType(json["request_type"]);
		this.setSigninId(json["signin_id"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getLoginId()) json += '"login_id"' + ":" + '"' + jsonEscape(this.getLoginId())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getErrorCode()) json += '"error_code"' + ":" + '"' + jsonEscape(this.getErrorCode())  + '",';
		if(this.getCountry()) json += '"country"' + ":" + '"' + jsonEscape(this.getCountry())  + '",';
		if(this.getRequestType()) json += '"request_type"' + ":" + '"' + jsonEscape(this.getRequestType())  + '",';
		if(this.getSigninId()) json += '"signin_id"' + ":" + '"' + jsonEscape(this.getSigninId())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SignInFailedAuditTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.loginId && !(/^([\p{L}\p{M}\p{N}\_\.]+)|[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.loginId)) { throw new ValidationError(_formprefix + "login_id", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.appId && !Validator.INTEGER.test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.country && !(/^[a-zA-Z0-9]{2,5}$/).test(this.country)) { throw new ValidationError(_formprefix + "country", ValidationError.PATTERN_FAILED);}
if(this.signinId && !(/dontdisturb/).test(this.signinId)) { throw new ValidationError(_formprefix + "signin_id", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SignInFailedAuditTemplate.path = "signinfailedaudittemplate";
SignInFailedAuditTemplate.newBuilder = function() {
    return new SignInFailedAuditTemplate();
};

JWTParams = function() {
    var _formprefix = "";
    
var requestType = "";
this.setRequestType = function(requestType) { 
    this.requestType = requestType;
    return this;
};
this.getRequestType = function() {
    return this.requestType;
};
var paramName = "";
this.setParamName = function(paramName) { 
    this.paramName = paramName;
    return this;
};
this.getParamName = function() {
    return this.paramName;
};
var paramValue = "";
this.setParamValue = function(paramValue) { 
    this.paramValue = paramValue;
    return this;
};
this.getParamValue = function() {
    return this.paramValue;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRequestType(json["request_type"]);
		this.setParamName(json["param_name"]);
		this.setParamValue(json["param_value"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRequestType()) json += '"request_type"' + ":" + '"' + jsonEscape(this.getRequestType())  + '",';
		if(this.getParamName()) json += '"param_name"' + ":" + '"' + jsonEscape(this.getParamName())  + '",';
		if(this.getParamValue()) json += '"param_value"' + ":" + '"' + jsonEscape(this.getParamValue())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(JWTParams.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	
	return this;
    }
}
JWTParams.path = "jwtparams";
JWTParams.newBuilder = function() {
    return new JWTParams();
};

AccountScheduleDetails = function() {
    var _formprefix = "";
    
var jobid = "";
this.setJobid = function(jobid) { 
    this.jobid = jobid;
    return this;
};
this.getJobid = function() {
    return this.jobid;
};
var operationData = "";
this.setOperationData = function(operationData) { 
    this.operationData = operationData;
    return this;
};
this.getOperationData = function() {
    return this.operationData;
};
var resultData = "";
this.setResultData = function(resultData) { 
    this.resultData = resultData;
    return this;
};
this.getResultData = function() {
    return this.resultData;
};
var schedulerType = "";
this.setSchedulerType = function(schedulerType) { 
    this.schedulerType = schedulerType;
    return this;
};
this.getSchedulerType = function() {
    return this.schedulerType;
};
var status = "0";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setJobid(json["jobid"]);
		this.setOperationData(json["operation_data"]);
		this.setResultData(json["result_data"]);
		this.setSchedulerType(json["scheduler_type"]);
		this.setStatus(json["status"]);
		this.setExpiryTime(json["expiry_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getJobid()) json += '"jobid"' + ":" + '"' + jsonEscape(this.getJobid())  + '",';
		if(this.getOperationData()) json += '"operation_data"' + ":" + '"' + jsonEscape(this.getOperationData())  + '",';
		if(this.getResultData()) json += '"result_data"' + ":" + '"' + jsonEscape(this.getResultData())  + '",';
		if(this.getSchedulerType()) json += '"scheduler_type"' + ":" + '"' + jsonEscape(this.getSchedulerType())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountScheduleDetails.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.jobid && !(/^[a-zA-Z0-9_\-]+$/).test(this.jobid)) { throw new ValidationError(_formprefix + "jobid", ValidationError.PATTERN_FAILED);}
if(this.schedulerType && !Validator.INTEGER.test(this.schedulerType)) { throw new ValidationError(_formprefix + "scheduler_type", ValidationError.PATTERN_FAILED);}
if(this.status && !Validator.INTEGER.test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountScheduleDetails.path = "accountscheduledetails";
AccountScheduleDetails.newBuilder = function() {
    return new AccountScheduleDetails();
};

Digest = function() {
    var _formprefix = "";
    
var digest = "";
this.setDigest = function(digest) { 
    this.digest = digest;
    return this;
};
this.getDigest = function() {
    return this.digest;
};
var uri = "";
this.setUri = function(uri) { 
    this.uri = uri;
    return this;
};
this.getUri = function() {
    return this.uri;
};
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var digestType = "";
this.setDigestType = function(digestType) { 
    this.digestType = digestType;
    return this;
};
this.getDigestType = function() {
    return this.digestType;
};
var serviceUrl = "";
this.setServiceUrl = function(serviceUrl) { 
    this.serviceUrl = serviceUrl;
    return this;
};
this.getServiceUrl = function() {
    return this.serviceUrl;
};
var argsData = "";
this.setArgsData = function(argsData) { 
    this.argsData = argsData;
    return this;
};
this.getArgsData = function() {
    return this.argsData;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var zidType = "";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var isValidated = "false";
this.setIsValidated = function(isValidated) { 
    this.isValidated = isValidated;
    return this;
};
this.getIsValidated = function() {
    return this.isValidated;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDigest(json["digest"]);
		this.setUri(json["uri"]);
		this.setZid(json["zid"]);
		this.setDigestType(json["digest_type"]);
		this.setServiceUrl(json["service_url"]);
		this.setArgsData(json["args_data"]);
		this.setAppName(json["app_name"]);
		this.setZidType(json["zid_type"]);
		this.setEmailId(json["email_id"]);
		this.setIsValidated(json["is_validated"]);
		this.setExpiryTime(json["expiry_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDigest()) json += '"digest"' + ":" + '"' + jsonEscape(this.getDigest())  + '",';
		if(this.getUri()) json += '"uri"' + ":" + '"' + jsonEscape(this.getUri())  + '",';
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getDigestType()) json += '"digest_type"' + ":" + '"' + jsonEscape(this.getDigestType())  + '",';
		if(this.getServiceUrl()) json += '"service_url"' + ":" + '"' + jsonEscape(this.getServiceUrl())  + '",';
		if(this.getArgsData()) json += '"args_data"' + ":" + '"' + jsonEscape(this.getArgsData())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getIsValidated()) json += '"is_validated"' + ":" + '"' + jsonEscape(this.getIsValidated())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Digest.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.digest && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.digest)) { throw new ValidationError(_formprefix + "digest", ValidationError.PATTERN_FAILED);}
if(this.uri && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.uri)) { throw new ValidationError(_formprefix + "uri", ValidationError.PATTERN_FAILED);}
if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.serviceUrl && !(/^((ht|f)tp(s?)\:\/\/[-.\w]*)?(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+\*=&%\$;#_@]*)?$/).test(this.serviceUrl)) { throw new ValidationError(_formprefix + "service_url", ValidationError.PATTERN_FAILED);}
if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.isValidated && !Validator.BOOLEAN.test(this.isValidated)) { throw new ValidationError(_formprefix + "is_validated", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Digest.path = "digest";
Digest.newBuilder = function() {
    return new Digest();
};

ServiceOrgZAID = function() {
    var _formprefix = "";
    
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZaid(json["zaid"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgZAID.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgZAID.path = "serviceorgzaid";
ServiceOrgZAID.newBuilder = function() {
    return new ServiceOrgZAID();
};

ServiceOrgDevices = function() {
    var _formprefix = "";
    
var deviceId = "";
this.setDeviceId = function(deviceId) { 
    this.deviceId = deviceId;
    return this;
};
this.getDeviceId = function() {
    return this.deviceId;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var isEnabled = "2";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDeviceId(json["device_id"]);
		this.setDisplayName(json["display_name"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDeviceId()) json += '"device_id"' + ":" + '"' + jsonEscape(this.getDeviceId())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgDevices.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.deviceId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.deviceId)) { throw new ValidationError(_formprefix + "device_id", ValidationError.PATTERN_FAILED);}
if(this.displayName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.displayName)) { throw new ValidationError(_formprefix + "display_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgDevices.path = "serviceorgdevices";
ServiceOrgDevices.newBuilder = function() {
    return new ServiceOrgDevices();
};

ServiceOrgOAuthAccessGrant = function() {
    var _formprefix = "";
    
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var sooauthaccessgrantscopes = undefined;
this.setSooauthaccessgrantscopess = function(sooauthaccessgrantscopes) { 
    this.sooauthaccessgrantscopes = sooauthaccessgrantscopes;
    return this;
};
this.getSooauthaccessgrantscopess = function() {
    return this.sooauthaccessgrantscopes;
};
this.addSooauthaccessgrantscopes = function(sooauthaccessgrantscopes) { 
 if(!this.sooauthaccessgrantscopes) this.sooauthaccessgrantscopes = new Array(); 
  this.sooauthaccessgrantscopes.push(sooauthaccessgrantscopes); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClientZid(json["client_zid"]);
		this.setIpAddress(json["ip_address"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);
		this.setSooauthaccessgrantscopess(URI.getResourceArray(json["sOOAuthAccessGrantScopes"],"sooauthaccessgrantscopes"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getSooauthaccessgrantscopess()) json += '"sOOAuthAccessGrantScopes"' + ":" + URI.toJSONArray(this.getSooauthaccessgrantscopess())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgOAuthAccessGrant.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.clientZid && !(/^[0-9]+\.[0-9]+$/).test(this.clientZid)) { throw new ValidationError(_formprefix + "client_zid", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/xss:throwerror/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.sooauthaccessgrantscopes) { for(i=0; i < this.sooauthaccessgrantscopes.length; i++ ) { this.sooauthaccessgrantscopes[i].validate(); } }

	return this;
    }
}
ServiceOrgOAuthAccessGrant.path = "serviceorgoauthaccessgrant";
ServiceOrgOAuthAccessGrant.newBuilder = function() {
    return new ServiceOrgOAuthAccessGrant();
};

PrivacyCertificateAudit = function() {
    var _formprefix = "";
    
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var certificateType = "";
this.setCertificateType = function(certificateType) { 
    this.certificateType = certificateType;
    return this;
};
this.getCertificateType = function() {
    return this.certificateType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setEmailId(json["email_id"]);
		this.setCertificateType(json["certificate_type"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getCertificateType()) json += '"certificate_type"' + ":" + '"' + jsonEscape(this.getCertificateType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(PrivacyCertificateAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
PrivacyCertificateAudit.path = "privacycertificateaudit";
PrivacyCertificateAudit.newBuilder = function() {
    return new PrivacyCertificateAudit();
};

Logo = function() {
    var _formprefix = "";
    
var viewPermission = "3";
this.setViewPermission = function(viewPermission) { 
    this.viewPermission = viewPermission;
    return this;
};
this.getViewPermission = function() {
    return this.viewPermission;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setViewPermission(json["view_permission"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getViewPermission()) json += '"view_permission"' + ":" + '"' + jsonEscape(this.getViewPermission())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Logo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.viewPermission && !Validator.INTEGER.test(this.viewPermission)) { throw new ValidationError(_formprefix + "view_permission", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Logo.path = "logo";
Logo.newBuilder = function() {
    return new Logo();
};

UserExtendedInfo = function() {
    var _formprefix = "";
    
var managerZuid = "";
this.setManagerZuid = function(managerZuid) { 
    this.managerZuid = managerZuid;
    return this;
};
this.getManagerZuid = function() {
    return this.managerZuid;
};
var employeeId = "";
this.setEmployeeId = function(employeeId) { 
    this.employeeId = employeeId;
    return this;
};
this.getEmployeeId = function() {
    return this.employeeId;
};
var designationId = "";
this.setDesignationId = function(designationId) { 
    this.designationId = designationId;
    return this;
};
this.getDesignationId = function() {
    return this.designationId;
};
var lockedUntil = "";
this.setLockedUntil = function(lockedUntil) { 
    this.lockedUntil = lockedUntil;
    return this;
};
this.getLockedUntil = function() {
    return this.lockedUntil;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setManagerZuid(json["manager_zuid"]);
		this.setEmployeeId(json["employee_id"]);
		this.setDesignationId(json["designation_id"]);
		this.setLockedUntil(json["locked_until"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getManagerZuid()) json += '"manager_zuid"' + ":" + '"' + jsonEscape(this.getManagerZuid())  + '",';
		if(this.getEmployeeId()) json += '"employee_id"' + ":" + '"' + jsonEscape(this.getEmployeeId())  + '",';
		if(this.getDesignationId()) json += '"designation_id"' + ":" + '"' + jsonEscape(this.getDesignationId())  + '",';
		if(this.getLockedUntil()) json += '"locked_until"' + ":" + '"' + jsonEscape(this.getLockedUntil())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserExtendedInfo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.managerZuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.managerZuid)) { throw new ValidationError(_formprefix + "manager_zuid", ValidationError.PATTERN_FAILED);}
if(this.employeeId && !(/xss:throwerror/).test(this.employeeId)) { throw new ValidationError(_formprefix + "employee_id", ValidationError.PATTERN_FAILED);}
if(this.designationId && !(/^[a-zA-Z0-9_\-]+$/).test(this.designationId)) { throw new ValidationError(_formprefix + "designation_id", ValidationError.PATTERN_FAILED);}
if(this.lockedUntil && !Validator.INTEGER.test(this.lockedUntil)) { throw new ValidationError(_formprefix + "locked_until", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserExtendedInfo.path = "userextendedinfo";
UserExtendedInfo.newBuilder = function() {
    return new UserExtendedInfo();
};

ServiceOrgProperties = function() {
    var _formprefix = "";
    
var propName = "";
this.setPropName = function(propName) { 
    this.propName = propName;
    return this;
};
this.getPropName = function() {
    return this.propName;
};
var propValue = "";
this.setPropValue = function(propValue) { 
    this.propValue = propValue;
    return this;
};
this.getPropValue = function() {
    return this.propValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPropName(json["prop_name"]);
		this.setPropValue(json["prop_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPropName()) json += '"prop_name"' + ":" + '"' + jsonEscape(this.getPropName())  + '",';
		if(this.getPropValue()) json += '"prop_value"' + ":" + '"' + jsonEscape(this.getPropValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgProperties.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.propName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.propName)) { throw new ValidationError(_formprefix + "prop_name", ValidationError.PATTERN_FAILED);}
if(this.propValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.propValue)) { throw new ValidationError(_formprefix + "prop_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgProperties.path = "serviceorgproperties";
ServiceOrgProperties.newBuilder = function() {
    return new ServiceOrgProperties();
};

OAuthRefreshToken = function() {
    var _formprefix = "";
    
var userZid = "";
this.setUserZid = function(userZid) { 
    this.userZid = userZid;
    return this;
};
this.getUserZid = function() {
    return this.userZid;
};
var zidType = "1";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var refreshToken = "";
this.setRefreshToken = function(refreshToken) { 
    this.refreshToken = refreshToken;
    return this;
};
this.getRefreshToken = function() {
    return this.refreshToken;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "-1";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var deviceName = "";
this.setDeviceName = function(deviceName) { 
    this.deviceName = deviceName;
    return this;
};
this.getDeviceName = function() {
    return this.deviceName;
};
var isActive = "1";
this.setIsActive = function(isActive) { 
    this.isActive = isActive;
    return this;
};
this.getIsActive = function() {
    return this.isActive;
};
var ipAuditInfo = "";
this.setIpAuditInfo = function(ipAuditInfo) { 
    this.ipAuditInfo = ipAuditInfo;
    return this;
};
this.getIpAuditInfo = function() {
    return this.ipAuditInfo;
};
var orgType = "";
this.setOrgType = function(orgType) { 
    this.orgType = orgType;
    return this;
};
this.getOrgType = function() {
    return this.orgType;
};
var oauthrefreshtokenscopes = undefined;
this.setOauthrefreshtokenscopess = function(oauthrefreshtokenscopes) { 
    this.oauthrefreshtokenscopes = oauthrefreshtokenscopes;
    return this;
};
this.getOauthrefreshtokenscopess = function() {
    return this.oauthrefreshtokenscopes;
};
this.addOauthrefreshtokenscopes = function(oauthrefreshtokenscopes) { 
 if(!this.oauthrefreshtokenscopes) this.oauthrefreshtokenscopes = new Array(); 
  this.oauthrefreshtokenscopes.push(oauthrefreshtokenscopes); 
 return this;
};

var oauthrefreshtokenorginfo = undefined;
this.setOauthrefreshtokenorginfos = function(oauthrefreshtokenorginfo) { 
    this.oauthrefreshtokenorginfo = oauthrefreshtokenorginfo;
    return this;
};
this.getOauthrefreshtokenorginfos = function() {
    return this.oauthrefreshtokenorginfo;
};
this.addOauthrefreshtokenorginfo = function(oauthrefreshtokenorginfo) { 
 if(!this.oauthrefreshtokenorginfo) this.oauthrefreshtokenorginfo = new Array(); 
  this.oauthrefreshtokenorginfo.push(oauthrefreshtokenorginfo); 
 return this;
};

var oauthrefreshtokenkey = undefined;
this.setOauthrefreshtokenkeys = function(oauthrefreshtokenkey) { 
    this.oauthrefreshtokenkey = oauthrefreshtokenkey;
    return this;
};
this.getOauthrefreshtokenkeys = function() {
    return this.oauthrefreshtokenkey;
};
this.addOauthrefreshtokenkey = function(oauthrefreshtokenkey) { 
 if(!this.oauthrefreshtokenkey) this.oauthrefreshtokenkey = new Array(); 
  this.oauthrefreshtokenkey.push(oauthrefreshtokenkey); 
 return this;
};

var oauthinternaltoken = undefined;
this.setOauthinternaltokens = function(oauthinternaltoken) { 
    this.oauthinternaltoken = oauthinternaltoken;
    return this;
};
this.getOauthinternaltokens = function() {
    return this.oauthinternaltoken;
};
this.addOauthinternaltoken = function(oauthinternaltoken) { 
 if(!this.oauthinternaltoken) this.oauthinternaltoken = new Array(); 
  this.oauthinternaltoken.push(oauthinternaltoken); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setUserZid(json["user_zid"]);
		this.setZidType(json["zid_type"]);
		this.setRefreshToken(json["refresh_token"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setDeviceName(json["device_name"]);
		this.setIsActive(json["is_active"]);
		this.setIpAuditInfo(json["ip_audit_info"]);
		this.setOrgType(json["org_type"]);
		this.setOauthrefreshtokenscopess(URI.getResourceArray(json["oAuthRefreshTokenScopes"],"oauthrefreshtokenscopes"));
		this.setOauthrefreshtokenorginfos(URI.getResourceArray(json["oAuthRefreshTokenOrgInfo"],"oauthrefreshtokenorginfo"));
		this.setOauthrefreshtokenkeys(URI.getResourceArray(json["oAuthRefreshTokenKey"],"oauthrefreshtokenkey"));
		this.setOauthinternaltokens(URI.getResourceArray(json["oAuthInternalToken"],"oauthinternaltoken"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getUserZid()) json += '"user_zid"' + ":" + '"' + jsonEscape(this.getUserZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getRefreshToken()) json += '"refresh_token"' + ":" + '"' + jsonEscape(this.getRefreshToken())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getDeviceName()) json += '"device_name"' + ":" + '"' + jsonEscape(this.getDeviceName())  + '",';
		if(this.getIsActive()) json += '"is_active"' + ":" + '"' + jsonEscape(this.getIsActive())  + '",';
		if(this.getIpAuditInfo()) json += '"ip_audit_info"' + ":" + '"' + jsonEscape(this.getIpAuditInfo())  + '",';
		if(this.getOrgType()) json += '"org_type"' + ":" + '"' + jsonEscape(this.getOrgType())  + '",';
		if(this.getOauthrefreshtokenscopess()) json += '"oAuthRefreshTokenScopes"' + ":" + URI.toJSONArray(this.getOauthrefreshtokenscopess())  + ',';
		if(this.getOauthrefreshtokenorginfos()) json += '"oAuthRefreshTokenOrgInfo"' + ":" + URI.toJSONArray(this.getOauthrefreshtokenorginfos())  + ',';
		if(this.getOauthrefreshtokenkeys()) json += '"oAuthRefreshTokenKey"' + ":" + URI.toJSONArray(this.getOauthrefreshtokenkeys())  + ',';
		if(this.getOauthinternaltokens()) json += '"oAuthInternalToken"' + ":" + URI.toJSONArray(this.getOauthinternaltokens())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthRefreshToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.userZid && !(/^[a-zA-Z0-9_\-]+$/).test(this.userZid)) { throw new ValidationError(_formprefix + "user_zid", ValidationError.PATTERN_FAILED);}
if(this.zidType && !Validator.INTEGER.test(this.zidType)) { throw new ValidationError(_formprefix + "zid_type", ValidationError.PATTERN_FAILED);}
if(this.refreshToken && !(/xss:throwerror/).test(this.refreshToken)) { throw new ValidationError(_formprefix + "refresh_token", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.deviceName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.deviceName)) { throw new ValidationError(_formprefix + "device_name", ValidationError.PATTERN_FAILED);}
if(this.isActive && !Validator.INTEGER.test(this.isActive)) { throw new ValidationError(_formprefix + "is_active", ValidationError.PATTERN_FAILED);}
if(this.orgType && !Validator.INTEGER.test(this.orgType)) { throw new ValidationError(_formprefix + "org_type", ValidationError.PATTERN_FAILED);}
if(this.oauthrefreshtokenscopes) { for(i=0; i < this.oauthrefreshtokenscopes.length; i++ ) { this.oauthrefreshtokenscopes[i].validate(); } }
if(this.oauthrefreshtokenorginfo) { for(i=0; i < this.oauthrefreshtokenorginfo.length; i++ ) { this.oauthrefreshtokenorginfo[i].validate(); } }
if(this.oauthrefreshtokenkey) { for(i=0; i < this.oauthrefreshtokenkey.length; i++ ) { this.oauthrefreshtokenkey[i].validate(); } }
if(this.oauthinternaltoken) { for(i=0; i < this.oauthinternaltoken.length; i++ ) { this.oauthinternaltoken[i].validate(); } }

	return this;
    }
}
OAuthRefreshToken.path = "oauthrefreshtoken";
OAuthRefreshToken.newBuilder = function() {
    return new OAuthRefreshToken();
};

PartnerZAAID = function() {
    var _formprefix = "";
    
var partnerZoid = "";
this.setPartnerZoid = function(partnerZoid) { 
    this.partnerZoid = partnerZoid;
    return this;
};
this.getPartnerZoid = function() {
    return this.partnerZoid;
};
var childZaaid = "";
this.setChildZaaid = function(childZaaid) { 
    this.childZaaid = childZaaid;
    return this;
};
this.getChildZaaid = function() {
    return this.childZaaid;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var parentZid = "";
this.setParentZid = function(parentZid) { 
    this.parentZid = parentZid;
    return this;
};
this.getParentZid = function() {
    return this.parentZid;
};
var childZid = "";
this.setChildZid = function(childZid) { 
    this.childZid = childZid;
    return this;
};
this.getChildZid = function() {
    return this.childZid;
};
var zidType = "";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var zidRelation = "1";
this.setZidRelation = function(zidRelation) { 
    this.zidRelation = zidRelation;
    return this;
};
this.getZidRelation = function() {
    return this.zidRelation;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPartnerZoid(json["partner_zoid"]);
		this.setChildZaaid(json["child_zaaid"]);
		this.setDisplayName(json["display_name"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setParentZid(json["parent_zid"]);
		this.setChildZid(json["child_zid"]);
		this.setZidType(json["zid_type"]);
		this.setZidRelation(json["zid_relation"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPartnerZoid()) json += '"partner_zoid"' + ":" + '"' + jsonEscape(this.getPartnerZoid())  + '",';
		if(this.getChildZaaid()) json += '"child_zaaid"' + ":" + '"' + jsonEscape(this.getChildZaaid())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getParentZid()) json += '"parent_zid"' + ":" + '"' + jsonEscape(this.getParentZid())  + '",';
		if(this.getChildZid()) json += '"child_zid"' + ":" + '"' + jsonEscape(this.getChildZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getZidRelation()) json += '"zid_relation"' + ":" + '"' + jsonEscape(this.getZidRelation())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(PartnerZAAID.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.partnerZoid && !(/^[a-zA-Z0-9_\-]+$/).test(this.partnerZoid)) { throw new ValidationError(_formprefix + "partner_zoid", ValidationError.PATTERN_FAILED);}
if(this.childZaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.childZaaid)) { throw new ValidationError(_formprefix + "child_zaaid", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.parentZid && !(/^[a-zA-Z0-9_\-]+$/).test(this.parentZid)) { throw new ValidationError(_formprefix + "parent_zid", ValidationError.PATTERN_FAILED);}
if(this.childZid && !(/^[a-zA-Z0-9_\-]+$/).test(this.childZid)) { throw new ValidationError(_formprefix + "child_zid", ValidationError.PATTERN_FAILED);}
if(this.zidType && !Validator.INTEGER.test(this.zidType)) { throw new ValidationError(_formprefix + "zid_type", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
PartnerZAAID.path = "partnerzaaid";
PartnerZAAID.newBuilder = function() {
    return new PartnerZAAID();
};

OAuthJavaScriptDomains = function() {
    var _formprefix = "";
    
var domain = "";
this.setDomain = function(domain) { 
    this.domain = domain;
    return this;
};
this.getDomain = function() {
    return this.domain;
};
var domainApl = "";
this.setDomainApl = function(domainApl) { 
    this.domainApl = domainApl;
    return this;
};
this.getDomainApl = function() {
    return this.domainApl;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDomain(json["domain"]);
		this.setDomainApl(json["domain_apl"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDomain()) json += '"domain"' + ":" + '"' + jsonEscape(this.getDomain())  + '",';
		if(this.getDomainApl()) json += '"domain_apl"' + ":" + '"' + jsonEscape(this.getDomainApl())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthJavaScriptDomains.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.domain && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.domain)) { throw new ValidationError(_formprefix + "domain", ValidationError.PATTERN_FAILED);}
if(this.domainApl && !(/xss:throwerror/).test(this.domainApl)) { throw new ValidationError(_formprefix + "domain_apl", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthJavaScriptDomains.path = "oauthjavascriptdomains";
OAuthJavaScriptDomains.newBuilder = function() {
    return new OAuthJavaScriptDomains();
};

AuthTokenDeletion = function() {
    var _formprefix = "";
    
var iscTicket = "";
this.setIscTicket = function(iscTicket) { 
    this.iscTicket = iscTicket;
    return this;
};
this.getIscTicket = function() {
    return this.iscTicket;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setIscTicket(json["isc_ticket"]);
		this.setExpiryTime(json["expiry_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getIscTicket()) json += '"isc_ticket"' + ":" + '"' + jsonEscape(this.getIscTicket())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AuthTokenDeletion.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.iscTicket && !(/^(?:[a-z0-9\.\-])+$/).test(this.iscTicket)) { throw new ValidationError(_formprefix + "isc_ticket", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AuthTokenDeletion.path = "authtokendeletion";
AuthTokenDeletion.newBuilder = function() {
    return new AuthTokenDeletion();
};

SigninPreference = function() {
    var _formprefix = "";
    
var defaultPreference = "0";
this.setDefaultPreference = function(defaultPreference) { 
    this.defaultPreference = defaultPreference;
    return this;
};
this.getDefaultPreference = function() {
    return this.defaultPreference;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDefaultPreference(json["default_preference"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDefaultPreference()) json += '"default_preference"' + ":" + '"' + jsonEscape(this.getDefaultPreference())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SigninPreference.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.defaultPreference && !Validator.INTEGER.test(this.defaultPreference)) { throw new ValidationError(_formprefix + "default_preference", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SigninPreference.path = "signinpreference";
SigninPreference.newBuilder = function() {
    return new SigninPreference();
};

App = function() {
    var _formprefix = "";
    
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var defaultSubDomain = "";
this.setDefaultSubDomain = function(defaultSubDomain) { 
    this.defaultSubDomain = defaultSubDomain;
    return this;
};
this.getDefaultSubDomain = function() {
    return this.defaultSubDomain;
};
var defaultRoSubDomain = "";
this.setDefaultRoSubDomain = function(defaultRoSubDomain) { 
    this.defaultRoSubDomain = defaultRoSubDomain;
    return this;
};
this.getDefaultRoSubDomain = function() {
    return this.defaultRoSubDomain;
};
var appCode = "";
this.setAppCode = function(appCode) { 
    this.appCode = appCode;
    return this;
};
this.getAppCode = function() {
    return this.appCode;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var aliasName = "";
this.setAliasName = function(aliasName) { 
    this.aliasName = aliasName;
    return this;
};
this.getAliasName = function() {
    return this.aliasName;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var homePage = "";
this.setHomePage = function(homePage) { 
    this.homePage = homePage;
    return this;
};
this.getHomePage = function() {
    return this.homePage;
};
var allowRegistration = "";
this.setAllowRegistration = function(allowRegistration) { 
    this.allowRegistration = allowRegistration;
    return this;
};
this.getAllowRegistration = function() {
    return this.allowRegistration;
};
var autoRegistration = "";
this.setAutoRegistration = function(autoRegistration) { 
    this.autoRegistration = autoRegistration;
    return this;
};
this.getAutoRegistration = function() {
    return this.autoRegistration;
};
var serviceType = "1";
this.setServiceType = function(serviceType) { 
    this.serviceType = serviceType;
    return this;
};
this.getServiceType = function() {
    return this.serviceType;
};
var listingEnabled = "1";
this.setListingEnabled = function(listingEnabled) { 
    this.listingEnabled = listingEnabled;
    return this;
};
this.getListingEnabled = function() {
    return this.listingEnabled;
};
var listingOrder = "1";
this.setListingOrder = function(listingOrder) { 
    this.listingOrder = listingOrder;
    return this;
};
this.getListingOrder = function() {
    return this.listingOrder;
};
var enableSsticket = "0";
this.setEnableSsticket = function(enableSsticket) { 
    this.enableSsticket = enableSsticket;
    return this;
};
this.getEnableSsticket = function() {
    return this.enableSsticket;
};
var logoUrl = "";
this.setLogoUrl = function(logoUrl) { 
    this.logoUrl = logoUrl;
    return this;
};
this.getLogoUrl = function() {
    return this.logoUrl;
};
var isLoginnameRequired = "";
this.setIsLoginnameRequired = function(isLoginnameRequired) { 
    this.isLoginnameRequired = isLoginnameRequired;
    return this;
};
this.getIsLoginnameRequired = function() {
    return this.isLoginnameRequired;
};
var restApiPath = "";
this.setRestApiPath = function(restApiPath) { 
    this.restApiPath = restApiPath;
    return this;
};
this.getRestApiPath = function() {
    return this.restApiPath;
};
var restServer = "";
this.setRestServer = function(restServer) { 
    this.restServer = restServer;
    return this;
};
this.getRestServer = function() {
    return this.restServer;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var service = "Zoho";
this.setService = function(service) { 
    this.service = service;
    return this;
};
this.getService = function() {
    return this.service;
};
var appallowedmethods = undefined;
this.setAppallowedmethodss = function(appallowedmethods) { 
    this.appallowedmethods = appallowedmethods;
    return this;
};
this.getAppallowedmethodss = function() {
    return this.appallowedmethods;
};
this.addAppallowedmethods = function(appallowedmethods) { 
 if(!this.appallowedmethods) this.appallowedmethods = new Array(); 
  this.appallowedmethods.push(appallowedmethods); 
 return this;
};

var appkeystore = undefined;
this.setAppkeystores = function(appkeystore) { 
    this.appkeystore = appkeystore;
    return this;
};
this.getAppkeystores = function() {
    return this.appkeystore;
};
this.addAppkeystore = function(appkeystore) { 
 if(!this.appkeystore) this.appkeystore = new Array(); 
  this.appkeystore.push(appkeystore); 
 return this;
};

var configuration = undefined;
this.setConfigurations = function(configuration) { 
    this.configuration = configuration;
    return this;
};
this.getConfigurations = function() {
    return this.configuration;
};
this.addConfiguration = function(configuration) { 
 if(!this.configuration) this.configuration = new Array(); 
  this.configuration.push(configuration); 
 return this;
};

var role = undefined;
this.setRoles = function(role) { 
    this.role = role;
    return this;
};
this.getRoles = function() {
    return this.role;
};
this.addRole = function(role) { 
 if(!this.role) this.role = new Array(); 
  this.role.push(role); 
 return this;
};

var appsystemrole = undefined;
this.setAppsystemroles = function(appsystemrole) { 
    this.appsystemrole = appsystemrole;
    return this;
};
this.getAppsystemroles = function() {
    return this.appsystemrole;
};
this.addAppsystemrole = function(appsystemrole) { 
 if(!this.appsystemrole) this.appsystemrole = new Array(); 
  this.appsystemrole.push(appsystemrole); 
 return this;
};

var applicense = undefined;
this.setApplicenses = function(applicense) { 
    this.applicense = applicense;
    return this;
};
this.getApplicenses = function() {
    return this.applicense;
};
this.addApplicense = function(applicense) { 
 if(!this.applicense) this.applicense = new Array(); 
  this.applicense.push(applicense); 
 return this;
};

var scope = undefined;
this.setScopes = function(scope) { 
    this.scope = scope;
    return this;
};
this.getScopes = function() {
    return this.scope;
};
this.addScope = function(scope) { 
 if(!this.scope) this.scope = new Array(); 
  this.scope.push(scope); 
 return this;
};

var statement = undefined;
this.setStatements = function(statement) { 
    this.statement = statement;
    return this;
};
this.getStatements = function() {
    return this.statement;
};
this.addStatement = function(statement) { 
 if(!this.statement) this.statement = new Array(); 
  this.statement.push(statement); 
 return this;
};

var appannouncement = undefined;
this.setAppannouncements = function(appannouncement) { 
    this.appannouncement = appannouncement;
    return this;
};
this.getAppannouncements = function() {
    return this.appannouncement;
};
this.addAppannouncement = function(appannouncement) { 
 if(!this.appannouncement) this.appannouncement = new Array(); 
  this.appannouncement.push(appannouncement); 
 return this;
};

var maildetails = undefined;
this.setMaildetailss = function(maildetails) { 
    this.maildetails = maildetails;
    return this;
};
this.getMaildetailss = function() {
    return this.maildetails;
};
this.addMaildetails = function(maildetails) { 
 if(!this.maildetails) this.maildetails = new Array(); 
  this.maildetails.push(maildetails); 
 return this;
};

var mailtypes = undefined;
this.setMailtypess = function(mailtypes) { 
    this.mailtypes = mailtypes;
    return this;
};
this.getMailtypess = function() {
    return this.mailtypes;
};
this.addMailtypes = function(mailtypes) { 
 if(!this.mailtypes) this.mailtypes = new Array(); 
  this.mailtypes.push(mailtypes); 
 return this;
};

var apptemplate = undefined;
this.setApptemplates = function(apptemplate) { 
    this.apptemplate = apptemplate;
    return this;
};
this.getApptemplates = function() {
    return this.apptemplate;
};
this.addApptemplate = function(apptemplate) { 
 if(!this.apptemplate) this.apptemplate = new Array(); 
  this.apptemplate.push(apptemplate); 
 return this;
};

var applanguages = undefined;
this.setApplanguagess = function(applanguages) { 
    this.applanguages = applanguages;
    return this;
};
this.getApplanguagess = function() {
    return this.applanguages;
};
this.addApplanguages = function(applanguages) { 
 if(!this.applanguages) this.applanguages = new Array(); 
  this.applanguages.push(applanguages); 
 return this;
};

var authenticationtokens = undefined;
this.setAuthenticationtokenss = function(authenticationtokens) { 
    this.authenticationtokens = authenticationtokens;
    return this;
};
this.getAuthenticationtokenss = function() {
    return this.authenticationtokens;
};
this.addAuthenticationtokens = function(authenticationtokens) { 
 if(!this.authenticationtokens) this.authenticationtokens = new Array(); 
  this.authenticationtokens.push(authenticationtokens); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppId(json["app_id"]);
		this.setAppName(json["app_name"]);
		this.setDefaultSubDomain(json["default_sub_domain"]);
		this.setDefaultRoSubDomain(json["default_ro_sub_domain"]);
		this.setAppCode(json["app_code"]);
		this.setDisplayName(json["display_name"]);
		this.setAliasName(json["alias_name"]);
		this.setDescription(json["description"]);
		this.setHomePage(json["home_page"]);
		this.setAllowRegistration(json["allow_registration"]);
		this.setAutoRegistration(json["auto_registration"]);
		this.setServiceType(json["service_type"]);
		this.setListingEnabled(json["listing_enabled"]);
		this.setListingOrder(json["listing_order"]);
		this.setEnableSsticket(json["enable_ssticket"]);
		this.setLogoUrl(json["logo_url"]);
		this.setIsLoginnameRequired(json["is_loginname_required"]);
		this.setRestApiPath(json["rest_api_path"]);
		this.setRestServer(json["rest_server"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setService(json["service"]);
		this.setAppallowedmethodss(URI.getResourceArray(json["appAllowedMethods"],"appallowedmethods"));
		this.setAppkeystores(URI.getResourceArray(json["appKeyStore"],"appkeystore"));
		this.setConfigurations(URI.getResourceArray(json["configuration"],"configuration"));
		this.setRoles(URI.getResourceArray(json["role"],"role"));
		this.setAppsystemroles(URI.getResourceArray(json["appSystemRole"],"appsystemrole"));
		this.setApplicenses(URI.getResourceArray(json["appLicense"],"applicense"));
		this.setScopes(URI.getResourceArray(json["scope"],"scope"));
		this.setStatements(URI.getResourceArray(json["statement"],"statement"));
		this.setAppannouncements(URI.getResourceArray(json["appAnnouncement"],"appannouncement"));
		this.setMaildetailss(URI.getResourceArray(json["mailDetails"],"maildetails"));
		this.setMailtypess(URI.getResourceArray(json["mailTypes"],"mailtypes"));
		this.setApptemplates(URI.getResourceArray(json["appTemplate"],"apptemplate"));
		this.setApplanguagess(URI.getResourceArray(json["appLanguages"],"applanguages"));
		this.setAuthenticationtokenss(URI.getResourceArray(json["authenticationTokens"],"authenticationtokens"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getDefaultSubDomain()) json += '"default_sub_domain"' + ":" + '"' + jsonEscape(this.getDefaultSubDomain())  + '",';
		if(this.getDefaultRoSubDomain()) json += '"default_ro_sub_domain"' + ":" + '"' + jsonEscape(this.getDefaultRoSubDomain())  + '",';
		if(this.getAppCode()) json += '"app_code"' + ":" + '"' + jsonEscape(this.getAppCode())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getAliasName()) json += '"alias_name"' + ":" + '"' + jsonEscape(this.getAliasName())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getHomePage()) json += '"home_page"' + ":" + '"' + jsonEscape(this.getHomePage())  + '",';
		if(this.getAllowRegistration()) json += '"allow_registration"' + ":" + '"' + jsonEscape(this.getAllowRegistration())  + '",';
		if(this.getAutoRegistration()) json += '"auto_registration"' + ":" + '"' + jsonEscape(this.getAutoRegistration())  + '",';
		if(this.getServiceType()) json += '"service_type"' + ":" + '"' + jsonEscape(this.getServiceType())  + '",';
		if(this.getListingEnabled()) json += '"listing_enabled"' + ":" + '"' + jsonEscape(this.getListingEnabled())  + '",';
		if(this.getListingOrder()) json += '"listing_order"' + ":" + '"' + jsonEscape(this.getListingOrder())  + '",';
		if(this.getEnableSsticket()) json += '"enable_ssticket"' + ":" + '"' + jsonEscape(this.getEnableSsticket())  + '",';
		if(this.getLogoUrl()) json += '"logo_url"' + ":" + '"' + jsonEscape(this.getLogoUrl())  + '",';
		if(this.getIsLoginnameRequired()) json += '"is_loginname_required"' + ":" + '"' + jsonEscape(this.getIsLoginnameRequired())  + '",';
		if(this.getRestApiPath()) json += '"rest_api_path"' + ":" + '"' + jsonEscape(this.getRestApiPath())  + '",';
		if(this.getRestServer()) json += '"rest_server"' + ":" + '"' + jsonEscape(this.getRestServer())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getService()) json += '"service"' + ":" + '"' + jsonEscape(this.getService())  + '",';
		if(this.getAppallowedmethodss()) json += '"appAllowedMethods"' + ":" + URI.toJSONArray(this.getAppallowedmethodss())  + ',';
		if(this.getAppkeystores()) json += '"appKeyStore"' + ":" + URI.toJSONArray(this.getAppkeystores())  + ',';
		if(this.getConfigurations()) json += '"configuration"' + ":" + URI.toJSONArray(this.getConfigurations())  + ',';
		if(this.getRoles()) json += '"role"' + ":" + URI.toJSONArray(this.getRoles())  + ',';
		if(this.getAppsystemroles()) json += '"appSystemRole"' + ":" + URI.toJSONArray(this.getAppsystemroles())  + ',';
		if(this.getApplicenses()) json += '"appLicense"' + ":" + URI.toJSONArray(this.getApplicenses())  + ',';
		if(this.getScopes()) json += '"scope"' + ":" + URI.toJSONArray(this.getScopes())  + ',';
		if(this.getStatements()) json += '"statement"' + ":" + URI.toJSONArray(this.getStatements())  + ',';
		if(this.getAppannouncements()) json += '"appAnnouncement"' + ":" + URI.toJSONArray(this.getAppannouncements())  + ',';
		if(this.getMaildetailss()) json += '"mailDetails"' + ":" + URI.toJSONArray(this.getMaildetailss())  + ',';
		if(this.getMailtypess()) json += '"mailTypes"' + ":" + URI.toJSONArray(this.getMailtypess())  + ',';
		if(this.getApptemplates()) json += '"appTemplate"' + ":" + URI.toJSONArray(this.getApptemplates())  + ',';
		if(this.getApplanguagess()) json += '"appLanguages"' + ":" + URI.toJSONArray(this.getApplanguagess())  + ',';
		if(this.getAuthenticationtokenss()) json += '"authenticationTokens"' + ":" + URI.toJSONArray(this.getAuthenticationtokenss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(App.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.appId && !(/^[a-zA-Z0-9_\-]+$/).test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.defaultSubDomain && !(/^((ht|f)tp(s?)\:\/\/[-.\w]*)?(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+\*=&%\$;#_@]*)?$/).test(this.defaultSubDomain)) { throw new ValidationError(_formprefix + "default_sub_domain", ValidationError.PATTERN_FAILED);}
if(this.defaultRoSubDomain && !(/^((ht|f)tp(s?)\:\/\/[-.\w]*)?(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+\*=&%\$;#_@]*)?$/).test(this.defaultRoSubDomain)) { throw new ValidationError(_formprefix + "default_ro_sub_domain", ValidationError.PATTERN_FAILED);}
if(this.appCode && !(/^[A-Z]{1,5}$/).test(this.appCode)) { throw new ValidationError(_formprefix + "app_code", ValidationError.PATTERN_FAILED);}
if(this.displayName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.displayName)) { throw new ValidationError(_formprefix + "display_name", ValidationError.PATTERN_FAILED);}
if(this.aliasName && !(/^([a-zA-Z0-9])+$/).test(this.aliasName)) { throw new ValidationError(_formprefix + "alias_name", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.homePage && !(/^((ht|f)tp(s?)\:\/\/[-.\w]*)?(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+\*=&%\$;#_@]*)?$/).test(this.homePage)) { throw new ValidationError(_formprefix + "home_page", ValidationError.PATTERN_FAILED);}
if(this.allowRegistration && !Validator.BOOLEAN.test(this.allowRegistration)) { throw new ValidationError(_formprefix + "allow_registration", ValidationError.PATTERN_FAILED);}
if(this.autoRegistration && !Validator.BOOLEAN.test(this.autoRegistration)) { throw new ValidationError(_formprefix + "auto_registration", ValidationError.PATTERN_FAILED);}
if(this.serviceType && !Validator.INTEGER.test(this.serviceType)) { throw new ValidationError(_formprefix + "service_type", ValidationError.PATTERN_FAILED);}
if(this.listingEnabled && !Validator.INTEGER.test(this.listingEnabled)) { throw new ValidationError(_formprefix + "listing_enabled", ValidationError.PATTERN_FAILED);}
if(this.listingOrder && !Validator.INTEGER.test(this.listingOrder)) { throw new ValidationError(_formprefix + "listing_order", ValidationError.PATTERN_FAILED);}
if(this.enableSsticket && !Validator.INTEGER.test(this.enableSsticket)) { throw new ValidationError(_formprefix + "enable_ssticket", ValidationError.PATTERN_FAILED);}
if(this.logoUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.logoUrl)) { throw new ValidationError(_formprefix + "logo_url", ValidationError.PATTERN_FAILED);}
if(this.isLoginnameRequired && !Validator.BOOLEAN.test(this.isLoginnameRequired)) { throw new ValidationError(_formprefix + "is_loginname_required", ValidationError.PATTERN_FAILED);}
if(this.restApiPath && !(/^([A-Za-z0-9_.\-]+)$/).test(this.restApiPath)) { throw new ValidationError(_formprefix + "rest_api_path", ValidationError.PATTERN_FAILED);}
if(this.restServer && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.restServer)) { throw new ValidationError(_formprefix + "rest_server", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.appallowedmethods) { for(i=0; i < this.appallowedmethods.length; i++ ) { this.appallowedmethods[i].validate(); } }
if(this.appkeystore) { for(i=0; i < this.appkeystore.length; i++ ) { this.appkeystore[i].validate(); } }
if(this.configuration) { for(i=0; i < this.configuration.length; i++ ) { this.configuration[i].validate(); } }
if(this.role) { for(i=0; i < this.role.length; i++ ) { this.role[i].validate(); } }
if(this.appsystemrole) { for(i=0; i < this.appsystemrole.length; i++ ) { this.appsystemrole[i].validate(); } }
if(this.applicense) { for(i=0; i < this.applicense.length; i++ ) { this.applicense[i].validate(); } }
if(this.scope) { for(i=0; i < this.scope.length; i++ ) { this.scope[i].validate(); } }
if(this.statement) { for(i=0; i < this.statement.length; i++ ) { this.statement[i].validate(); } }
if(this.appannouncement) { for(i=0; i < this.appannouncement.length; i++ ) { this.appannouncement[i].validate(); } }
if(this.maildetails) { for(i=0; i < this.maildetails.length; i++ ) { this.maildetails[i].validate(); } }
if(this.mailtypes) { for(i=0; i < this.mailtypes.length; i++ ) { this.mailtypes[i].validate(); } }
if(this.apptemplate) { for(i=0; i < this.apptemplate.length; i++ ) { this.apptemplate[i].validate(); } }
if(this.applanguages) { for(i=0; i < this.applanguages.length; i++ ) { this.applanguages[i].validate(); } }
if(this.authenticationtokens) { for(i=0; i < this.authenticationtokens.length; i++ ) { this.authenticationtokens[i].validate(); } }

	return this;
    }
}
App.path = "app";
App.newBuilder = function() {
    return new App();
};

SAMLParams = function() {
    var _formprefix = "";
    
var requestType = "";
this.setRequestType = function(requestType) { 
    this.requestType = requestType;
    return this;
};
this.getRequestType = function() {
    return this.requestType;
};
var paramName = "";
this.setParamName = function(paramName) { 
    this.paramName = paramName;
    return this;
};
this.getParamName = function() {
    return this.paramName;
};
var paramValue = "";
this.setParamValue = function(paramValue) { 
    this.paramValue = paramValue;
    return this;
};
this.getParamValue = function() {
    return this.paramValue;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRequestType(json["request_type"]);
		this.setParamName(json["param_name"]);
		this.setParamValue(json["param_value"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRequestType()) json += '"request_type"' + ":" + '"' + jsonEscape(this.getRequestType())  + '",';
		if(this.getParamName()) json += '"param_name"' + ":" + '"' + jsonEscape(this.getParamName())  + '",';
		if(this.getParamValue()) json += '"param_value"' + ":" + '"' + jsonEscape(this.getParamValue())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SAMLParams.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	
	return this;
    }
}
SAMLParams.path = "samlparams";
SAMLParams.newBuilder = function() {
    return new SAMLParams();
};

Configuration = function() {
    var _formprefix = "";
    
var configName = "";
this.setConfigName = function(configName) { 
    this.configName = configName;
    return this;
};
this.getConfigName = function() {
    return this.configName;
};
var configValue = "";
this.setConfigValue = function(configValue) { 
    this.configValue = configValue;
    return this;
};
this.getConfigValue = function() {
    return this.configValue;
};
var configRoValue = "";
this.setConfigRoValue = function(configRoValue) { 
    this.configRoValue = configRoValue;
    return this;
};
this.getConfigRoValue = function() {
    return this.configRoValue;
};
var dataType = "";
this.setDataType = function(dataType) { 
    this.dataType = dataType;
    return this;
};
this.getDataType = function() {
    return this.dataType;
};
var defaultValue = "";
this.setDefaultValue = function(defaultValue) { 
    this.defaultValue = defaultValue;
    return this;
};
this.getDefaultValue = function() {
    return this.defaultValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setConfigName(json["config_name"]);
		this.setConfigValue(json["config_value"]);
		this.setConfigRoValue(json["config_ro_value"]);
		this.setDataType(json["data_type"]);
		this.setDefaultValue(json["default_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getConfigName()) json += '"config_name"' + ":" + '"' + jsonEscape(this.getConfigName())  + '",';
		if(this.getConfigValue()) json += '"config_value"' + ":" + '"' + jsonEscape(this.getConfigValue())  + '",';
		if(this.getConfigRoValue()) json += '"config_ro_value"' + ":" + '"' + jsonEscape(this.getConfigRoValue())  + '",';
		if(this.getDataType()) json += '"data_type"' + ":" + '"' + jsonEscape(this.getDataType())  + '",';
		if(this.getDefaultValue()) json += '"default_value"' + ":" + '"' + jsonEscape(this.getDefaultValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Configuration.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.configName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.configName)) { throw new ValidationError(_formprefix + "config_name", ValidationError.PATTERN_FAILED);}
if(this.configValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.configValue)) { throw new ValidationError(_formprefix + "config_value", ValidationError.PATTERN_FAILED);}
if(this.configRoValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.configRoValue)) { throw new ValidationError(_formprefix + "config_ro_value", ValidationError.PATTERN_FAILED);}
if(this.defaultValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.defaultValue)) { throw new ValidationError(_formprefix + "default_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Configuration.path = "configuration";
Configuration.newBuilder = function() {
    return new Configuration();
};

SAMLSpApp = function() {
    var _formprefix = "";
    
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var acsUrl = "";
this.setAcsUrl = function(acsUrl) { 
    this.acsUrl = acsUrl;
    return this;
};
this.getAcsUrl = function() {
    return this.acsUrl;
};
var identifier = "";
this.setIdentifier = function(identifier) { 
    this.identifier = identifier;
    return this;
};
this.getIdentifier = function() {
    return this.identifier;
};
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var nameIdField = "1";
this.setNameIdField = function(nameIdField) { 
    this.nameIdField = nameIdField;
    return this;
};
this.getNameIdField = function() {
    return this.nameIdField;
};
var nameId = "";
this.setNameId = function(nameId) { 
    this.nameId = nameId;
    return this;
};
this.getNameId = function() {
    return this.nameId;
};
var signInUrl = "";
this.setSignInUrl = function(signInUrl) { 
    this.signInUrl = signInUrl;
    return this;
};
this.getSignInUrl = function() {
    return this.signInUrl;
};
var defaultRelayState = "";
this.setDefaultRelayState = function(defaultRelayState) { 
    this.defaultRelayState = defaultRelayState;
    return this;
};
this.getDefaultRelayState = function() {
    return this.defaultRelayState;
};
var publicKey = "";
this.setPublicKey = function(publicKey) { 
    this.publicKey = publicKey;
    return this;
};
this.getPublicKey = function() {
    return this.publicKey;
};
var privateKey = "";
this.setPrivateKey = function(privateKey) { 
    this.privateKey = privateKey;
    return this;
};
this.getPrivateKey = function() {
    return this.privateKey;
};
var certificateExpiryTime = "";
this.setCertificateExpiryTime = function(certificateExpiryTime) { 
    this.certificateExpiryTime = certificateExpiryTime;
    return this;
};
this.getCertificateExpiryTime = function() {
    return this.certificateExpiryTime;
};
var idpModeSupported = "true";
this.setIdpModeSupported = function(idpModeSupported) { 
    this.idpModeSupported = idpModeSupported;
    return this;
};
this.getIdpModeSupported = function() {
    return this.idpModeSupported;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var enableLogout = "false";
this.setEnableLogout = function(enableLogout) { 
    this.enableLogout = enableLogout;
    return this;
};
this.getEnableLogout = function() {
    return this.enableLogout;
};
var logoutUrl = "";
this.setLogoutUrl = function(logoutUrl) { 
    this.logoutUrl = logoutUrl;
    return this;
};
this.getLogoutUrl = function() {
    return this.logoutUrl;
};
var idpIssuer = "";
this.setIdpIssuer = function(idpIssuer) { 
    this.idpIssuer = idpIssuer;
    return this;
};
this.getIdpIssuer = function() {
    return this.idpIssuer;
};
var appType = "1";
this.setAppType = function(appType) { 
    this.appType = appType;
    return this;
};
this.getAppType = function() {
    return this.appType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var oidcapp = undefined;
this.setOidcapps = function(oidcapp) { 
    this.oidcapp = oidcapp;
    return this;
};
this.getOidcapps = function() {
    return this.oidcapp;
};
this.addOidcapp = function(oidcapp) { 
 if(!this.oidcapp) this.oidcapp = new Array(); 
  this.oidcapp.push(oidcapp); 
 return this;
};

var samlspappinfo = undefined;
this.setSamlspappinfo = function(samlspappinfo) { 
    this.samlspappinfo = samlspappinfo;
    return this;
};
this.getSamlspappinfo = function() {
    return this.samlspappinfo;
};
var samlspappattribute = undefined;
this.setSamlspappattributes = function(samlspappattribute) { 
    this.samlspappattribute = samlspappattribute;
    return this;
};
this.getSamlspappattributes = function() {
    return this.samlspappattribute;
};
this.addSamlspappattribute = function(samlspappattribute) { 
 if(!this.samlspappattribute) this.samlspappattribute = new Array(); 
  this.samlspappattribute.push(samlspappattribute); 
 return this;
};

var samlspuser = undefined;
this.setSamlspusers = function(samlspuser) { 
    this.samlspuser = samlspuser;
    return this;
};
this.getSamlspusers = function() {
    return this.samlspuser;
};
this.addSamlspuser = function(samlspuser) { 
 if(!this.samlspuser) this.samlspuser = new Array(); 
  this.samlspuser.push(samlspuser); 
 return this;
};

var samlspapplogo = undefined;
this.setSamlspapplogo = function(samlspapplogo) { 
    this.samlspapplogo = samlspapplogo;
    return this;
};
this.getSamlspapplogo = function() {
    return this.samlspapplogo;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppName(json["app_name"]);
		this.setDescription(json["description"]);
		this.setAcsUrl(json["acs_url"]);
		this.setIdentifier(json["identifier"]);
		this.setAppId(json["app_id"]);
		this.setNameIdField(json["name_id_field"]);
		this.setNameId(json["name_id"]);
		this.setSignInUrl(json["sign_in_url"]);
		this.setDefaultRelayState(json["default_relay_state"]);
		this.setPublicKey(json["public_key"]);
		this.setPrivateKey(json["private_key"]);
		this.setCertificateExpiryTime(json["certificate_expiry_time"]);
		this.setIdpModeSupported(json["idp_mode_supported"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setEnableLogout(json["enable_logout"]);
		this.setLogoutUrl(json["logout_url"]);
		this.setIdpIssuer(json["idp_issuer"]);
		this.setAppType(json["app_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setOidcapps(URI.getResourceArray(json["oIDCApp"],"oidcapp"));
		this.setSamlspappinfo(URI.getResource(json["sAMLSpAppInfo"],"samlspappinfo"));
		this.setSamlspappattributes(URI.getResourceArray(json["sAMLSpAppAttribute"],"samlspappattribute"));
		this.setSamlspusers(URI.getResourceArray(json["sAMLSpUser"],"samlspuser"));
		this.setSamlspapplogo(URI.getResource(json["sAMLSpAppLogo"],"samlspapplogo"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getAcsUrl()) json += '"acs_url"' + ":" + '"' + jsonEscape(this.getAcsUrl())  + '",';
		if(this.getIdentifier()) json += '"identifier"' + ":" + '"' + jsonEscape(this.getIdentifier())  + '",';
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getNameIdField()) json += '"name_id_field"' + ":" + '"' + jsonEscape(this.getNameIdField())  + '",';
		if(this.getNameId()) json += '"name_id"' + ":" + '"' + jsonEscape(this.getNameId())  + '",';
		if(this.getSignInUrl()) json += '"sign_in_url"' + ":" + '"' + jsonEscape(this.getSignInUrl())  + '",';
		if(this.getDefaultRelayState()) json += '"default_relay_state"' + ":" + '"' + jsonEscape(this.getDefaultRelayState())  + '",';
		if(this.getPublicKey()) json += '"public_key"' + ":" + '"' + jsonEscape(this.getPublicKey())  + '",';
		if(this.getPrivateKey()) json += '"private_key"' + ":" + '"' + jsonEscape(this.getPrivateKey())  + '",';
		if(this.getCertificateExpiryTime()) json += '"certificate_expiry_time"' + ":" + '"' + jsonEscape(this.getCertificateExpiryTime())  + '",';
		if(this.getIdpModeSupported()) json += '"idp_mode_supported"' + ":" + '"' + jsonEscape(this.getIdpModeSupported())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getEnableLogout()) json += '"enable_logout"' + ":" + '"' + jsonEscape(this.getEnableLogout())  + '",';
		if(this.getLogoutUrl()) json += '"logout_url"' + ":" + '"' + jsonEscape(this.getLogoutUrl())  + '",';
		if(this.getIdpIssuer()) json += '"idp_issuer"' + ":" + '"' + jsonEscape(this.getIdpIssuer())  + '",';
		if(this.getAppType()) json += '"app_type"' + ":" + '"' + jsonEscape(this.getAppType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getOidcapps()) json += '"oIDCApp"' + ":" + URI.toJSONArray(this.getOidcapps())  + ',';
		if(this.getSamlspappinfo()) json += '"sAMLSpAppInfo"' + ":" + this.getSamlspappinfo().toJSON()  + ',';
		if(this.getSamlspappattributes()) json += '"sAMLSpAppAttribute"' + ":" + URI.toJSONArray(this.getSamlspappattributes())  + ',';
		if(this.getSamlspusers()) json += '"sAMLSpUser"' + ":" + URI.toJSONArray(this.getSamlspusers())  + ',';
		if(this.getSamlspapplogo()) json += '"sAMLSpAppLogo"' + ":" + this.getSamlspapplogo().toJSON()  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SAMLSpApp.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.appName && !(/xss:throwerror/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.acsUrl && !(/xss:throwerror/).test(this.acsUrl)) { throw new ValidationError(_formprefix + "acs_url", ValidationError.PATTERN_FAILED);}
if(this.identifier && !(/xss:throwerror/).test(this.identifier)) { throw new ValidationError(_formprefix + "identifier", ValidationError.PATTERN_FAILED);}
if(this.appId && !(/^[a-zA-Z0-9_\-]+$/).test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.nameIdField && !Validator.INTEGER.test(this.nameIdField)) { throw new ValidationError(_formprefix + "name_id_field", ValidationError.PATTERN_FAILED);}
if(this.signInUrl && !(/xss:throwerror/).test(this.signInUrl)) { throw new ValidationError(_formprefix + "sign_in_url", ValidationError.PATTERN_FAILED);}
if(this.defaultRelayState && !(/xss:throwerror/).test(this.defaultRelayState)) { throw new ValidationError(_formprefix + "default_relay_state", ValidationError.PATTERN_FAILED);}
if(this.publicKey && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.publicKey)) { throw new ValidationError(_formprefix + "public_key", ValidationError.PATTERN_FAILED);}
if(this.privateKey && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.privateKey)) { throw new ValidationError(_formprefix + "private_key", ValidationError.PATTERN_FAILED);}
if(this.certificateExpiryTime && !Validator.INTEGER.test(this.certificateExpiryTime)) { throw new ValidationError(_formprefix + "certificate_expiry_time", ValidationError.PATTERN_FAILED);}
if(this.idpModeSupported && !Validator.BOOLEAN.test(this.idpModeSupported)) { throw new ValidationError(_formprefix + "idp_mode_supported", ValidationError.PATTERN_FAILED);}
if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.enableLogout && !Validator.BOOLEAN.test(this.enableLogout)) { throw new ValidationError(_formprefix + "enable_logout", ValidationError.PATTERN_FAILED);}
if(this.logoutUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.logoutUrl)) { throw new ValidationError(_formprefix + "logout_url", ValidationError.PATTERN_FAILED);}
if(this.idpIssuer && !(/xss:throwerror/).test(this.idpIssuer)) { throw new ValidationError(_formprefix + "idp_issuer", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.oidcapp) { for(i=0; i < this.oidcapp.length; i++ ) { this.oidcapp[i].validate(); } }
if(this.samlspappinfo) { this.samlspappinfo.validate(); }
if(this.samlspappattribute) { for(i=0; i < this.samlspappattribute.length; i++ ) { this.samlspappattribute[i].validate(); } }
if(this.samlspuser) { for(i=0; i < this.samlspuser.length; i++ ) { this.samlspuser[i].validate(); } }
if(this.samlspapplogo) { this.samlspapplogo.validate(); }

	return this;
    }
}
SAMLSpApp.path = "samlspapp";
SAMLSpApp.newBuilder = function() {
    return new SAMLSpApp();
};

UserServiceDetails = function() {
    var _formprefix = "";
    
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var isActive = "1";
this.setIsActive = function(isActive) { 
    this.isActive = isActive;
    return this;
};
this.getIsActive = function() {
    return this.isActive;
};
var defaultAppAccount = "";
this.setDefaultAppAccount = function(defaultAppAccount) { 
    this.defaultAppAccount = defaultAppAccount;
    return this;
};
this.getDefaultAppAccount = function() {
    return this.defaultAppAccount;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var userservicepreference = undefined;
this.setUserservicepreferences = function(userservicepreference) { 
    this.userservicepreference = userservicepreference;
    return this;
};
this.getUserservicepreferences = function() {
    return this.userservicepreference;
};
this.addUserservicepreference = function(userservicepreference) { 
 if(!this.userservicepreference) this.userservicepreference = new Array(); 
  this.userservicepreference.push(userservicepreference); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppId(json["app_id"]);
		this.setIsActive(json["is_active"]);
		this.setDefaultAppAccount(json["default_app_account"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setUserservicepreferences(URI.getResourceArray(json["userServicePreference"],"userservicepreference"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getIsActive()) json += '"is_active"' + ":" + '"' + jsonEscape(this.getIsActive())  + '",';
		if(this.getDefaultAppAccount()) json += '"default_app_account"' + ":" + '"' + jsonEscape(this.getDefaultAppAccount())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getUserservicepreferences()) json += '"userServicePreference"' + ":" + URI.toJSONArray(this.getUserservicepreferences())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserServiceDetails.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.appId && !(/^[a-zA-Z0-9_\-]+$/).test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.isActive && !Validator.INTEGER.test(this.isActive)) { throw new ValidationError(_formprefix + "is_active", ValidationError.PATTERN_FAILED);}
if(this.defaultAppAccount && !(/^[a-zA-Z0-9_\-]+$/).test(this.defaultAppAccount)) { throw new ValidationError(_formprefix + "default_app_account", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.userservicepreference) { for(i=0; i < this.userservicepreference.length; i++ ) { this.userservicepreference[i].validate(); } }

	return this;
    }
}
UserServiceDetails.path = "userservicedetails";
UserServiceDetails.newBuilder = function() {
    return new UserServiceDetails();
};

SOOAuthAccessGrantScopes = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var allowedOperations = "";
this.setAllowedOperations = function(allowedOperations) { 
    this.allowedOperations = allowedOperations;
    return this;
};
this.getAllowedOperations = function() {
    return this.allowedOperations;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setAllowedOperations(json["allowed_operations"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getAllowedOperations()) json += '"allowed_operations"' + ":" + '"' + jsonEscape(this.getAllowedOperations())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SOOAuthAccessGrantScopes.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[a-zA-Z0-9_\-]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.allowedOperations && !Validator.INTEGER.test(this.allowedOperations)) { throw new ValidationError(_formprefix + "allowed_operations", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SOOAuthAccessGrantScopes.path = "sooauthaccessgrantscopes";
SOOAuthAccessGrantScopes.newBuilder = function() {
    return new SOOAuthAccessGrantScopes();
};

AppSystemRole = function() {
    var _formprefix = "";
    
var roleId = "";
this.setRoleId = function(roleId) { 
    this.roleId = roleId;
    return this;
};
this.getRoleId = function() {
    return this.roleId;
};
var systemRoleName = "";
this.setSystemRoleName = function(systemRoleName) { 
    this.systemRoleName = systemRoleName;
    return this;
};
this.getSystemRoleName = function() {
    return this.systemRoleName;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var usersystemroles = undefined;
this.setUsersystemroless = function(usersystemroles) { 
    this.usersystemroles = usersystemroles;
    return this;
};
this.getUsersystemroless = function() {
    return this.usersystemroles;
};
this.addUsersystemroles = function(usersystemroles) { 
 if(!this.usersystemroles) this.usersystemroles = new Array(); 
  this.usersystemroles.push(usersystemroles); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRoleId(json["role_id"]);
		this.setSystemRoleName(json["system_role_name"]);
		this.setDescription(json["description"]);
		this.setCreatedTime(json["created_time"]);
		this.setUsersystemroless(URI.getResourceArray(json["userSystemRoles"],"usersystemroles"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRoleId()) json += '"role_id"' + ":" + '"' + jsonEscape(this.getRoleId())  + '",';
		if(this.getSystemRoleName()) json += '"system_role_name"' + ":" + '"' + jsonEscape(this.getSystemRoleName())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getUsersystemroless()) json += '"userSystemRoles"' + ":" + URI.toJSONArray(this.getUsersystemroless())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppSystemRole.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.roleId && !Validator.INTEGER.test(this.roleId)) { throw new ValidationError(_formprefix + "role_id", ValidationError.PATTERN_FAILED);}
if(this.systemRoleName && !(/^[a-zA-Z]{1,20}$/).test(this.systemRoleName)) { throw new ValidationError(_formprefix + "system_role_name", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.usersystemroles) { for(i=0; i < this.usersystemroles.length; i++ ) { this.usersystemroles[i].validate(); } }

	return this;
    }
}
AppSystemRole.path = "appsystemrole";
AppSystemRole.newBuilder = function() {
    return new AppSystemRole();
};

ServiceOrg = function() {
    var _formprefix = "";
    
var zsoid = "";
this.setZsoid = function(zsoid) { 
    this.zsoid = zsoid;
    return this;
};
this.getZsoid = function() {
    return this.zsoid;
};
var orgName = "";
this.setOrgName = function(orgName) { 
    this.orgName = orgName;
    return this;
};
this.getOrgName = function() {
    return this.orgName;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var createdBy = "-1";
this.setCreatedBy = function(createdBy) { 
    this.createdBy = createdBy;
    return this;
};
this.getCreatedBy = function() {
    return this.createdBy;
};
var migratedToOrg = "";
this.setMigratedToOrg = function(migratedToOrg) { 
    this.migratedToOrg = migratedToOrg;
    return this;
};
this.getMigratedToOrg = function() {
    return this.migratedToOrg;
};
var parentZaaid = "";
this.setParentZaaid = function(parentZaaid) { 
    this.parentZaaid = parentZaaid;
    return this;
};
this.getParentZaaid = function() {
    return this.parentZaaid;
};
var directoryZaaid = "";
this.setDirectoryZaaid = function(directoryZaaid) { 
    this.directoryZaaid = directoryZaaid;
    return this;
};
this.getDirectoryZaaid = function() {
    return this.directoryZaaid;
};
var isExposed = "1";
this.setIsExposed = function(isExposed) { 
    this.isExposed = isExposed;
    return this;
};
this.getIsExposed = function() {
    return this.isExposed;
};
var parentOrgType = "";
this.setParentOrgType = function(parentOrgType) { 
    this.parentOrgType = parentOrgType;
    return this;
};
this.getParentOrgType = function() {
    return this.parentOrgType;
};
var environment = "1";
this.setEnvironment = function(environment) { 
    this.environment = environment;
    return this;
};
this.getEnvironment = function() {
    return this.environment;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var serviceorgsubservice = undefined;
this.setServiceorgsubservices = function(serviceorgsubservice) { 
    this.serviceorgsubservice = serviceorgsubservice;
    return this;
};
this.getServiceorgsubservices = function() {
    return this.serviceorgsubservice;
};
this.addServiceorgsubservice = function(serviceorgsubservice) { 
 if(!this.serviceorgsubservice) this.serviceorgsubservice = new Array(); 
  this.serviceorgsubservice.push(serviceorgsubservice); 
 return this;
};

var serviceorgproperties = undefined;
this.setServiceorgpropertiess = function(serviceorgproperties) { 
    this.serviceorgproperties = serviceorgproperties;
    return this;
};
this.getServiceorgpropertiess = function() {
    return this.serviceorgproperties;
};
this.addServiceorgproperties = function(serviceorgproperties) { 
 if(!this.serviceorgproperties) this.serviceorgproperties = new Array(); 
  this.serviceorgproperties.push(serviceorgproperties); 
 return this;
};

var serviceorgzaid = undefined;
this.setServiceorgzaids = function(serviceorgzaid) { 
    this.serviceorgzaid = serviceorgzaid;
    return this;
};
this.getServiceorgzaids = function() {
    return this.serviceorgzaid;
};
this.addServiceorgzaid = function(serviceorgzaid) { 
 if(!this.serviceorgzaid) this.serviceorgzaid = new Array(); 
  this.serviceorgzaid.push(serviceorgzaid); 
 return this;
};

var serviceorgaccountmapping = undefined;
this.setServiceorgaccountmappings = function(serviceorgaccountmapping) { 
    this.serviceorgaccountmapping = serviceorgaccountmapping;
    return this;
};
this.getServiceorgaccountmappings = function() {
    return this.serviceorgaccountmapping;
};
this.addServiceorgaccountmapping = function(serviceorgaccountmapping) { 
 if(!this.serviceorgaccountmapping) this.serviceorgaccountmapping = new Array(); 
  this.serviceorgaccountmapping.push(serviceorgaccountmapping); 
 return this;
};

var serviceorgaddress = undefined;
this.setServiceorgaddresss = function(serviceorgaddress) { 
    this.serviceorgaddress = serviceorgaddress;
    return this;
};
this.getServiceorgaddresss = function() {
    return this.serviceorgaddress;
};
this.addServiceorgaddress = function(serviceorgaddress) { 
 if(!this.serviceorgaddress) this.serviceorgaddress = new Array(); 
  this.serviceorgaddress.push(serviceorgaddress); 
 return this;
};

var serviceorgkyc = undefined;
this.setServiceorgkycs = function(serviceorgkyc) { 
    this.serviceorgkyc = serviceorgkyc;
    return this;
};
this.getServiceorgkycs = function() {
    return this.serviceorgkyc;
};
this.addServiceorgkyc = function(serviceorgkyc) { 
 if(!this.serviceorgkyc) this.serviceorgkyc = new Array(); 
  this.serviceorgkyc.push(serviceorgkyc); 
 return this;
};

var serviceorgdevices = undefined;
this.setServiceorgdevicess = function(serviceorgdevices) { 
    this.serviceorgdevices = serviceorgdevices;
    return this;
};
this.getServiceorgdevicess = function() {
    return this.serviceorgdevices;
};
this.addServiceorgdevices = function(serviceorgdevices) { 
 if(!this.serviceorgdevices) this.serviceorgdevices = new Array(); 
  this.serviceorgdevices.push(serviceorgdevices); 
 return this;
};

var serviceorglogo = undefined;
this.setServiceorglogo = function(serviceorglogo) { 
    this.serviceorglogo = serviceorglogo;
    return this;
};
this.getServiceorglogo = function() {
    return this.serviceorglogo;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZsoid(json["zsoid"]);
		this.setOrgName(json["org_name"]);
		this.setDescription(json["description"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setCreatedBy(json["created_by"]);
		this.setMigratedToOrg(json["migrated_to_org"]);
		this.setParentZaaid(json["parent_zaaid"]);
		this.setDirectoryZaaid(json["directory_zaaid"]);
		this.setIsExposed(json["is_exposed"]);
		this.setParentOrgType(json["parent_org_type"]);
		this.setEnvironment(json["environment"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setServiceorgsubservices(URI.getResourceArray(json["serviceOrgSubService"],"serviceorgsubservice"));
		this.setServiceorgpropertiess(URI.getResourceArray(json["serviceOrgProperties"],"serviceorgproperties"));
		this.setServiceorgzaids(URI.getResourceArray(json["serviceOrgZAID"],"serviceorgzaid"));
		this.setServiceorgaccountmappings(URI.getResourceArray(json["serviceOrgAccountMapping"],"serviceorgaccountmapping"));
		this.setServiceorgaddresss(URI.getResourceArray(json["serviceOrgAddress"],"serviceorgaddress"));
		this.setServiceorgkycs(URI.getResourceArray(json["serviceOrgKYC"],"serviceorgkyc"));
		this.setServiceorgdevicess(URI.getResourceArray(json["serviceOrgDevices"],"serviceorgdevices"));
		this.setServiceorglogo(URI.getResource(json["serviceOrgLogo"],"serviceorglogo"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZsoid()) json += '"zsoid"' + ":" + '"' + jsonEscape(this.getZsoid())  + '",';
		if(this.getOrgName()) json += '"org_name"' + ":" + '"' + jsonEscape(this.getOrgName())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getCreatedBy()) json += '"created_by"' + ":" + '"' + jsonEscape(this.getCreatedBy())  + '",';
		if(this.getMigratedToOrg()) json += '"migrated_to_org"' + ":" + '"' + jsonEscape(this.getMigratedToOrg())  + '",';
		if(this.getParentZaaid()) json += '"parent_zaaid"' + ":" + '"' + jsonEscape(this.getParentZaaid())  + '",';
		if(this.getDirectoryZaaid()) json += '"directory_zaaid"' + ":" + '"' + jsonEscape(this.getDirectoryZaaid())  + '",';
		if(this.getIsExposed()) json += '"is_exposed"' + ":" + '"' + jsonEscape(this.getIsExposed())  + '",';
		if(this.getParentOrgType()) json += '"parent_org_type"' + ":" + '"' + jsonEscape(this.getParentOrgType())  + '",';
		if(this.getEnvironment()) json += '"environment"' + ":" + '"' + jsonEscape(this.getEnvironment())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getServiceorgsubservices()) json += '"serviceOrgSubService"' + ":" + URI.toJSONArray(this.getServiceorgsubservices())  + ',';
		if(this.getServiceorgpropertiess()) json += '"serviceOrgProperties"' + ":" + URI.toJSONArray(this.getServiceorgpropertiess())  + ',';
		if(this.getServiceorgzaids()) json += '"serviceOrgZAID"' + ":" + URI.toJSONArray(this.getServiceorgzaids())  + ',';
		if(this.getServiceorgaccountmappings()) json += '"serviceOrgAccountMapping"' + ":" + URI.toJSONArray(this.getServiceorgaccountmappings())  + ',';
		if(this.getServiceorgaddresss()) json += '"serviceOrgAddress"' + ":" + URI.toJSONArray(this.getServiceorgaddresss())  + ',';
		if(this.getServiceorgkycs()) json += '"serviceOrgKYC"' + ":" + URI.toJSONArray(this.getServiceorgkycs())  + ',';
		if(this.getServiceorgdevicess()) json += '"serviceOrgDevices"' + ":" + URI.toJSONArray(this.getServiceorgdevicess())  + ',';
		if(this.getServiceorglogo()) json += '"serviceOrgLogo"' + ":" + this.getServiceorglogo().toJSON()  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrg.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zsoid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zsoid)) { throw new ValidationError(_formprefix + "zsoid", ValidationError.PATTERN_FAILED);}
if(this.orgName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.orgName)) { throw new ValidationError(_formprefix + "org_name", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.createdBy && !(/^[a-zA-Z0-9\-]+$/).test(this.createdBy)) { throw new ValidationError(_formprefix + "created_by", ValidationError.PATTERN_FAILED);}
if(this.migratedToOrg && !Validator.BOOLEAN.test(this.migratedToOrg)) { throw new ValidationError(_formprefix + "migrated_to_org", ValidationError.PATTERN_FAILED);}
if(this.parentZaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.parentZaaid)) { throw new ValidationError(_formprefix + "parent_zaaid", ValidationError.PATTERN_FAILED);}
if(this.directoryZaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.directoryZaaid)) { throw new ValidationError(_formprefix + "directory_zaaid", ValidationError.PATTERN_FAILED);}
if(this.isExposed && !Validator.INTEGER.test(this.isExposed)) { throw new ValidationError(_formprefix + "is_exposed", ValidationError.PATTERN_FAILED);}
if(this.parentOrgType && !Validator.INTEGER.test(this.parentOrgType)) { throw new ValidationError(_formprefix + "parent_org_type", ValidationError.PATTERN_FAILED);}
if(this.environment && !Validator.INTEGER.test(this.environment)) { throw new ValidationError(_formprefix + "environment", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.serviceorgsubservice) { for(i=0; i < this.serviceorgsubservice.length; i++ ) { this.serviceorgsubservice[i].validate(); } }
if(this.serviceorgproperties) { for(i=0; i < this.serviceorgproperties.length; i++ ) { this.serviceorgproperties[i].validate(); } }
if(this.serviceorgzaid) { for(i=0; i < this.serviceorgzaid.length; i++ ) { this.serviceorgzaid[i].validate(); } }
if(this.serviceorgaccountmapping) { for(i=0; i < this.serviceorgaccountmapping.length; i++ ) { this.serviceorgaccountmapping[i].validate(); } }
if(this.serviceorgaddress) { for(i=0; i < this.serviceorgaddress.length; i++ ) { this.serviceorgaddress[i].validate(); } }
if(this.serviceorgkyc) { for(i=0; i < this.serviceorgkyc.length; i++ ) { this.serviceorgkyc[i].validate(); } }
if(this.serviceorgdevices) { for(i=0; i < this.serviceorgdevices.length; i++ ) { this.serviceorgdevices[i].validate(); } }
if(this.serviceorglogo) { this.serviceorglogo.validate(); }

	return this;
    }
}
ServiceOrg.path = "serviceorg";
ServiceOrg.newBuilder = function() {
    return new ServiceOrg();
};

OpenId = function() {
    var _formprefix = "";
    
var openIdApl = "";
this.setOpenIdApl = function(openIdApl) { 
    this.openIdApl = openIdApl;
    return this;
};
this.getOpenIdApl = function() {
    return this.openIdApl;
};
var openId = "";
this.setOpenId = function(openId) { 
    this.openId = openId;
    return this;
};
this.getOpenId = function() {
    return this.openId;
};
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var idp = "0";
this.setIdp = function(idp) { 
    this.idp = idp;
    return this;
};
this.getIdp = function() {
    return this.idp;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var ipAuditInfo = "";
this.setIpAuditInfo = function(ipAuditInfo) { 
    this.ipAuditInfo = ipAuditInfo;
    return this;
};
this.getIpAuditInfo = function() {
    return this.ipAuditInfo;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setOpenIdApl(json["open_id_apl"]);
		this.setOpenId(json["open_id"]);
		this.setEmailId(json["email_id"]);
		this.setIdp(json["idp"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setUserAgent(json["user_agent"]);
		this.setIpAuditInfo(json["ip_audit_info"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getOpenIdApl()) json += '"open_id_apl"' + ":" + '"' + jsonEscape(this.getOpenIdApl())  + '",';
		if(this.getOpenId()) json += '"open_id"' + ":" + '"' + jsonEscape(this.getOpenId())  + '",';
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getIdp()) json += '"idp"' + ":" + '"' + jsonEscape(this.getIdp())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getIpAuditInfo()) json += '"ip_audit_info"' + ":" + '"' + jsonEscape(this.getIpAuditInfo())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OpenId.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.openIdApl && !(/xss:throwerror/).test(this.openIdApl)) { throw new ValidationError(_formprefix + "open_id_apl", ValidationError.PATTERN_FAILED);}
if(this.openId && !(/dontdisturb/).test(this.openId)) { throw new ValidationError(_formprefix + "open_id", ValidationError.PATTERN_FAILED);}
if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.idp && !Validator.INTEGER.test(this.idp)) { throw new ValidationError(_formprefix + "idp", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/xss:throwerror/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OpenId.path = "openid";
OpenId.newBuilder = function() {
    return new OpenId();
};

OAuthAudit = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
var operation = "";
this.setOperation = function(operation) { 
    this.operation = operation;
    return this;
};
this.getOperation = function() {
    return this.operation;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var tokenDigest = "";
this.setTokenDigest = function(tokenDigest) { 
    this.tokenDigest = tokenDigest;
    return this;
};
this.getTokenDigest = function() {
    return this.tokenDigest;
};
var parentTokenDigest = "";
this.setParentTokenDigest = function(parentTokenDigest) { 
    this.parentTokenDigest = parentTokenDigest;
    return this;
};
this.getParentTokenDigest = function() {
    return this.parentTokenDigest;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var addedTime = "";
this.setAddedTime = function(addedTime) { 
    this.addedTime = addedTime;
    return this;
};
this.getAddedTime = function() {
    return this.addedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setZid(json["zid"]);
		this.setAppName(json["app_name"]);
		this.setClientZid(json["client_zid"]);
		this.setOperation(json["operation"]);
		this.setIpAddress(json["ip_address"]);
		this.setTokenDigest(json["token_digest"]);
		this.setParentTokenDigest(json["parent_token_digest"]);
		this.setUserAgent(json["user_agent"]);
		this.setAddedTime(json["added_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';
		if(this.getOperation()) json += '"operation"' + ":" + '"' + jsonEscape(this.getOperation())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getTokenDigest()) json += '"token_digest"' + ":" + '"' + jsonEscape(this.getTokenDigest())  + '",';
		if(this.getParentTokenDigest()) json += '"parent_token_digest"' + ":" + '"' + jsonEscape(this.getParentTokenDigest())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getAddedTime()) json += '"added_time"' + ":" + '"' + jsonEscape(this.getAddedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.clientZid && !(/^[0-9]+\.[0-9]+$/).test(this.clientZid)) { throw new ValidationError(_formprefix + "client_zid", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.tokenDigest && !(/dontdisturb/).test(this.tokenDigest)) { throw new ValidationError(_formprefix + "token_digest", ValidationError.PATTERN_FAILED);}
if(this.parentTokenDigest && !(/dontdisturb/).test(this.parentTokenDigest)) { throw new ValidationError(_formprefix + "parent_token_digest", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.addedTime && !Validator.INTEGER.test(this.addedTime)) { throw new ValidationError(_formprefix + "added_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthAudit.path = "oauthaudit";
OAuthAudit.newBuilder = function() {
    return new OAuthAudit();
};

ResourceAudit = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var ownerZuid = "";
this.setOwnerZuid = function(ownerZuid) { 
    this.ownerZuid = ownerZuid;
    return this;
};
this.getOwnerZuid = function() {
    return this.ownerZuid;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var requestId = "";
this.setRequestId = function(requestId) { 
    this.requestId = requestId;
    return this;
};
this.getRequestId = function() {
    return this.requestId;
};
var resourceType = "";
this.setResourceType = function(resourceType) { 
    this.resourceType = resourceType;
    return this;
};
this.getResourceType = function() {
    return this.resourceType;
};
var operation = "";
this.setOperation = function(operation) { 
    this.operation = operation;
    return this;
};
this.getOperation = function() {
    return this.operation;
};
var oldData = "";
this.setOldData = function(oldData) { 
    this.oldData = oldData;
    return this;
};
this.getOldData = function() {
    return this.oldData;
};
var newData = "";
this.setNewData = function(newData) { 
    this.newData = newData;
    return this;
};
this.getNewData = function() {
    return this.newData;
};
var restUrl = "";
this.setRestUrl = function(restUrl) { 
    this.restUrl = restUrl;
    return this;
};
this.getRestUrl = function() {
    return this.restUrl;
};
var tokenDigest = "";
this.setTokenDigest = function(tokenDigest) { 
    this.tokenDigest = tokenDigest;
    return this;
};
this.getTokenDigest = function() {
    return this.tokenDigest;
};
var threadId = "";
this.setThreadId = function(threadId) { 
    this.threadId = threadId;
    return this;
};
this.getThreadId = function() {
    return this.threadId;
};
var appIp = "";
this.setAppIp = function(appIp) { 
    this.appIp = appIp;
    return this;
};
this.getAppIp = function() {
    return this.appIp;
};
var remoteIp = "";
this.setRemoteIp = function(remoteIp) { 
    this.remoteIp = remoteIp;
    return this;
};
this.getRemoteIp = function() {
    return this.remoteIp;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var auditedTime = "";
this.setAuditedTime = function(auditedTime) { 
    this.auditedTime = auditedTime;
    return this;
};
this.getAuditedTime = function() {
    return this.auditedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setZuid(json["zuid"]);
		this.setOwnerZuid(json["owner_zuid"]);
		this.setAppName(json["app_name"]);
		this.setRequestId(json["request_id"]);
		this.setResourceType(json["resource_type"]);
		this.setOperation(json["operation"]);
		this.setOldData(json["old_data"]);
		this.setNewData(json["new_data"]);
		this.setRestUrl(json["rest_url"]);
		this.setTokenDigest(json["token_digest"]);
		this.setThreadId(json["thread_id"]);
		this.setAppIp(json["app_ip"]);
		this.setRemoteIp(json["remote_ip"]);
		this.setUserAgent(json["user_agent"]);
		this.setAuditedTime(json["audited_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getOwnerZuid()) json += '"owner_zuid"' + ":" + '"' + jsonEscape(this.getOwnerZuid())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getRequestId()) json += '"request_id"' + ":" + '"' + jsonEscape(this.getRequestId())  + '",';
		if(this.getResourceType()) json += '"resource_type"' + ":" + '"' + jsonEscape(this.getResourceType())  + '",';
		if(this.getOperation()) json += '"operation"' + ":" + '"' + jsonEscape(this.getOperation())  + '",';
		if(this.getOldData()) json += '"old_data"' + ":" + '"' + jsonEscape(this.getOldData())  + '",';
		if(this.getNewData()) json += '"new_data"' + ":" + '"' + jsonEscape(this.getNewData())  + '",';
		if(this.getRestUrl()) json += '"rest_url"' + ":" + '"' + jsonEscape(this.getRestUrl())  + '",';
		if(this.getTokenDigest()) json += '"token_digest"' + ":" + '"' + jsonEscape(this.getTokenDigest())  + '",';
		if(this.getThreadId()) json += '"thread_id"' + ":" + '"' + jsonEscape(this.getThreadId())  + '",';
		if(this.getAppIp()) json += '"app_ip"' + ":" + '"' + jsonEscape(this.getAppIp())  + '",';
		if(this.getRemoteIp()) json += '"remote_ip"' + ":" + '"' + jsonEscape(this.getRemoteIp())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getAuditedTime()) json += '"audited_time"' + ":" + '"' + jsonEscape(this.getAuditedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ResourceAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.ownerZuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.ownerZuid)) { throw new ValidationError(_formprefix + "owner_zuid", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.requestId && !(/^[a-zA-Z0-9_\-]+$/).test(this.requestId)) { throw new ValidationError(_formprefix + "request_id", ValidationError.PATTERN_FAILED);}
if(this.resourceType && !(/^[a-zA-Z0-9_]+$/).test(this.resourceType)) { throw new ValidationError(_formprefix + "resource_type", ValidationError.PATTERN_FAILED);}
if(this.oldData && !(/dontdisturb/).test(this.oldData)) { throw new ValidationError(_formprefix + "old_data", ValidationError.PATTERN_FAILED);}
if(this.newData && !(/dontdisturb/).test(this.newData)) { throw new ValidationError(_formprefix + "new_data", ValidationError.PATTERN_FAILED);}
if(this.restUrl && !(/dontdisturb/).test(this.restUrl)) { throw new ValidationError(_formprefix + "rest_url", ValidationError.PATTERN_FAILED);}
if(this.tokenDigest && !(/^[a-f0-9]+$/).test(this.tokenDigest)) { throw new ValidationError(_formprefix + "token_digest", ValidationError.PATTERN_FAILED);}
if(this.threadId && !(/dontdisturb/).test(this.threadId)) { throw new ValidationError(_formprefix + "thread_id", ValidationError.PATTERN_FAILED);}
if(this.appIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.appIp)) { throw new ValidationError(_formprefix + "app_ip", ValidationError.PATTERN_FAILED);}
if(this.remoteIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.remoteIp)) { throw new ValidationError(_formprefix + "remote_ip", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.auditedTime && !Validator.INTEGER.test(this.auditedTime)) { throw new ValidationError(_formprefix + "audited_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ResourceAudit.path = "resourceaudit";
ResourceAudit.newBuilder = function() {
    return new ResourceAudit();
};

ConditionalPolicy = function() {
    var _formprefix = "";
    
var conditionId = "";
this.setConditionId = function(conditionId) { 
    this.conditionId = conditionId;
    return this;
};
this.getConditionId = function() {
    return this.conditionId;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var accessControl = "0";
this.setAccessControl = function(accessControl) { 
    this.accessControl = accessControl;
    return this;
};
this.getAccessControl = function() {
    return this.accessControl;
};
var allowedMfaModes = "0";
this.setAllowedMfaModes = function(allowedMfaModes) { 
    this.allowedMfaModes = allowedMfaModes;
    return this;
};
this.getAllowedMfaModes = function() {
    return this.allowedMfaModes;
};
var allowedClients = "0";
this.setAllowedClients = function(allowedClients) { 
    this.allowedClients = allowedClients;
    return this;
};
this.getAllowedClients = function() {
    return this.allowedClients;
};
var mfaLifetime = "0";
this.setMfaLifetime = function(mfaLifetime) { 
    this.mfaLifetime = mfaLifetime;
    return this;
};
this.getMfaLifetime = function() {
    return this.mfaLifetime;
};
var conditionMatch = "0";
this.setConditionMatch = function(conditionMatch) { 
    this.conditionMatch = conditionMatch;
    return this;
};
this.getConditionMatch = function() {
    return this.conditionMatch;
};
var appliesTo = "0";
this.setAppliesTo = function(appliesTo) { 
    this.appliesTo = appliesTo;
    return this;
};
this.getAppliesTo = function() {
    return this.appliesTo;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var conditionaluser = undefined;
this.setConditionalusers = function(conditionaluser) { 
    this.conditionaluser = conditionaluser;
    return this;
};
this.getConditionalusers = function() {
    return this.conditionaluser;
};
this.addConditionaluser = function(conditionaluser) { 
 if(!this.conditionaluser) this.conditionaluser = new Array(); 
  this.conditionaluser.push(conditionaluser); 
 return this;
};

var conditionalaccess = undefined;
this.setConditionalaccesss = function(conditionalaccess) { 
    this.conditionalaccess = conditionalaccess;
    return this;
};
this.getConditionalaccesss = function() {
    return this.conditionalaccess;
};
this.addConditionalaccess = function(conditionalaccess) { 
 if(!this.conditionalaccess) this.conditionalaccess = new Array(); 
  this.conditionalaccess.push(conditionalaccess); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setConditionId(json["condition_id"]);
		this.setDisplayName(json["display_name"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setAccessControl(json["access_control"]);
		this.setAllowedMfaModes(json["allowed_mfa_modes"]);
		this.setAllowedClients(json["allowed_clients"]);
		this.setMfaLifetime(json["mfa_lifetime"]);
		this.setConditionMatch(json["condition_match"]);
		this.setAppliesTo(json["applies_to"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setConditionalusers(URI.getResourceArray(json["conditionalUser"],"conditionaluser"));
		this.setConditionalaccesss(URI.getResourceArray(json["conditionalAccess"],"conditionalaccess"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getConditionId()) json += '"condition_id"' + ":" + '"' + jsonEscape(this.getConditionId())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getAccessControl()) json += '"access_control"' + ":" + '"' + jsonEscape(this.getAccessControl())  + '",';
		if(this.getAllowedMfaModes()) json += '"allowed_mfa_modes"' + ":" + '"' + jsonEscape(this.getAllowedMfaModes())  + '",';
		if(this.getAllowedClients()) json += '"allowed_clients"' + ":" + '"' + jsonEscape(this.getAllowedClients())  + '",';
		if(this.getMfaLifetime()) json += '"mfa_lifetime"' + ":" + '"' + jsonEscape(this.getMfaLifetime())  + '",';
		if(this.getConditionMatch()) json += '"condition_match"' + ":" + '"' + jsonEscape(this.getConditionMatch())  + '",';
		if(this.getAppliesTo()) json += '"applies_to"' + ":" + '"' + jsonEscape(this.getAppliesTo())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getConditionalusers()) json += '"conditionalUser"' + ":" + URI.toJSONArray(this.getConditionalusers())  + ',';
		if(this.getConditionalaccesss()) json += '"conditionalAccess"' + ":" + URI.toJSONArray(this.getConditionalaccesss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ConditionalPolicy.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.allowedMfaModes && !Validator.INTEGER.test(this.allowedMfaModes)) { throw new ValidationError(_formprefix + "allowed_mfa_modes", ValidationError.PATTERN_FAILED);}
if(this.allowedClients && !Validator.INTEGER.test(this.allowedClients)) { throw new ValidationError(_formprefix + "allowed_clients", ValidationError.PATTERN_FAILED);}
if(this.mfaLifetime && !Validator.INTEGER.test(this.mfaLifetime)) { throw new ValidationError(_formprefix + "mfa_lifetime", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.conditionaluser) { for(i=0; i < this.conditionaluser.length; i++ ) { this.conditionaluser[i].validate(); } }
if(this.conditionalaccess) { for(i=0; i < this.conditionalaccess.length; i++ ) { this.conditionalaccess[i].validate(); } }

	return this;
    }
}
ConditionalPolicy.path = "conditionalpolicy";
ConditionalPolicy.newBuilder = function() {
    return new ConditionalPolicy();
};

TokenPairAuthToken = function() {
    var _formprefix = "";
    
var authToken = "";
this.setAuthToken = function(authToken) { 
    this.authToken = authToken;
    return this;
};
this.getAuthToken = function() {
    return this.authToken;
};
var createdDomain = "";
this.setCreatedDomain = function(createdDomain) { 
    this.createdDomain = createdDomain;
    return this;
};
this.getCreatedDomain = function() {
    return this.createdDomain;
};
var type = "0";
this.setType = function(type) { 
    this.type = type;
    return this;
};
this.getType = function() {
    return this.type;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAuthToken(json["auth_token"]);
		this.setCreatedDomain(json["created_domain"]);
		this.setType(json["type"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAuthToken()) json += '"auth_token"' + ":" + '"' + jsonEscape(this.getAuthToken())  + '",';
		if(this.getCreatedDomain()) json += '"created_domain"' + ":" + '"' + jsonEscape(this.getCreatedDomain())  + '",';
		if(this.getType()) json += '"type"' + ":" + '"' + jsonEscape(this.getType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(TokenPairAuthToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.authToken && !(/^[a-zA-Z0-9\-\_]+$/).test(this.authToken)) { throw new ValidationError(_formprefix + "auth_token", ValidationError.PATTERN_FAILED);}
if(this.createdDomain && !(/^([\p{L}\p{M}\p{N}]([\p{L}\p{M}\p{N}\-]{0,61}[\p{L}\p{M}\p{N}])?\.)+[\p{L}\p{M}]{2,6}$/).test(this.createdDomain)) { throw new ValidationError(_formprefix + "created_domain", ValidationError.PATTERN_FAILED);}
if(this.type && !Validator.INTEGER.test(this.type)) { throw new ValidationError(_formprefix + "type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
TokenPairAuthToken.path = "tokenpairauthtoken";
TokenPairAuthToken.newBuilder = function() {
    return new TokenPairAuthToken();
};

OAuthGrantToken = function() {
    var _formprefix = "";
    
var userZid = "";
this.setUserZid = function(userZid) { 
    this.userZid = userZid;
    return this;
};
this.getUserZid = function() {
    return this.userZid;
};
var zidType = "1";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var grantToken = "";
this.setGrantToken = function(grantToken) { 
    this.grantToken = grantToken;
    return this;
};
this.getGrantToken = function() {
    return this.grantToken;
};
var grantType = "";
this.setGrantType = function(grantType) { 
    this.grantType = grantType;
    return this;
};
this.getGrantType = function() {
    return this.grantType;
};
var redirectUrl = "";
this.setRedirectUrl = function(redirectUrl) { 
    this.redirectUrl = redirectUrl;
    return this;
};
this.getRedirectUrl = function() {
    return this.redirectUrl;
};
var accessType = "1";
this.setAccessType = function(accessType) { 
    this.accessType = accessType;
    return this;
};
this.getAccessType = function() {
    return this.accessType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
var grantTokenInfo = "";
this.setGrantTokenInfo = function(grantTokenInfo) { 
    this.grantTokenInfo = grantTokenInfo;
    return this;
};
this.getGrantTokenInfo = function() {
    return this.grantTokenInfo;
};
var orgType = "";
this.setOrgType = function(orgType) { 
    this.orgType = orgType;
    return this;
};
this.getOrgType = function() {
    return this.orgType;
};
var oauthgranttokenscopes = undefined;
this.setOauthgranttokenscopess = function(oauthgranttokenscopes) { 
    this.oauthgranttokenscopes = oauthgranttokenscopes;
    return this;
};
this.getOauthgranttokenscopess = function() {
    return this.oauthgranttokenscopes;
};
this.addOauthgranttokenscopes = function(oauthgranttokenscopes) { 
 if(!this.oauthgranttokenscopes) this.oauthgranttokenscopes = new Array(); 
  this.oauthgranttokenscopes.push(oauthgranttokenscopes); 
 return this;
};

var oauthgranttokenorginfo = undefined;
this.setOauthgranttokenorginfos = function(oauthgranttokenorginfo) { 
    this.oauthgranttokenorginfo = oauthgranttokenorginfo;
    return this;
};
this.getOauthgranttokenorginfos = function() {
    return this.oauthgranttokenorginfo;
};
this.addOauthgranttokenorginfo = function(oauthgranttokenorginfo) { 
 if(!this.oauthgranttokenorginfo) this.oauthgranttokenorginfo = new Array(); 
  this.oauthgranttokenorginfo.push(oauthgranttokenorginfo); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setUserZid(json["user_zid"]);
		this.setZidType(json["zid_type"]);
		this.setGrantToken(json["grant_token"]);
		this.setGrantType(json["grant_type"]);
		this.setRedirectUrl(json["redirect_url"]);
		this.setAccessType(json["access_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setExpiryTime(json["expiry_time"]);
		this.setGrantTokenInfo(json["grant_token_info"]);
		this.setOrgType(json["org_type"]);
		this.setOauthgranttokenscopess(URI.getResourceArray(json["oAuthGrantTokenScopes"],"oauthgranttokenscopes"));
		this.setOauthgranttokenorginfos(URI.getResourceArray(json["oAuthGrantTokenOrgInfo"],"oauthgranttokenorginfo"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getUserZid()) json += '"user_zid"' + ":" + '"' + jsonEscape(this.getUserZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getGrantToken()) json += '"grant_token"' + ":" + '"' + jsonEscape(this.getGrantToken())  + '",';
		if(this.getGrantType()) json += '"grant_type"' + ":" + '"' + jsonEscape(this.getGrantType())  + '",';
		if(this.getRedirectUrl()) json += '"redirect_url"' + ":" + '"' + jsonEscape(this.getRedirectUrl())  + '",';
		if(this.getAccessType()) json += '"access_type"' + ":" + '"' + jsonEscape(this.getAccessType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';
		if(this.getGrantTokenInfo()) json += '"grant_token_info"' + ":" + '"' + jsonEscape(this.getGrantTokenInfo())  + '",';
		if(this.getOrgType()) json += '"org_type"' + ":" + '"' + jsonEscape(this.getOrgType())  + '",';
		if(this.getOauthgranttokenscopess()) json += '"oAuthGrantTokenScopes"' + ":" + URI.toJSONArray(this.getOauthgranttokenscopess())  + ',';
		if(this.getOauthgranttokenorginfos()) json += '"oAuthGrantTokenOrgInfo"' + ":" + URI.toJSONArray(this.getOauthgranttokenorginfos())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthGrantToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.userZid && !(/^[a-zA-Z0-9_\-]+$/).test(this.userZid)) { throw new ValidationError(_formprefix + "user_zid", ValidationError.PATTERN_FAILED);}
if(this.zidType && !Validator.INTEGER.test(this.zidType)) { throw new ValidationError(_formprefix + "zid_type", ValidationError.PATTERN_FAILED);}
if(this.grantToken && !(/xss:throwerror/).test(this.grantToken)) { throw new ValidationError(_formprefix + "grant_token", ValidationError.PATTERN_FAILED);}
if(this.grantType && !(/xss:throwerror/).test(this.grantType)) { throw new ValidationError(_formprefix + "grant_type", ValidationError.PATTERN_FAILED);}
if(this.redirectUrl && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.redirectUrl)) { throw new ValidationError(_formprefix + "redirect_url", ValidationError.PATTERN_FAILED);}
if(this.accessType && !Validator.INTEGER.test(this.accessType)) { throw new ValidationError(_formprefix + "access_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}
if(this.grantTokenInfo && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.grantTokenInfo)) { throw new ValidationError(_formprefix + "grant_token_info", ValidationError.PATTERN_FAILED);}
if(this.orgType && !Validator.INTEGER.test(this.orgType)) { throw new ValidationError(_formprefix + "org_type", ValidationError.PATTERN_FAILED);}
if(this.oauthgranttokenscopes) { for(i=0; i < this.oauthgranttokenscopes.length; i++ ) { this.oauthgranttokenscopes[i].validate(); } }
if(this.oauthgranttokenorginfo) { for(i=0; i < this.oauthgranttokenorginfo.length; i++ ) { this.oauthgranttokenorginfo[i].validate(); } }

	return this;
    }
}
OAuthGrantToken.path = "oauthgranttoken";
OAuthGrantToken.newBuilder = function() {
    return new OAuthGrantToken();
};

SAMLAuthentication = function() {
    var _formprefix = "";
    
var samlId = "";
this.setSamlId = function(samlId) { 
    this.samlId = samlId;
    return this;
};
this.getSamlId = function() {
    return this.samlId;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var loginUrl = "";
this.setLoginUrl = function(loginUrl) { 
    this.loginUrl = loginUrl;
    return this;
};
this.getLoginUrl = function() {
    return this.loginUrl;
};
var artifactUrl = "";
this.setArtifactUrl = function(artifactUrl) { 
    this.artifactUrl = artifactUrl;
    return this;
};
this.getArtifactUrl = function() {
    return this.artifactUrl;
};
var loginBinding = "0";
this.setLoginBinding = function(loginBinding) { 
    this.loginBinding = loginBinding;
    return this;
};
this.getLoginBinding = function() {
    return this.loginBinding;
};
var logoutUrl = "";
this.setLogoutUrl = function(logoutUrl) { 
    this.logoutUrl = logoutUrl;
    return this;
};
this.getLogoutUrl = function() {
    return this.logoutUrl;
};
var logoutBinding = "1";
this.setLogoutBinding = function(logoutBinding) { 
    this.logoutBinding = logoutBinding;
    return this;
};
this.getLogoutBinding = function() {
    return this.logoutBinding;
};
var publicKey = "";
this.setPublicKey = function(publicKey) { 
    this.publicKey = publicKey;
    return this;
};
this.getPublicKey = function() {
    return this.publicKey;
};
var nameIdentifier = "1";
this.setNameIdentifier = function(nameIdentifier) { 
    this.nameIdentifier = nameIdentifier;
    return this;
};
this.getNameIdentifier = function() {
    return this.nameIdentifier;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var landingService = "";
this.setLandingService = function(landingService) { 
    this.landingService = landingService;
    return this;
};
this.getLandingService = function() {
    return this.landingService;
};
var isSignEnabled = "false";
this.setIsSignEnabled = function(isSignEnabled) { 
    this.isSignEnabled = isSignEnabled;
    return this;
};
this.getIsSignEnabled = function() {
    return this.isSignEnabled;
};
var issuer = "";
this.setIssuer = function(issuer) { 
    this.issuer = issuer;
    return this;
};
this.getIssuer = function() {
    return this.issuer;
};
var spCertificate = "";
this.setSpCertificate = function(spCertificate) { 
    this.spCertificate = spCertificate;
    return this;
};
this.getSpCertificate = function() {
    return this.spCertificate;
};
var spPrivateKey = "";
this.setSpPrivateKey = function(spPrivateKey) { 
    this.spPrivateKey = spPrivateKey;
    return this;
};
this.getSpPrivateKey = function() {
    return this.spPrivateKey;
};
var spCertificateExpiryTime = "";
this.setSpCertificateExpiryTime = function(spCertificateExpiryTime) { 
    this.spCertificateExpiryTime = spCertificateExpiryTime;
    return this;
};
this.getSpCertificateExpiryTime = function() {
    return this.spCertificateExpiryTime;
};
var isNewSamlConfig = "0";
this.setIsNewSamlConfig = function(isNewSamlConfig) { 
    this.isNewSamlConfig = isNewSamlConfig;
    return this;
};
this.getIsNewSamlConfig = function() {
    return this.isNewSamlConfig;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var samlreqparam = undefined;
this.setSamlreqparams = function(samlreqparam) { 
    this.samlreqparam = samlreqparam;
    return this;
};
this.getSamlreqparams = function() {
    return this.samlreqparam;
};
this.addSamlreqparam = function(samlreqparam) { 
 if(!this.samlreqparam) this.samlreqparam = new Array(); 
  this.samlreqparam.push(samlreqparam); 
 return this;
};

var samlattribute = undefined;
this.setSamlattributes = function(samlattribute) { 
    this.samlattribute = samlattribute;
    return this;
};
this.getSamlattributes = function() {
    return this.samlattribute;
};
this.addSamlattribute = function(samlattribute) { 
 if(!this.samlattribute) this.samlattribute = new Array(); 
  this.samlattribute.push(samlattribute); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setSamlId(json["saml_id"]);
		this.setDisplayName(json["display_name"]);
		this.setLoginUrl(json["login_url"]);
		this.setArtifactUrl(json["artifact_url"]);
		this.setLoginBinding(json["login_binding"]);
		this.setLogoutUrl(json["logout_url"]);
		this.setLogoutBinding(json["logout_binding"]);
		this.setPublicKey(json["public_key"]);
		this.setNameIdentifier(json["name_identifier"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setLandingService(json["landing_service"]);
		this.setIsSignEnabled(json["is_sign_enabled"]);
		this.setIssuer(json["issuer"]);
		this.setSpCertificate(json["sp_certificate"]);
		this.setSpPrivateKey(json["sp_private_key"]);
		this.setSpCertificateExpiryTime(json["sp_certificate_expiry_time"]);
		this.setIsNewSamlConfig(json["is_new_saml_config"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setSamlreqparams(URI.getResourceArray(json["sAMLReqParam"],"samlreqparam"));
		this.setSamlattributes(URI.getResourceArray(json["sAMLAttribute"],"samlattribute"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getSamlId()) json += '"saml_id"' + ":" + '"' + jsonEscape(this.getSamlId())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getLoginUrl()) json += '"login_url"' + ":" + '"' + jsonEscape(this.getLoginUrl())  + '",';
		if(this.getArtifactUrl()) json += '"artifact_url"' + ":" + '"' + jsonEscape(this.getArtifactUrl())  + '",';
		if(this.getLoginBinding()) json += '"login_binding"' + ":" + '"' + jsonEscape(this.getLoginBinding())  + '",';
		if(this.getLogoutUrl()) json += '"logout_url"' + ":" + '"' + jsonEscape(this.getLogoutUrl())  + '",';
		if(this.getLogoutBinding()) json += '"logout_binding"' + ":" + '"' + jsonEscape(this.getLogoutBinding())  + '",';
		if(this.getPublicKey()) json += '"public_key"' + ":" + '"' + jsonEscape(this.getPublicKey())  + '",';
		if(this.getNameIdentifier()) json += '"name_identifier"' + ":" + '"' + jsonEscape(this.getNameIdentifier())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getLandingService()) json += '"landing_service"' + ":" + '"' + jsonEscape(this.getLandingService())  + '",';
		if(this.getIsSignEnabled()) json += '"is_sign_enabled"' + ":" + '"' + jsonEscape(this.getIsSignEnabled())  + '",';
		if(this.getIssuer()) json += '"issuer"' + ":" + '"' + jsonEscape(this.getIssuer())  + '",';
		if(this.getSpCertificate()) json += '"sp_certificate"' + ":" + '"' + jsonEscape(this.getSpCertificate())  + '",';
		if(this.getSpPrivateKey()) json += '"sp_private_key"' + ":" + '"' + jsonEscape(this.getSpPrivateKey())  + '",';
		if(this.getSpCertificateExpiryTime()) json += '"sp_certificate_expiry_time"' + ":" + '"' + jsonEscape(this.getSpCertificateExpiryTime())  + '",';
		if(this.getIsNewSamlConfig()) json += '"is_new_saml_config"' + ":" + '"' + jsonEscape(this.getIsNewSamlConfig())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getSamlreqparams()) json += '"sAMLReqParam"' + ":" + URI.toJSONArray(this.getSamlreqparams())  + ',';
		if(this.getSamlattributes()) json += '"sAMLAttribute"' + ":" + URI.toJSONArray(this.getSamlattributes())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SAMLAuthentication.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.loginUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.loginUrl)) { throw new ValidationError(_formprefix + "login_url", ValidationError.PATTERN_FAILED);}
if(this.artifactUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.artifactUrl)) { throw new ValidationError(_formprefix + "artifact_url", ValidationError.PATTERN_FAILED);}
if(this.logoutUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.logoutUrl)) { throw new ValidationError(_formprefix + "logout_url", ValidationError.PATTERN_FAILED);}
if(this.publicKey && !(/dontdisturb/).test(this.publicKey)) { throw new ValidationError(_formprefix + "public_key", ValidationError.PATTERN_FAILED);}
if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.isSignEnabled && !Validator.BOOLEAN.test(this.isSignEnabled)) { throw new ValidationError(_formprefix + "is_sign_enabled", ValidationError.PATTERN_FAILED);}
if(this.spCertificate && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.spCertificate)) { throw new ValidationError(_formprefix + "sp_certificate", ValidationError.PATTERN_FAILED);}
if(this.spPrivateKey && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.spPrivateKey)) { throw new ValidationError(_formprefix + "sp_private_key", ValidationError.PATTERN_FAILED);}
if(this.spCertificateExpiryTime && !Validator.INTEGER.test(this.spCertificateExpiryTime)) { throw new ValidationError(_formprefix + "sp_certificate_expiry_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.samlreqparam) { for(i=0; i < this.samlreqparam.length; i++ ) { this.samlreqparam[i].validate(); } }
if(this.samlattribute) { for(i=0; i < this.samlattribute.length; i++ ) { this.samlattribute[i].validate(); } }

	return this;
    }
}
SAMLAuthentication.path = "samlauthentication";
SAMLAuthentication.newBuilder = function() {
    return new SAMLAuthentication();
};

ISCUserTicketUsage = function() {
    var _formprefix = "";
    
var iscTicket = "";
this.setIscTicket = function(iscTicket) { 
    this.iscTicket = iscTicket;
    return this;
};
this.getIscTicket = function() {
    return this.iscTicket;
};
var scopeId = "-1";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var tokenCreatedTime = "";
this.setTokenCreatedTime = function(tokenCreatedTime) { 
    this.tokenCreatedTime = tokenCreatedTime;
    return this;
};
this.getTokenCreatedTime = function() {
    return this.tokenCreatedTime;
};
var tokenAccessedIp = "";
this.setTokenAccessedIp = function(tokenAccessedIp) { 
    this.tokenAccessedIp = tokenAccessedIp;
    return this;
};
this.getTokenAccessedIp = function() {
    return this.tokenAccessedIp;
};
var tokenAccessedTime = "";
this.setTokenAccessedTime = function(tokenAccessedTime) { 
    this.tokenAccessedTime = tokenAccessedTime;
    return this;
};
this.getTokenAccessedTime = function() {
    return this.tokenAccessedTime;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setIscTicket(json["isc_ticket"]);
		this.setScopeId(json["scope_id"]);
		this.setTokenCreatedTime(json["token_created_time"]);
		this.setTokenAccessedIp(json["token_accessed_ip"]);
		this.setTokenAccessedTime(json["token_accessed_time"]);
		this.setUserAgent(json["user_agent"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getIscTicket()) json += '"isc_ticket"' + ":" + '"' + jsonEscape(this.getIscTicket())  + '",';
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getTokenCreatedTime()) json += '"token_created_time"' + ":" + '"' + jsonEscape(this.getTokenCreatedTime())  + '",';
		if(this.getTokenAccessedIp()) json += '"token_accessed_ip"' + ":" + '"' + jsonEscape(this.getTokenAccessedIp())  + '",';
		if(this.getTokenAccessedTime()) json += '"token_accessed_time"' + ":" + '"' + jsonEscape(this.getTokenAccessedTime())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ISCUserTicketUsage.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.iscTicket && !(/^(?:[a-z0-9\.\-])+$/).test(this.iscTicket)) { throw new ValidationError(_formprefix + "isc_ticket", ValidationError.PATTERN_FAILED);}
if(this.scopeId && !(/^[a-zA-Z0-9_\-]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.tokenCreatedTime && !Validator.INTEGER.test(this.tokenCreatedTime)) { throw new ValidationError(_formprefix + "token_created_time", ValidationError.PATTERN_FAILED);}
if(this.tokenAccessedIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.tokenAccessedIp)) { throw new ValidationError(_formprefix + "token_accessed_ip", ValidationError.PATTERN_FAILED);}
if(this.tokenAccessedTime && !Validator.INTEGER.test(this.tokenAccessedTime)) { throw new ValidationError(_formprefix + "token_accessed_time", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ISCUserTicketUsage.path = "iscuserticketusage";
ISCUserTicketUsage.newBuilder = function() {
    return new ISCUserTicketUsage();
};

I18n = function() {
    var _formprefix = "";
    
var i18nAttributeName = "";
this.setI18nAttributeName = function(i18nAttributeName) { 
    this.i18nAttributeName = i18nAttributeName;
    return this;
};
this.getI18nAttributeName = function() {
    return this.i18nAttributeName;
};
var isFile = "";
this.setIsFile = function(isFile) { 
    this.isFile = isFile;
    return this;
};
this.getIsFile = function() {
    return this.isFile;
};
var i18nAttributeValue = "";
this.setI18nAttributeValue = function(i18nAttributeValue) { 
    this.i18nAttributeValue = i18nAttributeValue;
    return this;
};
this.getI18nAttributeValue = function() {
    return this.i18nAttributeValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setI18nAttributeName(json["i18n_attribute_name"]);
		this.setIsFile(json["is_file"]);
		this.setI18nAttributeValue(json["i18n_attribute_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getI18nAttributeName()) json += '"i18n_attribute_name"' + ":" + '"' + jsonEscape(this.getI18nAttributeName())  + '",';
		if(this.getIsFile()) json += '"is_file"' + ":" + '"' + jsonEscape(this.getIsFile())  + '",';
		if(this.getI18nAttributeValue()) json += '"i18n_attribute_value"' + ":" + '"' + jsonEscape(this.getI18nAttributeValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(I18n.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.i18nAttributeName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.i18nAttributeName)) { throw new ValidationError(_formprefix + "i18n_attribute_name", ValidationError.PATTERN_FAILED);}
if(this.isFile && !Validator.BOOLEAN.test(this.isFile)) { throw new ValidationError(_formprefix + "is_file", ValidationError.PATTERN_FAILED);}
if(this.i18nAttributeValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.i18nAttributeValue)) { throw new ValidationError(_formprefix + "i18n_attribute_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
I18n.path = "i18n";
I18n.newBuilder = function() {
    return new I18n();
};

DCCustomDomains = function() {
    var _formprefix = "";
    
var entityName = "";
this.setEntityName = function(entityName) { 
    this.entityName = entityName;
    return this;
};
this.getEntityName = function() {
    return this.entityName;
};
var originalBasedomain = "";
this.setOriginalBasedomain = function(originalBasedomain) { 
    this.originalBasedomain = originalBasedomain;
    return this;
};
this.getOriginalBasedomain = function() {
    return this.originalBasedomain;
};
var transformedBasedomain = ".*";
this.setTransformedBasedomain = function(transformedBasedomain) { 
    this.transformedBasedomain = transformedBasedomain;
    return this;
};
this.getTransformedBasedomain = function() {
    return this.transformedBasedomain;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setEntityName(json["entity_name"]);
		this.setOriginalBasedomain(json["original_basedomain"]);
		this.setTransformedBasedomain(json["transformed_basedomain"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getEntityName()) json += '"entity_name"' + ":" + '"' + jsonEscape(this.getEntityName())  + '",';
		if(this.getOriginalBasedomain()) json += '"original_basedomain"' + ":" + '"' + jsonEscape(this.getOriginalBasedomain())  + '",';
		if(this.getTransformedBasedomain()) json += '"transformed_basedomain"' + ":" + '"' + jsonEscape(this.getTransformedBasedomain())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(DCCustomDomains.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	
	return this;
    }
}
DCCustomDomains.path = "dccustomdomains";
DCCustomDomains.newBuilder = function() {
    return new DCCustomDomains();
};

ServiceOrgAddress = function() {
    var _formprefix = "";
    
var addressType = "";
this.setAddressType = function(addressType) { 
    this.addressType = addressType;
    return this;
};
this.getAddressType = function() {
    return this.addressType;
};
var name = "";
this.setName = function(name) { 
    this.name = name;
    return this;
};
this.getName = function() {
    return this.name;
};
var postBox = "";
this.setPostBox = function(postBox) { 
    this.postBox = postBox;
    return this;
};
this.getPostBox = function() {
    return this.postBox;
};
var streetAddress = "";
this.setStreetAddress = function(streetAddress) { 
    this.streetAddress = streetAddress;
    return this;
};
this.getStreetAddress = function() {
    return this.streetAddress;
};
var city = "";
this.setCity = function(city) { 
    this.city = city;
    return this;
};
this.getCity = function() {
    return this.city;
};
var state = "";
this.setState = function(state) { 
    this.state = state;
    return this;
};
this.getState = function() {
    return this.state;
};
var country = "";
this.setCountry = function(country) { 
    this.country = country;
    return this;
};
this.getCountry = function() {
    return this.country;
};
var postalCode = "";
this.setPostalCode = function(postalCode) { 
    this.postalCode = postalCode;
    return this;
};
this.getPostalCode = function() {
    return this.postalCode;
};
var latitude = "";
this.setLatitude = function(latitude) { 
    this.latitude = latitude;
    return this;
};
this.getLatitude = function() {
    return this.latitude;
};
var longitude = "";
this.setLongitude = function(longitude) { 
    this.longitude = longitude;
    return this;
};
this.getLongitude = function() {
    return this.longitude;
};
var phone = "";
this.setPhone = function(phone) { 
    this.phone = phone;
    return this;
};
this.getPhone = function() {
    return this.phone;
};
var extension = "";
this.setExtension = function(extension) { 
    this.extension = extension;
    return this;
};
this.getExtension = function() {
    return this.extension;
};
var mobile = "";
this.setMobile = function(mobile) { 
    this.mobile = mobile;
    return this;
};
this.getMobile = function() {
    return this.mobile;
};
var fax = "";
this.setFax = function(fax) { 
    this.fax = fax;
    return this;
};
this.getFax = function() {
    return this.fax;
};
var timezone = "";
this.setTimezone = function(timezone) { 
    this.timezone = timezone;
    return this;
};
this.getTimezone = function() {
    return this.timezone;
};
var language = "";
this.setLanguage = function(language) { 
    this.language = language;
    return this;
};
this.getLanguage = function() {
    return this.language;
};
var websiteUrl = "";
this.setWebsiteUrl = function(websiteUrl) { 
    this.websiteUrl = websiteUrl;
    return this;
};
this.getWebsiteUrl = function() {
    return this.websiteUrl;
};
var blogUrl = "";
this.setBlogUrl = function(blogUrl) { 
    this.blogUrl = blogUrl;
    return this;
};
this.getBlogUrl = function() {
    return this.blogUrl;
};
var twitterUrl = "";
this.setTwitterUrl = function(twitterUrl) { 
    this.twitterUrl = twitterUrl;
    return this;
};
this.getTwitterUrl = function() {
    return this.twitterUrl;
};
var linkedinUrl = "";
this.setLinkedinUrl = function(linkedinUrl) { 
    this.linkedinUrl = linkedinUrl;
    return this;
};
this.getLinkedinUrl = function() {
    return this.linkedinUrl;
};
var flickrUrl = "";
this.setFlickrUrl = function(flickrUrl) { 
    this.flickrUrl = flickrUrl;
    return this;
};
this.getFlickrUrl = function() {
    return this.flickrUrl;
};
var deliciousUrl = "";
this.setDeliciousUrl = function(deliciousUrl) { 
    this.deliciousUrl = deliciousUrl;
    return this;
};
this.getDeliciousUrl = function() {
    return this.deliciousUrl;
};
var amazonUrl = "";
this.setAmazonUrl = function(amazonUrl) { 
    this.amazonUrl = amazonUrl;
    return this;
};
this.getAmazonUrl = function() {
    return this.amazonUrl;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAddressType(json["address_type"]);
		this.setName(json["name"]);
		this.setPostBox(json["post_box"]);
		this.setStreetAddress(json["street_address"]);
		this.setCity(json["city"]);
		this.setState(json["state"]);
		this.setCountry(json["country"]);
		this.setPostalCode(json["postal_code"]);
		this.setLatitude(json["latitude"]);
		this.setLongitude(json["longitude"]);
		this.setPhone(json["phone"]);
		this.setExtension(json["extension"]);
		this.setMobile(json["mobile"]);
		this.setFax(json["fax"]);
		this.setTimezone(json["timezone"]);
		this.setLanguage(json["language"]);
		this.setWebsiteUrl(json["website_url"]);
		this.setBlogUrl(json["blog_url"]);
		this.setTwitterUrl(json["twitter_url"]);
		this.setLinkedinUrl(json["linkedin_url"]);
		this.setFlickrUrl(json["flickr_url"]);
		this.setDeliciousUrl(json["delicious_url"]);
		this.setAmazonUrl(json["amazon_url"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAddressType()) json += '"address_type"' + ":" + '"' + jsonEscape(this.getAddressType())  + '",';
		if(this.getName()) json += '"name"' + ":" + '"' + jsonEscape(this.getName())  + '",';
		if(this.getPostBox()) json += '"post_box"' + ":" + '"' + jsonEscape(this.getPostBox())  + '",';
		if(this.getStreetAddress()) json += '"street_address"' + ":" + '"' + jsonEscape(this.getStreetAddress())  + '",';
		if(this.getCity()) json += '"city"' + ":" + '"' + jsonEscape(this.getCity())  + '",';
		if(this.getState()) json += '"state"' + ":" + '"' + jsonEscape(this.getState())  + '",';
		if(this.getCountry()) json += '"country"' + ":" + '"' + jsonEscape(this.getCountry())  + '",';
		if(this.getPostalCode()) json += '"postal_code"' + ":" + '"' + jsonEscape(this.getPostalCode())  + '",';
		if(this.getLatitude()) json += '"latitude"' + ":" + '"' + jsonEscape(this.getLatitude())  + '",';
		if(this.getLongitude()) json += '"longitude"' + ":" + '"' + jsonEscape(this.getLongitude())  + '",';
		if(this.getPhone()) json += '"phone"' + ":" + '"' + jsonEscape(this.getPhone())  + '",';
		if(this.getExtension()) json += '"extension"' + ":" + '"' + jsonEscape(this.getExtension())  + '",';
		if(this.getMobile()) json += '"mobile"' + ":" + '"' + jsonEscape(this.getMobile())  + '",';
		if(this.getFax()) json += '"fax"' + ":" + '"' + jsonEscape(this.getFax())  + '",';
		if(this.getTimezone()) json += '"timezone"' + ":" + '"' + jsonEscape(this.getTimezone())  + '",';
		if(this.getLanguage()) json += '"language"' + ":" + '"' + jsonEscape(this.getLanguage())  + '",';
		if(this.getWebsiteUrl()) json += '"website_url"' + ":" + '"' + jsonEscape(this.getWebsiteUrl())  + '",';
		if(this.getBlogUrl()) json += '"blog_url"' + ":" + '"' + jsonEscape(this.getBlogUrl())  + '",';
		if(this.getTwitterUrl()) json += '"twitter_url"' + ":" + '"' + jsonEscape(this.getTwitterUrl())  + '",';
		if(this.getLinkedinUrl()) json += '"linkedin_url"' + ":" + '"' + jsonEscape(this.getLinkedinUrl())  + '",';
		if(this.getFlickrUrl()) json += '"flickr_url"' + ":" + '"' + jsonEscape(this.getFlickrUrl())  + '",';
		if(this.getDeliciousUrl()) json += '"delicious_url"' + ":" + '"' + jsonEscape(this.getDeliciousUrl())  + '",';
		if(this.getAmazonUrl()) json += '"amazon_url"' + ":" + '"' + jsonEscape(this.getAmazonUrl())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgAddress.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.addressType && !Validator.INTEGER.test(this.addressType)) { throw new ValidationError(_formprefix + "address_type", ValidationError.PATTERN_FAILED);}
if(this.name && !(/xss:throwerror/).test(this.name)) { throw new ValidationError(_formprefix + "name", ValidationError.PATTERN_FAILED);}
if(this.postBox && !(/xss:throwerror/).test(this.postBox)) { throw new ValidationError(_formprefix + "post_box", ValidationError.PATTERN_FAILED);}
if(this.streetAddress && !(/xss:throwerror/).test(this.streetAddress)) { throw new ValidationError(_formprefix + "street_address", ValidationError.PATTERN_FAILED);}
if(this.city && !(/xss:throwerror/).test(this.city)) { throw new ValidationError(_formprefix + "city", ValidationError.PATTERN_FAILED);}
if(this.state && !(/xss:throwerror/).test(this.state)) { throw new ValidationError(_formprefix + "state", ValidationError.PATTERN_FAILED);}
if(this.country && !(/^[a-zA-Z0-9]{2,5}$/).test(this.country)) { throw new ValidationError(_formprefix + "country", ValidationError.PATTERN_FAILED);}
if(this.postalCode && !(/xss:throwerror/).test(this.postalCode)) { throw new ValidationError(_formprefix + "postal_code", ValidationError.PATTERN_FAILED);}
if(this.latitude && !(/^[0-9\-\.]*$/).test(this.latitude)) { throw new ValidationError(_formprefix + "latitude", ValidationError.PATTERN_FAILED);}
if(this.longitude && !(/^[0-9\-\.]*$/).test(this.longitude)) { throw new ValidationError(_formprefix + "longitude", ValidationError.PATTERN_FAILED);}
if(this.phone && !(/xss:throwerror/).test(this.phone)) { throw new ValidationError(_formprefix + "phone", ValidationError.PATTERN_FAILED);}
if(this.extension && !(/xss:throwerror/).test(this.extension)) { throw new ValidationError(_formprefix + "extension", ValidationError.PATTERN_FAILED);}
if(this.mobile && !(/xss:throwerror/).test(this.mobile)) { throw new ValidationError(_formprefix + "mobile", ValidationError.PATTERN_FAILED);}
if(this.fax && !(/xss:throwerror/).test(this.fax)) { throw new ValidationError(_formprefix + "fax", ValidationError.PATTERN_FAILED);}
if(this.timezone && !(/xss:throwerror/).test(this.timezone)) { throw new ValidationError(_formprefix + "timezone", ValidationError.PATTERN_FAILED);}
if(this.language && !(/^[a-zA-Z-]{0,5}$/).test(this.language)) { throw new ValidationError(_formprefix + "language", ValidationError.PATTERN_FAILED);}
if(this.websiteUrl && !(/xss:throwerror/).test(this.websiteUrl)) { throw new ValidationError(_formprefix + "website_url", ValidationError.PATTERN_FAILED);}
if(this.blogUrl && !(/xss:throwerror/).test(this.blogUrl)) { throw new ValidationError(_formprefix + "blog_url", ValidationError.PATTERN_FAILED);}
if(this.twitterUrl && !(/xss:throwerror/).test(this.twitterUrl)) { throw new ValidationError(_formprefix + "twitter_url", ValidationError.PATTERN_FAILED);}
if(this.linkedinUrl && !(/xss:throwerror/).test(this.linkedinUrl)) { throw new ValidationError(_formprefix + "linkedin_url", ValidationError.PATTERN_FAILED);}
if(this.flickrUrl && !(/xss:throwerror/).test(this.flickrUrl)) { throw new ValidationError(_formprefix + "flickr_url", ValidationError.PATTERN_FAILED);}
if(this.deliciousUrl && !(/xss:throwerror/).test(this.deliciousUrl)) { throw new ValidationError(_formprefix + "delicious_url", ValidationError.PATTERN_FAILED);}
if(this.amazonUrl && !(/xss:throwerror/).test(this.amazonUrl)) { throw new ValidationError(_formprefix + "amazon_url", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgAddress.path = "serviceorgaddress";
ServiceOrgAddress.newBuilder = function() {
    return new ServiceOrgAddress();
};

OAuthGrantTokenScopes = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var allowedOperations = "";
this.setAllowedOperations = function(allowedOperations) { 
    this.allowedOperations = allowedOperations;
    return this;
};
this.getAllowedOperations = function() {
    return this.allowedOperations;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setAllowedOperations(json["allowed_operations"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getAllowedOperations()) json += '"allowed_operations"' + ":" + '"' + jsonEscape(this.getAllowedOperations())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthGrantTokenScopes.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.allowedOperations && !Validator.INTEGER.test(this.allowedOperations)) { throw new ValidationError(_formprefix + "allowed_operations", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthGrantTokenScopes.path = "oauthgranttokenscopes";
OAuthGrantTokenScopes.newBuilder = function() {
    return new OAuthGrantTokenScopes();
};

ZAIDSMSAuditTemplate = function() {
    var _formprefix = "";
    
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var mobileNo = "";
this.setMobileNo = function(mobileNo) { 
    this.mobileNo = mobileNo;
    return this;
};
this.getMobileNo = function() {
    return this.mobileNo;
};
var type = "";
this.setType = function(type) { 
    this.type = type;
    return this;
};
this.getType = function() {
    return this.type;
};
var usecase = "";
this.setUsecase = function(usecase) { 
    this.usecase = usecase;
    return this;
};
this.getUsecase = function() {
    return this.usecase;
};
var languageCode = "";
this.setLanguageCode = function(languageCode) { 
    this.languageCode = languageCode;
    return this;
};
this.getLanguageCode = function() {
    return this.languageCode;
};
var response = "";
this.setResponse = function(response) { 
    this.response = response;
    return this;
};
this.getResponse = function() {
    return this.response;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZaid(json["zaid"]);
		this.setZid(json["zid"]);
		this.setMobileNo(json["mobile_no"]);
		this.setType(json["type"]);
		this.setUsecase(json["usecase"]);
		this.setLanguageCode(json["language_code"]);
		this.setResponse(json["response"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getMobileNo()) json += '"mobile_no"' + ":" + '"' + jsonEscape(this.getMobileNo())  + '",';
		if(this.getType()) json += '"type"' + ":" + '"' + jsonEscape(this.getType())  + '",';
		if(this.getUsecase()) json += '"usecase"' + ":" + '"' + jsonEscape(this.getUsecase())  + '",';
		if(this.getLanguageCode()) json += '"language_code"' + ":" + '"' + jsonEscape(this.getLanguageCode())  + '",';
		if(this.getResponse()) json += '"response"' + ":" + '"' + jsonEscape(this.getResponse())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ZAIDSMSAuditTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.mobileNo && !(/dontdisturb/).test(this.mobileNo)) { throw new ValidationError(_formprefix + "mobile_no", ValidationError.PATTERN_FAILED);}
if(this.type && !Validator.INTEGER.test(this.type)) { throw new ValidationError(_formprefix + "type", ValidationError.PATTERN_FAILED);}
if(this.usecase && !Validator.INTEGER.test(this.usecase)) { throw new ValidationError(_formprefix + "usecase", ValidationError.PATTERN_FAILED);}
if(this.languageCode && !(/dontdisturb/).test(this.languageCode)) { throw new ValidationError(_formprefix + "language_code", ValidationError.PATTERN_FAILED);}
if(this.response && !(/dontdisturb/).test(this.response)) { throw new ValidationError(_formprefix + "response", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ZAIDSMSAuditTemplate.path = "zaidsmsaudittemplate";
ZAIDSMSAuditTemplate.newBuilder = function() {
    return new ZAIDSMSAuditTemplate();
};

Lang = function() {
    var _formprefix = "";
    
var languageCode = "";
this.setLanguageCode = function(languageCode) { 
    this.languageCode = languageCode;
    return this;
};
this.getLanguageCode = function() {
    return this.languageCode;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var i18n = undefined;
this.setI18ns = function(i18n) { 
    this.i18n = i18n;
    return this;
};
this.getI18ns = function() {
    return this.i18n;
};
this.addI18n = function(i18n) { 
 if(!this.i18n) this.i18n = new Array(); 
  this.i18n.push(i18n); 
 return this;
};

var rebrandl10n = undefined;
this.setRebrandl10ns = function(rebrandl10n) { 
    this.rebrandl10n = rebrandl10n;
    return this;
};
this.getRebrandl10ns = function() {
    return this.rebrandl10n;
};
this.addRebrandl10n = function(rebrandl10n) { 
 if(!this.rebrandl10n) this.rebrandl10n = new Array(); 
  this.rebrandl10n.push(rebrandl10n); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLanguageCode(json["language_code"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setI18ns(URI.getResourceArray(json["i18n"],"i18n"));
		this.setRebrandl10ns(URI.getResourceArray(json["rebrandL10n"],"rebrandl10n"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLanguageCode()) json += '"language_code"' + ":" + '"' + jsonEscape(this.getLanguageCode())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getI18ns()) json += '"i18n"' + ":" + URI.toJSONArray(this.getI18ns())  + ',';
		if(this.getRebrandl10ns()) json += '"rebrandL10n"' + ":" + URI.toJSONArray(this.getRebrandl10ns())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Lang.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.languageCode && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.languageCode)) { throw new ValidationError(_formprefix + "language_code", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.i18n) { for(i=0; i < this.i18n.length; i++ ) { this.i18n[i].validate(); } }
if(this.rebrandl10n) { for(i=0; i < this.rebrandl10n.length; i++ ) { this.rebrandl10n[i].validate(); } }

	return this;
    }
}
Lang.path = "lang";
Lang.newBuilder = function() {
    return new Lang();
};

OAuthAccessGrant = function() {
    var _formprefix = "";
    
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var oauthaccessgrantscopes = undefined;
this.setOauthaccessgrantscopess = function(oauthaccessgrantscopes) { 
    this.oauthaccessgrantscopes = oauthaccessgrantscopes;
    return this;
};
this.getOauthaccessgrantscopess = function() {
    return this.oauthaccessgrantscopes;
};
this.addOauthaccessgrantscopes = function(oauthaccessgrantscopes) { 
 if(!this.oauthaccessgrantscopes) this.oauthaccessgrantscopes = new Array(); 
  this.oauthaccessgrantscopes.push(oauthaccessgrantscopes); 
 return this;
};

var userwhitelistedclient = undefined;
this.setUserwhitelistedclient = function(userwhitelistedclient) { 
    this.userwhitelistedclient = userwhitelistedclient;
    return this;
};
this.getUserwhitelistedclient = function() {
    return this.userwhitelistedclient;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClientZid(json["client_zid"]);
		this.setIpAddress(json["ip_address"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);
		this.setOauthaccessgrantscopess(URI.getResourceArray(json["oAuthAccessGrantScopes"],"oauthaccessgrantscopes"));
		this.setUserwhitelistedclient(URI.getResource(json["userWhiteListedClient"],"userwhitelistedclient"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getOauthaccessgrantscopess()) json += '"oAuthAccessGrantScopes"' + ":" + URI.toJSONArray(this.getOauthaccessgrantscopess())  + ',';
		if(this.getUserwhitelistedclient()) json += '"userWhiteListedClient"' + ":" + this.getUserwhitelistedclient().toJSON()  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthAccessGrant.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.clientZid && !(/^[0-9]+\.[0-9]+$/).test(this.clientZid)) { throw new ValidationError(_formprefix + "client_zid", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/xss:throwerror/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.oauthaccessgrantscopes) { for(i=0; i < this.oauthaccessgrantscopes.length; i++ ) { this.oauthaccessgrantscopes[i].validate(); } }
if(this.userwhitelistedclient) { this.userwhitelistedclient.validate(); }

	return this;
    }
}
OAuthAccessGrant.path = "oauthaccessgrant";
OAuthAccessGrant.newBuilder = function() {
    return new OAuthAccessGrant();
};

SecretKey = function() {
    var _formprefix = "";
    
var keyLabel = "";
this.setKeyLabel = function(keyLabel) { 
    this.keyLabel = keyLabel;
    return this;
};
this.getKeyLabel = function() {
    return this.keyLabel;
};
var secretKey = "";
this.setSecretKey = function(secretKey) { 
    this.secretKey = secretKey;
    return this;
};
this.getSecretKey = function() {
    return this.secretKey;
};
var previousSecretKey = "";
this.setPreviousSecretKey = function(previousSecretKey) { 
    this.previousSecretKey = previousSecretKey;
    return this;
};
this.getPreviousSecretKey = function() {
    return this.previousSecretKey;
};
var validityPeriod = "30";
this.setValidityPeriod = function(validityPeriod) { 
    this.validityPeriod = validityPeriod;
    return this;
};
this.getValidityPeriod = function() {
    return this.validityPeriod;
};
var keyAlgorithm = "";
this.setKeyAlgorithm = function(keyAlgorithm) { 
    this.keyAlgorithm = keyAlgorithm;
    return this;
};
this.getKeyAlgorithm = function() {
    return this.keyAlgorithm;
};
var keyLength = "128";
this.setKeyLength = function(keyLength) { 
    this.keyLength = keyLength;
    return this;
};
this.getKeyLength = function() {
    return this.keyLength;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setKeyLabel(json["key_label"]);
		this.setSecretKey(json["secret_key"]);
		this.setPreviousSecretKey(json["previous_secret_key"]);
		this.setValidityPeriod(json["validity_period"]);
		this.setKeyAlgorithm(json["key_algorithm"]);
		this.setKeyLength(json["key_length"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getKeyLabel()) json += '"key_label"' + ":" + '"' + jsonEscape(this.getKeyLabel())  + '",';
		if(this.getSecretKey()) json += '"secret_key"' + ":" + '"' + jsonEscape(this.getSecretKey())  + '",';
		if(this.getPreviousSecretKey()) json += '"previous_secret_key"' + ":" + '"' + jsonEscape(this.getPreviousSecretKey())  + '",';
		if(this.getValidityPeriod()) json += '"validity_period"' + ":" + '"' + jsonEscape(this.getValidityPeriod())  + '",';
		if(this.getKeyAlgorithm()) json += '"key_algorithm"' + ":" + '"' + jsonEscape(this.getKeyAlgorithm())  + '",';
		if(this.getKeyLength()) json += '"key_length"' + ":" + '"' + jsonEscape(this.getKeyLength())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SecretKey.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.keyLabel && !(/^([A-Za-z0-9_.\-]+)$/).test(this.keyLabel)) { throw new ValidationError(_formprefix + "key_label", ValidationError.PATTERN_FAILED);}
if(this.validityPeriod && !Validator.INTEGER.test(this.validityPeriod)) { throw new ValidationError(_formprefix + "validity_period", ValidationError.PATTERN_FAILED);}
if(this.keyAlgorithm && !(/^([A-Za-z0-9_.\-]+)$/).test(this.keyAlgorithm)) { throw new ValidationError(_formprefix + "key_algorithm", ValidationError.PATTERN_FAILED);}
if(this.keyLength && !Validator.INTEGER.test(this.keyLength)) { throw new ValidationError(_formprefix + "key_length", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SecretKey.path = "secretkey";
SecretKey.newBuilder = function() {
    return new SecretKey();
};

InvitedUserDetails = function() {
    var _formprefix = "";
    
var invitedUserAutoid = "";
this.setInvitedUserAutoid = function(invitedUserAutoid) { 
    this.invitedUserAutoid = invitedUserAutoid;
    return this;
};
this.getInvitedUserAutoid = function() {
    return this.invitedUserAutoid;
};
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var orgId = "";
this.setOrgId = function(orgId) { 
    this.orgId = orgId;
    return this;
};
this.getOrgId = function() {
    return this.orgId;
};
var orgType = "";
this.setOrgType = function(orgType) { 
    this.orgType = orgType;
    return this;
};
this.getOrgType = function() {
    return this.orgType;
};
var status = "1";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var argsData = "";
this.setArgsData = function(argsData) { 
    this.argsData = argsData;
    return this;
};
this.getArgsData = function() {
    return this.argsData;
};
var invitationTime = "";
this.setInvitationTime = function(invitationTime) { 
    this.invitationTime = invitationTime;
    return this;
};
this.getInvitationTime = function() {
    return this.invitationTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setInvitedUserAutoid(json["invited_user_autoid"]);
		this.setEmailId(json["email_id"]);
		this.setOrgId(json["org_id"]);
		this.setOrgType(json["org_type"]);
		this.setStatus(json["status"]);
		this.setArgsData(json["args_data"]);
		this.setInvitationTime(json["invitation_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getInvitedUserAutoid()) json += '"invited_user_autoid"' + ":" + '"' + jsonEscape(this.getInvitedUserAutoid())  + '",';
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getOrgId()) json += '"org_id"' + ":" + '"' + jsonEscape(this.getOrgId())  + '",';
		if(this.getOrgType()) json += '"org_type"' + ":" + '"' + jsonEscape(this.getOrgType())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getArgsData()) json += '"args_data"' + ":" + '"' + jsonEscape(this.getArgsData())  + '",';
		if(this.getInvitationTime()) json += '"invitation_time"' + ":" + '"' + jsonEscape(this.getInvitationTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(InvitedUserDetails.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.invitedUserAutoid && !Validator.INTEGER.test(this.invitedUserAutoid)) { throw new ValidationError(_formprefix + "invited_user_autoid", ValidationError.PATTERN_FAILED);}
if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.orgId && !(/^[a-zA-Z0-9_\-]+$/).test(this.orgId)) { throw new ValidationError(_formprefix + "org_id", ValidationError.PATTERN_FAILED);}
if(this.orgType && !Validator.INTEGER.test(this.orgType)) { throw new ValidationError(_formprefix + "org_type", ValidationError.PATTERN_FAILED);}
if(this.invitationTime && !Validator.INTEGER.test(this.invitationTime)) { throw new ValidationError(_formprefix + "invitation_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
InvitedUserDetails.path = "inviteduserdetails";
InvitedUserDetails.newBuilder = function() {
    return new InvitedUserDetails();
};

OAuthAccessToken = function() {
    var _formprefix = "";
    
var userZid = "";
this.setUserZid = function(userZid) { 
    this.userZid = userZid;
    return this;
};
this.getUserZid = function() {
    return this.userZid;
};
var zidType = "1";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var refreshToken = "";
this.setRefreshToken = function(refreshToken) { 
    this.refreshToken = refreshToken;
    return this;
};
this.getRefreshToken = function() {
    return this.refreshToken;
};
var accessToken = "";
this.setAccessToken = function(accessToken) { 
    this.accessToken = accessToken;
    return this;
};
this.getAccessToken = function() {
    return this.accessToken;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var oauthaccesstokenscopes = undefined;
this.setOauthaccesstokenscopess = function(oauthaccesstokenscopes) { 
    this.oauthaccesstokenscopes = oauthaccesstokenscopes;
    return this;
};
this.getOauthaccesstokenscopess = function() {
    return this.oauthaccesstokenscopes;
};
this.addOauthaccesstokenscopes = function(oauthaccesstokenscopes) { 
 if(!this.oauthaccesstokenscopes) this.oauthaccesstokenscopes = new Array(); 
  this.oauthaccesstokenscopes.push(oauthaccesstokenscopes); 
 return this;
};

var oauthaccesstokenorginfo = undefined;
this.setOauthaccesstokenorginfos = function(oauthaccesstokenorginfo) { 
    this.oauthaccesstokenorginfo = oauthaccesstokenorginfo;
    return this;
};
this.getOauthaccesstokenorginfos = function() {
    return this.oauthaccesstokenorginfo;
};
this.addOauthaccesstokenorginfo = function(oauthaccesstokenorginfo) { 
 if(!this.oauthaccesstokenorginfo) this.oauthaccesstokenorginfo = new Array(); 
  this.oauthaccesstokenorginfo.push(oauthaccesstokenorginfo); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setUserZid(json["user_zid"]);
		this.setZidType(json["zid_type"]);
		this.setRefreshToken(json["refresh_token"]);
		this.setAccessToken(json["access_token"]);
		this.setExpiryTime(json["expiry_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setOauthaccesstokenscopess(URI.getResourceArray(json["oAuthAccessTokenScopes"],"oauthaccesstokenscopes"));
		this.setOauthaccesstokenorginfos(URI.getResourceArray(json["oAuthAccessTokenOrgInfo"],"oauthaccesstokenorginfo"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getUserZid()) json += '"user_zid"' + ":" + '"' + jsonEscape(this.getUserZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getRefreshToken()) json += '"refresh_token"' + ":" + '"' + jsonEscape(this.getRefreshToken())  + '",';
		if(this.getAccessToken()) json += '"access_token"' + ":" + '"' + jsonEscape(this.getAccessToken())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getOauthaccesstokenscopess()) json += '"oAuthAccessTokenScopes"' + ":" + URI.toJSONArray(this.getOauthaccesstokenscopess())  + ',';
		if(this.getOauthaccesstokenorginfos()) json += '"oAuthAccessTokenOrgInfo"' + ":" + URI.toJSONArray(this.getOauthaccesstokenorginfos())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthAccessToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.userZid && !(/^[a-zA-Z0-9_\-]+$/).test(this.userZid)) { throw new ValidationError(_formprefix + "user_zid", ValidationError.PATTERN_FAILED);}
if(this.zidType && !Validator.INTEGER.test(this.zidType)) { throw new ValidationError(_formprefix + "zid_type", ValidationError.PATTERN_FAILED);}
if(this.refreshToken && !(/xss:throwerror/).test(this.refreshToken)) { throw new ValidationError(_formprefix + "refresh_token", ValidationError.PATTERN_FAILED);}
if(this.accessToken && !(/xss:throwerror/).test(this.accessToken)) { throw new ValidationError(_formprefix + "access_token", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.oauthaccesstokenscopes) { for(i=0; i < this.oauthaccesstokenscopes.length; i++ ) { this.oauthaccesstokenscopes[i].validate(); } }
if(this.oauthaccesstokenorginfo) { for(i=0; i < this.oauthaccesstokenorginfo.length; i++ ) { this.oauthaccesstokenorginfo[i].validate(); } }

	return this;
    }
}
OAuthAccessToken.path = "oauthaccesstoken";
OAuthAccessToken.newBuilder = function() {
    return new OAuthAccessToken();
};

DeploymentConfig = function() {
    var _formprefix = "";
    
var deploymentName = "";
this.setDeploymentName = function(deploymentName) { 
    this.deploymentName = deploymentName;
    return this;
};
this.getDeploymentName = function() {
    return this.deploymentName;
};
var configName = "";
this.setConfigName = function(configName) { 
    this.configName = configName;
    return this;
};
this.getConfigName = function() {
    return this.configName;
};
var configValue = "";
this.setConfigValue = function(configValue) { 
    this.configValue = configValue;
    return this;
};
this.getConfigValue = function() {
    return this.configValue;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDeploymentName(json["deployment_name"]);
		this.setConfigName(json["config_name"]);
		this.setConfigValue(json["config_value"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDeploymentName()) json += '"deployment_name"' + ":" + '"' + jsonEscape(this.getDeploymentName())  + '",';
		if(this.getConfigName()) json += '"config_name"' + ":" + '"' + jsonEscape(this.getConfigName())  + '",';
		if(this.getConfigValue()) json += '"config_value"' + ":" + '"' + jsonEscape(this.getConfigValue())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(DeploymentConfig.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.deploymentName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.deploymentName)) { throw new ValidationError(_formprefix + "deployment_name", ValidationError.PATTERN_FAILED);}
if(this.configName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.configName)) { throw new ValidationError(_formprefix + "config_name", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
DeploymentConfig.path = "deploymentconfig";
DeploymentConfig.newBuilder = function() {
    return new DeploymentConfig();
};

AccountOAuthAccessGrantScopes = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var allowedOperations = "";
this.setAllowedOperations = function(allowedOperations) { 
    this.allowedOperations = allowedOperations;
    return this;
};
this.getAllowedOperations = function() {
    return this.allowedOperations;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setAllowedOperations(json["allowed_operations"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getAllowedOperations()) json += '"allowed_operations"' + ":" + '"' + jsonEscape(this.getAllowedOperations())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountOAuthAccessGrantScopes.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[a-zA-Z0-9_\-]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.allowedOperations && !Validator.INTEGER.test(this.allowedOperations)) { throw new ValidationError(_formprefix + "allowed_operations", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountOAuthAccessGrantScopes.path = "accountoauthaccessgrantscopes";
AccountOAuthAccessGrantScopes.newBuilder = function() {
    return new AccountOAuthAccessGrantScopes();
};

RebrandL10n = function() {
    var _formprefix = "";
    
var rebrandAttributeName = "";
this.setRebrandAttributeName = function(rebrandAttributeName) { 
    this.rebrandAttributeName = rebrandAttributeName;
    return this;
};
this.getRebrandAttributeName = function() {
    return this.rebrandAttributeName;
};
var rebrandAttributeValue = "";
this.setRebrandAttributeValue = function(rebrandAttributeValue) { 
    this.rebrandAttributeValue = rebrandAttributeValue;
    return this;
};
this.getRebrandAttributeValue = function() {
    return this.rebrandAttributeValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRebrandAttributeName(json["rebrand_attribute_name"]);
		this.setRebrandAttributeValue(json["rebrand_attribute_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRebrandAttributeName()) json += '"rebrand_attribute_name"' + ":" + '"' + jsonEscape(this.getRebrandAttributeName())  + '",';
		if(this.getRebrandAttributeValue()) json += '"rebrand_attribute_value"' + ":" + '"' + jsonEscape(this.getRebrandAttributeValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(RebrandL10n.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.rebrandAttributeName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.rebrandAttributeName)) { throw new ValidationError(_formprefix + "rebrand_attribute_name", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
RebrandL10n.path = "rebrandl10n";
RebrandL10n.newBuilder = function() {
    return new RebrandL10n();
};

ResourceAction = function() {
    var _formprefix = "";
    
var resourceActionId = "";
this.setResourceActionId = function(resourceActionId) { 
    this.resourceActionId = resourceActionId;
    return this;
};
this.getResourceActionId = function() {
    return this.resourceActionId;
};
var resourceUriToUpdate = "";
this.setResourceUriToUpdate = function(resourceUriToUpdate) { 
    this.resourceUriToUpdate = resourceUriToUpdate;
    return this;
};
this.getResourceUriToUpdate = function() {
    return this.resourceUriToUpdate;
};
var resourceOperation = "";
this.setResourceOperation = function(resourceOperation) { 
    this.resourceOperation = resourceOperation;
    return this;
};
this.getResourceOperation = function() {
    return this.resourceOperation;
};
var resourceCriteria = "";
this.setResourceCriteria = function(resourceCriteria) { 
    this.resourceCriteria = resourceCriteria;
    return this;
};
this.getResourceCriteria = function() {
    return this.resourceCriteria;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var resourcemapping = undefined;
this.setResourcemappings = function(resourcemapping) { 
    this.resourcemapping = resourcemapping;
    return this;
};
this.getResourcemappings = function() {
    return this.resourcemapping;
};
this.addResourcemapping = function(resourcemapping) { 
 if(!this.resourcemapping) this.resourcemapping = new Array(); 
  this.resourcemapping.push(resourcemapping); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setResourceActionId(json["resource_action_id"]);
		this.setResourceUriToUpdate(json["resource_uri_to_update"]);
		this.setResourceOperation(json["resource_operation"]);
		this.setResourceCriteria(json["resource_criteria"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setResourcemappings(URI.getResourceArray(json["resourceMapping"],"resourcemapping"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getResourceActionId()) json += '"resource_action_id"' + ":" + '"' + jsonEscape(this.getResourceActionId())  + '",';
		if(this.getResourceUriToUpdate()) json += '"resource_uri_to_update"' + ":" + '"' + jsonEscape(this.getResourceUriToUpdate())  + '",';
		if(this.getResourceOperation()) json += '"resource_operation"' + ":" + '"' + jsonEscape(this.getResourceOperation())  + '",';
		if(this.getResourceCriteria()) json += '"resource_criteria"' + ":" + '"' + jsonEscape(this.getResourceCriteria())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getResourcemappings()) json += '"resourceMapping"' + ":" + URI.toJSONArray(this.getResourcemappings())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ResourceAction.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.resourceOperation && !(/(?i)POST|PUT|DELETE/).test(this.resourceOperation)) { throw new ValidationError(_formprefix + "resource_operation", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.resourcemapping) { for(i=0; i < this.resourcemapping.length; i++ ) { this.resourcemapping[i].validate(); } }

	return this;
    }
}
ResourceAction.path = "resourceaction";
ResourceAction.newBuilder = function() {
    return new ResourceAction();
};

ISDCode = function() {
    var _formprefix = "";
    
var countryName = "";
this.setCountryName = function(countryName) { 
    this.countryName = countryName;
    return this;
};
this.getCountryName = function() {
    return this.countryName;
};
var countryCode = "";
this.setCountryCode = function(countryCode) { 
    this.countryCode = countryCode;
    return this;
};
this.getCountryCode = function() {
    return this.countryCode;
};
var dialingCode = "";
this.setDialingCode = function(dialingCode) { 
    this.dialingCode = dialingCode;
    return this;
};
this.getDialingCode = function() {
    return this.dialingCode;
};
var newsletterSubscriptionMode = "0";
this.setNewsletterSubscriptionMode = function(newsletterSubscriptionMode) { 
    this.newsletterSubscriptionMode = newsletterSubscriptionMode;
    return this;
};
this.getNewsletterSubscriptionMode = function() {
    return this.newsletterSubscriptionMode;
};
var isExcluded = "false";
this.setIsExcluded = function(isExcluded) { 
    this.isExcluded = isExcluded;
    return this;
};
this.getIsExcluded = function() {
    return this.isExcluded;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setCountryName(json["country_name"]);
		this.setCountryCode(json["country_code"]);
		this.setDialingCode(json["dialing_code"]);
		this.setNewsletterSubscriptionMode(json["newsletter_subscription_mode"]);
		this.setIsExcluded(json["is_excluded"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getCountryName()) json += '"country_name"' + ":" + '"' + jsonEscape(this.getCountryName())  + '",';
		if(this.getCountryCode()) json += '"country_code"' + ":" + '"' + jsonEscape(this.getCountryCode())  + '",';
		if(this.getDialingCode()) json += '"dialing_code"' + ":" + '"' + jsonEscape(this.getDialingCode())  + '",';
		if(this.getNewsletterSubscriptionMode()) json += '"newsletter_subscription_mode"' + ":" + '"' + jsonEscape(this.getNewsletterSubscriptionMode())  + '",';
		if(this.getIsExcluded()) json += '"is_excluded"' + ":" + '"' + jsonEscape(this.getIsExcluded())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ISDCode.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.countryName && !(/xss:throwerror/).test(this.countryName)) { throw new ValidationError(_formprefix + "country_name", ValidationError.PATTERN_FAILED);}
if(this.countryCode && !(/^[a-zA-Z0-9]{2,5}$/).test(this.countryCode)) { throw new ValidationError(_formprefix + "country_code", ValidationError.PATTERN_FAILED);}
if(this.dialingCode && !(/^[0-9]{2,5}$/).test(this.dialingCode)) { throw new ValidationError(_formprefix + "dialing_code", ValidationError.PATTERN_FAILED);}
if(this.newsletterSubscriptionMode && !Validator.INTEGER.test(this.newsletterSubscriptionMode)) { throw new ValidationError(_formprefix + "newsletter_subscription_mode", ValidationError.PATTERN_FAILED);}
if(this.isExcluded && !Validator.BOOLEAN.test(this.isExcluded)) { throw new ValidationError(_formprefix + "is_excluded", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ISDCode.path = "isdcode";
ISDCode.newBuilder = function() {
    return new ISDCode();
};

AppAccountPolicy = function() {
    var _formprefix = "";
    
var policyKey = "";
this.setPolicyKey = function(policyKey) { 
    this.policyKey = policyKey;
    return this;
};
this.getPolicyKey = function() {
    return this.policyKey;
};
var policyValue = "";
this.setPolicyValue = function(policyValue) { 
    this.policyValue = policyValue;
    return this;
};
this.getPolicyValue = function() {
    return this.policyValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPolicyKey(json["policy_key"]);
		this.setPolicyValue(json["policy_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPolicyKey()) json += '"policy_key"' + ":" + '"' + jsonEscape(this.getPolicyKey())  + '",';
		if(this.getPolicyValue()) json += '"policy_value"' + ":" + '"' + jsonEscape(this.getPolicyValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccountPolicy.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.policyKey && !(/^([A-Za-z0-9_.\-]+)$/).test(this.policyKey)) { throw new ValidationError(_formprefix + "policy_key", ValidationError.PATTERN_FAILED);}
if(this.policyValue && !(/^([A-Za-z0-9_.\-]+)$/).test(this.policyValue)) { throw new ValidationError(_formprefix + "policy_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAccountPolicy.path = "appaccountpolicy";
AppAccountPolicy.newBuilder = function() {
    return new AppAccountPolicy();
};

APIAuditTemplate = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var screenName = "";
this.setScreenName = function(screenName) { 
    this.screenName = screenName;
    return this;
};
this.getScreenName = function() {
    return this.screenName;
};
var operationId = "";
this.setOperationId = function(operationId) { 
    this.operationId = operationId;
    return this;
};
this.getOperationId = function() {
    return this.operationId;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var tokenDigest = "";
this.setTokenDigest = function(tokenDigest) { 
    this.tokenDigest = tokenDigest;
    return this;
};
this.getTokenDigest = function() {
    return this.tokenDigest;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setZuid(json["zuid"]);
		this.setAppId(json["app_id"]);
		this.setScreenName(json["screen_name"]);
		this.setOperationId(json["operation_id"]);
		this.setIpAddress(json["ip_address"]);
		this.setReferrer(json["referrer"]);
		this.setTokenDigest(json["token_digest"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getScreenName()) json += '"screen_name"' + ":" + '"' + jsonEscape(this.getScreenName())  + '",';
		if(this.getOperationId()) json += '"operation_id"' + ":" + '"' + jsonEscape(this.getOperationId())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getTokenDigest()) json += '"token_digest"' + ":" + '"' + jsonEscape(this.getTokenDigest())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(APIAuditTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.appId && !Validator.INTEGER.test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.screenName && !(/^([\p{L}\p{M}\p{N}\_\.]+)|[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.screenName)) { throw new ValidationError(_formprefix + "screen_name", ValidationError.PATTERN_FAILED);}
if(this.operationId && !Validator.INTEGER.test(this.operationId)) { throw new ValidationError(_formprefix + "operation_id", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.tokenDigest && !(/dontdisturb/).test(this.tokenDigest)) { throw new ValidationError(_formprefix + "token_digest", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
APIAuditTemplate.path = "apiaudittemplate";
APIAuditTemplate.newBuilder = function() {
    return new APIAuditTemplate();
};

Group = function() {
    var _formprefix = "";
    
var zgid = "";
this.setZgid = function(zgid) { 
    this.zgid = zgid;
    return this;
};
this.getZgid = function() {
    return this.zgid;
};
var groupName = "";
this.setGroupName = function(groupName) { 
    this.groupName = groupName;
    return this;
};
this.getGroupName = function() {
    return this.groupName;
};
var groupDescription = "";
this.setGroupDescription = function(groupDescription) { 
    this.groupDescription = groupDescription;
    return this;
};
this.getGroupDescription = function() {
    return this.groupDescription;
};
var groupType = "0";
this.setGroupType = function(groupType) { 
    this.groupType = groupType;
    return this;
};
this.getGroupType = function() {
    return this.groupType;
};
var isActive = "1";
this.setIsActive = function(isActive) { 
    this.isActive = isActive;
    return this;
};
this.getIsActive = function() {
    return this.isActive;
};
var createdBy = "-1";
this.setCreatedBy = function(createdBy) { 
    this.createdBy = createdBy;
    return this;
};
this.getCreatedBy = function() {
    return this.createdBy;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var departmentHead = "-1";
this.setDepartmentHead = function(departmentHead) { 
    this.departmentHead = departmentHead;
    return this;
};
this.getDepartmentHead = function() {
    return this.departmentHead;
};
var isServiceSyncEnabled = "false";
this.setIsServiceSyncEnabled = function(isServiceSyncEnabled) { 
    this.isServiceSyncEnabled = isServiceSyncEnabled;
    return this;
};
this.getIsServiceSyncEnabled = function() {
    return this.isServiceSyncEnabled;
};
var exposure = "2";
this.setExposure = function(exposure) { 
    this.exposure = exposure;
    return this;
};
this.getExposure = function() {
    return this.exposure;
};
var groupinvitation = undefined;
this.setGroupinvitations = function(groupinvitation) { 
    this.groupinvitation = groupinvitation;
    return this;
};
this.getGroupinvitations = function() {
    return this.groupinvitation;
};
this.addGroupinvitation = function(groupinvitation) { 
 if(!this.groupinvitation) this.groupinvitation = new Array(); 
  this.groupinvitation.push(groupinvitation); 
 return this;
};

var groupproperties = undefined;
this.setGrouppropertiess = function(groupproperties) { 
    this.groupproperties = groupproperties;
    return this;
};
this.getGrouppropertiess = function() {
    return this.groupproperties;
};
this.addGroupproperties = function(groupproperties) { 
 if(!this.groupproperties) this.groupproperties = new Array(); 
  this.groupproperties.push(groupproperties); 
 return this;
};

var groupmember = undefined;
this.setGroupmembers = function(groupmember) { 
    this.groupmember = groupmember;
    return this;
};
this.getGroupmembers = function() {
    return this.groupmember;
};
this.addGroupmember = function(groupmember) { 
 if(!this.groupmember) this.groupmember = new Array(); 
  this.groupmember.push(groupmember); 
 return this;
};

var parentgroup = undefined;
this.setParentgroups = function(parentgroup) { 
    this.parentgroup = parentgroup;
    return this;
};
this.getParentgroups = function() {
    return this.parentgroup;
};
this.addParentgroup = function(parentgroup) { 
 if(!this.parentgroup) this.parentgroup = new Array(); 
  this.parentgroup.push(parentgroup); 
 return this;
};

var groupsyncservices = undefined;
this.setGroupsyncservicess = function(groupsyncservices) { 
    this.groupsyncservices = groupsyncservices;
    return this;
};
this.getGroupsyncservicess = function() {
    return this.groupsyncservices;
};
this.addGroupsyncservices = function(groupsyncservices) { 
 if(!this.groupsyncservices) this.groupsyncservices = new Array(); 
  this.groupsyncservices.push(groupsyncservices); 
 return this;
};

var grouplogo = undefined;
this.setGrouplogo = function(grouplogo) { 
    this.grouplogo = grouplogo;
    return this;
};
this.getGrouplogo = function() {
    return this.grouplogo;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZgid(json["zgid"]);
		this.setGroupName(json["group_name"]);
		this.setGroupDescription(json["group_description"]);
		this.setGroupType(json["group_type"]);
		this.setIsActive(json["is_active"]);
		this.setCreatedBy(json["created_by"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setDepartmentHead(json["department_head"]);
		this.setIsServiceSyncEnabled(json["is_service_sync_enabled"]);
		this.setExposure(json["exposure"]);
		this.setGroupinvitations(URI.getResourceArray(json["groupInvitation"],"groupinvitation"));
		this.setGrouppropertiess(URI.getResourceArray(json["groupProperties"],"groupproperties"));
		this.setGroupmembers(URI.getResourceArray(json["groupMember"],"groupmember"));
		this.setParentgroups(URI.getResourceArray(json["parentGroup"],"parentgroup"));
		this.setGroupsyncservicess(URI.getResourceArray(json["groupSyncServices"],"groupsyncservices"));
		this.setGrouplogo(URI.getResource(json["groupLogo"],"grouplogo"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZgid()) json += '"zgid"' + ":" + '"' + jsonEscape(this.getZgid())  + '",';
		if(this.getGroupName()) json += '"group_name"' + ":" + '"' + jsonEscape(this.getGroupName())  + '",';
		if(this.getGroupDescription()) json += '"group_description"' + ":" + '"' + jsonEscape(this.getGroupDescription())  + '",';
		if(this.getGroupType()) json += '"group_type"' + ":" + '"' + jsonEscape(this.getGroupType())  + '",';
		if(this.getIsActive()) json += '"is_active"' + ":" + '"' + jsonEscape(this.getIsActive())  + '",';
		if(this.getCreatedBy()) json += '"created_by"' + ":" + '"' + jsonEscape(this.getCreatedBy())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getDepartmentHead()) json += '"department_head"' + ":" + '"' + jsonEscape(this.getDepartmentHead())  + '",';
		if(this.getIsServiceSyncEnabled()) json += '"is_service_sync_enabled"' + ":" + '"' + jsonEscape(this.getIsServiceSyncEnabled())  + '",';
		if(this.getExposure()) json += '"exposure"' + ":" + '"' + jsonEscape(this.getExposure())  + '",';
		if(this.getGroupinvitations()) json += '"groupInvitation"' + ":" + URI.toJSONArray(this.getGroupinvitations())  + ',';
		if(this.getGrouppropertiess()) json += '"groupProperties"' + ":" + URI.toJSONArray(this.getGrouppropertiess())  + ',';
		if(this.getGroupmembers()) json += '"groupMember"' + ":" + URI.toJSONArray(this.getGroupmembers())  + ',';
		if(this.getParentgroups()) json += '"parentGroup"' + ":" + URI.toJSONArray(this.getParentgroups())  + ',';
		if(this.getGroupsyncservicess()) json += '"groupSyncServices"' + ":" + URI.toJSONArray(this.getGroupsyncservicess())  + ',';
		if(this.getGrouplogo()) json += '"groupLogo"' + ":" + this.getGrouplogo().toJSON()  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Group.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zgid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zgid)) { throw new ValidationError(_formprefix + "zgid", ValidationError.PATTERN_FAILED);}
if(this.groupName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.groupName)) { throw new ValidationError(_formprefix + "group_name", ValidationError.PATTERN_FAILED);}
if(this.groupDescription && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.groupDescription)) { throw new ValidationError(_formprefix + "group_description", ValidationError.PATTERN_FAILED);}
if(this.groupType && !Validator.INTEGER.test(this.groupType)) { throw new ValidationError(_formprefix + "group_type", ValidationError.PATTERN_FAILED);}
if(this.isActive && !Validator.INTEGER.test(this.isActive)) { throw new ValidationError(_formprefix + "is_active", ValidationError.PATTERN_FAILED);}
if(this.createdBy && !(/^[a-zA-Z0-9\-]+$/).test(this.createdBy)) { throw new ValidationError(_formprefix + "created_by", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.departmentHead && !(/^[a-zA-Z0-9\-]+$/).test(this.departmentHead)) { throw new ValidationError(_formprefix + "department_head", ValidationError.PATTERN_FAILED);}
if(this.isServiceSyncEnabled && !Validator.BOOLEAN.test(this.isServiceSyncEnabled)) { throw new ValidationError(_formprefix + "is_service_sync_enabled", ValidationError.PATTERN_FAILED);}
if(this.groupinvitation) { for(i=0; i < this.groupinvitation.length; i++ ) { this.groupinvitation[i].validate(); } }
if(this.groupproperties) { for(i=0; i < this.groupproperties.length; i++ ) { this.groupproperties[i].validate(); } }
if(this.groupmember) { for(i=0; i < this.groupmember.length; i++ ) { this.groupmember[i].validate(); } }
if(this.parentgroup) { for(i=0; i < this.parentgroup.length; i++ ) { this.parentgroup[i].validate(); } }
if(this.groupsyncservices) { for(i=0; i < this.groupsyncservices.length; i++ ) { this.groupsyncservices[i].validate(); } }
if(this.grouplogo) { this.grouplogo.validate(); }

	return this;
    }
}
Group.path = "group";
Group.newBuilder = function() {
    return new Group();
};

GroupMember = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var isActive = "1";
this.setIsActive = function(isActive) { 
    this.isActive = isActive;
    return this;
};
this.getIsActive = function() {
    return this.isActive;
};
var isModerator = "1";
this.setIsModerator = function(isModerator) { 
    this.isModerator = isModerator;
    return this;
};
this.getIsModerator = function() {
    return this.isModerator;
};
var fullName = "";
this.setFullName = function(fullName) { 
    this.fullName = fullName;
    return this;
};
this.getFullName = function() {
    return this.fullName;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var loginName = "";
this.setLoginName = function(loginName) { 
    this.loginName = loginName;
    return this;
};
this.getLoginName = function() {
    return this.loginName;
};
var type = "1";
this.setType = function(type) { 
    this.type = type;
    return this;
};
this.getType = function() {
    return this.type;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setIsActive(json["is_active"]);
		this.setIsModerator(json["is_moderator"]);
		this.setFullName(json["full_name"]);
		this.setDisplayName(json["display_name"]);
		this.setLoginName(json["login_name"]);
		this.setType(json["type"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getIsActive()) json += '"is_active"' + ":" + '"' + jsonEscape(this.getIsActive())  + '",';
		if(this.getIsModerator()) json += '"is_moderator"' + ":" + '"' + jsonEscape(this.getIsModerator())  + '",';
		if(this.getFullName()) json += '"full_name"' + ":" + '"' + jsonEscape(this.getFullName())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getLoginName()) json += '"login_name"' + ":" + '"' + jsonEscape(this.getLoginName())  + '",';
		if(this.getType()) json += '"type"' + ":" + '"' + jsonEscape(this.getType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(GroupMember.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.isActive && !Validator.INTEGER.test(this.isActive)) { throw new ValidationError(_formprefix + "is_active", ValidationError.PATTERN_FAILED);}
if(this.isModerator && !Validator.INTEGER.test(this.isModerator)) { throw new ValidationError(_formprefix + "is_moderator", ValidationError.PATTERN_FAILED);}
if(this.fullName && !(/xss:throwerror/).test(this.fullName)) { throw new ValidationError(_formprefix + "full_name", ValidationError.PATTERN_FAILED);}
if(this.displayName && !(/xss:throwerror/).test(this.displayName)) { throw new ValidationError(_formprefix + "display_name", ValidationError.PATTERN_FAILED);}
if(this.loginName && !(/^([\p{L}\p{M}\p{N}\_\.]+)|[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.loginName)) { throw new ValidationError(_formprefix + "login_name", ValidationError.PATTERN_FAILED);}
if(this.type && !Validator.INTEGER.test(this.type)) { throw new ValidationError(_formprefix + "type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
GroupMember.path = "groupmember";
GroupMember.newBuilder = function() {
    return new GroupMember();
};

UserSystemProperties = function() {
    var _formprefix = "";
    
var captchaEnteredStatus = "false";
this.setCaptchaEnteredStatus = function(captchaEnteredStatus) { 
    this.captchaEnteredStatus = captchaEnteredStatus;
    return this;
};
this.getCaptchaEnteredStatus = function() {
    return this.captchaEnteredStatus;
};
var spamCheckStatus = "";
this.setSpamCheckStatus = function(spamCheckStatus) { 
    this.spamCheckStatus = spamCheckStatus;
    return this;
};
this.getSpamCheckStatus = function() {
    return this.spamCheckStatus;
};
var mailboxExist = "false";
this.setMailboxExist = function(mailboxExist) { 
    this.mailboxExist = mailboxExist;
    return this;
};
this.getMailboxExist = function() {
    return this.mailboxExist;
};
var signupCountry = "";
this.setSignupCountry = function(signupCountry) { 
    this.signupCountry = signupCountry;
    return this;
};
this.getSignupCountry = function() {
    return this.signupCountry;
};
var ipInfo = "";
this.setIpInfo = function(ipInfo) { 
    this.ipInfo = ipInfo;
    return this;
};
this.getIpInfo = function() {
    return this.ipInfo;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setCaptchaEnteredStatus(json["captcha_entered_status"]);
		this.setSpamCheckStatus(json["spam_check_status"]);
		this.setMailboxExist(json["mailbox_exist"]);
		this.setSignupCountry(json["signup_country"]);
		this.setIpInfo(json["ip_info"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getCaptchaEnteredStatus()) json += '"captcha_entered_status"' + ":" + '"' + jsonEscape(this.getCaptchaEnteredStatus())  + '",';
		if(this.getSpamCheckStatus()) json += '"spam_check_status"' + ":" + '"' + jsonEscape(this.getSpamCheckStatus())  + '",';
		if(this.getMailboxExist()) json += '"mailbox_exist"' + ":" + '"' + jsonEscape(this.getMailboxExist())  + '",';
		if(this.getSignupCountry()) json += '"signup_country"' + ":" + '"' + jsonEscape(this.getSignupCountry())  + '",';
		if(this.getIpInfo()) json += '"ip_info"' + ":" + '"' + jsonEscape(this.getIpInfo())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserSystemProperties.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.captchaEnteredStatus && !Validator.BOOLEAN.test(this.captchaEnteredStatus)) { throw new ValidationError(_formprefix + "captcha_entered_status", ValidationError.PATTERN_FAILED);}
if(this.spamCheckStatus && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.spamCheckStatus)) { throw new ValidationError(_formprefix + "spam_check_status", ValidationError.PATTERN_FAILED);}
if(this.mailboxExist && !Validator.BOOLEAN.test(this.mailboxExist)) { throw new ValidationError(_formprefix + "mailbox_exist", ValidationError.PATTERN_FAILED);}
if(this.signupCountry && !(/^[a-zA-Z0-9]{2,5}$/).test(this.signupCountry)) { throw new ValidationError(_formprefix + "signup_country", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserSystemProperties.path = "usersystemproperties";
UserSystemProperties.newBuilder = function() {
    return new UserSystemProperties();
};

UserCustomField = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var c1 = "";
this.setC1 = function(c1) { 
    this.c1 = c1;
    return this;
};
this.getC1 = function() {
    return this.c1;
};
var c2 = "";
this.setC2 = function(c2) { 
    this.c2 = c2;
    return this;
};
this.getC2 = function() {
    return this.c2;
};
var c3 = "";
this.setC3 = function(c3) { 
    this.c3 = c3;
    return this;
};
this.getC3 = function() {
    return this.c3;
};
var c4 = "";
this.setC4 = function(c4) { 
    this.c4 = c4;
    return this;
};
this.getC4 = function() {
    return this.c4;
};
var c5 = "";
this.setC5 = function(c5) { 
    this.c5 = c5;
    return this;
};
this.getC5 = function() {
    return this.c5;
};
var c6 = "";
this.setC6 = function(c6) { 
    this.c6 = c6;
    return this;
};
this.getC6 = function() {
    return this.c6;
};
var c7 = "";
this.setC7 = function(c7) { 
    this.c7 = c7;
    return this;
};
this.getC7 = function() {
    return this.c7;
};
var c8 = "";
this.setC8 = function(c8) { 
    this.c8 = c8;
    return this;
};
this.getC8 = function() {
    return this.c8;
};
var c9 = "";
this.setC9 = function(c9) { 
    this.c9 = c9;
    return this;
};
this.getC9 = function() {
    return this.c9;
};
var c10 = "";
this.setC10 = function(c10) { 
    this.c10 = c10;
    return this;
};
this.getC10 = function() {
    return this.c10;
};
var c11 = "";
this.setC11 = function(c11) { 
    this.c11 = c11;
    return this;
};
this.getC11 = function() {
    return this.c11;
};
var c12 = "";
this.setC12 = function(c12) { 
    this.c12 = c12;
    return this;
};
this.getC12 = function() {
    return this.c12;
};
var c13 = "";
this.setC13 = function(c13) { 
    this.c13 = c13;
    return this;
};
this.getC13 = function() {
    return this.c13;
};
var c14 = "";
this.setC14 = function(c14) { 
    this.c14 = c14;
    return this;
};
this.getC14 = function() {
    return this.c14;
};
var c15 = "";
this.setC15 = function(c15) { 
    this.c15 = c15;
    return this;
};
this.getC15 = function() {
    return this.c15;
};
var c16 = "";
this.setC16 = function(c16) { 
    this.c16 = c16;
    return this;
};
this.getC16 = function() {
    return this.c16;
};
var c17 = "";
this.setC17 = function(c17) { 
    this.c17 = c17;
    return this;
};
this.getC17 = function() {
    return this.c17;
};
var c18 = "";
this.setC18 = function(c18) { 
    this.c18 = c18;
    return this;
};
this.getC18 = function() {
    return this.c18;
};
var c19 = "";
this.setC19 = function(c19) { 
    this.c19 = c19;
    return this;
};
this.getC19 = function() {
    return this.c19;
};
var c20 = "";
this.setC20 = function(c20) { 
    this.c20 = c20;
    return this;
};
this.getC20 = function() {
    return this.c20;
};
var c21 = "";
this.setC21 = function(c21) { 
    this.c21 = c21;
    return this;
};
this.getC21 = function() {
    return this.c21;
};
var c22 = "";
this.setC22 = function(c22) { 
    this.c22 = c22;
    return this;
};
this.getC22 = function() {
    return this.c22;
};
var c23 = "";
this.setC23 = function(c23) { 
    this.c23 = c23;
    return this;
};
this.getC23 = function() {
    return this.c23;
};
var c24 = "";
this.setC24 = function(c24) { 
    this.c24 = c24;
    return this;
};
this.getC24 = function() {
    return this.c24;
};
var c25 = "";
this.setC25 = function(c25) { 
    this.c25 = c25;
    return this;
};
this.getC25 = function() {
    return this.c25;
};
var c26 = "";
this.setC26 = function(c26) { 
    this.c26 = c26;
    return this;
};
this.getC26 = function() {
    return this.c26;
};
var c27 = "";
this.setC27 = function(c27) { 
    this.c27 = c27;
    return this;
};
this.getC27 = function() {
    return this.c27;
};
var c28 = "";
this.setC28 = function(c28) { 
    this.c28 = c28;
    return this;
};
this.getC28 = function() {
    return this.c28;
};
var c29 = "";
this.setC29 = function(c29) { 
    this.c29 = c29;
    return this;
};
this.getC29 = function() {
    return this.c29;
};
var c30 = "";
this.setC30 = function(c30) { 
    this.c30 = c30;
    return this;
};
this.getC30 = function() {
    return this.c30;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setC1(json["c_1"]);
		this.setC2(json["c_2"]);
		this.setC3(json["c_3"]);
		this.setC4(json["c_4"]);
		this.setC5(json["c_5"]);
		this.setC6(json["c_6"]);
		this.setC7(json["c_7"]);
		this.setC8(json["c_8"]);
		this.setC9(json["c_9"]);
		this.setC10(json["c_10"]);
		this.setC11(json["c_11"]);
		this.setC12(json["c_12"]);
		this.setC13(json["c_13"]);
		this.setC14(json["c_14"]);
		this.setC15(json["c_15"]);
		this.setC16(json["c_16"]);
		this.setC17(json["c_17"]);
		this.setC18(json["c_18"]);
		this.setC19(json["c_19"]);
		this.setC20(json["c_20"]);
		this.setC21(json["c_21"]);
		this.setC22(json["c_22"]);
		this.setC23(json["c_23"]);
		this.setC24(json["c_24"]);
		this.setC25(json["c_25"]);
		this.setC26(json["c_26"]);
		this.setC27(json["c_27"]);
		this.setC28(json["c_28"]);
		this.setC29(json["c_29"]);
		this.setC30(json["c_30"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getC1()) json += '"c_1"' + ":" + '"' + jsonEscape(this.getC1())  + '",';
		if(this.getC2()) json += '"c_2"' + ":" + '"' + jsonEscape(this.getC2())  + '",';
		if(this.getC3()) json += '"c_3"' + ":" + '"' + jsonEscape(this.getC3())  + '",';
		if(this.getC4()) json += '"c_4"' + ":" + '"' + jsonEscape(this.getC4())  + '",';
		if(this.getC5()) json += '"c_5"' + ":" + '"' + jsonEscape(this.getC5())  + '",';
		if(this.getC6()) json += '"c_6"' + ":" + '"' + jsonEscape(this.getC6())  + '",';
		if(this.getC7()) json += '"c_7"' + ":" + '"' + jsonEscape(this.getC7())  + '",';
		if(this.getC8()) json += '"c_8"' + ":" + '"' + jsonEscape(this.getC8())  + '",';
		if(this.getC9()) json += '"c_9"' + ":" + '"' + jsonEscape(this.getC9())  + '",';
		if(this.getC10()) json += '"c_10"' + ":" + '"' + jsonEscape(this.getC10())  + '",';
		if(this.getC11()) json += '"c_11"' + ":" + '"' + jsonEscape(this.getC11())  + '",';
		if(this.getC12()) json += '"c_12"' + ":" + '"' + jsonEscape(this.getC12())  + '",';
		if(this.getC13()) json += '"c_13"' + ":" + '"' + jsonEscape(this.getC13())  + '",';
		if(this.getC14()) json += '"c_14"' + ":" + '"' + jsonEscape(this.getC14())  + '",';
		if(this.getC15()) json += '"c_15"' + ":" + '"' + jsonEscape(this.getC15())  + '",';
		if(this.getC16()) json += '"c_16"' + ":" + '"' + jsonEscape(this.getC16())  + '",';
		if(this.getC17()) json += '"c_17"' + ":" + '"' + jsonEscape(this.getC17())  + '",';
		if(this.getC18()) json += '"c_18"' + ":" + '"' + jsonEscape(this.getC18())  + '",';
		if(this.getC19()) json += '"c_19"' + ":" + '"' + jsonEscape(this.getC19())  + '",';
		if(this.getC20()) json += '"c_20"' + ":" + '"' + jsonEscape(this.getC20())  + '",';
		if(this.getC21()) json += '"c_21"' + ":" + '"' + jsonEscape(this.getC21())  + '",';
		if(this.getC22()) json += '"c_22"' + ":" + '"' + jsonEscape(this.getC22())  + '",';
		if(this.getC23()) json += '"c_23"' + ":" + '"' + jsonEscape(this.getC23())  + '",';
		if(this.getC24()) json += '"c_24"' + ":" + '"' + jsonEscape(this.getC24())  + '",';
		if(this.getC25()) json += '"c_25"' + ":" + '"' + jsonEscape(this.getC25())  + '",';
		if(this.getC26()) json += '"c_26"' + ":" + '"' + jsonEscape(this.getC26())  + '",';
		if(this.getC27()) json += '"c_27"' + ":" + '"' + jsonEscape(this.getC27())  + '",';
		if(this.getC28()) json += '"c_28"' + ":" + '"' + jsonEscape(this.getC28())  + '",';
		if(this.getC29()) json += '"c_29"' + ":" + '"' + jsonEscape(this.getC29())  + '",';
		if(this.getC30()) json += '"c_30"' + ":" + '"' + jsonEscape(this.getC30())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserCustomField.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.c1 && !(/xss:throwerror/).test(this.c1)) { throw new ValidationError(_formprefix + "c_1", ValidationError.PATTERN_FAILED);}
if(this.c2 && !(/xss:throwerror/).test(this.c2)) { throw new ValidationError(_formprefix + "c_2", ValidationError.PATTERN_FAILED);}
if(this.c3 && !(/xss:throwerror/).test(this.c3)) { throw new ValidationError(_formprefix + "c_3", ValidationError.PATTERN_FAILED);}
if(this.c4 && !(/xss:throwerror/).test(this.c4)) { throw new ValidationError(_formprefix + "c_4", ValidationError.PATTERN_FAILED);}
if(this.c5 && !(/xss:throwerror/).test(this.c5)) { throw new ValidationError(_formprefix + "c_5", ValidationError.PATTERN_FAILED);}
if(this.c6 && !(/xss:throwerror/).test(this.c6)) { throw new ValidationError(_formprefix + "c_6", ValidationError.PATTERN_FAILED);}
if(this.c7 && !(/xss:throwerror/).test(this.c7)) { throw new ValidationError(_formprefix + "c_7", ValidationError.PATTERN_FAILED);}
if(this.c8 && !(/xss:throwerror/).test(this.c8)) { throw new ValidationError(_formprefix + "c_8", ValidationError.PATTERN_FAILED);}
if(this.c9 && !(/xss:throwerror/).test(this.c9)) { throw new ValidationError(_formprefix + "c_9", ValidationError.PATTERN_FAILED);}
if(this.c10 && !(/xss:throwerror/).test(this.c10)) { throw new ValidationError(_formprefix + "c_10", ValidationError.PATTERN_FAILED);}
if(this.c11 && !(/xss:throwerror/).test(this.c11)) { throw new ValidationError(_formprefix + "c_11", ValidationError.PATTERN_FAILED);}
if(this.c12 && !(/xss:throwerror/).test(this.c12)) { throw new ValidationError(_formprefix + "c_12", ValidationError.PATTERN_FAILED);}
if(this.c13 && !(/xss:throwerror/).test(this.c13)) { throw new ValidationError(_formprefix + "c_13", ValidationError.PATTERN_FAILED);}
if(this.c14 && !(/xss:throwerror/).test(this.c14)) { throw new ValidationError(_formprefix + "c_14", ValidationError.PATTERN_FAILED);}
if(this.c15 && !(/xss:throwerror/).test(this.c15)) { throw new ValidationError(_formprefix + "c_15", ValidationError.PATTERN_FAILED);}
if(this.c16 && !(/xss:throwerror/).test(this.c16)) { throw new ValidationError(_formprefix + "c_16", ValidationError.PATTERN_FAILED);}
if(this.c17 && !(/xss:throwerror/).test(this.c17)) { throw new ValidationError(_formprefix + "c_17", ValidationError.PATTERN_FAILED);}
if(this.c18 && !(/xss:throwerror/).test(this.c18)) { throw new ValidationError(_formprefix + "c_18", ValidationError.PATTERN_FAILED);}
if(this.c19 && !(/xss:throwerror/).test(this.c19)) { throw new ValidationError(_formprefix + "c_19", ValidationError.PATTERN_FAILED);}
if(this.c20 && !(/xss:throwerror/).test(this.c20)) { throw new ValidationError(_formprefix + "c_20", ValidationError.PATTERN_FAILED);}
if(this.c21 && !(/xss:throwerror/).test(this.c21)) { throw new ValidationError(_formprefix + "c_21", ValidationError.PATTERN_FAILED);}
if(this.c22 && !(/xss:throwerror/).test(this.c22)) { throw new ValidationError(_formprefix + "c_22", ValidationError.PATTERN_FAILED);}
if(this.c23 && !(/xss:throwerror/).test(this.c23)) { throw new ValidationError(_formprefix + "c_23", ValidationError.PATTERN_FAILED);}
if(this.c24 && !(/xss:throwerror/).test(this.c24)) { throw new ValidationError(_formprefix + "c_24", ValidationError.PATTERN_FAILED);}
if(this.c25 && !(/xss:throwerror/).test(this.c25)) { throw new ValidationError(_formprefix + "c_25", ValidationError.PATTERN_FAILED);}
if(this.c26 && !(/xss:throwerror/).test(this.c26)) { throw new ValidationError(_formprefix + "c_26", ValidationError.PATTERN_FAILED);}
if(this.c27 && !(/xss:throwerror/).test(this.c27)) { throw new ValidationError(_formprefix + "c_27", ValidationError.PATTERN_FAILED);}
if(this.c28 && !(/xss:throwerror/).test(this.c28)) { throw new ValidationError(_formprefix + "c_28", ValidationError.PATTERN_FAILED);}
if(this.c29 && !(/xss:throwerror/).test(this.c29)) { throw new ValidationError(_formprefix + "c_29", ValidationError.PATTERN_FAILED);}
if(this.c30 && !(/xss:throwerror/).test(this.c30)) { throw new ValidationError(_formprefix + "c_30", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserCustomField.path = "usercustomfield";
UserCustomField.newBuilder = function() {
    return new UserCustomField();
};

AuthSecret = function() {
    var _formprefix = "";
    
var authSecret = "";
this.setAuthSecret = function(authSecret) { 
    this.authSecret = authSecret;
    return this;
};
this.getAuthSecret = function() {
    return this.authSecret;
};
var isInternal = "0";
this.setIsInternal = function(isInternal) { 
    this.isInternal = isInternal;
    return this;
};
this.getIsInternal = function() {
    return this.isInternal;
};
var serviceName = "";
this.setServiceName = function(serviceName) { 
    this.serviceName = serviceName;
    return this;
};
this.getServiceName = function() {
    return this.serviceName;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAuthSecret(json["auth_secret"]);
		this.setIsInternal(json["is_internal"]);
		this.setServiceName(json["service_name"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAuthSecret()) json += '"auth_secret"' + ":" + '"' + jsonEscape(this.getAuthSecret())  + '",';
		if(this.getIsInternal()) json += '"is_internal"' + ":" + '"' + jsonEscape(this.getIsInternal())  + '",';
		if(this.getServiceName()) json += '"service_name"' + ":" + '"' + jsonEscape(this.getServiceName())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AuthSecret.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.authSecret && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.authSecret)) { throw new ValidationError(_formprefix + "auth_secret", ValidationError.PATTERN_FAILED);}
if(this.isInternal && !Validator.INTEGER.test(this.isInternal)) { throw new ValidationError(_formprefix + "is_internal", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AuthSecret.path = "authsecret";
AuthSecret.newBuilder = function() {
    return new AuthSecret();
};

Attribute = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var userAttributeKey = "";
this.setUserAttributeKey = function(userAttributeKey) { 
    this.userAttributeKey = userAttributeKey;
    return this;
};
this.getUserAttributeKey = function() {
    return this.userAttributeKey;
};
var userAttributeValue = "";
this.setUserAttributeValue = function(userAttributeValue) { 
    this.userAttributeValue = userAttributeValue;
    return this;
};
this.getUserAttributeValue = function() {
    return this.userAttributeValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setUserAttributeKey(json["user_attribute_key"]);
		this.setUserAttributeValue(json["user_attribute_value"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getUserAttributeKey()) json += '"user_attribute_key"' + ":" + '"' + jsonEscape(this.getUserAttributeKey())  + '",';
		if(this.getUserAttributeValue()) json += '"user_attribute_value"' + ":" + '"' + jsonEscape(this.getUserAttributeValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Attribute.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.userAttributeKey && !(/^([A-Za-z0-9_.\-]+)$/).test(this.userAttributeKey)) { throw new ValidationError(_formprefix + "user_attribute_key", ValidationError.PATTERN_FAILED);}
if(this.userAttributeValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.userAttributeValue)) { throw new ValidationError(_formprefix + "user_attribute_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Attribute.path = "attribute";
Attribute.newBuilder = function() {
    return new Attribute();
};

UserApp = function() {
    var _formprefix = "";
    
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppId(json["app_id"]);
		this.setZuid(json["zuid"]);
		this.setIpAddress(json["ip_address"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserApp.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.appId && !(/^[a-zA-Z0-9_\-]+$/).test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserApp.path = "userapp";
UserApp.newBuilder = function() {
    return new UserApp();
};

OAuthAuditTemplate = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
var operationId = "";
this.setOperationId = function(operationId) { 
    this.operationId = operationId;
    return this;
};
this.getOperationId = function() {
    return this.operationId;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var tokenDigest = "";
this.setTokenDigest = function(tokenDigest) { 
    this.tokenDigest = tokenDigest;
    return this;
};
this.getTokenDigest = function() {
    return this.tokenDigest;
};
var parentTokenDigest = "";
this.setParentTokenDigest = function(parentTokenDigest) { 
    this.parentTokenDigest = parentTokenDigest;
    return this;
};
this.getParentTokenDigest = function() {
    return this.parentTokenDigest;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var addedTime = "";
this.setAddedTime = function(addedTime) { 
    this.addedTime = addedTime;
    return this;
};
this.getAddedTime = function() {
    return this.addedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setZid(json["zid"]);
		this.setAppId(json["app_id"]);
		this.setClientZid(json["client_zid"]);
		this.setOperationId(json["operation_id"]);
		this.setIpAddress(json["ip_address"]);
		this.setTokenDigest(json["token_digest"]);
		this.setParentTokenDigest(json["parent_token_digest"]);
		this.setUserAgent(json["user_agent"]);
		this.setAddedTime(json["added_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';
		if(this.getOperationId()) json += '"operation_id"' + ":" + '"' + jsonEscape(this.getOperationId())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getTokenDigest()) json += '"token_digest"' + ":" + '"' + jsonEscape(this.getTokenDigest())  + '",';
		if(this.getParentTokenDigest()) json += '"parent_token_digest"' + ":" + '"' + jsonEscape(this.getParentTokenDigest())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getAddedTime()) json += '"added_time"' + ":" + '"' + jsonEscape(this.getAddedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthAuditTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.appId && !Validator.INTEGER.test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.clientZid && !(/^[0-9]+\.[0-9]+$/).test(this.clientZid)) { throw new ValidationError(_formprefix + "client_zid", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.tokenDigest && !(/dontdisturb/).test(this.tokenDigest)) { throw new ValidationError(_formprefix + "token_digest", ValidationError.PATTERN_FAILED);}
if(this.parentTokenDigest && !(/dontdisturb/).test(this.parentTokenDigest)) { throw new ValidationError(_formprefix + "parent_token_digest", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.addedTime && !Validator.INTEGER.test(this.addedTime)) { throw new ValidationError(_formprefix + "added_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthAuditTemplate.path = "oauthaudittemplate";
OAuthAuditTemplate.newBuilder = function() {
    return new OAuthAuditTemplate();
};

AppAccountLicense = function() {
    var _formprefix = "";
    
var licenseAttributeKey = "";
this.setLicenseAttributeKey = function(licenseAttributeKey) { 
    this.licenseAttributeKey = licenseAttributeKey;
    return this;
};
this.getLicenseAttributeKey = function() {
    return this.licenseAttributeKey;
};
var licenseAttributeValue = "";
this.setLicenseAttributeValue = function(licenseAttributeValue) { 
    this.licenseAttributeValue = licenseAttributeValue;
    return this;
};
this.getLicenseAttributeValue = function() {
    return this.licenseAttributeValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLicenseAttributeKey(json["license_attribute_key"]);
		this.setLicenseAttributeValue(json["license_attribute_value"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLicenseAttributeKey()) json += '"license_attribute_key"' + ":" + '"' + jsonEscape(this.getLicenseAttributeKey())  + '",';
		if(this.getLicenseAttributeValue()) json += '"license_attribute_value"' + ":" + '"' + jsonEscape(this.getLicenseAttributeValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccountLicense.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.licenseAttributeValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.licenseAttributeValue)) { throw new ValidationError(_formprefix + "license_attribute_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAccountLicense.path = "appaccountlicense";
AppAccountLicense.newBuilder = function() {
    return new AppAccountLicense();
};

ServiceOrgAccountMapping = function() {
    var _formprefix = "";
    
var accountId = "";
this.setAccountId = function(accountId) { 
    this.accountId = accountId;
    return this;
};
this.getAccountId = function() {
    return this.accountId;
};
var accountType = "";
this.setAccountType = function(accountType) { 
    this.accountType = accountType;
    return this;
};
this.getAccountType = function() {
    return this.accountType;
};
var accountName = "";
this.setAccountName = function(accountName) { 
    this.accountName = accountName;
    return this;
};
this.getAccountName = function() {
    return this.accountName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAccountId(json["account_id"]);
		this.setAccountType(json["account_type"]);
		this.setAccountName(json["account_name"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAccountId()) json += '"account_id"' + ":" + '"' + jsonEscape(this.getAccountId())  + '",';
		if(this.getAccountType()) json += '"account_type"' + ":" + '"' + jsonEscape(this.getAccountType())  + '",';
		if(this.getAccountName()) json += '"account_name"' + ":" + '"' + jsonEscape(this.getAccountName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgAccountMapping.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.accountId && !Validator.INTEGER.test(this.accountId)) { throw new ValidationError(_formprefix + "account_id", ValidationError.PATTERN_FAILED);}
if(this.accountType && !Validator.INTEGER.test(this.accountType)) { throw new ValidationError(_formprefix + "account_type", ValidationError.PATTERN_FAILED);}
if(this.accountName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.accountName)) { throw new ValidationError(_formprefix + "account_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgAccountMapping.path = "serviceorgaccountmapping";
ServiceOrgAccountMapping.newBuilder = function() {
    return new ServiceOrgAccountMapping();
};

UserEmail = function() {
    var _formprefix = "";
    
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var isVerified = "false";
this.setIsVerified = function(isVerified) { 
    this.isVerified = isVerified;
    return this;
};
this.getIsVerified = function() {
    return this.isVerified;
};
var isPrimary = "false";
this.setIsPrimary = function(isPrimary) { 
    this.isPrimary = isPrimary;
    return this;
};
this.getIsPrimary = function() {
    return this.isPrimary;
};
var verificationCode = "";
this.setVerificationCode = function(verificationCode) { 
    this.verificationCode = verificationCode;
    return this;
};
this.getVerificationCode = function() {
    return this.verificationCode;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setEmailId(json["email_id"]);
		this.setIsVerified(json["is_verified"]);
		this.setIsPrimary(json["is_primary"]);
		this.setVerificationCode(json["verification_code"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getIsVerified()) json += '"is_verified"' + ":" + '"' + jsonEscape(this.getIsVerified())  + '",';
		if(this.getIsPrimary()) json += '"is_primary"' + ":" + '"' + jsonEscape(this.getIsPrimary())  + '",';
		if(this.getVerificationCode()) json += '"verification_code"' + ":" + '"' + jsonEscape(this.getVerificationCode())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserEmail.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.isVerified && !Validator.BOOLEAN.test(this.isVerified)) { throw new ValidationError(_formprefix + "is_verified", ValidationError.PATTERN_FAILED);}
if(this.isPrimary && !Validator.BOOLEAN.test(this.isPrimary)) { throw new ValidationError(_formprefix + "is_primary", ValidationError.PATTERN_FAILED);}
if(this.verificationCode && !(/^([A-Za-z0-9_.\-]+)$/).test(this.verificationCode)) { throw new ValidationError(_formprefix + "verification_code", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserEmail.path = "useremail";
UserEmail.newBuilder = function() {
    return new UserEmail();
};

NodeRange = function() {
    var _formprefix = "";
    
var rangeName = "";
this.setRangeName = function(rangeName) { 
    this.rangeName = rangeName;
    return this;
};
this.getRangeName = function() {
    return this.rangeName;
};
var start = "";
this.setStart = function(start) { 
    this.start = start;
    return this;
};
this.getStart = function() {
    return this.start;
};
var end = "";
this.setEnd = function(end) { 
    this.end = end;
    return this;
};
this.getEnd = function() {
    return this.end;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRangeName(json["range_name"]);
		this.setStart(json["start"]);
		this.setEnd(json["end"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRangeName()) json += '"range_name"' + ":" + '"' + jsonEscape(this.getRangeName())  + '",';
		if(this.getStart()) json += '"start"' + ":" + '"' + jsonEscape(this.getStart())  + '",';
		if(this.getEnd()) json += '"end"' + ":" + '"' + jsonEscape(this.getEnd())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(NodeRange.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.rangeName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.rangeName)) { throw new ValidationError(_formprefix + "range_name", ValidationError.PATTERN_FAILED);}
if(this.start && !Validator.INTEGER.test(this.start)) { throw new ValidationError(_formprefix + "start", ValidationError.PATTERN_FAILED);}
if(this.end && !Validator.INTEGER.test(this.end)) { throw new ValidationError(_formprefix + "end", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
NodeRange.path = "noderange";
NodeRange.newBuilder = function() {
    return new NodeRange();
};

SamlAppSessionIndex = function() {
    var _formprefix = "";
    
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var sessionIndex = "";
this.setSessionIndex = function(sessionIndex) { 
    this.sessionIndex = sessionIndex;
    return this;
};
this.getSessionIndex = function() {
    return this.sessionIndex;
};
var appType = "0";
this.setAppType = function(appType) { 
    this.appType = appType;
    return this;
};
this.getAppType = function() {
    return this.appType;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppId(json["app_id"]);
		this.setSessionIndex(json["session_index"]);
		this.setAppType(json["app_type"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getSessionIndex()) json += '"session_index"' + ":" + '"' + jsonEscape(this.getSessionIndex())  + '",';
		if(this.getAppType()) json += '"app_type"' + ":" + '"' + jsonEscape(this.getAppType())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SamlAppSessionIndex.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.sessionIndex && !(/^[a-zA-Z0-9\-\_]+$/).test(this.sessionIndex)) { throw new ValidationError(_formprefix + "session_index", ValidationError.PATTERN_FAILED);}
if(this.appType && !Validator.INTEGER.test(this.appType)) { throw new ValidationError(_formprefix + "app_type", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SamlAppSessionIndex.path = "samlappsessionindex";
SamlAppSessionIndex.newBuilder = function() {
    return new SamlAppSessionIndex();
};

ClientAccessIp = function() {
    var _formprefix = "";
    
var name = "";
this.setName = function(name) { 
    this.name = name;
    return this;
};
this.getName = function() {
    return this.name;
};
var fromIp = "";
this.setFromIp = function(fromIp) { 
    this.fromIp = fromIp;
    return this;
};
this.getFromIp = function() {
    return this.fromIp;
};
var toIp = "";
this.setToIp = function(toIp) { 
    this.toIp = toIp;
    return this;
};
this.getToIp = function() {
    return this.toIp;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setName(json["name"]);
		this.setFromIp(json["from_ip"]);
		this.setToIp(json["to_ip"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getName()) json += '"name"' + ":" + '"' + jsonEscape(this.getName())  + '",';
		if(this.getFromIp()) json += '"from_ip"' + ":" + '"' + jsonEscape(this.getFromIp())  + '",';
		if(this.getToIp()) json += '"to_ip"' + ":" + '"' + jsonEscape(this.getToIp())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ClientAccessIp.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.fromIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.fromIp)) { throw new ValidationError(_formprefix + "from_ip", ValidationError.PATTERN_FAILED);}
if(this.toIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.toIp)) { throw new ValidationError(_formprefix + "to_ip", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ClientAccessIp.path = "clientaccessip";
ClientAccessIp.newBuilder = function() {
    return new ClientAccessIp();
};

OAuthClientProperties = function() {
    var _formprefix = "";
    
var propName = "";
this.setPropName = function(propName) { 
    this.propName = propName;
    return this;
};
this.getPropName = function() {
    return this.propName;
};
var propValue = "";
this.setPropValue = function(propValue) { 
    this.propValue = propValue;
    return this;
};
this.getPropValue = function() {
    return this.propValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPropName(json["prop_name"]);
		this.setPropValue(json["prop_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPropName()) json += '"prop_name"' + ":" + '"' + jsonEscape(this.getPropName())  + '",';
		if(this.getPropValue()) json += '"prop_value"' + ":" + '"' + jsonEscape(this.getPropValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthClientProperties.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.propName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.propName)) { throw new ValidationError(_formprefix + "prop_name", ValidationError.PATTERN_FAILED);}
if(this.propValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.propValue)) { throw new ValidationError(_formprefix + "prop_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthClientProperties.path = "oauthclientproperties";
OAuthClientProperties.newBuilder = function() {
    return new OAuthClientProperties();
};

MailClientAudit = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var auditedTime = "";
this.setAuditedTime = function(auditedTime) { 
    this.auditedTime = auditedTime;
    return this;
};
this.getAuditedTime = function() {
    return this.auditedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setEmailId(json["email_id"]);
		this.setAppName(json["app_name"]);
		this.setIpAddress(json["ip_address"]);
		this.setUserAgent(json["user_agent"]);
		this.setAuditedTime(json["audited_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getAuditedTime()) json += '"audited_time"' + ":" + '"' + jsonEscape(this.getAuditedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MailClientAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.auditedTime && !Validator.INTEGER.test(this.auditedTime)) { throw new ValidationError(_formprefix + "audited_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
MailClientAudit.path = "mailclientaudit";
MailClientAudit.newBuilder = function() {
    return new MailClientAudit();
};

ManagedDevice = function() {
    var _formprefix = "";
    
var mdmToken = "";
this.setMdmToken = function(mdmToken) { 
    this.mdmToken = mdmToken;
    return this;
};
this.getMdmToken = function() {
    return this.mdmToken;
};
var apiToken = "";
this.setApiToken = function(apiToken) { 
    this.apiToken = apiToken;
    return this;
};
this.getApiToken = function() {
    return this.apiToken;
};
var status = "1";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var restrictedType = "0";
this.setRestrictedType = function(restrictedType) { 
    this.restrictedType = restrictedType;
    return this;
};
this.getRestrictedType = function() {
    return this.restrictedType;
};
var tokenSalt = "";
this.setTokenSalt = function(tokenSalt) { 
    this.tokenSalt = tokenSalt;
    return this;
};
this.getTokenSalt = function() {
    return this.tokenSalt;
};
var displayId = "";
this.setDisplayId = function(displayId) { 
    this.displayId = displayId;
    return this;
};
this.getDisplayId = function() {
    return this.displayId;
};
var deviceId = "";
this.setDeviceId = function(deviceId) { 
    this.deviceId = deviceId;
    return this;
};
this.getDeviceId = function() {
    return this.deviceId;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var manageddeviceusers = undefined;
this.setManageddeviceuserss = function(manageddeviceusers) { 
    this.manageddeviceusers = manageddeviceusers;
    return this;
};
this.getManageddeviceuserss = function() {
    return this.manageddeviceusers;
};
this.addManageddeviceusers = function(manageddeviceusers) { 
 if(!this.manageddeviceusers) this.manageddeviceusers = new Array(); 
  this.manageddeviceusers.push(manageddeviceusers); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setMdmToken(json["mdm_token"]);
		this.setApiToken(json["api_token"]);
		this.setStatus(json["status"]);
		this.setRestrictedType(json["restricted_type"]);
		this.setTokenSalt(json["token_salt"]);
		this.setDisplayId(json["display_id"]);
		this.setDeviceId(json["device_id"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setManageddeviceuserss(URI.getResourceArray(json["managedDeviceUsers"],"manageddeviceusers"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getMdmToken()) json += '"mdm_token"' + ":" + '"' + jsonEscape(this.getMdmToken())  + '",';
		if(this.getApiToken()) json += '"api_token"' + ":" + '"' + jsonEscape(this.getApiToken())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getRestrictedType()) json += '"restricted_type"' + ":" + '"' + jsonEscape(this.getRestrictedType())  + '",';
		if(this.getTokenSalt()) json += '"token_salt"' + ":" + '"' + jsonEscape(this.getTokenSalt())  + '",';
		if(this.getDisplayId()) json += '"display_id"' + ":" + '"' + jsonEscape(this.getDisplayId())  + '",';
		if(this.getDeviceId()) json += '"device_id"' + ":" + '"' + jsonEscape(this.getDeviceId())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getManageddeviceuserss()) json += '"managedDeviceUsers"' + ":" + URI.toJSONArray(this.getManageddeviceuserss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ManagedDevice.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.status && !Validator.INTEGER.test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.restrictedType && !Validator.INTEGER.test(this.restrictedType)) { throw new ValidationError(_formprefix + "restricted_type", ValidationError.PATTERN_FAILED);}
if(this.deviceId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.deviceId)) { throw new ValidationError(_formprefix + "device_id", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.manageddeviceusers) { for(i=0; i < this.manageddeviceusers.length; i++ ) { this.manageddeviceusers[i].validate(); } }

	return this;
    }
}
ManagedDevice.path = "manageddevice";
ManagedDevice.newBuilder = function() {
    return new ManagedDevice();
};

AccountMemberRole = function() {
    var _formprefix = "";
    
var zarid = "";
this.setZarid = function(zarid) { 
    this.zarid = zarid;
    return this;
};
this.getZarid = function() {
    return this.zarid;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZarid(json["zarid"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZarid()) json += '"zarid"' + ":" + '"' + jsonEscape(this.getZarid())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountMemberRole.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zarid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zarid)) { throw new ValidationError(_formprefix + "zarid", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountMemberRole.path = "accountmemberrole";
AccountMemberRole.newBuilder = function() {
    return new AccountMemberRole();
};

UniqueIdRangeGenerationAudit = function() {
    var _formprefix = "";
    
var uniqueIdRangeName = "";
this.setUniqueIdRangeName = function(uniqueIdRangeName) { 
    this.uniqueIdRangeName = uniqueIdRangeName;
    return this;
};
this.getUniqueIdRangeName = function() {
    return this.uniqueIdRangeName;
};
var uniqueIdName = "";
this.setUniqueIdName = function(uniqueIdName) { 
    this.uniqueIdName = uniqueIdName;
    return this;
};
this.getUniqueIdName = function() {
    return this.uniqueIdName;
};
var reservedFrom = "";
this.setReservedFrom = function(reservedFrom) { 
    this.reservedFrom = reservedFrom;
    return this;
};
this.getReservedFrom = function() {
    return this.reservedFrom;
};
var reservedTo = "";
this.setReservedTo = function(reservedTo) { 
    this.reservedTo = reservedTo;
    return this;
};
this.getReservedTo = function() {
    return this.reservedTo;
};
var reservedByIp = "";
this.setReservedByIp = function(reservedByIp) { 
    this.reservedByIp = reservedByIp;
    return this;
};
this.getReservedByIp = function() {
    return this.reservedByIp;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setUniqueIdRangeName(json["unique_id_range_name"]);
		this.setUniqueIdName(json["unique_id_name"]);
		this.setReservedFrom(json["reserved_from"]);
		this.setReservedTo(json["reserved_to"]);
		this.setReservedByIp(json["reserved_by_ip"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getUniqueIdRangeName()) json += '"unique_id_range_name"' + ":" + '"' + jsonEscape(this.getUniqueIdRangeName())  + '",';
		if(this.getUniqueIdName()) json += '"unique_id_name"' + ":" + '"' + jsonEscape(this.getUniqueIdName())  + '",';
		if(this.getReservedFrom()) json += '"reserved_from"' + ":" + '"' + jsonEscape(this.getReservedFrom())  + '",';
		if(this.getReservedTo()) json += '"reserved_to"' + ":" + '"' + jsonEscape(this.getReservedTo())  + '",';
		if(this.getReservedByIp()) json += '"reserved_by_ip"' + ":" + '"' + jsonEscape(this.getReservedByIp())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UniqueIdRangeGenerationAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.uniqueIdRangeName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.uniqueIdRangeName)) { throw new ValidationError(_formprefix + "unique_id_range_name", ValidationError.PATTERN_FAILED);}
if(this.uniqueIdName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.uniqueIdName)) { throw new ValidationError(_formprefix + "unique_id_name", ValidationError.PATTERN_FAILED);}
if(this.reservedFrom && !Validator.INTEGER.test(this.reservedFrom)) { throw new ValidationError(_formprefix + "reserved_from", ValidationError.PATTERN_FAILED);}
if(this.reservedTo && !Validator.INTEGER.test(this.reservedTo)) { throw new ValidationError(_formprefix + "reserved_to", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UniqueIdRangeGenerationAudit.path = "uniqueidrangegenerationaudit";
UniqueIdRangeGenerationAudit.newBuilder = function() {
    return new UniqueIdRangeGenerationAudit();
};

AuthenticationTokens = function() {
    var _formprefix = "";
    
var tokenName = "";
this.setTokenName = function(tokenName) { 
    this.tokenName = tokenName;
    return this;
};
this.getTokenName = function() {
    return this.tokenName;
};
var tokenValue = "";
this.setTokenValue = function(tokenValue) { 
    this.tokenValue = tokenValue;
    return this;
};
this.getTokenValue = function() {
    return this.tokenValue;
};
var createdBy = "";
this.setCreatedBy = function(createdBy) { 
    this.createdBy = createdBy;
    return this;
};
this.getCreatedBy = function() {
    return this.createdBy;
};
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var clientId = "";
this.setClientId = function(clientId) { 
    this.clientId = clientId;
    return this;
};
this.getClientId = function() {
    return this.clientId;
};
var clientSecret = "";
this.setClientSecret = function(clientSecret) { 
    this.clientSecret = clientSecret;
    return this;
};
this.getClientSecret = function() {
    return this.clientSecret;
};
var dcInfo = "";
this.setDcInfo = function(dcInfo) { 
    this.dcInfo = dcInfo;
    return this;
};
this.getDcInfo = function() {
    return this.dcInfo;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTokenName(json["token_name"]);
		this.setTokenValue(json["token_value"]);
		this.setCreatedBy(json["created_by"]);
		this.setZid(json["zid"]);
		this.setClientId(json["client_id"]);
		this.setClientSecret(json["client_secret"]);
		this.setDcInfo(json["dc_info"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTokenName()) json += '"token_name"' + ":" + '"' + jsonEscape(this.getTokenName())  + '",';
		if(this.getTokenValue()) json += '"token_value"' + ":" + '"' + jsonEscape(this.getTokenValue())  + '",';
		if(this.getCreatedBy()) json += '"created_by"' + ":" + '"' + jsonEscape(this.getCreatedBy())  + '",';
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getClientId()) json += '"client_id"' + ":" + '"' + jsonEscape(this.getClientId())  + '",';
		if(this.getClientSecret()) json += '"client_secret"' + ":" + '"' + jsonEscape(this.getClientSecret())  + '",';
		if(this.getDcInfo()) json += '"dc_info"' + ":" + '"' + jsonEscape(this.getDcInfo())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AuthenticationTokens.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.tokenName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.tokenName)) { throw new ValidationError(_formprefix + "token_name", ValidationError.PATTERN_FAILED);}
if(this.tokenValue && !(/xss:throwerror/).test(this.tokenValue)) { throw new ValidationError(_formprefix + "token_value", ValidationError.PATTERN_FAILED);}
if(this.createdBy && !(/^[a-zA-Z0-9_\-]+$/).test(this.createdBy)) { throw new ValidationError(_formprefix + "created_by", ValidationError.PATTERN_FAILED);}
if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.clientId && !(/^[a-zA-Z0-9_\-]+$/).test(this.clientId)) { throw new ValidationError(_formprefix + "client_id", ValidationError.PATTERN_FAILED);}
if(this.clientSecret && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.clientSecret)) { throw new ValidationError(_formprefix + "client_secret", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AuthenticationTokens.path = "authenticationtokens";
AuthenticationTokens.newBuilder = function() {
    return new AuthenticationTokens();
};

AppI18n = function() {
    var _formprefix = "";
    
var i18nAttributeName = "";
this.setI18nAttributeName = function(i18nAttributeName) { 
    this.i18nAttributeName = i18nAttributeName;
    return this;
};
this.getI18nAttributeName = function() {
    return this.i18nAttributeName;
};
var i18nAttributeValue = "";
this.setI18nAttributeValue = function(i18nAttributeValue) { 
    this.i18nAttributeValue = i18nAttributeValue;
    return this;
};
this.getI18nAttributeValue = function() {
    return this.i18nAttributeValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setI18nAttributeName(json["i18n_attribute_name"]);
		this.setI18nAttributeValue(json["i18n_attribute_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getI18nAttributeName()) json += '"i18n_attribute_name"' + ":" + '"' + jsonEscape(this.getI18nAttributeName())  + '",';
		if(this.getI18nAttributeValue()) json += '"i18n_attribute_value"' + ":" + '"' + jsonEscape(this.getI18nAttributeValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppI18n.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.i18nAttributeName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.i18nAttributeName)) { throw new ValidationError(_formprefix + "i18n_attribute_name", ValidationError.PATTERN_FAILED);}
if(this.i18nAttributeValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.i18nAttributeValue)) { throw new ValidationError(_formprefix + "i18n_attribute_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppI18n.path = "appi18n";
AppI18n.newBuilder = function() {
    return new AppI18n();
};

AccountAttribute = function() {
    var _formprefix = "";
    
var attributeKey = "";
this.setAttributeKey = function(attributeKey) { 
    this.attributeKey = attributeKey;
    return this;
};
this.getAttributeKey = function() {
    return this.attributeKey;
};
var attributeValue = "";
this.setAttributeValue = function(attributeValue) { 
    this.attributeValue = attributeValue;
    return this;
};
this.getAttributeValue = function() {
    return this.attributeValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAttributeKey(json["attribute_key"]);
		this.setAttributeValue(json["attribute_value"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAttributeKey()) json += '"attribute_key"' + ":" + '"' + jsonEscape(this.getAttributeKey())  + '",';
		if(this.getAttributeValue()) json += '"attribute_value"' + ":" + '"' + jsonEscape(this.getAttributeValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountAttribute.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.attributeKey && !(/^([A-Za-z0-9_.\-]+)$/).test(this.attributeKey)) { throw new ValidationError(_formprefix + "attribute_key", ValidationError.PATTERN_FAILED);}
if(this.attributeValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.attributeValue)) { throw new ValidationError(_formprefix + "attribute_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountAttribute.path = "accountattribute";
AccountAttribute.newBuilder = function() {
    return new AccountAttribute();
};

Automation = function() {
    var _formprefix = "";
    
var automationName = "";
this.setAutomationName = function(automationName) { 
    this.automationName = automationName;
    return this;
};
this.getAutomationName = function() {
    return this.automationName;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var type = "";
this.setType = function(type) { 
    this.type = type;
    return this;
};
this.getType = function() {
    return this.type;
};
var resourceToListen = "";
this.setResourceToListen = function(resourceToListen) { 
    this.resourceToListen = resourceToListen;
    return this;
};
this.getResourceToListen = function() {
    return this.resourceToListen;
};
var childResourcesToInclude = "";
this.setChildResourcesToInclude = function(childResourcesToInclude) { 
    this.childResourcesToInclude = childResourcesToInclude;
    return this;
};
this.getChildResourcesToInclude = function() {
    return this.childResourcesToInclude;
};
var criteria = "";
this.setCriteria = function(criteria) { 
    this.criteria = criteria;
    return this;
};
this.getCriteria = function() {
    return this.criteria;
};
var operation = "";
this.setOperation = function(operation) { 
    this.operation = operation;
    return this;
};
this.getOperation = function() {
    return this.operation;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var resourceaction = undefined;
this.setResourceactions = function(resourceaction) { 
    this.resourceaction = resourceaction;
    return this;
};
this.getResourceactions = function() {
    return this.resourceaction;
};
this.addResourceaction = function(resourceaction) { 
 if(!this.resourceaction) this.resourceaction = new Array(); 
  this.resourceaction.push(resourceaction); 
 return this;
};

var emailaction = undefined;
this.setEmailactions = function(emailaction) { 
    this.emailaction = emailaction;
    return this;
};
this.getEmailactions = function() {
    return this.emailaction;
};
this.addEmailaction = function(emailaction) { 
 if(!this.emailaction) this.emailaction = new Array(); 
  this.emailaction.push(emailaction); 
 return this;
};

var notifyaction = undefined;
this.setNotifyactions = function(notifyaction) { 
    this.notifyaction = notifyaction;
    return this;
};
this.getNotifyactions = function() {
    return this.notifyaction;
};
this.addNotifyaction = function(notifyaction) { 
 if(!this.notifyaction) this.notifyaction = new Array(); 
  this.notifyaction.push(notifyaction); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAutomationName(json["automation_name"]);
		this.setDescription(json["description"]);
		this.setType(json["type"]);
		this.setResourceToListen(json["resource_to_listen"]);
		this.setChildResourcesToInclude(json["child_resources_to_include"]);
		this.setCriteria(json["criteria"]);
		this.setOperation(json["operation"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setResourceactions(URI.getResourceArray(json["resourceAction"],"resourceaction"));
		this.setEmailactions(URI.getResourceArray(json["emailAction"],"emailaction"));
		this.setNotifyactions(URI.getResourceArray(json["notifyAction"],"notifyaction"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAutomationName()) json += '"automation_name"' + ":" + '"' + jsonEscape(this.getAutomationName())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getType()) json += '"type"' + ":" + '"' + jsonEscape(this.getType())  + '",';
		if(this.getResourceToListen()) json += '"resource_to_listen"' + ":" + '"' + jsonEscape(this.getResourceToListen())  + '",';
		if(this.getChildResourcesToInclude()) json += '"child_resources_to_include"' + ":" + '"' + jsonEscape(this.getChildResourcesToInclude())  + '",';
		if(this.getCriteria()) json += '"criteria"' + ":" + '"' + jsonEscape(this.getCriteria())  + '",';
		if(this.getOperation()) json += '"operation"' + ":" + '"' + jsonEscape(this.getOperation())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getResourceactions()) json += '"resourceAction"' + ":" + URI.toJSONArray(this.getResourceactions())  + ',';
		if(this.getEmailactions()) json += '"emailAction"' + ":" + URI.toJSONArray(this.getEmailactions())  + ',';
		if(this.getNotifyactions()) json += '"notifyAction"' + ":" + URI.toJSONArray(this.getNotifyactions())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Automation.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.automationName && !(/^[a-zA-Z0-9_\-]+$/).test(this.automationName)) { throw new ValidationError(_formprefix + "automation_name", ValidationError.PATTERN_FAILED);}
if(this.type && !(/(?i)PRE|POST/).test(this.type)) { throw new ValidationError(_formprefix + "type", ValidationError.PATTERN_FAILED);}
if(this.operation && !(/(?i)POST|PUT|DELETE/).test(this.operation)) { throw new ValidationError(_formprefix + "operation", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.resourceaction) { for(i=0; i < this.resourceaction.length; i++ ) { this.resourceaction[i].validate(); } }
if(this.emailaction) { for(i=0; i < this.emailaction.length; i++ ) { this.emailaction[i].validate(); } }
if(this.notifyaction) { for(i=0; i < this.notifyaction.length; i++ ) { this.notifyaction[i].validate(); } }

	return this;
    }
}
Automation.path = "automation";
Automation.newBuilder = function() {
    return new Automation();
};

ACE = function() {
    var _formprefix = "";
    
var aceIndex = "";
this.setAceIndex = function(aceIndex) { 
    this.aceIndex = aceIndex;
    return this;
};
this.getAceIndex = function() {
    return this.aceIndex;
};
var aceType = "1";
this.setAceType = function(aceType) { 
    this.aceType = aceType;
    return this;
};
this.getAceType = function() {
    return this.aceType;
};
var privilege = "1";
this.setPrivilege = function(privilege) { 
    this.privilege = privilege;
    return this;
};
this.getPrivilege = function() {
    return this.privilege;
};
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var attributes = "";
this.setAttributes = function(attributes) { 
    this.attributes = attributes;
    return this;
};
this.getAttributes = function() {
    return this.attributes;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAceIndex(json["ace_index"]);
		this.setAceType(json["ace_type"]);
		this.setPrivilege(json["privilege"]);
		this.setZid(json["zid"]);
		this.setAttributes(json["attributes"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAceIndex()) json += '"ace_index"' + ":" + '"' + jsonEscape(this.getAceIndex())  + '",';
		if(this.getAceType()) json += '"ace_type"' + ":" + '"' + jsonEscape(this.getAceType())  + '",';
		if(this.getPrivilege()) json += '"privilege"' + ":" + '"' + jsonEscape(this.getPrivilege())  + '",';
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getAttributes()) json += '"attributes"' + ":" + '"' + jsonEscape(this.getAttributes())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ACE.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.aceIndex && !Validator.INTEGER.test(this.aceIndex)) { throw new ValidationError(_formprefix + "ace_index", ValidationError.PATTERN_FAILED);}
if(this.aceType && !Validator.INTEGER.test(this.aceType)) { throw new ValidationError(_formprefix + "ace_type", ValidationError.PATTERN_FAILED);}
if(this.privilege && !Validator.INTEGER.test(this.privilege)) { throw new ValidationError(_formprefix + "privilege", ValidationError.PATTERN_FAILED);}
if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.attributes && !(/dontdisturb/).test(this.attributes)) { throw new ValidationError(_formprefix + "attributes", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ACE.path = "ace";
ACE.newBuilder = function() {
    return new ACE();
};

RecoveryCode = function() {
    var _formprefix = "";
    
var recoveryCode = "";
this.setRecoveryCode = function(recoveryCode) { 
    this.recoveryCode = recoveryCode;
    return this;
};
this.getRecoveryCode = function() {
    return this.recoveryCode;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRecoveryCode(json["recovery_code"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRecoveryCode()) json += '"recovery_code"' + ":" + '"' + jsonEscape(this.getRecoveryCode())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(RecoveryCode.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.recoveryCode && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.recoveryCode)) { throw new ValidationError(_formprefix + "recovery_code", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
RecoveryCode.path = "recoverycode";
RecoveryCode.newBuilder = function() {
    return new RecoveryCode();
};

UserAppKeyStore = function() {
    var _formprefix = "";
    
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var label = "";
this.setLabel = function(label) { 
    this.label = label;
    return this;
};
this.getLabel = function() {
    return this.label;
};
var publicKey = "";
this.setPublicKey = function(publicKey) { 
    this.publicKey = publicKey;
    return this;
};
this.getPublicKey = function() {
    return this.publicKey;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppId(json["app_id"]);
		this.setLabel(json["label"]);
		this.setPublicKey(json["public_key"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getLabel()) json += '"label"' + ":" + '"' + jsonEscape(this.getLabel())  + '",';
		if(this.getPublicKey()) json += '"public_key"' + ":" + '"' + jsonEscape(this.getPublicKey())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserAppKeyStore.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.appId && !Validator.INTEGER.test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.label && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.label)) { throw new ValidationError(_formprefix + "label", ValidationError.PATTERN_FAILED);}
if(this.publicKey && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.publicKey)) { throw new ValidationError(_formprefix + "public_key", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserAppKeyStore.path = "userappkeystore";
UserAppKeyStore.newBuilder = function() {
    return new UserAppKeyStore();
};

AppAccountFinancialSettings = function() {
    var _formprefix = "";
    
var fiscalYearStartMonth = "";
this.setFiscalYearStartMonth = function(fiscalYearStartMonth) { 
    this.fiscalYearStartMonth = fiscalYearStartMonth;
    return this;
};
this.getFiscalYearStartMonth = function() {
    return this.fiscalYearStartMonth;
};
var taxBasis = "";
this.setTaxBasis = function(taxBasis) { 
    this.taxBasis = taxBasis;
    return this;
};
this.getTaxBasis = function() {
    return this.taxBasis;
};
var currencyCode = "";
this.setCurrencyCode = function(currencyCode) { 
    this.currencyCode = currencyCode;
    return this;
};
this.getCurrencyCode = function() {
    return this.currencyCode;
};
var currencySymbol = "";
this.setCurrencySymbol = function(currencySymbol) { 
    this.currencySymbol = currencySymbol;
    return this;
};
this.getCurrencySymbol = function() {
    return this.currencySymbol;
};
var currencyFormat = "";
this.setCurrencyFormat = function(currencyFormat) { 
    this.currencyFormat = currencyFormat;
    return this;
};
this.getCurrencyFormat = function() {
    return this.currencyFormat;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setFiscalYearStartMonth(json["fiscal_year_start_month"]);
		this.setTaxBasis(json["tax_basis"]);
		this.setCurrencyCode(json["currency_code"]);
		this.setCurrencySymbol(json["currency_symbol"]);
		this.setCurrencyFormat(json["currency_format"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getFiscalYearStartMonth()) json += '"fiscal_year_start_month"' + ":" + '"' + jsonEscape(this.getFiscalYearStartMonth())  + '",';
		if(this.getTaxBasis()) json += '"tax_basis"' + ":" + '"' + jsonEscape(this.getTaxBasis())  + '",';
		if(this.getCurrencyCode()) json += '"currency_code"' + ":" + '"' + jsonEscape(this.getCurrencyCode())  + '",';
		if(this.getCurrencySymbol()) json += '"currency_symbol"' + ":" + '"' + jsonEscape(this.getCurrencySymbol())  + '",';
		if(this.getCurrencyFormat()) json += '"currency_format"' + ":" + '"' + jsonEscape(this.getCurrencyFormat())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccountFinancialSettings.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.taxBasis && !Validator.BOOLEAN.test(this.taxBasis)) { throw new ValidationError(_formprefix + "tax_basis", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAccountFinancialSettings.path = "appaccountfinancialsettings";
AppAccountFinancialSettings.newBuilder = function() {
    return new AppAccountFinancialSettings();
};

Statement = function() {
    var _formprefix = "";
    
var statementId = "";
this.setStatementId = function(statementId) { 
    this.statementId = statementId;
    return this;
};
this.getStatementId = function() {
    return this.statementId;
};
var statement = "";
this.setStatement = function(statement) { 
    this.statement = statement;
    return this;
};
this.getStatement = function() {
    return this.statement;
};
var paramMetadata = "";
this.setParamMetadata = function(paramMetadata) { 
    this.paramMetadata = paramMetadata;
    return this;
};
this.getParamMetadata = function() {
    return this.paramMetadata;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setStatementId(json["statement_id"]);
		this.setStatement(json["statement"]);
		this.setParamMetadata(json["param_metadata"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getStatementId()) json += '"statement_id"' + ":" + '"' + jsonEscape(this.getStatementId())  + '",';
		if(this.getStatement()) json += '"statement"' + ":" + '"' + jsonEscape(this.getStatement())  + '",';
		if(this.getParamMetadata()) json += '"param_metadata"' + ":" + '"' + jsonEscape(this.getParamMetadata())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Statement.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.statementId && !(/^([A-Za-z0-9_.\-]+)$/).test(this.statementId)) { throw new ValidationError(_formprefix + "statement_id", ValidationError.PATTERN_FAILED);}
if(this.statement && !(/dontdisturb/).test(this.statement)) { throw new ValidationError(_formprefix + "statement", ValidationError.PATTERN_FAILED);}
if(this.paramMetadata && !(/^([A-Za-z0-9_.\-]+)$/).test(this.paramMetadata)) { throw new ValidationError(_formprefix + "param_metadata", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Statement.path = "statement";
Statement.newBuilder = function() {
    return new Statement();
};

Designations = function() {
    var _formprefix = "";
    
var designationId = "";
this.setDesignationId = function(designationId) { 
    this.designationId = designationId;
    return this;
};
this.getDesignationId = function() {
    return this.designationId;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDesignationId(json["designation_id"]);
		this.setDisplayName(json["display_name"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDesignationId()) json += '"designation_id"' + ":" + '"' + jsonEscape(this.getDesignationId())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Designations.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.designationId && !(/^[a-zA-Z0-9_\-]+$/).test(this.designationId)) { throw new ValidationError(_formprefix + "designation_id", ValidationError.PATTERN_FAILED);}
if(this.displayName && !(/xss:throwerror/).test(this.displayName)) { throw new ValidationError(_formprefix + "display_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Designations.path = "designations";
Designations.newBuilder = function() {
    return new Designations();
};

AuthtoOAuth = function() {
    var _formprefix = "";
    
var clientId = "";
this.setClientId = function(clientId) { 
    this.clientId = clientId;
    return this;
};
this.getClientId = function() {
    return this.clientId;
};
var authtokenscopes = "";
this.setAuthtokenscopes = function(authtokenscopes) { 
    this.authtokenscopes = authtokenscopes;
    return this;
};
this.getAuthtokenscopes = function() {
    return this.authtokenscopes;
};
var oauthtokenscopes = "";
this.setOauthtokenscopes = function(oauthtokenscopes) { 
    this.oauthtokenscopes = oauthtokenscopes;
    return this;
};
this.getOauthtokenscopes = function() {
    return this.oauthtokenscopes;
};
var clientStatus = "1";
this.setClientStatus = function(clientStatus) { 
    this.clientStatus = clientStatus;
    return this;
};
this.getClientStatus = function() {
    return this.clientStatus;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
var tokenExpiryTime = "1";
this.setTokenExpiryTime = function(tokenExpiryTime) { 
    this.tokenExpiryTime = tokenExpiryTime;
    return this;
};
this.getTokenExpiryTime = function() {
    return this.tokenExpiryTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClientId(json["client_id"]);
		this.setAuthtokenscopes(json["authtokenscopes"]);
		this.setOauthtokenscopes(json["oauthtokenscopes"]);
		this.setClientStatus(json["client_status"]);
		this.setCreatedTime(json["created_time"]);
		this.setExpiryTime(json["expiry_time"]);
		this.setTokenExpiryTime(json["token_expiry_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClientId()) json += '"client_id"' + ":" + '"' + jsonEscape(this.getClientId())  + '",';
		if(this.getAuthtokenscopes()) json += '"authtokenscopes"' + ":" + '"' + jsonEscape(this.getAuthtokenscopes())  + '",';
		if(this.getOauthtokenscopes()) json += '"oauthtokenscopes"' + ":" + '"' + jsonEscape(this.getOauthtokenscopes())  + '",';
		if(this.getClientStatus()) json += '"client_status"' + ":" + '"' + jsonEscape(this.getClientStatus())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';
		if(this.getTokenExpiryTime()) json += '"token_expiry_time"' + ":" + '"' + jsonEscape(this.getTokenExpiryTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AuthtoOAuth.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.clientId && !(/^[a-zA-Z0-9_\-]+$/).test(this.clientId)) { throw new ValidationError(_formprefix + "client_id", ValidationError.PATTERN_FAILED);}
if(this.authtokenscopes && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.authtokenscopes)) { throw new ValidationError(_formprefix + "authtokenscopes", ValidationError.PATTERN_FAILED);}
if(this.oauthtokenscopes && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.oauthtokenscopes)) { throw new ValidationError(_formprefix + "oauthtokenscopes", ValidationError.PATTERN_FAILED);}
if(this.clientStatus && !Validator.INTEGER.test(this.clientStatus)) { throw new ValidationError(_formprefix + "client_status", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}
if(this.tokenExpiryTime && !Validator.INTEGER.test(this.tokenExpiryTime)) { throw new ValidationError(_formprefix + "token_expiry_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AuthtoOAuth.path = "authtooauth";
AuthtoOAuth.newBuilder = function() {
    return new AuthtoOAuth();
};

UserAllDomainsToken = function() {
    var _formprefix = "";
    
var token = "";
this.setToken = function(token) { 
    this.token = token;
    return this;
};
this.getToken = function() {
    return this.token;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var validityPeriod = "0";
this.setValidityPeriod = function(validityPeriod) { 
    this.validityPeriod = validityPeriod;
    return this;
};
this.getValidityPeriod = function() {
    return this.validityPeriod;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var ipAuditInfo = "";
this.setIpAuditInfo = function(ipAuditInfo) { 
    this.ipAuditInfo = ipAuditInfo;
    return this;
};
this.getIpAuditInfo = function() {
    return this.ipAuditInfo;
};
var signinInfo = "";
this.setSigninInfo = function(signinInfo) { 
    this.signinInfo = signinInfo;
    return this;
};
this.getSigninInfo = function() {
    return this.signinInfo;
};
var userbasedomaintoken = undefined;
this.setUserbasedomaintokens = function(userbasedomaintoken) { 
    this.userbasedomaintoken = userbasedomaintoken;
    return this;
};
this.getUserbasedomaintokens = function() {
    return this.userbasedomaintoken;
};
this.addUserbasedomaintoken = function(userbasedomaintoken) { 
 if(!this.userbasedomaintoken) this.userbasedomaintoken = new Array(); 
  this.userbasedomaintoken.push(userbasedomaintoken); 
 return this;
};

var usertokenpairdetails = undefined;
this.setUsertokenpairdetails = function(usertokenpairdetails) { 
    this.usertokenpairdetails = usertokenpairdetails;
    return this;
};
this.getUsertokenpairdetails = function() {
    return this.usertokenpairdetails;
};
var tokenpairauthtoken = undefined;
this.setTokenpairauthtokens = function(tokenpairauthtoken) { 
    this.tokenpairauthtoken = tokenpairauthtoken;
    return this;
};
this.getTokenpairauthtokens = function() {
    return this.tokenpairauthtoken;
};
this.addTokenpairauthtoken = function(tokenpairauthtoken) { 
 if(!this.tokenpairauthtoken) this.tokenpairauthtoken = new Array(); 
  this.tokenpairauthtoken.push(tokenpairauthtoken); 
 return this;
};

var samlappsessionindex = undefined;
this.setSamlappsessionindexs = function(samlappsessionindex) { 
    this.samlappsessionindex = samlappsessionindex;
    return this;
};
this.getSamlappsessionindexs = function() {
    return this.samlappsessionindex;
};
this.addSamlappsessionindex = function(samlappsessionindex) { 
 if(!this.samlappsessionindex) this.samlappsessionindex = new Array(); 
  this.samlappsessionindex.push(samlappsessionindex); 
 return this;
};

var oauthsessiongrant = undefined;
this.setOauthsessiongrants = function(oauthsessiongrant) { 
    this.oauthsessiongrant = oauthsessiongrant;
    return this;
};
this.getOauthsessiongrants = function() {
    return this.oauthsessiongrant;
};
this.addOauthsessiongrant = function(oauthsessiongrant) { 
 if(!this.oauthsessiongrant) this.oauthsessiongrant = new Array(); 
  this.oauthsessiongrant.push(oauthsessiongrant); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setToken(json["token"]);
		this.setIpAddress(json["ip_address"]);
		this.setValidityPeriod(json["validity_period"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);
		this.setIpAuditInfo(json["ip_audit_info"]);
		this.setSigninInfo(json["signin_info"]);
		this.setUserbasedomaintokens(URI.getResourceArray(json["userBaseDomainToken"],"userbasedomaintoken"));
		this.setUsertokenpairdetails(URI.getResource(json["userTokenPairDetails"],"usertokenpairdetails"));
		this.setTokenpairauthtokens(URI.getResourceArray(json["tokenPairAuthToken"],"tokenpairauthtoken"));
		this.setSamlappsessionindexs(URI.getResourceArray(json["samlAppSessionIndex"],"samlappsessionindex"));
		this.setOauthsessiongrants(URI.getResourceArray(json["oAuthSessionGrant"],"oauthsessiongrant"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getToken()) json += '"token"' + ":" + '"' + jsonEscape(this.getToken())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getValidityPeriod()) json += '"validity_period"' + ":" + '"' + jsonEscape(this.getValidityPeriod())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getIpAuditInfo()) json += '"ip_audit_info"' + ":" + '"' + jsonEscape(this.getIpAuditInfo())  + '",';
		if(this.getSigninInfo()) json += '"signin_info"' + ":" + '"' + jsonEscape(this.getSigninInfo())  + '",';
		if(this.getUserbasedomaintokens()) json += '"userBaseDomainToken"' + ":" + URI.toJSONArray(this.getUserbasedomaintokens())  + ',';
		if(this.getUsertokenpairdetails()) json += '"userTokenPairDetails"' + ":" + this.getUsertokenpairdetails().toJSON()  + ',';
		if(this.getTokenpairauthtokens()) json += '"tokenPairAuthToken"' + ":" + URI.toJSONArray(this.getTokenpairauthtokens())  + ',';
		if(this.getSamlappsessionindexs()) json += '"samlAppSessionIndex"' + ":" + URI.toJSONArray(this.getSamlappsessionindexs())  + ',';
		if(this.getOauthsessiongrants()) json += '"oAuthSessionGrant"' + ":" + URI.toJSONArray(this.getOauthsessiongrants())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserAllDomainsToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.token && !(/^[a-zA-Z0-9\-\_]+$/).test(this.token)) { throw new ValidationError(_formprefix + "token", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.validityPeriod && !Validator.INTEGER.test(this.validityPeriod)) { throw new ValidationError(_formprefix + "validity_period", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/xss:htmlfilter/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.userbasedomaintoken) { for(i=0; i < this.userbasedomaintoken.length; i++ ) { this.userbasedomaintoken[i].validate(); } }
if(this.usertokenpairdetails) { this.usertokenpairdetails.validate(); }
if(this.tokenpairauthtoken) { for(i=0; i < this.tokenpairauthtoken.length; i++ ) { this.tokenpairauthtoken[i].validate(); } }
if(this.samlappsessionindex) { for(i=0; i < this.samlappsessionindex.length; i++ ) { this.samlappsessionindex[i].validate(); } }
if(this.oauthsessiongrant) { for(i=0; i < this.oauthsessiongrant.length; i++ ) { this.oauthsessiongrant[i].validate(); } }

	return this;
    }
}
UserAllDomainsToken.path = "useralldomainstoken";
UserAllDomainsToken.newBuilder = function() {
    return new UserAllDomainsToken();
};

BannerTemplateProps = function() {
    var _formprefix = "";
    
var priority = "";
this.setPriority = function(priority) { 
    this.priority = priority;
    return this;
};
this.getPriority = function() {
    return this.priority;
};
var region = "";
this.setRegion = function(region) { 
    this.region = region;
    return this;
};
this.getRegion = function() {
    return this.region;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPriority(json["priority"]);
		this.setRegion(json["region"]);
		this.setExpiryTime(json["expiry_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPriority()) json += '"priority"' + ":" + '"' + jsonEscape(this.getPriority())  + '",';
		if(this.getRegion()) json += '"region"' + ":" + '"' + jsonEscape(this.getRegion())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(BannerTemplateProps.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.priority && !Validator.INTEGER.test(this.priority)) { throw new ValidationError(_formprefix + "priority", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
BannerTemplateProps.path = "bannertemplateprops";
BannerTemplateProps.newBuilder = function() {
    return new BannerTemplateProps();
};

AppRoleOperations = function() {
    var _formprefix = "";
    
var operation = "";
this.setOperation = function(operation) { 
    this.operation = operation;
    return this;
};
this.getOperation = function() {
    return this.operation;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setOperation(json["operation"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getOperation()) json += '"operation"' + ":" + '"' + jsonEscape(this.getOperation())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppRoleOperations.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	
	return this;
    }
}
AppRoleOperations.path = "approleoperations";
AppRoleOperations.newBuilder = function() {
    return new AppRoleOperations();
};

OAuthClientScopes = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var allowedOperations = "";
this.setAllowedOperations = function(allowedOperations) { 
    this.allowedOperations = allowedOperations;
    return this;
};
this.getAllowedOperations = function() {
    return this.allowedOperations;
};
var scopeType = "";
this.setScopeType = function(scopeType) { 
    this.scopeType = scopeType;
    return this;
};
this.getScopeType = function() {
    return this.scopeType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setAllowedOperations(json["allowed_operations"]);
		this.setScopeType(json["scope_type"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getAllowedOperations()) json += '"allowed_operations"' + ":" + '"' + jsonEscape(this.getAllowedOperations())  + '",';
		if(this.getScopeType()) json += '"scope_type"' + ":" + '"' + jsonEscape(this.getScopeType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthClientScopes.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.allowedOperations && !Validator.INTEGER.test(this.allowedOperations)) { throw new ValidationError(_formprefix + "allowed_operations", ValidationError.PATTERN_FAILED);}
if(this.scopeType && !Validator.INTEGER.test(this.scopeType)) { throw new ValidationError(_formprefix + "scope_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthClientScopes.path = "oauthclientscopes";
OAuthClientScopes.newBuilder = function() {
    return new OAuthClientScopes();
};

ACP = function() {
    var _formprefix = "";
    
var acpId = "";
this.setAcpId = function(acpId) { 
    this.acpId = acpId;
    return this;
};
this.getAcpId = function() {
    return this.acpId;
};
var resourceType = "";
this.setResourceType = function(resourceType) { 
    this.resourceType = resourceType;
    return this;
};
this.getResourceType = function() {
    return this.resourceType;
};
var resourceId = "ALL";
this.setResourceId = function(resourceId) { 
    this.resourceId = resourceId;
    return this;
};
this.getResourceId = function() {
    return this.resourceId;
};
var inheritanceFlags = "1";
this.setInheritanceFlags = function(inheritanceFlags) { 
    this.inheritanceFlags = inheritanceFlags;
    return this;
};
this.getInheritanceFlags = function() {
    return this.inheritanceFlags;
};
var ownerZuid = "";
this.setOwnerZuid = function(ownerZuid) { 
    this.ownerZuid = ownerZuid;
    return this;
};
this.getOwnerZuid = function() {
    return this.ownerZuid;
};
var ownerZgid = "";
this.setOwnerZgid = function(ownerZgid) { 
    this.ownerZgid = ownerZgid;
    return this;
};
this.getOwnerZgid = function() {
    return this.ownerZgid;
};
var allowAttributes = "";
this.setAllowAttributes = function(allowAttributes) { 
    this.allowAttributes = allowAttributes;
    return this;
};
this.getAllowAttributes = function() {
    return this.allowAttributes;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var ace = undefined;
this.setAces = function(ace) { 
    this.ace = ace;
    return this;
};
this.getAces = function() {
    return this.ace;
};
this.addAce = function(ace) { 
 if(!this.ace) this.ace = new Array(); 
  this.ace.push(ace); 
 return this;
};

var acpsecret = undefined;
this.setAcpsecrets = function(acpsecret) { 
    this.acpsecret = acpsecret;
    return this;
};
this.getAcpsecrets = function() {
    return this.acpsecret;
};
this.addAcpsecret = function(acpsecret) { 
 if(!this.acpsecret) this.acpsecret = new Array(); 
  this.acpsecret.push(acpsecret); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAcpId(json["acp_id"]);
		this.setResourceType(json["resource_type"]);
		this.setResourceId(json["resource_id"]);
		this.setInheritanceFlags(json["inheritance_flags"]);
		this.setOwnerZuid(json["owner_zuid"]);
		this.setOwnerZgid(json["owner_zgid"]);
		this.setAllowAttributes(json["allow_attributes"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setAces(URI.getResourceArray(json["aCE"],"ace"));
		this.setAcpsecrets(URI.getResourceArray(json["acpSecret"],"acpsecret"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAcpId()) json += '"acp_id"' + ":" + '"' + jsonEscape(this.getAcpId())  + '",';
		if(this.getResourceType()) json += '"resource_type"' + ":" + '"' + jsonEscape(this.getResourceType())  + '",';
		if(this.getResourceId()) json += '"resource_id"' + ":" + '"' + jsonEscape(this.getResourceId())  + '",';
		if(this.getInheritanceFlags()) json += '"inheritance_flags"' + ":" + '"' + jsonEscape(this.getInheritanceFlags())  + '",';
		if(this.getOwnerZuid()) json += '"owner_zuid"' + ":" + '"' + jsonEscape(this.getOwnerZuid())  + '",';
		if(this.getOwnerZgid()) json += '"owner_zgid"' + ":" + '"' + jsonEscape(this.getOwnerZgid())  + '",';
		if(this.getAllowAttributes()) json += '"allow_attributes"' + ":" + '"' + jsonEscape(this.getAllowAttributes())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getAces()) json += '"aCE"' + ":" + URI.toJSONArray(this.getAces())  + ',';
		if(this.getAcpsecrets()) json += '"acpSecret"' + ":" + URI.toJSONArray(this.getAcpsecrets())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ACP.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.acpId && !(/^[a-zA-Z0-9_\-]+$/).test(this.acpId)) { throw new ValidationError(_formprefix + "acp_id", ValidationError.PATTERN_FAILED);}
if(this.resourceType && !(/^[a-zA-Z0-9_]+$/).test(this.resourceType)) { throw new ValidationError(_formprefix + "resource_type", ValidationError.PATTERN_FAILED);}
if(this.resourceId && !(/^[a-zA-Z0-9_\-]+$/).test(this.resourceId)) { throw new ValidationError(_formprefix + "resource_id", ValidationError.PATTERN_FAILED);}
if(this.inheritanceFlags && !Validator.INTEGER.test(this.inheritanceFlags)) { throw new ValidationError(_formprefix + "inheritance_flags", ValidationError.PATTERN_FAILED);}
if(this.ownerZuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.ownerZuid)) { throw new ValidationError(_formprefix + "owner_zuid", ValidationError.PATTERN_FAILED);}
if(this.ownerZgid && !(/^[a-zA-Z0-9_\-]+$/).test(this.ownerZgid)) { throw new ValidationError(_formprefix + "owner_zgid", ValidationError.PATTERN_FAILED);}
if(this.allowAttributes && !(/dontdisturb/).test(this.allowAttributes)) { throw new ValidationError(_formprefix + "allow_attributes", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.ace) { for(i=0; i < this.ace.length; i++ ) { this.ace[i].validate(); } }
if(this.acpsecret) { for(i=0; i < this.acpsecret.length; i++ ) { this.acpsecret[i].validate(); } }

	return this;
    }
}
ACP.path = "acp";
ACP.newBuilder = function() {
    return new ACP();
};

RegistrationAudit = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var regId = "";
this.setRegId = function(regId) { 
    this.regId = regId;
    return this;
};
this.getRegId = function() {
    return this.regId;
};
var appIp = "";
this.setAppIp = function(appIp) { 
    this.appIp = appIp;
    return this;
};
this.getAppIp = function() {
    return this.appIp;
};
var remoteIp = "";
this.setRemoteIp = function(remoteIp) { 
    this.remoteIp = remoteIp;
    return this;
};
this.getRemoteIp = function() {
    return this.remoteIp;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var status = "1";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var errors = "";
this.setErrors = function(errors) { 
    this.errors = errors;
    return this;
};
this.getErrors = function() {
    return this.errors;
};
var zuidAfterReg = "";
this.setZuidAfterReg = function(zuidAfterReg) { 
    this.zuidAfterReg = zuidAfterReg;
    return this;
};
this.getZuidAfterReg = function() {
    return this.zuidAfterReg;
};
var currentZuid = "";
this.setCurrentZuid = function(currentZuid) { 
    this.currentZuid = currentZuid;
    return this;
};
this.getCurrentZuid = function() {
    return this.currentZuid;
};
var getCount = "1";
this.setGetCount = function(getCount) { 
    this.getCount = getCount;
    return this;
};
this.getGetCount = function() {
    return this.getCount;
};
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var idp = "Z";
this.setIdp = function(idp) { 
    this.idp = idp;
    return this;
};
this.getIdp = function() {
    return this.idp;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var endTime = "";
this.setEndTime = function(endTime) { 
    this.endTime = endTime;
    return this;
};
this.getEndTime = function() {
    return this.endTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setRegId(json["reg_id"]);
		this.setAppIp(json["app_ip"]);
		this.setRemoteIp(json["remote_ip"]);
		this.setUserAgent(json["user_agent"]);
		this.setReferrer(json["referrer"]);
		this.setAppName(json["app_name"]);
		this.setStatus(json["status"]);
		this.setErrors(json["errors"]);
		this.setZuidAfterReg(json["zuid_after_reg"]);
		this.setCurrentZuid(json["current_zuid"]);
		this.setGetCount(json["get_count"]);
		this.setEmailId(json["email_id"]);
		this.setIdp(json["idp"]);
		this.setCreatedTime(json["created_time"]);
		this.setEndTime(json["end_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getRegId()) json += '"reg_id"' + ":" + '"' + jsonEscape(this.getRegId())  + '",';
		if(this.getAppIp()) json += '"app_ip"' + ":" + '"' + jsonEscape(this.getAppIp())  + '",';
		if(this.getRemoteIp()) json += '"remote_ip"' + ":" + '"' + jsonEscape(this.getRemoteIp())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getErrors()) json += '"errors"' + ":" + '"' + jsonEscape(this.getErrors())  + '",';
		if(this.getZuidAfterReg()) json += '"zuid_after_reg"' + ":" + '"' + jsonEscape(this.getZuidAfterReg())  + '",';
		if(this.getCurrentZuid()) json += '"current_zuid"' + ":" + '"' + jsonEscape(this.getCurrentZuid())  + '",';
		if(this.getGetCount()) json += '"get_count"' + ":" + '"' + jsonEscape(this.getGetCount())  + '",';
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getIdp()) json += '"idp"' + ":" + '"' + jsonEscape(this.getIdp())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getEndTime()) json += '"end_time"' + ":" + '"' + jsonEscape(this.getEndTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(RegistrationAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.regId && !(/dontdisturb/).test(this.regId)) { throw new ValidationError(_formprefix + "reg_id", ValidationError.PATTERN_FAILED);}
if(this.appIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.appIp)) { throw new ValidationError(_formprefix + "app_ip", ValidationError.PATTERN_FAILED);}
if(this.remoteIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.remoteIp)) { throw new ValidationError(_formprefix + "remote_ip", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.status && !Validator.INTEGER.test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.errors && !(/dontdisturb/).test(this.errors)) { throw new ValidationError(_formprefix + "errors", ValidationError.PATTERN_FAILED);}
if(this.zuidAfterReg && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuidAfterReg)) { throw new ValidationError(_formprefix + "zuid_after_reg", ValidationError.PATTERN_FAILED);}
if(this.currentZuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.currentZuid)) { throw new ValidationError(_formprefix + "current_zuid", ValidationError.PATTERN_FAILED);}
if(this.getCount && !Validator.INTEGER.test(this.getCount)) { throw new ValidationError(_formprefix + "get_count", ValidationError.PATTERN_FAILED);}
if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.endTime && !Validator.INTEGER.test(this.endTime)) { throw new ValidationError(_formprefix + "end_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
RegistrationAudit.path = "registrationaudit";
RegistrationAudit.newBuilder = function() {
    return new RegistrationAudit();
};

InvitationDetails = function() {
    var _formprefix = "";
    
var appaccountInvitationId = "";
this.setAppaccountInvitationId = function(appaccountInvitationId) { 
    this.appaccountInvitationId = appaccountInvitationId;
    return this;
};
this.getAppaccountInvitationId = function() {
    return this.appaccountInvitationId;
};
var zaaid = "";
this.setZaaid = function(zaaid) { 
    this.zaaid = zaaid;
    return this;
};
this.getZaaid = function() {
    return this.zaaid;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var roleName = "";
this.setRoleName = function(roleName) { 
    this.roleName = roleName;
    return this;
};
this.getRoleName = function() {
    return this.roleName;
};
var invitedBy = "";
this.setInvitedBy = function(invitedBy) { 
    this.invitedBy = invitedBy;
    return this;
};
this.getInvitedBy = function() {
    return this.invitedBy;
};
var acceptUrl = "";
this.setAcceptUrl = function(acceptUrl) { 
    this.acceptUrl = acceptUrl;
    return this;
};
this.getAcceptUrl = function() {
    return this.acceptUrl;
};
var rejectUrl = "";
this.setRejectUrl = function(rejectUrl) { 
    this.rejectUrl = rejectUrl;
    return this;
};
this.getRejectUrl = function() {
    return this.rejectUrl;
};
var argsData = "";
this.setArgsData = function(argsData) { 
    this.argsData = argsData;
    return this;
};
this.getArgsData = function() {
    return this.argsData;
};
var status = "1";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var orgRole = "";
this.setOrgRole = function(orgRole) { 
    this.orgRole = orgRole;
    return this;
};
this.getOrgRole = function() {
    return this.orgRole;
};
var resendLimit = "0";
this.setResendLimit = function(resendLimit) { 
    this.resendLimit = resendLimit;
    return this;
};
this.getResendLimit = function() {
    return this.resendLimit;
};
var rejectStatus = "0";
this.setRejectStatus = function(rejectStatus) { 
    this.rejectStatus = rejectStatus;
    return this;
};
this.getRejectStatus = function() {
    return this.rejectStatus;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppaccountInvitationId(json["appaccount_invitation_id"]);
		this.setZaaid(json["zaaid"]);
		this.setAppName(json["app_name"]);
		this.setRoleName(json["role_name"]);
		this.setInvitedBy(json["invited_by"]);
		this.setAcceptUrl(json["accept_url"]);
		this.setRejectUrl(json["reject_url"]);
		this.setArgsData(json["args_data"]);
		this.setStatus(json["status"]);
		this.setOrgRole(json["org_role"]);
		this.setResendLimit(json["resend_limit"]);
		this.setRejectStatus(json["reject_status"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppaccountInvitationId()) json += '"appaccount_invitation_id"' + ":" + '"' + jsonEscape(this.getAppaccountInvitationId())  + '",';
		if(this.getZaaid()) json += '"zaaid"' + ":" + '"' + jsonEscape(this.getZaaid())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getRoleName()) json += '"role_name"' + ":" + '"' + jsonEscape(this.getRoleName())  + '",';
		if(this.getInvitedBy()) json += '"invited_by"' + ":" + '"' + jsonEscape(this.getInvitedBy())  + '",';
		if(this.getAcceptUrl()) json += '"accept_url"' + ":" + '"' + jsonEscape(this.getAcceptUrl())  + '",';
		if(this.getRejectUrl()) json += '"reject_url"' + ":" + '"' + jsonEscape(this.getRejectUrl())  + '",';
		if(this.getArgsData()) json += '"args_data"' + ":" + '"' + jsonEscape(this.getArgsData())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getOrgRole()) json += '"org_role"' + ":" + '"' + jsonEscape(this.getOrgRole())  + '",';
		if(this.getResendLimit()) json += '"resend_limit"' + ":" + '"' + jsonEscape(this.getResendLimit())  + '",';
		if(this.getRejectStatus()) json += '"reject_status"' + ":" + '"' + jsonEscape(this.getRejectStatus())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(InvitationDetails.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.appaccountInvitationId && !(/^[a-zA-Z0-9_\-]+$/).test(this.appaccountInvitationId)) { throw new ValidationError(_formprefix + "appaccount_invitation_id", ValidationError.PATTERN_FAILED);}
if(this.zaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaaid)) { throw new ValidationError(_formprefix + "zaaid", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.roleName && !(/^([a-zA-Z0-9])+$/).test(this.roleName)) { throw new ValidationError(_formprefix + "role_name", ValidationError.PATTERN_FAILED);}
if(this.invitedBy && !(/^[a-zA-Z0-9_\-]+$/).test(this.invitedBy)) { throw new ValidationError(_formprefix + "invited_by", ValidationError.PATTERN_FAILED);}
if(this.acceptUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.acceptUrl)) { throw new ValidationError(_formprefix + "accept_url", ValidationError.PATTERN_FAILED);}
if(this.rejectUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.rejectUrl)) { throw new ValidationError(_formprefix + "reject_url", ValidationError.PATTERN_FAILED);}
if(this.status && !Validator.INTEGER.test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.orgRole && !Validator.INTEGER.test(this.orgRole)) { throw new ValidationError(_formprefix + "org_role", ValidationError.PATTERN_FAILED);}
if(this.resendLimit && !Validator.INTEGER.test(this.resendLimit)) { throw new ValidationError(_formprefix + "resend_limit", ValidationError.PATTERN_FAILED);}
if(this.rejectStatus && !Validator.INTEGER.test(this.rejectStatus)) { throw new ValidationError(_formprefix + "reject_status", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
InvitationDetails.path = "invitationdetails";
InvitationDetails.newBuilder = function() {
    return new InvitationDetails();
};

AppAccountService = function() {
    var _formprefix = "";
    
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var subServiceType = "-1";
this.setSubServiceType = function(subServiceType) { 
    this.subServiceType = subServiceType;
    return this;
};
this.getSubServiceType = function() {
    return this.subServiceType;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var resourceHierarchyId = "";
this.setResourceHierarchyId = function(resourceHierarchyId) { 
    this.resourceHierarchyId = resourceHierarchyId;
    return this;
};
this.getResourceHierarchyId = function() {
    return this.resourceHierarchyId;
};
var roleHierarchyId = "";
this.setRoleHierarchyId = function(roleHierarchyId) { 
    this.roleHierarchyId = roleHierarchyId;
    return this;
};
this.getRoleHierarchyId = function() {
    return this.roleHierarchyId;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var accountStatus = "1";
this.setAccountStatus = function(accountStatus) { 
    this.accountStatus = accountStatus;
    return this;
};
this.getAccountStatus = function() {
    return this.accountStatus;
};
var parentZaaid = "";
this.setParentZaaid = function(parentZaaid) { 
    this.parentZaaid = parentZaaid;
    return this;
};
this.getParentZaaid = function() {
    return this.parentZaaid;
};
var directoryZaaid = "";
this.setDirectoryZaaid = function(directoryZaaid) { 
    this.directoryZaaid = directoryZaaid;
    return this;
};
this.getDirectoryZaaid = function() {
    return this.directoryZaaid;
};
var isExposed = "1";
this.setIsExposed = function(isExposed) { 
    this.isExposed = isExposed;
    return this;
};
this.getIsExposed = function() {
    return this.isExposed;
};
var environment = "1";
this.setEnvironment = function(environment) { 
    this.environment = environment;
    return this;
};
this.getEnvironment = function() {
    return this.environment;
};
var parentOrgType = "";
this.setParentOrgType = function(parentOrgType) { 
    this.parentOrgType = parentOrgType;
    return this;
};
this.getParentOrgType = function() {
    return this.parentOrgType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var accountoauthaccessgrant = undefined;
this.setAccountoauthaccessgrants = function(accountoauthaccessgrant) { 
    this.accountoauthaccessgrant = accountoauthaccessgrant;
    return this;
};
this.getAccountoauthaccessgrants = function() {
    return this.accountoauthaccessgrant;
};
this.addAccountoauthaccessgrant = function(accountoauthaccessgrant) { 
 if(!this.accountoauthaccessgrant) this.accountoauthaccessgrant = new Array(); 
  this.accountoauthaccessgrant.push(accountoauthaccessgrant); 
 return this;
};

var accountmember = undefined;
this.setAccountmembers = function(accountmember) { 
    this.accountmember = accountmember;
    return this;
};
this.getAccountmembers = function() {
    return this.accountmember;
};
this.addAccountmember = function(accountmember) { 
 if(!this.accountmember) this.accountmember = new Array(); 
  this.accountmember.push(accountmember); 
 return this;
};

var appaccountconfiguration = undefined;
this.setAppaccountconfigurations = function(appaccountconfiguration) { 
    this.appaccountconfiguration = appaccountconfiguration;
    return this;
};
this.getAppaccountconfigurations = function() {
    return this.appaccountconfiguration;
};
this.addAppaccountconfiguration = function(appaccountconfiguration) { 
 if(!this.appaccountconfiguration) this.appaccountconfiguration = new Array(); 
  this.appaccountconfiguration.push(appaccountconfiguration); 
 return this;
};

var appaccountlicense = undefined;
this.setAppaccountlicenses = function(appaccountlicense) { 
    this.appaccountlicense = appaccountlicense;
    return this;
};
this.getAppaccountlicenses = function() {
    return this.appaccountlicense;
};
this.addAppaccountlicense = function(appaccountlicense) { 
 if(!this.appaccountlicense) this.appaccountlicense = new Array(); 
  this.appaccountlicense.push(appaccountlicense); 
 return this;
};

var portalaccountmapping = undefined;
this.setPortalaccountmappings = function(portalaccountmapping) { 
    this.portalaccountmapping = portalaccountmapping;
    return this;
};
this.getPortalaccountmappings = function() {
    return this.portalaccountmapping;
};
this.addPortalaccountmapping = function(portalaccountmapping) { 
 if(!this.portalaccountmapping) this.portalaccountmapping = new Array(); 
  this.portalaccountmapping.push(portalaccountmapping); 
 return this;
};

var appaccountinvitationtemplate = undefined;
this.setAppaccountinvitationtemplates = function(appaccountinvitationtemplate) { 
    this.appaccountinvitationtemplate = appaccountinvitationtemplate;
    return this;
};
this.getAppaccountinvitationtemplates = function() {
    return this.appaccountinvitationtemplate;
};
this.addAppaccountinvitationtemplate = function(appaccountinvitationtemplate) { 
 if(!this.appaccountinvitationtemplate) this.appaccountinvitationtemplate = new Array(); 
  this.appaccountinvitationtemplate.push(appaccountinvitationtemplate); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppName(json["app_name"]);
		this.setSubServiceType(json["sub_service_type"]);
		this.setZuid(json["zuid"]);
		this.setResourceHierarchyId(json["resource_hierarchy_id"]);
		this.setRoleHierarchyId(json["role_hierarchy_id"]);
		this.setDescription(json["description"]);
		this.setAccountStatus(json["account_status"]);
		this.setParentZaaid(json["parent_zaaid"]);
		this.setDirectoryZaaid(json["directory_zaaid"]);
		this.setIsExposed(json["is_exposed"]);
		this.setEnvironment(json["environment"]);
		this.setParentOrgType(json["parent_org_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setAccountoauthaccessgrants(URI.getResourceArray(json["accountOAuthAccessGrant"],"accountoauthaccessgrant"));
		this.setAccountmembers(URI.getResourceArray(json["accountMember"],"accountmember"));
		this.setAppaccountconfigurations(URI.getResourceArray(json["appAccountConfiguration"],"appaccountconfiguration"));
		this.setAppaccountlicenses(URI.getResourceArray(json["appAccountLicense"],"appaccountlicense"));
		this.setPortalaccountmappings(URI.getResourceArray(json["portalAccountMapping"],"portalaccountmapping"));
		this.setAppaccountinvitationtemplates(URI.getResourceArray(json["appAccountInvitationTemplate"],"appaccountinvitationtemplate"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getSubServiceType()) json += '"sub_service_type"' + ":" + '"' + jsonEscape(this.getSubServiceType())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getResourceHierarchyId()) json += '"resource_hierarchy_id"' + ":" + '"' + jsonEscape(this.getResourceHierarchyId())  + '",';
		if(this.getRoleHierarchyId()) json += '"role_hierarchy_id"' + ":" + '"' + jsonEscape(this.getRoleHierarchyId())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getAccountStatus()) json += '"account_status"' + ":" + '"' + jsonEscape(this.getAccountStatus())  + '",';
		if(this.getParentZaaid()) json += '"parent_zaaid"' + ":" + '"' + jsonEscape(this.getParentZaaid())  + '",';
		if(this.getDirectoryZaaid()) json += '"directory_zaaid"' + ":" + '"' + jsonEscape(this.getDirectoryZaaid())  + '",';
		if(this.getIsExposed()) json += '"is_exposed"' + ":" + '"' + jsonEscape(this.getIsExposed())  + '",';
		if(this.getEnvironment()) json += '"environment"' + ":" + '"' + jsonEscape(this.getEnvironment())  + '",';
		if(this.getParentOrgType()) json += '"parent_org_type"' + ":" + '"' + jsonEscape(this.getParentOrgType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getAccountoauthaccessgrants()) json += '"accountOAuthAccessGrant"' + ":" + URI.toJSONArray(this.getAccountoauthaccessgrants())  + ',';
		if(this.getAccountmembers()) json += '"accountMember"' + ":" + URI.toJSONArray(this.getAccountmembers())  + ',';
		if(this.getAppaccountconfigurations()) json += '"appAccountConfiguration"' + ":" + URI.toJSONArray(this.getAppaccountconfigurations())  + ',';
		if(this.getAppaccountlicenses()) json += '"appAccountLicense"' + ":" + URI.toJSONArray(this.getAppaccountlicenses())  + ',';
		if(this.getPortalaccountmappings()) json += '"portalAccountMapping"' + ":" + URI.toJSONArray(this.getPortalaccountmappings())  + ',';
		if(this.getAppaccountinvitationtemplates()) json += '"appAccountInvitationTemplate"' + ":" + URI.toJSONArray(this.getAppaccountinvitationtemplates())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccountService.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.subServiceType && !Validator.INTEGER.test(this.subServiceType)) { throw new ValidationError(_formprefix + "sub_service_type", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.resourceHierarchyId && !(/^[a-zA-Z0-9_\-]+$/).test(this.resourceHierarchyId)) { throw new ValidationError(_formprefix + "resource_hierarchy_id", ValidationError.PATTERN_FAILED);}
if(this.roleHierarchyId && !(/^[a-zA-Z0-9_\-]+$/).test(this.roleHierarchyId)) { throw new ValidationError(_formprefix + "role_hierarchy_id", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.accountStatus && !Validator.INTEGER.test(this.accountStatus)) { throw new ValidationError(_formprefix + "account_status", ValidationError.PATTERN_FAILED);}
if(this.parentZaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.parentZaaid)) { throw new ValidationError(_formprefix + "parent_zaaid", ValidationError.PATTERN_FAILED);}
if(this.directoryZaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.directoryZaaid)) { throw new ValidationError(_formprefix + "directory_zaaid", ValidationError.PATTERN_FAILED);}
if(this.isExposed && !Validator.INTEGER.test(this.isExposed)) { throw new ValidationError(_formprefix + "is_exposed", ValidationError.PATTERN_FAILED);}
if(this.environment && !Validator.INTEGER.test(this.environment)) { throw new ValidationError(_formprefix + "environment", ValidationError.PATTERN_FAILED);}
if(this.parentOrgType && !Validator.INTEGER.test(this.parentOrgType)) { throw new ValidationError(_formprefix + "parent_org_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.accountoauthaccessgrant) { for(i=0; i < this.accountoauthaccessgrant.length; i++ ) { this.accountoauthaccessgrant[i].validate(); } }
if(this.accountmember) { for(i=0; i < this.accountmember.length; i++ ) { this.accountmember[i].validate(); } }
if(this.appaccountconfiguration) { for(i=0; i < this.appaccountconfiguration.length; i++ ) { this.appaccountconfiguration[i].validate(); } }
if(this.appaccountlicense) { for(i=0; i < this.appaccountlicense.length; i++ ) { this.appaccountlicense[i].validate(); } }
if(this.portalaccountmapping) { for(i=0; i < this.portalaccountmapping.length; i++ ) { this.portalaccountmapping[i].validate(); } }
if(this.appaccountinvitationtemplate) { for(i=0; i < this.appaccountinvitationtemplate.length; i++ ) { this.appaccountinvitationtemplate[i].validate(); } }

	return this;
    }
}
AppAccountService.path = "appaccountservice";
AppAccountService.newBuilder = function() {
    return new AppAccountService();
};

UserServicePreference = function() {
    var _formprefix = "";
    
var preferenceKey = "";
this.setPreferenceKey = function(preferenceKey) { 
    this.preferenceKey = preferenceKey;
    return this;
};
this.getPreferenceKey = function() {
    return this.preferenceKey;
};
var preferenceValue = "";
this.setPreferenceValue = function(preferenceValue) { 
    this.preferenceValue = preferenceValue;
    return this;
};
this.getPreferenceValue = function() {
    return this.preferenceValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPreferenceKey(json["preference_key"]);
		this.setPreferenceValue(json["preference_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPreferenceKey()) json += '"preference_key"' + ":" + '"' + jsonEscape(this.getPreferenceKey())  + '",';
		if(this.getPreferenceValue()) json += '"preference_value"' + ":" + '"' + jsonEscape(this.getPreferenceValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserServicePreference.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.preferenceKey && !(/^[a-zA-Z0-9_\-]+$/).test(this.preferenceKey)) { throw new ValidationError(_formprefix + "preference_key", ValidationError.PATTERN_FAILED);}
if(this.preferenceValue && !(/^[a-zA-Z0-9_\-]+$/).test(this.preferenceValue)) { throw new ValidationError(_formprefix + "preference_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserServicePreference.path = "userservicepreference";
UserServicePreference.newBuilder = function() {
    return new UserServicePreference();
};

ParentZAID = function() {
    var _formprefix = "";
    
var parentZaid = "";
this.setParentZaid = function(parentZaid) { 
    this.parentZaid = parentZaid;
    return this;
};
this.getParentZaid = function() {
    return this.parentZaid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setParentZaid(json["parent_zaid"]);
		this.setZaid(json["zaid"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getParentZaid()) json += '"parent_zaid"' + ":" + '"' + jsonEscape(this.getParentZaid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ParentZAID.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.parentZaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.parentZaid)) { throw new ValidationError(_formprefix + "parent_zaid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ParentZAID.path = "parentzaid";
ParentZAID.newBuilder = function() {
    return new ParentZAID();
};

Captcha = function() {
    var _formprefix = "";
    
var captchaDigest = "";
this.setCaptchaDigest = function(captchaDigest) { 
    this.captchaDigest = captchaDigest;
    return this;
};
this.getCaptchaDigest = function() {
    return this.captchaDigest;
};
var captchaText = "";
this.setCaptchaText = function(captchaText) { 
    this.captchaText = captchaText;
    return this;
};
this.getCaptchaText = function() {
    return this.captchaText;
};
var difficultyLevel = "1";
this.setDifficultyLevel = function(difficultyLevel) { 
    this.difficultyLevel = difficultyLevel;
    return this;
};
this.getDifficultyLevel = function() {
    return this.difficultyLevel;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setCaptchaDigest(json["captcha_digest"]);
		this.setCaptchaText(json["captcha_text"]);
		this.setDifficultyLevel(json["difficulty_level"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getCaptchaDigest()) json += '"captcha_digest"' + ":" + '"' + jsonEscape(this.getCaptchaDigest())  + '",';
		if(this.getCaptchaText()) json += '"captcha_text"' + ":" + '"' + jsonEscape(this.getCaptchaText())  + '",';
		if(this.getDifficultyLevel()) json += '"difficulty_level"' + ":" + '"' + jsonEscape(this.getDifficultyLevel())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Captcha.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.captchaDigest && !(/^[a-f0-9]+$/).test(this.captchaDigest)) { throw new ValidationError(_formprefix + "captcha_digest", ValidationError.PATTERN_FAILED);}
if(this.captchaText && !(/^([A-Za-z0-9_.\-]+)$/).test(this.captchaText)) { throw new ValidationError(_formprefix + "captcha_text", ValidationError.PATTERN_FAILED);}
if(this.difficultyLevel && !Validator.INTEGER.test(this.difficultyLevel)) { throw new ValidationError(_formprefix + "difficulty_level", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Captcha.path = "captcha";
Captcha.newBuilder = function() {
    return new Captcha();
};

OAuthApiTokenScopes = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var allowedOperations = "";
this.setAllowedOperations = function(allowedOperations) { 
    this.allowedOperations = allowedOperations;
    return this;
};
this.getAllowedOperations = function() {
    return this.allowedOperations;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setAllowedOperations(json["allowed_operations"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getAllowedOperations()) json += '"allowed_operations"' + ":" + '"' + jsonEscape(this.getAllowedOperations())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthApiTokenScopes.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.allowedOperations && !Validator.INTEGER.test(this.allowedOperations)) { throw new ValidationError(_formprefix + "allowed_operations", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthApiTokenScopes.path = "oauthapitokenscopes";
OAuthApiTokenScopes.newBuilder = function() {
    return new OAuthApiTokenScopes();
};

Register = function() {
    var _formprefix = "";
    
var portal = "";
this.setPortal = function(portal) { 
    this.portal = portal;
    return this;
};
this.getPortal = function() {
    return this.portal;
};
var accountType = "";
this.setAccountType = function(accountType) { 
    this.accountType = accountType;
    return this;
};
this.getAccountType = function() {
    return this.accountType;
};
var firstName = "";
this.setFirstName = function(firstName) { 
    this.firstName = firstName;
    return this;
};
this.getFirstName = function() {
    return this.firstName;
};
var lastName = "";
this.setLastName = function(lastName) { 
    this.lastName = lastName;
    return this;
};
this.getLastName = function() {
    return this.lastName;
};
var username = "";
this.setUsername = function(username) { 
    this.username = username;
    return this;
};
this.getUsername = function() {
    return this.username;
};
var email = "";
this.setEmail = function(email) { 
    this.email = email;
    return this;
};
this.getEmail = function() {
    return this.email;
};
var password = "";
this.setPassword = function(password) { 
    this.password = password;
    return this;
};
this.getPassword = function() {
    return this.password;
};
var country = "";
this.setCountry = function(country) { 
    this.country = country;
    return this;
};
this.getCountry = function() {
    return this.country;
};
var language = "";
this.setLanguage = function(language) { 
    this.language = language;
    return this;
};
this.getLanguage = function() {
    return this.language;
};
var timezone = "";
this.setTimezone = function(timezone) { 
    this.timezone = timezone;
    return this;
};
this.getTimezone = function() {
    return this.timezone;
};
var acceptTos = "";
this.setAcceptTos = function(acceptTos) { 
    this.acceptTos = acceptTos;
    return this;
};
this.getAcceptTos = function() {
    return this.acceptTos;
};
var newsletter = "";
this.setNewsletter = function(newsletter) { 
    this.newsletter = newsletter;
    return this;
};
this.getNewsletter = function() {
    return this.newsletter;
};
var resourceParams = "";
this.setResourceParams = function(resourceParams) { 
    this.resourceParams = resourceParams;
    return this;
};
this.getResourceParams = function() {
    return this.resourceParams;
};
var idp = "";
this.setIdp = function(idp) { 
    this.idp = idp;
    return this;
};
this.getIdp = function() {
    return this.idp;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var authtoken = "";
this.setAuthtoken = function(authtoken) { 
    this.authtoken = authtoken;
    return this;
};
this.getAuthtoken = function() {
    return this.authtoken;
};
var tokenType = "";
this.setTokenType = function(tokenType) { 
    this.tokenType = tokenType;
    return this;
};
this.getTokenType = function() {
    return this.tokenType;
};
var redirectUri = "";
this.setRedirectUri = function(redirectUri) { 
    this.redirectUri = redirectUri;
    return this;
};
this.getRedirectUri = function() {
    return this.redirectUri;
};
var tokenParams = "";
this.setTokenParams = function(tokenParams) { 
    this.tokenParams = tokenParams;
    return this;
};
this.getTokenParams = function() {
    return this.tokenParams;
};
var oauthorizeUri = "";
this.setOauthorizeUri = function(oauthorizeUri) { 
    this.oauthorizeUri = oauthorizeUri;
    return this;
};
this.getOauthorizeUri = function() {
    return this.oauthorizeUri;
};
var mobile = "";
this.setMobile = function(mobile) { 
    this.mobile = mobile;
    return this;
};
this.getMobile = function() {
    return this.mobile;
};
var recoveryMobile = "";
this.setRecoveryMobile = function(recoveryMobile) { 
    this.recoveryMobile = recoveryMobile;
    return this;
};
this.getRecoveryMobile = function() {
    return this.recoveryMobile;
};
var showconfirmpage = "";
this.setShowconfirmpage = function(showconfirmpage) { 
    this.showconfirmpage = showconfirmpage;
    return this;
};
this.getShowconfirmpage = function() {
    return this.showconfirmpage;
};
var countryState = "";
this.setCountryState = function(countryState) { 
    this.countryState = countryState;
    return this;
};
this.getCountryState = function() {
    return this.countryState;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPortal(json["portal"]);
		this.setAccountType(json["account_type"]);
		this.setFirstName(json["first_name"]);
		this.setLastName(json["last_name"]);
		this.setUsername(json["username"]);
		this.setEmail(json["email"]);
		this.setPassword(json["password"]);
		this.setCountry(json["country"]);
		this.setLanguage(json["language"]);
		this.setTimezone(json["timezone"]);
		this.setAcceptTos(json["accept_tos"]);
		this.setNewsletter(json["newsletter"]);
		this.setResourceParams(json["resource_params"]);
		this.setIdp(json["idp"]);
		this.setZaid(json["zaid"]);
		this.setZuid(json["zuid"]);
		this.setAuthtoken(json["authtoken"]);
		this.setTokenType(json["token_type"]);
		this.setRedirectUri(json["redirect_uri"]);
		this.setTokenParams(json["token_params"]);
		this.setOauthorizeUri(json["oauthorize_uri"]);
		this.setMobile(json["mobile"]);
		this.setRecoveryMobile(json["recovery_mobile"]);
		this.setShowconfirmpage(json["showconfirmpage"]);
		this.setCountryState(json["country_state"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPortal()) json += '"portal"' + ":" + '"' + jsonEscape(this.getPortal())  + '",';
		if(this.getAccountType()) json += '"account_type"' + ":" + '"' + jsonEscape(this.getAccountType())  + '",';
		if(this.getFirstName()) json += '"first_name"' + ":" + '"' + jsonEscape(this.getFirstName())  + '",';
		if(this.getLastName()) json += '"last_name"' + ":" + '"' + jsonEscape(this.getLastName())  + '",';
		if(this.getUsername()) json += '"username"' + ":" + '"' + jsonEscape(this.getUsername())  + '",';
		if(this.getEmail()) json += '"email"' + ":" + '"' + jsonEscape(this.getEmail())  + '",';
		if(this.getPassword()) json += '"password"' + ":" + '"' + jsonEscape(this.getPassword())  + '",';
		if(this.getCountry()) json += '"country"' + ":" + '"' + jsonEscape(this.getCountry())  + '",';
		if(this.getLanguage()) json += '"language"' + ":" + '"' + jsonEscape(this.getLanguage())  + '",';
		if(this.getTimezone()) json += '"timezone"' + ":" + '"' + jsonEscape(this.getTimezone())  + '",';
		if(this.getAcceptTos()) json += '"accept_tos"' + ":" + '"' + jsonEscape(this.getAcceptTos())  + '",';
		if(this.getNewsletter()) json += '"newsletter"' + ":" + '"' + jsonEscape(this.getNewsletter())  + '",';
		if(this.getResourceParams()) json += '"resource_params"' + ":" + '"' + jsonEscape(this.getResourceParams())  + '",';
		if(this.getIdp()) json += '"idp"' + ":" + '"' + jsonEscape(this.getIdp())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getAuthtoken()) json += '"authtoken"' + ":" + '"' + jsonEscape(this.getAuthtoken())  + '",';
		if(this.getTokenType()) json += '"token_type"' + ":" + '"' + jsonEscape(this.getTokenType())  + '",';
		if(this.getRedirectUri()) json += '"redirect_uri"' + ":" + '"' + jsonEscape(this.getRedirectUri())  + '",';
		if(this.getTokenParams()) json += '"token_params"' + ":" + '"' + jsonEscape(this.getTokenParams())  + '",';
		if(this.getOauthorizeUri()) json += '"oauthorize_uri"' + ":" + '"' + jsonEscape(this.getOauthorizeUri())  + '",';
		if(this.getMobile()) json += '"mobile"' + ":" + '"' + jsonEscape(this.getMobile())  + '",';
		if(this.getRecoveryMobile()) json += '"recovery_mobile"' + ":" + '"' + jsonEscape(this.getRecoveryMobile())  + '",';
		if(this.getShowconfirmpage()) json += '"showconfirmpage"' + ":" + '"' + jsonEscape(this.getShowconfirmpage())  + '",';
		if(this.getCountryState()) json += '"country_state"' + ":" + '"' + jsonEscape(this.getCountryState())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Register.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.acceptTos && !Validator.BOOLEAN.test(this.acceptTos)) { throw new ValidationError(_formprefix + "accept_tos", ValidationError.PATTERN_FAILED);}
if(this.newsletter && !Validator.BOOLEAN.test(this.newsletter)) { throw new ValidationError(_formprefix + "newsletter", ValidationError.PATTERN_FAILED);}
if(this.idp && !Validator.INTEGER.test(this.idp)) { throw new ValidationError(_formprefix + "idp", ValidationError.PATTERN_FAILED);}
if(this.showconfirmpage && !Validator.BOOLEAN.test(this.showconfirmpage)) { throw new ValidationError(_formprefix + "showconfirmpage", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Register.path = "register";
Register.newBuilder = function() {
    return new Register();
};

MFAPolicy = function() {
    var _formprefix = "";
    
var enable = "0";
this.setEnable = function(enable) { 
    this.enable = enable;
    return this;
};
this.getEnable = function() {
    return this.enable;
};
var allowedModes = "";
this.setAllowedModes = function(allowedModes) { 
    this.allowedModes = allowedModes;
    return this;
};
this.getAllowedModes = function() {
    return this.allowedModes;
};
var restrictBackup = "false";
this.setRestrictBackup = function(restrictBackup) { 
    this.restrictBackup = restrictBackup;
    return this;
};
this.getRestrictBackup = function() {
    return this.restrictBackup;
};
var restrictChangeMode = "false";
this.setRestrictChangeMode = function(restrictChangeMode) { 
    this.restrictChangeMode = restrictChangeMode;
    return this;
};
this.getRestrictChangeMode = function() {
    return this.restrictChangeMode;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var restrictTrustMfaSession = "false";
this.setRestrictTrustMfaSession = function(restrictTrustMfaSession) { 
    this.restrictTrustMfaSession = restrictTrustMfaSession;
    return this;
};
this.getRestrictTrustMfaSession = function() {
    return this.restrictTrustMfaSession;
};
var isPasswordLessEnabled = "true";
this.setIsPasswordLessEnabled = function(isPasswordLessEnabled) { 
    this.isPasswordLessEnabled = isPasswordLessEnabled;
    return this;
};
this.getIsPasswordLessEnabled = function() {
    return this.isPasswordLessEnabled;
};
var trustMfaSessionValidity = "-1";
this.setTrustMfaSessionValidity = function(trustMfaSessionValidity) { 
    this.trustMfaSessionValidity = trustMfaSessionValidity;
    return this;
};
this.getTrustMfaSessionValidity = function() {
    return this.trustMfaSessionValidity;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setEnable(json["enable"]);
		this.setAllowedModes(json["allowed_modes"]);
		this.setRestrictBackup(json["restrict_backup"]);
		this.setRestrictChangeMode(json["restrict_change_mode"]);
		this.setModifiedTime(json["modified_time"]);
		this.setRestrictTrustMfaSession(json["restrict_trust_mfa_session"]);
		this.setIsPasswordLessEnabled(json["is_password_less_enabled"]);
		this.setTrustMfaSessionValidity(json["trust_mfa_session_validity"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getEnable()) json += '"enable"' + ":" + '"' + jsonEscape(this.getEnable())  + '",';
		if(this.getAllowedModes()) json += '"allowed_modes"' + ":" + '"' + jsonEscape(this.getAllowedModes())  + '",';
		if(this.getRestrictBackup()) json += '"restrict_backup"' + ":" + '"' + jsonEscape(this.getRestrictBackup())  + '",';
		if(this.getRestrictChangeMode()) json += '"restrict_change_mode"' + ":" + '"' + jsonEscape(this.getRestrictChangeMode())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getRestrictTrustMfaSession()) json += '"restrict_trust_mfa_session"' + ":" + '"' + jsonEscape(this.getRestrictTrustMfaSession())  + '",';
		if(this.getIsPasswordLessEnabled()) json += '"is_password_less_enabled"' + ":" + '"' + jsonEscape(this.getIsPasswordLessEnabled())  + '",';
		if(this.getTrustMfaSessionValidity()) json += '"trust_mfa_session_validity"' + ":" + '"' + jsonEscape(this.getTrustMfaSessionValidity())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MFAPolicy.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.enable && !Validator.INTEGER.test(this.enable)) { throw new ValidationError(_formprefix + "enable", ValidationError.PATTERN_FAILED);}
if(this.allowedModes && !(/^([A-Za-z0-9_.\-]+)$/).test(this.allowedModes)) { throw new ValidationError(_formprefix + "allowed_modes", ValidationError.PATTERN_FAILED);}
if(this.restrictBackup && !Validator.BOOLEAN.test(this.restrictBackup)) { throw new ValidationError(_formprefix + "restrict_backup", ValidationError.PATTERN_FAILED);}
if(this.restrictChangeMode && !Validator.BOOLEAN.test(this.restrictChangeMode)) { throw new ValidationError(_formprefix + "restrict_change_mode", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.restrictTrustMfaSession && !Validator.BOOLEAN.test(this.restrictTrustMfaSession)) { throw new ValidationError(_formprefix + "restrict_trust_mfa_session", ValidationError.PATTERN_FAILED);}
if(this.isPasswordLessEnabled && !Validator.BOOLEAN.test(this.isPasswordLessEnabled)) { throw new ValidationError(_formprefix + "is_password_less_enabled", ValidationError.PATTERN_FAILED);}
if(this.trustMfaSessionValidity && !Validator.INTEGER.test(this.trustMfaSessionValidity)) { throw new ValidationError(_formprefix + "trust_mfa_session_validity", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
MFAPolicy.path = "mfapolicy";
MFAPolicy.newBuilder = function() {
    return new MFAPolicy();
};

OAuthDeviceTokenScopes = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var allowedOperations = "";
this.setAllowedOperations = function(allowedOperations) { 
    this.allowedOperations = allowedOperations;
    return this;
};
this.getAllowedOperations = function() {
    return this.allowedOperations;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setAllowedOperations(json["allowed_operations"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getAllowedOperations()) json += '"allowed_operations"' + ":" + '"' + jsonEscape(this.getAllowedOperations())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthDeviceTokenScopes.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.allowedOperations && !Validator.INTEGER.test(this.allowedOperations)) { throw new ValidationError(_formprefix + "allowed_operations", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthDeviceTokenScopes.path = "oauthdevicetokenscopes";
OAuthDeviceTokenScopes.newBuilder = function() {
    return new OAuthDeviceTokenScopes();
};

APIAudit = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var screenName = "";
this.setScreenName = function(screenName) { 
    this.screenName = screenName;
    return this;
};
this.getScreenName = function() {
    return this.screenName;
};
var operation = "";
this.setOperation = function(operation) { 
    this.operation = operation;
    return this;
};
this.getOperation = function() {
    return this.operation;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var tokenDigest = "";
this.setTokenDigest = function(tokenDigest) { 
    this.tokenDigest = tokenDigest;
    return this;
};
this.getTokenDigest = function() {
    return this.tokenDigest;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setZuid(json["zuid"]);
		this.setAppName(json["app_name"]);
		this.setScreenName(json["screen_name"]);
		this.setOperation(json["operation"]);
		this.setIpAddress(json["ip_address"]);
		this.setReferrer(json["referrer"]);
		this.setTokenDigest(json["token_digest"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getScreenName()) json += '"screen_name"' + ":" + '"' + jsonEscape(this.getScreenName())  + '",';
		if(this.getOperation()) json += '"operation"' + ":" + '"' + jsonEscape(this.getOperation())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getTokenDigest()) json += '"token_digest"' + ":" + '"' + jsonEscape(this.getTokenDigest())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(APIAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.screenName && !(/^([\p{L}\p{M}\p{N}\_\.]+)|[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.screenName)) { throw new ValidationError(_formprefix + "screen_name", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.tokenDigest && !(/dontdisturb/).test(this.tokenDigest)) { throw new ValidationError(_formprefix + "token_digest", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
APIAudit.path = "apiaudit";
APIAudit.newBuilder = function() {
    return new APIAudit();
};

IpAddress = function() {
    var _formprefix = "";
    
var ipId = "";
this.setIpId = function(ipId) { 
    this.ipId = ipId;
    return this;
};
this.getIpId = function() {
    return this.ipId;
};
var ipName = "";
this.setIpName = function(ipName) { 
    this.ipName = ipName;
    return this;
};
this.getIpName = function() {
    return this.ipName;
};
var fromIp = "";
this.setFromIp = function(fromIp) { 
    this.fromIp = fromIp;
    return this;
};
this.getFromIp = function() {
    return this.fromIp;
};
var toIp = "";
this.setToIp = function(toIp) { 
    this.toIp = toIp;
    return this;
};
this.getToIp = function() {
    return this.toIp;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setIpId(json["ip_id"]);
		this.setIpName(json["ip_name"]);
		this.setFromIp(json["from_ip"]);
		this.setToIp(json["to_ip"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getIpId()) json += '"ip_id"' + ":" + '"' + jsonEscape(this.getIpId())  + '",';
		if(this.getIpName()) json += '"ip_name"' + ":" + '"' + jsonEscape(this.getIpName())  + '",';
		if(this.getFromIp()) json += '"from_ip"' + ":" + '"' + jsonEscape(this.getFromIp())  + '",';
		if(this.getToIp()) json += '"to_ip"' + ":" + '"' + jsonEscape(this.getToIp())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(IpAddress.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.fromIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.fromIp)) { throw new ValidationError(_formprefix + "from_ip", ValidationError.PATTERN_FAILED);}
if(this.toIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.toIp)) { throw new ValidationError(_formprefix + "to_ip", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
IpAddress.path = "ipaddress";
IpAddress.newBuilder = function() {
    return new IpAddress();
};

OAuthAllowedClients = function() {
    var _formprefix = "";
    
var allowedClientZid = "";
this.setAllowedClientZid = function(allowedClientZid) { 
    this.allowedClientZid = allowedClientZid;
    return this;
};
this.getAllowedClientZid = function() {
    return this.allowedClientZid;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAllowedClientZid(json["allowed_client_zid"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAllowedClientZid()) json += '"allowed_client_zid"' + ":" + '"' + jsonEscape(this.getAllowedClientZid())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthAllowedClients.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.allowedClientZid && !(/^[0-9]+\.[0-9]+$/).test(this.allowedClientZid)) { throw new ValidationError(_formprefix + "allowed_client_zid", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthAllowedClients.path = "oauthallowedclients";
OAuthAllowedClients.newBuilder = function() {
    return new OAuthAllowedClients();
};

TFAAudit = function() {
    var _formprefix = "";
    
var tfaauditId = "";
this.setTfaauditId = function(tfaauditId) { 
    this.tfaauditId = tfaauditId;
    return this;
};
this.getTfaauditId = function() {
    return this.tfaauditId;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var operation = "1";
this.setOperation = function(operation) { 
    this.operation = operation;
    return this;
};
this.getOperation = function() {
    return this.operation;
};
var status = "";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var errors = "";
this.setErrors = function(errors) { 
    this.errors = errors;
    return this;
};
this.getErrors = function() {
    return this.errors;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var startedTime = "";
this.setStartedTime = function(startedTime) { 
    this.startedTime = startedTime;
    return this;
};
this.getStartedTime = function() {
    return this.startedTime;
};
var alteredTime = "";
this.setAlteredTime = function(alteredTime) { 
    this.alteredTime = alteredTime;
    return this;
};
this.getAlteredTime = function() {
    return this.alteredTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTfaauditId(json["tfaaudit_id"]);
		this.setZaid(json["zaid"]);
		this.setZid(json["zid"]);
		this.setAppName(json["app_name"]);
		this.setOperation(json["operation"]);
		this.setStatus(json["status"]);
		this.setErrors(json["errors"]);
		this.setUserAgent(json["user_agent"]);
		this.setReferrer(json["referrer"]);
		this.setStartedTime(json["started_time"]);
		this.setAlteredTime(json["altered_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTfaauditId()) json += '"tfaaudit_id"' + ":" + '"' + jsonEscape(this.getTfaauditId())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getOperation()) json += '"operation"' + ":" + '"' + jsonEscape(this.getOperation())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getErrors()) json += '"errors"' + ":" + '"' + jsonEscape(this.getErrors())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getStartedTime()) json += '"started_time"' + ":" + '"' + jsonEscape(this.getStartedTime())  + '",';
		if(this.getAlteredTime()) json += '"altered_time"' + ":" + '"' + jsonEscape(this.getAlteredTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(TFAAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.tfaauditId && !(/dontdisturb/).test(this.tfaauditId)) { throw new ValidationError(_formprefix + "tfaaudit_id", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.operation && !Validator.INTEGER.test(this.operation)) { throw new ValidationError(_formprefix + "operation", ValidationError.PATTERN_FAILED);}
if(this.status && !(/dontdisturb/).test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.errors && !(/dontdisturb/).test(this.errors)) { throw new ValidationError(_formprefix + "errors", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.startedTime && !Validator.INTEGER.test(this.startedTime)) { throw new ValidationError(_formprefix + "started_time", ValidationError.PATTERN_FAILED);}
if(this.alteredTime && !Validator.INTEGER.test(this.alteredTime)) { throw new ValidationError(_formprefix + "altered_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
TFAAudit.path = "tfaaudit";
TFAAudit.newBuilder = function() {
    return new TFAAudit();
};

Email = function() {
    var _formprefix = "";
    
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setEmailId(json["email_id"]);
		this.setZuid(json["zuid"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Email.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Email.path = "email";
Email.newBuilder = function() {
    return new Email();
};

SignInFailedAudit = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var loginId = "";
this.setLoginId = function(loginId) { 
    this.loginId = loginId;
    return this;
};
this.getLoginId = function() {
    return this.loginId;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var errorCode = "";
this.setErrorCode = function(errorCode) { 
    this.errorCode = errorCode;
    return this;
};
this.getErrorCode = function() {
    return this.errorCode;
};
var country = "";
this.setCountry = function(country) { 
    this.country = country;
    return this;
};
this.getCountry = function() {
    return this.country;
};
var requestType = "";
this.setRequestType = function(requestType) { 
    this.requestType = requestType;
    return this;
};
this.getRequestType = function() {
    return this.requestType;
};
var signinId = "";
this.setSigninId = function(signinId) { 
    this.signinId = signinId;
    return this;
};
this.getSigninId = function() {
    return this.signinId;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setLoginId(json["login_id"]);
		this.setZuid(json["zuid"]);
		this.setIpAddress(json["ip_address"]);
		this.setAppName(json["app_name"]);
		this.setReferrer(json["referrer"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);
		this.setErrorCode(json["error_code"]);
		this.setCountry(json["country"]);
		this.setRequestType(json["request_type"]);
		this.setSigninId(json["signin_id"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getLoginId()) json += '"login_id"' + ":" + '"' + jsonEscape(this.getLoginId())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getErrorCode()) json += '"error_code"' + ":" + '"' + jsonEscape(this.getErrorCode())  + '",';
		if(this.getCountry()) json += '"country"' + ":" + '"' + jsonEscape(this.getCountry())  + '",';
		if(this.getRequestType()) json += '"request_type"' + ":" + '"' + jsonEscape(this.getRequestType())  + '",';
		if(this.getSigninId()) json += '"signin_id"' + ":" + '"' + jsonEscape(this.getSigninId())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SignInFailedAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.loginId && !(/^([\p{L}\p{M}\p{N}\_\.]+)|[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.loginId)) { throw new ValidationError(_formprefix + "login_id", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.country && !(/^[a-zA-Z0-9]{2,5}$/).test(this.country)) { throw new ValidationError(_formprefix + "country", ValidationError.PATTERN_FAILED);}
if(this.signinId && !(/dontdisturb/).test(this.signinId)) { throw new ValidationError(_formprefix + "signin_id", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SignInFailedAudit.path = "signinfailedaudit";
SignInFailedAudit.newBuilder = function() {
    return new SignInFailedAudit();
};

ClientPortalOrgType = function() {
    var _formprefix = "";
    
var orgType = "";
this.setOrgType = function(orgType) { 
    this.orgType = orgType;
    return this;
};
this.getOrgType = function() {
    return this.orgType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var portalmapping = undefined;
this.setPortalmappings = function(portalmapping) { 
    this.portalmapping = portalmapping;
    return this;
};
this.getPortalmappings = function() {
    return this.portalmapping;
};
this.addPortalmapping = function(portalmapping) { 
 if(!this.portalmapping) this.portalmapping = new Array(); 
  this.portalmapping.push(portalmapping); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setOrgType(json["org_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setPortalmappings(URI.getResourceArray(json["portalMapping"],"portalmapping"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getOrgType()) json += '"org_type"' + ":" + '"' + jsonEscape(this.getOrgType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getPortalmappings()) json += '"portalMapping"' + ":" + URI.toJSONArray(this.getPortalmappings())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ClientPortalOrgType.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.orgType && !Validator.INTEGER.test(this.orgType)) { throw new ValidationError(_formprefix + "org_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.portalmapping) { for(i=0; i < this.portalmapping.length; i++ ) { this.portalmapping[i].validate(); } }

	return this;
    }
}
ClientPortalOrgType.path = "clientportalorgtype";
ClientPortalOrgType.newBuilder = function() {
    return new ClientPortalOrgType();
};

PortalMapping = function() {
    var _formprefix = "";
    
var zaaid = "";
this.setZaaid = function(zaaid) { 
    this.zaaid = zaaid;
    return this;
};
this.getZaaid = function() {
    return this.zaaid;
};
var mappingType = "";
this.setMappingType = function(mappingType) { 
    this.mappingType = mappingType;
    return this;
};
this.getMappingType = function() {
    return this.mappingType;
};
var mappingKey = "";
this.setMappingKey = function(mappingKey) { 
    this.mappingKey = mappingKey;
    return this;
};
this.getMappingKey = function() {
    return this.mappingKey;
};
var mappingValue = "";
this.setMappingValue = function(mappingValue) { 
    this.mappingValue = mappingValue;
    return this;
};
this.getMappingValue = function() {
    return this.mappingValue;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZaaid(json["zaaid"]);
		this.setMappingType(json["mapping_type"]);
		this.setMappingKey(json["mapping_key"]);
		this.setMappingValue(json["mapping_value"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZaaid()) json += '"zaaid"' + ":" + '"' + jsonEscape(this.getZaaid())  + '",';
		if(this.getMappingType()) json += '"mapping_type"' + ":" + '"' + jsonEscape(this.getMappingType())  + '",';
		if(this.getMappingKey()) json += '"mapping_key"' + ":" + '"' + jsonEscape(this.getMappingKey())  + '",';
		if(this.getMappingValue()) json += '"mapping_value"' + ":" + '"' + jsonEscape(this.getMappingValue())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(PortalMapping.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaaid)) { throw new ValidationError(_formprefix + "zaaid", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
PortalMapping.path = "portalmapping";
PortalMapping.newBuilder = function() {
    return new PortalMapping();
};

OAuthDCDigest = function() {
    var _formprefix = "";
    
var digest = "";
this.setDigest = function(digest) { 
    this.digest = digest;
    return this;
};
this.getDigest = function() {
    return this.digest;
};
var location = "";
this.setLocation = function(location) { 
    this.location = location;
    return this;
};
this.getLocation = function() {
    return this.location;
};
var validUpto = "";
this.setValidUpto = function(validUpto) { 
    this.validUpto = validUpto;
    return this;
};
this.getValidUpto = function() {
    return this.validUpto;
};
var isValidated = "false";
this.setIsValidated = function(isValidated) { 
    this.isValidated = isValidated;
    return this;
};
this.getIsValidated = function() {
    return this.isValidated;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDigest(json["digest"]);
		this.setLocation(json["location"]);
		this.setValidUpto(json["valid_upto"]);
		this.setIsValidated(json["is_validated"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDigest()) json += '"digest"' + ":" + '"' + jsonEscape(this.getDigest())  + '",';
		if(this.getLocation()) json += '"location"' + ":" + '"' + jsonEscape(this.getLocation())  + '",';
		if(this.getValidUpto()) json += '"valid_upto"' + ":" + '"' + jsonEscape(this.getValidUpto())  + '",';
		if(this.getIsValidated()) json += '"is_validated"' + ":" + '"' + jsonEscape(this.getIsValidated())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthDCDigest.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.validUpto && !Validator.INTEGER.test(this.validUpto)) { throw new ValidationError(_formprefix + "valid_upto", ValidationError.PATTERN_FAILED);}
if(this.isValidated && !Validator.BOOLEAN.test(this.isValidated)) { throw new ValidationError(_formprefix + "is_validated", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthDCDigest.path = "oauthdcdigest";
OAuthDCDigest.newBuilder = function() {
    return new OAuthDCDigest();
};

OAuthDeviceTokenOrgInfo = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidtype = "";
this.setZidtype = function(zidtype) { 
    this.zidtype = zidtype;
    return this;
};
this.getZidtype = function() {
    return this.zidtype;
};
var serviceName = "";
this.setServiceName = function(serviceName) { 
    this.serviceName = serviceName;
    return this;
};
this.getServiceName = function() {
    return this.serviceName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidtype(json["zidtype"]);
		this.setServiceName(json["service_name"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidtype()) json += '"zidtype"' + ":" + '"' + jsonEscape(this.getZidtype())  + '",';
		if(this.getServiceName()) json += '"service_name"' + ":" + '"' + jsonEscape(this.getServiceName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthDeviceTokenOrgInfo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.zidtype && !Validator.INTEGER.test(this.zidtype)) { throw new ValidationError(_formprefix + "zidtype", ValidationError.PATTERN_FAILED);}
if(this.serviceName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.serviceName)) { throw new ValidationError(_formprefix + "service_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthDeviceTokenOrgInfo.path = "oauthdevicetokenorginfo";
OAuthDeviceTokenOrgInfo.newBuilder = function() {
    return new OAuthDeviceTokenOrgInfo();
};

ResourceMapping = function() {
    var _formprefix = "";
    
var resourceMappingActionId = "";
this.setResourceMappingActionId = function(resourceMappingActionId) { 
    this.resourceMappingActionId = resourceMappingActionId;
    return this;
};
this.getResourceMappingActionId = function() {
    return this.resourceMappingActionId;
};
var destinationColumnName = "";
this.setDestinationColumnName = function(destinationColumnName) { 
    this.destinationColumnName = destinationColumnName;
    return this;
};
this.getDestinationColumnName = function() {
    return this.destinationColumnName;
};
var srcColumnName = "";
this.setSrcColumnName = function(srcColumnName) { 
    this.srcColumnName = srcColumnName;
    return this;
};
this.getSrcColumnName = function() {
    return this.srcColumnName;
};
var defaultValue = "";
this.setDefaultValue = function(defaultValue) { 
    this.defaultValue = defaultValue;
    return this;
};
this.getDefaultValue = function() {
    return this.defaultValue;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setResourceMappingActionId(json["resource_mapping_action_id"]);
		this.setDestinationColumnName(json["destination_column_name"]);
		this.setSrcColumnName(json["src_column_name"]);
		this.setDefaultValue(json["default_value"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getResourceMappingActionId()) json += '"resource_mapping_action_id"' + ":" + '"' + jsonEscape(this.getResourceMappingActionId())  + '",';
		if(this.getDestinationColumnName()) json += '"destination_column_name"' + ":" + '"' + jsonEscape(this.getDestinationColumnName())  + '",';
		if(this.getSrcColumnName()) json += '"src_column_name"' + ":" + '"' + jsonEscape(this.getSrcColumnName())  + '",';
		if(this.getDefaultValue()) json += '"default_value"' + ":" + '"' + jsonEscape(this.getDefaultValue())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ResourceMapping.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ResourceMapping.path = "resourcemapping";
ResourceMapping.newBuilder = function() {
    return new ResourceMapping();
};

UserSigninUserAgent = function() {
    var _formprefix = "";
    
var userAgentId = "";
this.setUserAgentId = function(userAgentId) { 
    this.userAgentId = userAgentId;
    return this;
};
this.getUserAgentId = function() {
    return this.userAgentId;
};
var device = "";
this.setDevice = function(device) { 
    this.device = device;
    return this;
};
this.getDevice = function() {
    return this.device;
};
var browser = "";
this.setBrowser = function(browser) { 
    this.browser = browser;
    return this;
};
this.getBrowser = function() {
    return this.browser;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var lastAccessedTime = "";
this.setLastAccessedTime = function(lastAccessedTime) { 
    this.lastAccessedTime = lastAccessedTime;
    return this;
};
this.getLastAccessedTime = function() {
    return this.lastAccessedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setUserAgentId(json["user_agent_id"]);
		this.setDevice(json["device"]);
		this.setBrowser(json["browser"]);
		this.setUserAgent(json["user_agent"]);
		this.setLastAccessedTime(json["last_accessed_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getUserAgentId()) json += '"user_agent_id"' + ":" + '"' + jsonEscape(this.getUserAgentId())  + '",';
		if(this.getDevice()) json += '"device"' + ":" + '"' + jsonEscape(this.getDevice())  + '",';
		if(this.getBrowser()) json += '"browser"' + ":" + '"' + jsonEscape(this.getBrowser())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getLastAccessedTime()) json += '"last_accessed_time"' + ":" + '"' + jsonEscape(this.getLastAccessedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserSigninUserAgent.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.userAgentId && !Validator.INTEGER.test(this.userAgentId)) { throw new ValidationError(_formprefix + "user_agent_id", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/xss:throwerror/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.lastAccessedTime && !Validator.INTEGER.test(this.lastAccessedTime)) { throw new ValidationError(_formprefix + "last_accessed_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserSigninUserAgent.path = "usersigninuseragent";
UserSigninUserAgent.newBuilder = function() {
    return new UserSigninUserAgent();
};

MFAAudit = function() {
    var _formprefix = "";
    
var mfaauditId = "";
this.setMfaauditId = function(mfaauditId) { 
    this.mfaauditId = mfaauditId;
    return this;
};
this.getMfaauditId = function() {
    return this.mfaauditId;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var operation = "1";
this.setOperation = function(operation) { 
    this.operation = operation;
    return this;
};
this.getOperation = function() {
    return this.operation;
};
var status = "";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var errors = "";
this.setErrors = function(errors) { 
    this.errors = errors;
    return this;
};
this.getErrors = function() {
    return this.errors;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var deviceToken = "";
this.setDeviceToken = function(deviceToken) { 
    this.deviceToken = deviceToken;
    return this;
};
this.getDeviceToken = function() {
    return this.deviceToken;
};
var deviceName = "";
this.setDeviceName = function(deviceName) { 
    this.deviceName = deviceName;
    return this;
};
this.getDeviceName = function() {
    return this.deviceName;
};
var location = "";
this.setLocation = function(location) { 
    this.location = location;
    return this;
};
this.getLocation = function() {
    return this.location;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var startedTime = "";
this.setStartedTime = function(startedTime) { 
    this.startedTime = startedTime;
    return this;
};
this.getStartedTime = function() {
    return this.startedTime;
};
var alteredTime = "";
this.setAlteredTime = function(alteredTime) { 
    this.alteredTime = alteredTime;
    return this;
};
this.getAlteredTime = function() {
    return this.alteredTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setMfaauditId(json["mfaaudit_id"]);
		this.setZuid(json["zuid"]);
		this.setOperation(json["operation"]);
		this.setStatus(json["status"]);
		this.setErrors(json["errors"]);
		this.setUserAgent(json["user_agent"]);
		this.setDeviceToken(json["device_token"]);
		this.setDeviceName(json["device_name"]);
		this.setLocation(json["location"]);
		this.setReferrer(json["referrer"]);
		this.setStartedTime(json["started_time"]);
		this.setAlteredTime(json["altered_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getMfaauditId()) json += '"mfaaudit_id"' + ":" + '"' + jsonEscape(this.getMfaauditId())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getOperation()) json += '"operation"' + ":" + '"' + jsonEscape(this.getOperation())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getErrors()) json += '"errors"' + ":" + '"' + jsonEscape(this.getErrors())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getDeviceToken()) json += '"device_token"' + ":" + '"' + jsonEscape(this.getDeviceToken())  + '",';
		if(this.getDeviceName()) json += '"device_name"' + ":" + '"' + jsonEscape(this.getDeviceName())  + '",';
		if(this.getLocation()) json += '"location"' + ":" + '"' + jsonEscape(this.getLocation())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getStartedTime()) json += '"started_time"' + ":" + '"' + jsonEscape(this.getStartedTime())  + '",';
		if(this.getAlteredTime()) json += '"altered_time"' + ":" + '"' + jsonEscape(this.getAlteredTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MFAAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.mfaauditId && !(/^([A-Za-z0-9_.\-]+)$/).test(this.mfaauditId)) { throw new ValidationError(_formprefix + "mfaaudit_id", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.operation && !Validator.INTEGER.test(this.operation)) { throw new ValidationError(_formprefix + "operation", ValidationError.PATTERN_FAILED);}
if(this.status && !(/dontdisturb/).test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.errors && !(/dontdisturb/).test(this.errors)) { throw new ValidationError(_formprefix + "errors", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.deviceToken && !(/xss:throwerror/).test(this.deviceToken)) { throw new ValidationError(_formprefix + "device_token", ValidationError.PATTERN_FAILED);}
if(this.deviceName && !(/xss:throwerror/).test(this.deviceName)) { throw new ValidationError(_formprefix + "device_name", ValidationError.PATTERN_FAILED);}
if(this.location && !(/^([A-Za-z0-9_.\-]+)$/).test(this.location)) { throw new ValidationError(_formprefix + "location", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.startedTime && !Validator.INTEGER.test(this.startedTime)) { throw new ValidationError(_formprefix + "started_time", ValidationError.PATTERN_FAILED);}
if(this.alteredTime && !Validator.INTEGER.test(this.alteredTime)) { throw new ValidationError(_formprefix + "altered_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
MFAAudit.path = "mfaaudit";
MFAAudit.newBuilder = function() {
    return new MFAAudit();
};

PasswordPolicy = function() {
    var _formprefix = "";
    
var minLen = "3";
this.setMinLen = function(minLen) { 
    this.minLen = minLen;
    return this;
};
this.getMinLen = function() {
    return this.minLen;
};
var maxLen = "60";
this.setMaxLen = function(maxLen) { 
    this.maxLen = maxLen;
    return this;
};
this.getMaxLen = function() {
    return this.maxLen;
};
var minSpecialChars = "0";
this.setMinSpecialChars = function(minSpecialChars) { 
    this.minSpecialChars = minSpecialChars;
    return this;
};
this.getMinSpecialChars = function() {
    return this.minSpecialChars;
};
var minNumericChars = "0";
this.setMinNumericChars = function(minNumericChars) { 
    this.minNumericChars = minNumericChars;
    return this;
};
this.getMinNumericChars = function() {
    return this.minNumericChars;
};
var mixedCase = "0";
this.setMixedCase = function(mixedCase) { 
    this.mixedCase = mixedCase;
    return this;
};
this.getMixedCase = function() {
    return this.mixedCase;
};
var passExpiry = "-1";
this.setPassExpiry = function(passExpiry) { 
    this.passExpiry = passExpiry;
    return this;
};
this.getPassExpiry = function() {
    return this.passExpiry;
};
var passwordHistory = "-1";
this.setPasswordHistory = function(passwordHistory) { 
    this.passwordHistory = passwordHistory;
    return this;
};
this.getPasswordHistory = function() {
    return this.passwordHistory;
};
var passwordMinimumAge = "0";
this.setPasswordMinimumAge = function(passwordMinimumAge) { 
    this.passwordMinimumAge = passwordMinimumAge;
    return this;
};
this.getPasswordMinimumAge = function() {
    return this.passwordMinimumAge;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setMinLen(json["min_len"]);
		this.setMaxLen(json["max_len"]);
		this.setMinSpecialChars(json["min_special_chars"]);
		this.setMinNumericChars(json["min_numeric_chars"]);
		this.setMixedCase(json["mixed_case"]);
		this.setPassExpiry(json["pass_expiry"]);
		this.setPasswordHistory(json["password_history"]);
		this.setPasswordMinimumAge(json["password_minimum_age"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getMinLen()) json += '"min_len"' + ":" + '"' + jsonEscape(this.getMinLen())  + '",';
		if(this.getMaxLen()) json += '"max_len"' + ":" + '"' + jsonEscape(this.getMaxLen())  + '",';
		if(this.getMinSpecialChars()) json += '"min_special_chars"' + ":" + '"' + jsonEscape(this.getMinSpecialChars())  + '",';
		if(this.getMinNumericChars()) json += '"min_numeric_chars"' + ":" + '"' + jsonEscape(this.getMinNumericChars())  + '",';
		if(this.getMixedCase()) json += '"mixed_case"' + ":" + '"' + jsonEscape(this.getMixedCase())  + '",';
		if(this.getPassExpiry()) json += '"pass_expiry"' + ":" + '"' + jsonEscape(this.getPassExpiry())  + '",';
		if(this.getPasswordHistory()) json += '"password_history"' + ":" + '"' + jsonEscape(this.getPasswordHistory())  + '",';
		if(this.getPasswordMinimumAge()) json += '"password_minimum_age"' + ":" + '"' + jsonEscape(this.getPasswordMinimumAge())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(PasswordPolicy.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.minLen && !Validator.INTEGER.test(this.minLen)) { throw new ValidationError(_formprefix + "min_len", ValidationError.PATTERN_FAILED);}
if(this.maxLen && !Validator.INTEGER.test(this.maxLen)) { throw new ValidationError(_formprefix + "max_len", ValidationError.PATTERN_FAILED);}
if(this.minSpecialChars && !Validator.INTEGER.test(this.minSpecialChars)) { throw new ValidationError(_formprefix + "min_special_chars", ValidationError.PATTERN_FAILED);}
if(this.minNumericChars && !Validator.INTEGER.test(this.minNumericChars)) { throw new ValidationError(_formprefix + "min_numeric_chars", ValidationError.PATTERN_FAILED);}
if(this.mixedCase && !Validator.INTEGER.test(this.mixedCase)) { throw new ValidationError(_formprefix + "mixed_case", ValidationError.PATTERN_FAILED);}
if(this.passExpiry && !Validator.INTEGER.test(this.passExpiry)) { throw new ValidationError(_formprefix + "pass_expiry", ValidationError.PATTERN_FAILED);}
if(this.passwordHistory && !Validator.INTEGER.test(this.passwordHistory)) { throw new ValidationError(_formprefix + "password_history", ValidationError.PATTERN_FAILED);}
if(this.passwordMinimumAge && !Validator.INTEGER.test(this.passwordMinimumAge)) { throw new ValidationError(_formprefix + "password_minimum_age", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
PasswordPolicy.path = "passwordpolicy";
PasswordPolicy.newBuilder = function() {
    return new PasswordPolicy();
};

CPortalAdmin = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var role = "0";
this.setRole = function(role) { 
    this.role = role;
    return this;
};
this.getRole = function() {
    return this.role;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setRole(json["role"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getRole()) json += '"role"' + ":" + '"' + jsonEscape(this.getRole())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(CPortalAdmin.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.role && !Validator.INTEGER.test(this.role)) { throw new ValidationError(_formprefix + "role", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
CPortalAdmin.path = "cportaladmin";
CPortalAdmin.newBuilder = function() {
    return new CPortalAdmin();
};

UserSystemRoles = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setExpiryTime(json["expiry_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserSystemRoles.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserSystemRoles.path = "usersystemroles";
UserSystemRoles.newBuilder = function() {
    return new UserSystemRoles();
};

MailTypes = function() {
    var _formprefix = "";
    
var mailTypeName = "isc";
this.setMailTypeName = function(mailTypeName) { 
    this.mailTypeName = mailTypeName;
    return this;
};
this.getMailTypeName = function() {
    return this.mailTypeName;
};
var mailTypeDescription = "";
this.setMailTypeDescription = function(mailTypeDescription) { 
    this.mailTypeDescription = mailTypeDescription;
    return this;
};
this.getMailTypeDescription = function() {
    return this.mailTypeDescription;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var mailsender = undefined;
this.setMailsender = function(mailsender) { 
    this.mailsender = mailsender;
    return this;
};
this.getMailsender = function() {
    return this.mailsender;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setMailTypeName(json["mail_type_name"]);
		this.setMailTypeDescription(json["mail_type_description"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setMailsender(URI.getResource(json["mailSender"],"mailsender"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getMailTypeName()) json += '"mail_type_name"' + ":" + '"' + jsonEscape(this.getMailTypeName())  + '",';
		if(this.getMailTypeDescription()) json += '"mail_type_description"' + ":" + '"' + jsonEscape(this.getMailTypeDescription())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getMailsender()) json += '"mailSender"' + ":" + this.getMailsender().toJSON()  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MailTypes.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.mailTypeName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.mailTypeName)) { throw new ValidationError(_formprefix + "mail_type_name", ValidationError.PATTERN_FAILED);}
if(this.mailTypeDescription && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.mailTypeDescription)) { throw new ValidationError(_formprefix + "mail_type_description", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.mailsender) { this.mailsender.validate(); }

	return this;
    }
}
MailTypes.path = "mailtypes";
MailTypes.newBuilder = function() {
    return new MailTypes();
};

OrgUPAuthToken = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var authToken = "";
this.setAuthToken = function(authToken) { 
    this.authToken = authToken;
    return this;
};
this.getAuthToken = function() {
    return this.authToken;
};
var csAuthToken = "";
this.setCsAuthToken = function(csAuthToken) { 
    this.csAuthToken = csAuthToken;
    return this;
};
this.getCsAuthToken = function() {
    return this.csAuthToken;
};
var validityUpto = "";
this.setValidityUpto = function(validityUpto) { 
    this.validityUpto = validityUpto;
    return this;
};
this.getValidityUpto = function() {
    return this.validityUpto;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setAuthToken(json["auth_token"]);
		this.setCsAuthToken(json["cs_auth_token"]);
		this.setValidityUpto(json["validity_upto"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getAuthToken()) json += '"auth_token"' + ":" + '"' + jsonEscape(this.getAuthToken())  + '",';
		if(this.getCsAuthToken()) json += '"cs_auth_token"' + ":" + '"' + jsonEscape(this.getCsAuthToken())  + '",';
		if(this.getValidityUpto()) json += '"validity_upto"' + ":" + '"' + jsonEscape(this.getValidityUpto())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OrgUPAuthToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.authToken && !(/^(?:[a-z0-9\.\-])+$/).test(this.authToken)) { throw new ValidationError(_formprefix + "auth_token", ValidationError.PATTERN_FAILED);}
if(this.csAuthToken && !(/^[a-zA-Z0-9]+\.[a-zA-Z0-9]+\.[a-f0-9]{128}$/).test(this.csAuthToken)) { throw new ValidationError(_formprefix + "cs_auth_token", ValidationError.PATTERN_FAILED);}
if(this.validityUpto && !Validator.INTEGER.test(this.validityUpto)) { throw new ValidationError(_formprefix + "validity_upto", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OrgUPAuthToken.path = "orgupauthtoken";
OrgUPAuthToken.newBuilder = function() {
    return new OrgUPAuthToken();
};

AuthDomainSignup = function() {
    var _formprefix = "";
    
var provisionType = "";
this.setProvisionType = function(provisionType) { 
    this.provisionType = provisionType;
    return this;
};
this.getProvisionType = function() {
    return this.provisionType;
};
var sendWelcomeMail = "false";
this.setSendWelcomeMail = function(sendWelcomeMail) { 
    this.sendWelcomeMail = sendWelcomeMail;
    return this;
};
this.getSendWelcomeMail = function() {
    return this.sendWelcomeMail;
};
var email = "";
this.setEmail = function(email) { 
    this.email = email;
    return this;
};
this.getEmail = function() {
    return this.email;
};
var mobile = "";
this.setMobile = function(mobile) { 
    this.mobile = mobile;
    return this;
};
this.getMobile = function() {
    return this.mobile;
};
var firstName = "";
this.setFirstName = function(firstName) { 
    this.firstName = firstName;
    return this;
};
this.getFirstName = function() {
    return this.firstName;
};
var lastName = "";
this.setLastName = function(lastName) { 
    this.lastName = lastName;
    return this;
};
this.getLastName = function() {
    return this.lastName;
};
var locale = "";
this.setLocale = function(locale) { 
    this.locale = locale;
    return this;
};
this.getLocale = function() {
    return this.locale;
};
var forgotPassword = "";
this.setForgotPassword = function(forgotPassword) { 
    this.forgotPassword = forgotPassword;
    return this;
};
this.getForgotPassword = function() {
    return this.forgotPassword;
};
var termsOfService = "";
this.setTermsOfService = function(termsOfService) { 
    this.termsOfService = termsOfService;
    return this;
};
this.getTermsOfService = function() {
    return this.termsOfService;
};
var privacyPolicy = "";
this.setPrivacyPolicy = function(privacyPolicy) { 
    this.privacyPolicy = privacyPolicy;
    return this;
};
this.getPrivacyPolicy = function() {
    return this.privacyPolicy;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setProvisionType(json["provision_type"]);
		this.setSendWelcomeMail(json["send_welcome_mail"]);
		this.setEmail(json["email"]);
		this.setMobile(json["mobile"]);
		this.setFirstName(json["first_name"]);
		this.setLastName(json["last_name"]);
		this.setLocale(json["locale"]);
		this.setForgotPassword(json["forgot_password"]);
		this.setTermsOfService(json["terms_of_service"]);
		this.setPrivacyPolicy(json["privacy_policy"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getProvisionType()) json += '"provision_type"' + ":" + '"' + jsonEscape(this.getProvisionType())  + '",';
		if(this.getSendWelcomeMail()) json += '"send_welcome_mail"' + ":" + '"' + jsonEscape(this.getSendWelcomeMail())  + '",';
		if(this.getEmail()) json += '"email"' + ":" + '"' + jsonEscape(this.getEmail())  + '",';
		if(this.getMobile()) json += '"mobile"' + ":" + '"' + jsonEscape(this.getMobile())  + '",';
		if(this.getFirstName()) json += '"first_name"' + ":" + '"' + jsonEscape(this.getFirstName())  + '",';
		if(this.getLastName()) json += '"last_name"' + ":" + '"' + jsonEscape(this.getLastName())  + '",';
		if(this.getLocale()) json += '"locale"' + ":" + '"' + jsonEscape(this.getLocale())  + '",';
		if(this.getForgotPassword()) json += '"forgot_password"' + ":" + '"' + jsonEscape(this.getForgotPassword())  + '",';
		if(this.getTermsOfService()) json += '"terms_of_service"' + ":" + '"' + jsonEscape(this.getTermsOfService())  + '",';
		if(this.getPrivacyPolicy()) json += '"privacy_policy"' + ":" + '"' + jsonEscape(this.getPrivacyPolicy())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AuthDomainSignup.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.provisionType && !Validator.INTEGER.test(this.provisionType)) { throw new ValidationError(_formprefix + "provision_type", ValidationError.PATTERN_FAILED);}
if(this.sendWelcomeMail && !Validator.BOOLEAN.test(this.sendWelcomeMail)) { throw new ValidationError(_formprefix + "send_welcome_mail", ValidationError.PATTERN_FAILED);}
if(this.email && !Validator.INTEGER.test(this.email)) { throw new ValidationError(_formprefix + "email", ValidationError.PATTERN_FAILED);}
if(this.mobile && !Validator.INTEGER.test(this.mobile)) { throw new ValidationError(_formprefix + "mobile", ValidationError.PATTERN_FAILED);}
if(this.firstName && !Validator.INTEGER.test(this.firstName)) { throw new ValidationError(_formprefix + "first_name", ValidationError.PATTERN_FAILED);}
if(this.lastName && !Validator.INTEGER.test(this.lastName)) { throw new ValidationError(_formprefix + "last_name", ValidationError.PATTERN_FAILED);}
if(this.locale && !Validator.INTEGER.test(this.locale)) { throw new ValidationError(_formprefix + "locale", ValidationError.PATTERN_FAILED);}
if(this.forgotPassword && !Validator.INTEGER.test(this.forgotPassword)) { throw new ValidationError(_formprefix + "forgot_password", ValidationError.PATTERN_FAILED);}
if(this.termsOfService && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.termsOfService)) { throw new ValidationError(_formprefix + "terms_of_service", ValidationError.PATTERN_FAILED);}
if(this.privacyPolicy && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.privacyPolicy)) { throw new ValidationError(_formprefix + "privacy_policy", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AuthDomainSignup.path = "authdomainsignup";
AuthDomainSignup.newBuilder = function() {
    return new AuthDomainSignup();
};

UniqueId = function() {
    var _formprefix = "";
    
var name = "";
this.setName = function(name) { 
    this.name = name;
    return this;
};
this.getName = function() {
    return this.name;
};
var currentRangeStartingValue = "-1";
this.setCurrentRangeStartingValue = function(currentRangeStartingValue) { 
    this.currentRangeStartingValue = currentRangeStartingValue;
    return this;
};
this.getCurrentRangeStartingValue = function() {
    return this.currentRangeStartingValue;
};
var batchSize = "1000";
this.setBatchSize = function(batchSize) { 
    this.batchSize = batchSize;
    return this;
};
this.getBatchSize = function() {
    return this.batchSize;
};
var reservedUpto = "";
this.setReservedUpto = function(reservedUpto) { 
    this.reservedUpto = reservedUpto;
    return this;
};
this.getReservedUpto = function() {
    return this.reservedUpto;
};
var reservedByIp = "";
this.setReservedByIp = function(reservedByIp) { 
    this.reservedByIp = reservedByIp;
    return this;
};
this.getReservedByIp = function() {
    return this.reservedByIp;
};
var uniqueIdRangeName = "";
this.setUniqueIdRangeName = function(uniqueIdRangeName) { 
    this.uniqueIdRangeName = uniqueIdRangeName;
    return this;
};
this.getUniqueIdRangeName = function() {
    return this.uniqueIdRangeName;
};
var currentRangeMaxValue = "-1";
this.setCurrentRangeMaxValue = function(currentRangeMaxValue) { 
    this.currentRangeMaxValue = currentRangeMaxValue;
    return this;
};
this.getCurrentRangeMaxValue = function() {
    return this.currentRangeMaxValue;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setName(json["name"]);
		this.setCurrentRangeStartingValue(json["current_range_starting_value"]);
		this.setBatchSize(json["batch_size"]);
		this.setReservedUpto(json["reserved_upto"]);
		this.setReservedByIp(json["reserved_by_ip"]);
		this.setUniqueIdRangeName(json["unique_id_range_name"]);
		this.setCurrentRangeMaxValue(json["current_range_max_value"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getName()) json += '"name"' + ":" + '"' + jsonEscape(this.getName())  + '",';
		if(this.getCurrentRangeStartingValue()) json += '"current_range_starting_value"' + ":" + '"' + jsonEscape(this.getCurrentRangeStartingValue())  + '",';
		if(this.getBatchSize()) json += '"batch_size"' + ":" + '"' + jsonEscape(this.getBatchSize())  + '",';
		if(this.getReservedUpto()) json += '"reserved_upto"' + ":" + '"' + jsonEscape(this.getReservedUpto())  + '",';
		if(this.getReservedByIp()) json += '"reserved_by_ip"' + ":" + '"' + jsonEscape(this.getReservedByIp())  + '",';
		if(this.getUniqueIdRangeName()) json += '"unique_id_range_name"' + ":" + '"' + jsonEscape(this.getUniqueIdRangeName())  + '",';
		if(this.getCurrentRangeMaxValue()) json += '"current_range_max_value"' + ":" + '"' + jsonEscape(this.getCurrentRangeMaxValue())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UniqueId.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.name && !(/^([A-Za-z0-9_.\-]+)$/).test(this.name)) { throw new ValidationError(_formprefix + "name", ValidationError.PATTERN_FAILED);}
if(this.currentRangeStartingValue && !Validator.INTEGER.test(this.currentRangeStartingValue)) { throw new ValidationError(_formprefix + "current_range_starting_value", ValidationError.PATTERN_FAILED);}
if(this.batchSize && !Validator.INTEGER.test(this.batchSize)) { throw new ValidationError(_formprefix + "batch_size", ValidationError.PATTERN_FAILED);}
if(this.reservedUpto && !Validator.INTEGER.test(this.reservedUpto)) { throw new ValidationError(_formprefix + "reserved_upto", ValidationError.PATTERN_FAILED);}
if(this.reservedByIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.reservedByIp)) { throw new ValidationError(_formprefix + "reserved_by_ip", ValidationError.PATTERN_FAILED);}
if(this.currentRangeMaxValue && !Validator.INTEGER.test(this.currentRangeMaxValue)) { throw new ValidationError(_formprefix + "current_range_max_value", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UniqueId.path = "uniqueid";
UniqueId.newBuilder = function() {
    return new UniqueId();
};

YubikeyRegistrationData = function() {
    var _formprefix = "";
    
var yubikeyId = "";
this.setYubikeyId = function(yubikeyId) { 
    this.yubikeyId = yubikeyId;
    return this;
};
this.getYubikeyId = function() {
    return this.yubikeyId;
};
var clientData = "";
this.setClientData = function(clientData) { 
    this.clientData = clientData;
    return this;
};
this.getClientData = function() {
    return this.clientData;
};
var publicKey = "";
this.setPublicKey = function(publicKey) { 
    this.publicKey = publicKey;
    return this;
};
this.getPublicKey = function() {
    return this.publicKey;
};
var keyhandle = "";
this.setKeyhandle = function(keyhandle) { 
    this.keyhandle = keyhandle;
    return this;
};
this.getKeyhandle = function() {
    return this.keyhandle;
};
var counter = "-1";
this.setCounter = function(counter) { 
    this.counter = counter;
    return this;
};
this.getCounter = function() {
    return this.counter;
};
var transports = "";
this.setTransports = function(transports) { 
    this.transports = transports;
    return this;
};
this.getTransports = function() {
    return this.transports;
};
var signatureAlgorithm = "-1";
this.setSignatureAlgorithm = function(signatureAlgorithm) { 
    this.signatureAlgorithm = signatureAlgorithm;
    return this;
};
this.getSignatureAlgorithm = function() {
    return this.signatureAlgorithm;
};
var isPrimary = "false";
this.setIsPrimary = function(isPrimary) { 
    this.isPrimary = isPrimary;
    return this;
};
this.getIsPrimary = function() {
    return this.isPrimary;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var keyType = "0";
this.setKeyType = function(keyType) { 
    this.keyType = keyType;
    return this;
};
this.getKeyType = function() {
    return this.keyType;
};
var aaguid = "";
this.setAaguid = function(aaguid) { 
    this.aaguid = aaguid;
    return this;
};
this.getAaguid = function() {
    return this.aaguid;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setYubikeyId(json["yubikey_id"]);
		this.setClientData(json["client_data"]);
		this.setPublicKey(json["public_key"]);
		this.setKeyhandle(json["keyhandle"]);
		this.setCounter(json["counter"]);
		this.setTransports(json["transports"]);
		this.setSignatureAlgorithm(json["signature_algorithm"]);
		this.setIsPrimary(json["is_primary"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setKeyType(json["key_type"]);
		this.setAaguid(json["aaguid"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getYubikeyId()) json += '"yubikey_id"' + ":" + '"' + jsonEscape(this.getYubikeyId())  + '",';
		if(this.getClientData()) json += '"client_data"' + ":" + '"' + jsonEscape(this.getClientData())  + '",';
		if(this.getPublicKey()) json += '"public_key"' + ":" + '"' + jsonEscape(this.getPublicKey())  + '",';
		if(this.getKeyhandle()) json += '"keyhandle"' + ":" + '"' + jsonEscape(this.getKeyhandle())  + '",';
		if(this.getCounter()) json += '"counter"' + ":" + '"' + jsonEscape(this.getCounter())  + '",';
		if(this.getTransports()) json += '"transports"' + ":" + '"' + jsonEscape(this.getTransports())  + '",';
		if(this.getSignatureAlgorithm()) json += '"signature_algorithm"' + ":" + '"' + jsonEscape(this.getSignatureAlgorithm())  + '",';
		if(this.getIsPrimary()) json += '"is_primary"' + ":" + '"' + jsonEscape(this.getIsPrimary())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getKeyType()) json += '"key_type"' + ":" + '"' + jsonEscape(this.getKeyType())  + '",';
		if(this.getAaguid()) json += '"aaguid"' + ":" + '"' + jsonEscape(this.getAaguid())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(YubikeyRegistrationData.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.yubikeyId && !(/xss:throwerror/).test(this.yubikeyId)) { throw new ValidationError(_formprefix + "yubikey_id", ValidationError.PATTERN_FAILED);}
if(this.counter && !Validator.INTEGER.test(this.counter)) { throw new ValidationError(_formprefix + "counter", ValidationError.PATTERN_FAILED);}
if(this.signatureAlgorithm && !Validator.INTEGER.test(this.signatureAlgorithm)) { throw new ValidationError(_formprefix + "signature_algorithm", ValidationError.PATTERN_FAILED);}
if(this.isPrimary && !Validator.BOOLEAN.test(this.isPrimary)) { throw new ValidationError(_formprefix + "is_primary", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
YubikeyRegistrationData.path = "yubikeyregistrationdata";
YubikeyRegistrationData.newBuilder = function() {
    return new YubikeyRegistrationData();
};

AppTemplate = function() {
    var _formprefix = "";
    
var templateName = "";
this.setTemplateName = function(templateName) { 
    this.templateName = templateName;
    return this;
};
this.getTemplateName = function() {
    return this.templateName;
};
var templateType = "";
this.setTemplateType = function(templateType) { 
    this.templateType = templateType;
    return this;
};
this.getTemplateType = function() {
    return this.templateType;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var template = "";
this.setTemplate = function(template) { 
    this.template = template;
    return this;
};
this.getTemplate = function() {
    return this.template;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var bannertemplateprops = undefined;
this.setBannertemplateprops = function(bannertemplateprops) { 
    this.bannertemplateprops = bannertemplateprops;
    return this;
};
this.getBannertemplateprops = function() {
    return this.bannertemplateprops;
};
var mailtemplateprops = undefined;
this.setMailtemplateprops = function(mailtemplateprops) { 
    this.mailtemplateprops = mailtemplateprops;
    return this;
};
this.getMailtemplateprops = function() {
    return this.mailtemplateprops;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTemplateName(json["template_name"]);
		this.setTemplateType(json["template_type"]);
		this.setDescription(json["description"]);
		this.setTemplate(json["template"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setBannertemplateprops(URI.getResource(json["bannerTemplateProps"],"bannertemplateprops"));
		this.setMailtemplateprops(URI.getResource(json["mailTemplateProps"],"mailtemplateprops"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTemplateName()) json += '"template_name"' + ":" + '"' + jsonEscape(this.getTemplateName())  + '",';
		if(this.getTemplateType()) json += '"template_type"' + ":" + '"' + jsonEscape(this.getTemplateType())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getTemplate()) json += '"template"' + ":" + '"' + jsonEscape(this.getTemplate())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getBannertemplateprops()) json += '"bannerTemplateProps"' + ":" + this.getBannertemplateprops().toJSON()  + ',';
		if(this.getMailtemplateprops()) json += '"mailTemplateProps"' + ":" + this.getMailtemplateprops().toJSON()  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.templateType && !Validator.INTEGER.test(this.templateType)) { throw new ValidationError(_formprefix + "template_type", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.template && !(/dontdisturb/).test(this.template)) { throw new ValidationError(_formprefix + "template", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.bannertemplateprops) { this.bannertemplateprops.validate(); }
if(this.mailtemplateprops) { this.mailtemplateprops.validate(); }

	return this;
    }
}
AppTemplate.path = "apptemplate";
AppTemplate.newBuilder = function() {
    return new AppTemplate();
};

UserAccountsProperties = function() {
    var _formprefix = "";
    
var lastLoginTime = "";
this.setLastLoginTime = function(lastLoginTime) { 
    this.lastLoginTime = lastLoginTime;
    return this;
};
this.getLastLoginTime = function() {
    return this.lastLoginTime;
};
var passwordStrength = "";
this.setPasswordStrength = function(passwordStrength) { 
    this.passwordStrength = passwordStrength;
    return this;
};
this.getPasswordStrength = function() {
    return this.passwordStrength;
};
var lastLoginCountry = "";
this.setLastLoginCountry = function(lastLoginCountry) { 
    this.lastLoginCountry = lastLoginCountry;
    return this;
};
this.getLastLoginCountry = function() {
    return this.lastLoginCountry;
};
var lastPasswordVerifiedTime = "";
this.setLastPasswordVerifiedTime = function(lastPasswordVerifiedTime) { 
    this.lastPasswordVerifiedTime = lastPasswordVerifiedTime;
    return this;
};
this.getLastPasswordVerifiedTime = function() {
    return this.lastPasswordVerifiedTime;
};
var lastApiAccessTime = "";
this.setLastApiAccessTime = function(lastApiAccessTime) { 
    this.lastApiAccessTime = lastApiAccessTime;
    return this;
};
this.getLastApiAccessTime = function() {
    return this.lastApiAccessTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLastLoginTime(json["last_login_time"]);
		this.setPasswordStrength(json["password_strength"]);
		this.setLastLoginCountry(json["last_login_country"]);
		this.setLastPasswordVerifiedTime(json["last_password_verified_time"]);
		this.setLastApiAccessTime(json["last_api_access_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLastLoginTime()) json += '"last_login_time"' + ":" + '"' + jsonEscape(this.getLastLoginTime())  + '",';
		if(this.getPasswordStrength()) json += '"password_strength"' + ":" + '"' + jsonEscape(this.getPasswordStrength())  + '",';
		if(this.getLastLoginCountry()) json += '"last_login_country"' + ":" + '"' + jsonEscape(this.getLastLoginCountry())  + '",';
		if(this.getLastPasswordVerifiedTime()) json += '"last_password_verified_time"' + ":" + '"' + jsonEscape(this.getLastPasswordVerifiedTime())  + '",';
		if(this.getLastApiAccessTime()) json += '"last_api_access_time"' + ":" + '"' + jsonEscape(this.getLastApiAccessTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserAccountsProperties.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.lastLoginTime && !Validator.INTEGER.test(this.lastLoginTime)) { throw new ValidationError(_formprefix + "last_login_time", ValidationError.PATTERN_FAILED);}
if(this.passwordStrength && !Validator.INTEGER.test(this.passwordStrength)) { throw new ValidationError(_formprefix + "password_strength", ValidationError.PATTERN_FAILED);}
if(this.lastLoginCountry && !(/^[a-zA-Z0-9]{2,5}$/).test(this.lastLoginCountry)) { throw new ValidationError(_formprefix + "last_login_country", ValidationError.PATTERN_FAILED);}
if(this.lastPasswordVerifiedTime && !Validator.INTEGER.test(this.lastPasswordVerifiedTime)) { throw new ValidationError(_formprefix + "last_password_verified_time", ValidationError.PATTERN_FAILED);}
if(this.lastApiAccessTime && !Validator.INTEGER.test(this.lastApiAccessTime)) { throw new ValidationError(_formprefix + "last_api_access_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserAccountsProperties.path = "useraccountsproperties";
UserAccountsProperties.newBuilder = function() {
    return new UserAccountsProperties();
};

UserWhiteListedClient = function() {
    var _formprefix = "";
    
var isWhitelisted = "0";
this.setIsWhitelisted = function(isWhitelisted) { 
    this.isWhitelisted = isWhitelisted;
    return this;
};
this.getIsWhitelisted = function() {
    return this.isWhitelisted;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setIsWhitelisted(json["is_whitelisted"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getIsWhitelisted()) json += '"is_whitelisted"' + ":" + '"' + jsonEscape(this.getIsWhitelisted())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserWhiteListedClient.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.isWhitelisted && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.isWhitelisted)) { throw new ValidationError(_formprefix + "is_whitelisted", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserWhiteListedClient.path = "userwhitelistedclient";
UserWhiteListedClient.newBuilder = function() {
    return new UserWhiteListedClient();
};

Rebrand = function() {
    var _formprefix = "";
    
var rebrandAttributeKey = "";
this.setRebrandAttributeKey = function(rebrandAttributeKey) { 
    this.rebrandAttributeKey = rebrandAttributeKey;
    return this;
};
this.getRebrandAttributeKey = function() {
    return this.rebrandAttributeKey;
};
var rebrandAttributeValue = "";
this.setRebrandAttributeValue = function(rebrandAttributeValue) { 
    this.rebrandAttributeValue = rebrandAttributeValue;
    return this;
};
this.getRebrandAttributeValue = function() {
    return this.rebrandAttributeValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRebrandAttributeKey(json["rebrand_attribute_key"]);
		this.setRebrandAttributeValue(json["rebrand_attribute_value"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRebrandAttributeKey()) json += '"rebrand_attribute_key"' + ":" + '"' + jsonEscape(this.getRebrandAttributeKey())  + '",';
		if(this.getRebrandAttributeValue()) json += '"rebrand_attribute_value"' + ":" + '"' + jsonEscape(this.getRebrandAttributeValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Rebrand.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.rebrandAttributeKey && !(/^([A-Za-z0-9_.\-]+)$/).test(this.rebrandAttributeKey)) { throw new ValidationError(_formprefix + "rebrand_attribute_key", ValidationError.PATTERN_FAILED);}
if(this.rebrandAttributeValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.rebrandAttributeValue)) { throw new ValidationError(_formprefix + "rebrand_attribute_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Rebrand.path = "rebrand";
Rebrand.newBuilder = function() {
    return new Rebrand();
};

UserRestrictedScope = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var approvedZuid = "";
this.setApprovedZuid = function(approvedZuid) { 
    this.approvedZuid = approvedZuid;
    return this;
};
this.getApprovedZuid = function() {
    return this.approvedZuid;
};
var allowedOperations = "";
this.setAllowedOperations = function(allowedOperations) { 
    this.allowedOperations = allowedOperations;
    return this;
};
this.getAllowedOperations = function() {
    return this.allowedOperations;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setApprovedZuid(json["approved_zuid"]);
		this.setAllowedOperations(json["allowed_operations"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getApprovedZuid()) json += '"approved_zuid"' + ":" + '"' + jsonEscape(this.getApprovedZuid())  + '",';
		if(this.getAllowedOperations()) json += '"allowed_operations"' + ":" + '"' + jsonEscape(this.getAllowedOperations())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserRestrictedScope.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.approvedZuid && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.approvedZuid)) { throw new ValidationError(_formprefix + "approved_zuid", ValidationError.PATTERN_FAILED);}
if(this.allowedOperations && !Validator.INTEGER.test(this.allowedOperations)) { throw new ValidationError(_formprefix + "allowed_operations", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserRestrictedScope.path = "userrestrictedscope";
UserRestrictedScope.newBuilder = function() {
    return new UserRestrictedScope();
};

SAMLSpAppInfo = function() {
    var _formprefix = "";
    
var idpIssuer = "";
this.setIdpIssuer = function(idpIssuer) { 
    this.idpIssuer = idpIssuer;
    return this;
};
this.getIdpIssuer = function() {
    return this.idpIssuer;
};
var idpPrivateKey = "";
this.setIdpPrivateKey = function(idpPrivateKey) { 
    this.idpPrivateKey = idpPrivateKey;
    return this;
};
this.getIdpPrivateKey = function() {
    return this.idpPrivateKey;
};
var idpPublicKey = "";
this.setIdpPublicKey = function(idpPublicKey) { 
    this.idpPublicKey = idpPublicKey;
    return this;
};
this.getIdpPublicKey = function() {
    return this.idpPublicKey;
};
var certificateExpiryTime = "";
this.setCertificateExpiryTime = function(certificateExpiryTime) { 
    this.certificateExpiryTime = certificateExpiryTime;
    return this;
};
this.getCertificateExpiryTime = function() {
    return this.certificateExpiryTime;
};
var acsUrl = "";
this.setAcsUrl = function(acsUrl) { 
    this.acsUrl = acsUrl;
    return this;
};
this.getAcsUrl = function() {
    return this.acsUrl;
};
var defaultRelayState = "";
this.setDefaultRelayState = function(defaultRelayState) { 
    this.defaultRelayState = defaultRelayState;
    return this;
};
this.getDefaultRelayState = function() {
    return this.defaultRelayState;
};
var idpInitiated = "true";
this.setIdpInitiated = function(idpInitiated) { 
    this.idpInitiated = idpInitiated;
    return this;
};
this.getIdpInitiated = function() {
    return this.idpInitiated;
};
var signInUrl = "";
this.setSignInUrl = function(signInUrl) { 
    this.signInUrl = signInUrl;
    return this;
};
this.getSignInUrl = function() {
    return this.signInUrl;
};
var enableLogout = "false";
this.setEnableLogout = function(enableLogout) { 
    this.enableLogout = enableLogout;
    return this;
};
this.getEnableLogout = function() {
    return this.enableLogout;
};
var logoutUrl = "";
this.setLogoutUrl = function(logoutUrl) { 
    this.logoutUrl = logoutUrl;
    return this;
};
this.getLogoutUrl = function() {
    return this.logoutUrl;
};
var spIssuer = "";
this.setSpIssuer = function(spIssuer) { 
    this.spIssuer = spIssuer;
    return this;
};
this.getSpIssuer = function() {
    return this.spIssuer;
};
var nameidFormat = "1";
this.setNameidFormat = function(nameidFormat) { 
    this.nameidFormat = nameidFormat;
    return this;
};
this.getNameidFormat = function() {
    return this.nameidFormat;
};
var nameidValue = "";
this.setNameidValue = function(nameidValue) { 
    this.nameidValue = nameidValue;
    return this;
};
this.getNameidValue = function() {
    return this.nameidValue;
};
var samlResponseFormat = "1";
this.setSamlResponseFormat = function(samlResponseFormat) { 
    this.samlResponseFormat = samlResponseFormat;
    return this;
};
this.getSamlResponseFormat = function() {
    return this.samlResponseFormat;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setIdpIssuer(json["idp_issuer"]);
		this.setIdpPrivateKey(json["idp_private_key"]);
		this.setIdpPublicKey(json["idp_public_key"]);
		this.setCertificateExpiryTime(json["certificate_expiry_time"]);
		this.setAcsUrl(json["acs_url"]);
		this.setDefaultRelayState(json["default_relay_state"]);
		this.setIdpInitiated(json["idp_initiated"]);
		this.setSignInUrl(json["sign_in_url"]);
		this.setEnableLogout(json["enable_logout"]);
		this.setLogoutUrl(json["logout_url"]);
		this.setSpIssuer(json["sp_issuer"]);
		this.setNameidFormat(json["nameid_format"]);
		this.setNameidValue(json["nameid_value"]);
		this.setSamlResponseFormat(json["saml_response_format"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getIdpIssuer()) json += '"idp_issuer"' + ":" + '"' + jsonEscape(this.getIdpIssuer())  + '",';
		if(this.getIdpPrivateKey()) json += '"idp_private_key"' + ":" + '"' + jsonEscape(this.getIdpPrivateKey())  + '",';
		if(this.getIdpPublicKey()) json += '"idp_public_key"' + ":" + '"' + jsonEscape(this.getIdpPublicKey())  + '",';
		if(this.getCertificateExpiryTime()) json += '"certificate_expiry_time"' + ":" + '"' + jsonEscape(this.getCertificateExpiryTime())  + '",';
		if(this.getAcsUrl()) json += '"acs_url"' + ":" + '"' + jsonEscape(this.getAcsUrl())  + '",';
		if(this.getDefaultRelayState()) json += '"default_relay_state"' + ":" + '"' + jsonEscape(this.getDefaultRelayState())  + '",';
		if(this.getIdpInitiated()) json += '"idp_initiated"' + ":" + '"' + jsonEscape(this.getIdpInitiated())  + '",';
		if(this.getSignInUrl()) json += '"sign_in_url"' + ":" + '"' + jsonEscape(this.getSignInUrl())  + '",';
		if(this.getEnableLogout()) json += '"enable_logout"' + ":" + '"' + jsonEscape(this.getEnableLogout())  + '",';
		if(this.getLogoutUrl()) json += '"logout_url"' + ":" + '"' + jsonEscape(this.getLogoutUrl())  + '",';
		if(this.getSpIssuer()) json += '"sp_issuer"' + ":" + '"' + jsonEscape(this.getSpIssuer())  + '",';
		if(this.getNameidFormat()) json += '"nameid_format"' + ":" + '"' + jsonEscape(this.getNameidFormat())  + '",';
		if(this.getNameidValue()) json += '"nameid_value"' + ":" + '"' + jsonEscape(this.getNameidValue())  + '",';
		if(this.getSamlResponseFormat()) json += '"saml_response_format"' + ":" + '"' + jsonEscape(this.getSamlResponseFormat())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SAMLSpAppInfo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.idpIssuer && !(/xss:throwerror/).test(this.idpIssuer)) { throw new ValidationError(_formprefix + "idp_issuer", ValidationError.PATTERN_FAILED);}
if(this.idpPrivateKey && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.idpPrivateKey)) { throw new ValidationError(_formprefix + "idp_private_key", ValidationError.PATTERN_FAILED);}
if(this.idpPublicKey && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.idpPublicKey)) { throw new ValidationError(_formprefix + "idp_public_key", ValidationError.PATTERN_FAILED);}
if(this.certificateExpiryTime && !Validator.INTEGER.test(this.certificateExpiryTime)) { throw new ValidationError(_formprefix + "certificate_expiry_time", ValidationError.PATTERN_FAILED);}
if(this.acsUrl && !(/xss:throwerror/).test(this.acsUrl)) { throw new ValidationError(_formprefix + "acs_url", ValidationError.PATTERN_FAILED);}
if(this.defaultRelayState && !(/xss:throwerror/).test(this.defaultRelayState)) { throw new ValidationError(_formprefix + "default_relay_state", ValidationError.PATTERN_FAILED);}
if(this.idpInitiated && !Validator.BOOLEAN.test(this.idpInitiated)) { throw new ValidationError(_formprefix + "idp_initiated", ValidationError.PATTERN_FAILED);}
if(this.signInUrl && !(/xss:throwerror/).test(this.signInUrl)) { throw new ValidationError(_formprefix + "sign_in_url", ValidationError.PATTERN_FAILED);}
if(this.enableLogout && !Validator.BOOLEAN.test(this.enableLogout)) { throw new ValidationError(_formprefix + "enable_logout", ValidationError.PATTERN_FAILED);}
if(this.logoutUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.logoutUrl)) { throw new ValidationError(_formprefix + "logout_url", ValidationError.PATTERN_FAILED);}
if(this.spIssuer && !(/xss:throwerror/).test(this.spIssuer)) { throw new ValidationError(_formprefix + "sp_issuer", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SAMLSpAppInfo.path = "samlspappinfo";
SAMLSpAppInfo.newBuilder = function() {
    return new SAMLSpAppInfo();
};

Saml = function() {
    var _formprefix = "";
    
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var saml = "0";
this.setSaml = function(saml) { 
    this.saml = saml;
    return this;
};
this.getSaml = function() {
    return this.saml;
};
var samlLoginUrl = "";
this.setSamlLoginUrl = function(samlLoginUrl) { 
    this.samlLoginUrl = samlLoginUrl;
    return this;
};
this.getSamlLoginUrl = function() {
    return this.samlLoginUrl;
};
var loginBinding = "0";
this.setLoginBinding = function(loginBinding) { 
    this.loginBinding = loginBinding;
    return this;
};
this.getLoginBinding = function() {
    return this.loginBinding;
};
var samlLogoutUrl = "";
this.setSamlLogoutUrl = function(samlLogoutUrl) { 
    this.samlLogoutUrl = samlLogoutUrl;
    return this;
};
this.getSamlLogoutUrl = function() {
    return this.samlLogoutUrl;
};
var logoutBinding = "1";
this.setLogoutBinding = function(logoutBinding) { 
    this.logoutBinding = logoutBinding;
    return this;
};
this.getLogoutBinding = function() {
    return this.logoutBinding;
};
var samlPasswordUrl = "";
this.setSamlPasswordUrl = function(samlPasswordUrl) { 
    this.samlPasswordUrl = samlPasswordUrl;
    return this;
};
this.getSamlPasswordUrl = function() {
    return this.samlPasswordUrl;
};
var publicKey = "";
this.setPublicKey = function(publicKey) { 
    this.publicKey = publicKey;
    return this;
};
this.getPublicKey = function() {
    return this.publicKey;
};
var algorithm = "";
this.setAlgorithm = function(algorithm) { 
    this.algorithm = algorithm;
    return this;
};
this.getAlgorithm = function() {
    return this.algorithm;
};
var certType = "";
this.setCertType = function(certType) { 
    this.certType = certType;
    return this;
};
this.getCertType = function() {
    return this.certType;
};
var nameIdentifier = "1";
this.setNameIdentifier = function(nameIdentifier) { 
    this.nameIdentifier = nameIdentifier;
    return this;
};
this.getNameIdentifier = function() {
    return this.nameIdentifier;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var isSamlLogoutEnabled = "false";
this.setIsSamlLogoutEnabled = function(isSamlLogoutEnabled) { 
    this.isSamlLogoutEnabled = isSamlLogoutEnabled;
    return this;
};
this.getIsSamlLogoutEnabled = function() {
    return this.isSamlLogoutEnabled;
};
var isSamlEnabled = "true";
this.setIsSamlEnabled = function(isSamlEnabled) { 
    this.isSamlEnabled = isSamlEnabled;
    return this;
};
this.getIsSamlEnabled = function() {
    return this.isSamlEnabled;
};
var isDomainless = "false";
this.setIsDomainless = function(isDomainless) { 
    this.isDomainless = isDomainless;
    return this;
};
this.getIsDomainless = function() {
    return this.isDomainless;
};
var samlService = "";
this.setSamlService = function(samlService) { 
    this.samlService = samlService;
    return this;
};
this.getSamlService = function() {
    return this.samlService;
};
var isSignatureEnabled = "false";
this.setIsSignatureEnabled = function(isSignatureEnabled) { 
    this.isSignatureEnabled = isSignatureEnabled;
    return this;
};
this.getIsSignatureEnabled = function() {
    return this.isSignatureEnabled;
};
var spCertificate = "";
this.setSpCertificate = function(spCertificate) { 
    this.spCertificate = spCertificate;
    return this;
};
this.getSpCertificate = function() {
    return this.spCertificate;
};
var spPrivateKey = "";
this.setSpPrivateKey = function(spPrivateKey) { 
    this.spPrivateKey = spPrivateKey;
    return this;
};
this.getSpPrivateKey = function() {
    return this.spPrivateKey;
};
var spCertificateExpiryTime = "";
this.setSpCertificateExpiryTime = function(spCertificateExpiryTime) { 
    this.spCertificateExpiryTime = spCertificateExpiryTime;
    return this;
};
this.getSpCertificateExpiryTime = function() {
    return this.spCertificateExpiryTime;
};
var issuer = "";
this.setIssuer = function(issuer) { 
    this.issuer = issuer;
    return this;
};
this.getIssuer = function() {
    return this.issuer;
};
var jitAttributes = "";
this.setJitAttributes = function(jitAttributes) { 
    this.jitAttributes = jitAttributes;
    return this;
};
this.getJitAttributes = function() {
    return this.jitAttributes;
};
var isNewSamlConfig = "0";
this.setIsNewSamlConfig = function(isNewSamlConfig) { 
    this.isNewSamlConfig = isNewSamlConfig;
    return this;
};
this.getIsNewSamlConfig = function() {
    return this.isNewSamlConfig;
};
var samlparams = undefined;
this.setSamlparamss = function(samlparams) { 
    this.samlparams = samlparams;
    return this;
};
this.getSamlparamss = function() {
    return this.samlparams;
};
this.addSamlparams = function(samlparams) { 
 if(!this.samlparams) this.samlparams = new Array(); 
  this.samlparams.push(samlparams); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDisplayName(json["display_name"]);
		this.setSaml(json["saml"]);
		this.setSamlLoginUrl(json["saml_login_url"]);
		this.setLoginBinding(json["login_binding"]);
		this.setSamlLogoutUrl(json["saml_logout_url"]);
		this.setLogoutBinding(json["logout_binding"]);
		this.setSamlPasswordUrl(json["saml_password_url"]);
		this.setPublicKey(json["public_key"]);
		this.setAlgorithm(json["algorithm"]);
		this.setCertType(json["cert_type"]);
		this.setNameIdentifier(json["name_identifier"]);
		this.setModifiedTime(json["modified_time"]);
		this.setIsSamlLogoutEnabled(json["is_saml_logout_enabled"]);
		this.setIsSamlEnabled(json["is_saml_enabled"]);
		this.setIsDomainless(json["is_domainless"]);
		this.setSamlService(json["saml_service"]);
		this.setIsSignatureEnabled(json["is_signature_enabled"]);
		this.setSpCertificate(json["sp_certificate"]);
		this.setSpPrivateKey(json["sp_private_key"]);
		this.setSpCertificateExpiryTime(json["sp_certificate_expiry_time"]);
		this.setIssuer(json["issuer"]);
		this.setJitAttributes(json["jit_attributes"]);
		this.setIsNewSamlConfig(json["is_new_saml_config"]);
		this.setSamlparamss(URI.getResourceArray(json["sAMLParams"],"samlparams"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getSaml()) json += '"saml"' + ":" + '"' + jsonEscape(this.getSaml())  + '",';
		if(this.getSamlLoginUrl()) json += '"saml_login_url"' + ":" + '"' + jsonEscape(this.getSamlLoginUrl())  + '",';
		if(this.getLoginBinding()) json += '"login_binding"' + ":" + '"' + jsonEscape(this.getLoginBinding())  + '",';
		if(this.getSamlLogoutUrl()) json += '"saml_logout_url"' + ":" + '"' + jsonEscape(this.getSamlLogoutUrl())  + '",';
		if(this.getLogoutBinding()) json += '"logout_binding"' + ":" + '"' + jsonEscape(this.getLogoutBinding())  + '",';
		if(this.getSamlPasswordUrl()) json += '"saml_password_url"' + ":" + '"' + jsonEscape(this.getSamlPasswordUrl())  + '",';
		if(this.getPublicKey()) json += '"public_key"' + ":" + '"' + jsonEscape(this.getPublicKey())  + '",';
		if(this.getAlgorithm()) json += '"algorithm"' + ":" + '"' + jsonEscape(this.getAlgorithm())  + '",';
		if(this.getCertType()) json += '"cert_type"' + ":" + '"' + jsonEscape(this.getCertType())  + '",';
		if(this.getNameIdentifier()) json += '"name_identifier"' + ":" + '"' + jsonEscape(this.getNameIdentifier())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getIsSamlLogoutEnabled()) json += '"is_saml_logout_enabled"' + ":" + '"' + jsonEscape(this.getIsSamlLogoutEnabled())  + '",';
		if(this.getIsSamlEnabled()) json += '"is_saml_enabled"' + ":" + '"' + jsonEscape(this.getIsSamlEnabled())  + '",';
		if(this.getIsDomainless()) json += '"is_domainless"' + ":" + '"' + jsonEscape(this.getIsDomainless())  + '",';
		if(this.getSamlService()) json += '"saml_service"' + ":" + '"' + jsonEscape(this.getSamlService())  + '",';
		if(this.getIsSignatureEnabled()) json += '"is_signature_enabled"' + ":" + '"' + jsonEscape(this.getIsSignatureEnabled())  + '",';
		if(this.getSpCertificate()) json += '"sp_certificate"' + ":" + '"' + jsonEscape(this.getSpCertificate())  + '",';
		if(this.getSpPrivateKey()) json += '"sp_private_key"' + ":" + '"' + jsonEscape(this.getSpPrivateKey())  + '",';
		if(this.getSpCertificateExpiryTime()) json += '"sp_certificate_expiry_time"' + ":" + '"' + jsonEscape(this.getSpCertificateExpiryTime())  + '",';
		if(this.getIssuer()) json += '"issuer"' + ":" + '"' + jsonEscape(this.getIssuer())  + '",';
		if(this.getJitAttributes()) json += '"jit_attributes"' + ":" + '"' + jsonEscape(this.getJitAttributes())  + '",';
		if(this.getIsNewSamlConfig()) json += '"is_new_saml_config"' + ":" + '"' + jsonEscape(this.getIsNewSamlConfig())  + '",';
		if(this.getSamlparamss()) json += '"sAMLParams"' + ":" + URI.toJSONArray(this.getSamlparamss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Saml.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.samlLoginUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.samlLoginUrl)) { throw new ValidationError(_formprefix + "saml_login_url", ValidationError.PATTERN_FAILED);}
if(this.samlLogoutUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.samlLogoutUrl)) { throw new ValidationError(_formprefix + "saml_logout_url", ValidationError.PATTERN_FAILED);}
if(this.samlPasswordUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.samlPasswordUrl)) { throw new ValidationError(_formprefix + "saml_password_url", ValidationError.PATTERN_FAILED);}
if(this.publicKey && !(/dontdisturb/).test(this.publicKey)) { throw new ValidationError(_formprefix + "public_key", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.isSamlLogoutEnabled && !Validator.BOOLEAN.test(this.isSamlLogoutEnabled)) { throw new ValidationError(_formprefix + "is_saml_logout_enabled", ValidationError.PATTERN_FAILED);}
if(this.isSamlEnabled && !Validator.BOOLEAN.test(this.isSamlEnabled)) { throw new ValidationError(_formprefix + "is_saml_enabled", ValidationError.PATTERN_FAILED);}
if(this.isDomainless && !Validator.BOOLEAN.test(this.isDomainless)) { throw new ValidationError(_formprefix + "is_domainless", ValidationError.PATTERN_FAILED);}
if(this.isSignatureEnabled && !Validator.BOOLEAN.test(this.isSignatureEnabled)) { throw new ValidationError(_formprefix + "is_signature_enabled", ValidationError.PATTERN_FAILED);}
if(this.spCertificate && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.spCertificate)) { throw new ValidationError(_formprefix + "sp_certificate", ValidationError.PATTERN_FAILED);}
if(this.spPrivateKey && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.spPrivateKey)) { throw new ValidationError(_formprefix + "sp_private_key", ValidationError.PATTERN_FAILED);}
if(this.spCertificateExpiryTime && !Validator.INTEGER.test(this.spCertificateExpiryTime)) { throw new ValidationError(_formprefix + "sp_certificate_expiry_time", ValidationError.PATTERN_FAILED);}
if(this.samlparams) { for(i=0; i < this.samlparams.length; i++ ) { this.samlparams[i].validate(); } }

	return this;
    }
}
Saml.path = "saml";
Saml.newBuilder = function() {
    return new Saml();
};

AppAccountDevices = function() {
    var _formprefix = "";
    
var deviceId = "";
this.setDeviceId = function(deviceId) { 
    this.deviceId = deviceId;
    return this;
};
this.getDeviceId = function() {
    return this.deviceId;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var isEnabled = "2";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDeviceId(json["device_id"]);
		this.setDisplayName(json["display_name"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDeviceId()) json += '"device_id"' + ":" + '"' + jsonEscape(this.getDeviceId())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccountDevices.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.deviceId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.deviceId)) { throw new ValidationError(_formprefix + "device_id", ValidationError.PATTERN_FAILED);}
if(this.displayName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.displayName)) { throw new ValidationError(_formprefix + "display_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAccountDevices.path = "appaccountdevices";
AppAccountDevices.newBuilder = function() {
    return new AppAccountDevices();
};

ZAID = function() {
    var _formprefix = "";
    
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var authType = "ZOHO";
this.setAuthType = function(authType) { 
    this.authType = authType;
    return this;
};
this.getAuthType = function() {
    return this.authType;
};
var accountname = undefined;
this.setAccountnames = function(accountname) { 
    this.accountname = accountname;
    return this;
};
this.getAccountnames = function() {
    return this.accountname;
};
this.addAccountname = function(accountname) { 
 if(!this.accountname) this.accountname = new Array(); 
  this.accountname.push(accountname); 
 return this;
};

var zuid = undefined;
this.setZuids = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuids = function() {
    return this.zuid;
};
this.addZuid = function(zuid) { 
 if(!this.zuid) this.zuid = new Array(); 
  this.zuid.push(zuid); 
 return this;
};

var zgid = undefined;
this.setZgids = function(zgid) { 
    this.zgid = zgid;
    return this;
};
this.getZgids = function() {
    return this.zgid;
};
this.addZgid = function(zgid) { 
 if(!this.zgid) this.zgid = new Array(); 
  this.zgid.push(zgid); 
 return this;
};

var zaaid = undefined;
this.setZaaids = function(zaaid) { 
    this.zaaid = zaaid;
    return this;
};
this.getZaaids = function() {
    return this.zaaid;
};
this.addZaaid = function(zaaid) { 
 if(!this.zaaid) this.zaaid = new Array(); 
  this.zaaid.push(zaaid); 
 return this;
};

var parentzaid = undefined;
this.setParentzaid = function(parentzaid) { 
    this.parentzaid = parentzaid;
    return this;
};
this.getParentzaid = function() {
    return this.parentzaid;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZaid(json["zaid"]);
		this.setAuthType(json["auth_type"]);
		this.setAccountnames(URI.getResourceArray(json["accountName"],"accountname"));
		this.setZuids(URI.getResourceArray(json["zUID"],"zuid"));
		this.setZgids(URI.getResourceArray(json["zGID"],"zgid"));
		this.setZaaids(URI.getResourceArray(json["zAAID"],"zaaid"));
		this.setParentzaid(URI.getResource(json["parentZAID"],"parentzaid"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getAuthType()) json += '"auth_type"' + ":" + '"' + jsonEscape(this.getAuthType())  + '",';
		if(this.getAccountnames()) json += '"accountName"' + ":" + URI.toJSONArray(this.getAccountnames())  + ',';
		if(this.getZuids()) json += '"zUID"' + ":" + URI.toJSONArray(this.getZuids())  + ',';
		if(this.getZgids()) json += '"zGID"' + ":" + URI.toJSONArray(this.getZgids())  + ',';
		if(this.getZaaids()) json += '"zAAID"' + ":" + URI.toJSONArray(this.getZaaids())  + ',';
		if(this.getParentzaid()) json += '"parentZAID"' + ":" + this.getParentzaid().toJSON()  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ZAID.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.authType && !(/^([A-Za-z0-9_.\-]+)$/).test(this.authType)) { throw new ValidationError(_formprefix + "auth_type", ValidationError.PATTERN_FAILED);}
if(this.accountname) { for(i=0; i < this.accountname.length; i++ ) { this.accountname[i].validate(); } }
if(this.zuid) { for(i=0; i < this.zuid.length; i++ ) { this.zuid[i].validate(); } }
if(this.zgid) { for(i=0; i < this.zgid.length; i++ ) { this.zgid[i].validate(); } }
if(this.zaaid) { for(i=0; i < this.zaaid.length; i++ ) { this.zaaid[i].validate(); } }
if(this.parentzaid) { this.parentzaid.validate(); }

	return this;
    }
}
ZAID.path = "zaid";
ZAID.newBuilder = function() {
    return new ZAID();
};

ServiceOrgLogo = function() {
    var _formprefix = "";
    
var viewPermission = "";
this.setViewPermission = function(viewPermission) { 
    this.viewPermission = viewPermission;
    return this;
};
this.getViewPermission = function() {
    return this.viewPermission;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setViewPermission(json["view_permission"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getViewPermission()) json += '"view_permission"' + ":" + '"' + jsonEscape(this.getViewPermission())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgLogo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.viewPermission && !Validator.INTEGER.test(this.viewPermission)) { throw new ValidationError(_formprefix + "view_permission", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgLogo.path = "serviceorglogo";
ServiceOrgLogo.newBuilder = function() {
    return new ServiceOrgLogo();
};

SAMLSpUser = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidType = "1";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidType(json["zid_type"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SAMLSpUser.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.zidType && !Validator.INTEGER.test(this.zidType)) { throw new ValidationError(_formprefix + "zid_type", ValidationError.PATTERN_FAILED);}
if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SAMLSpUser.path = "samlspuser";
SAMLSpUser.newBuilder = function() {
    return new SAMLSpUser();
};

Role = function() {
    var _formprefix = "";
    
var zarid = "";
this.setZarid = function(zarid) { 
    this.zarid = zarid;
    return this;
};
this.getZarid = function() {
    return this.zarid;
};
var roleType = "0";
this.setRoleType = function(roleType) { 
    this.roleType = roleType;
    return this;
};
this.getRoleType = function() {
    return this.roleType;
};
var roleName = "";
this.setRoleName = function(roleName) { 
    this.roleName = roleName;
    return this;
};
this.getRoleName = function() {
    return this.roleName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var approleoperations = undefined;
this.setApproleoperationss = function(approleoperations) { 
    this.approleoperations = approleoperations;
    return this;
};
this.getApproleoperationss = function() {
    return this.approleoperations;
};
this.addApproleoperations = function(approleoperations) { 
 if(!this.approleoperations) this.approleoperations = new Array(); 
  this.approleoperations.push(approleoperations); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZarid(json["zarid"]);
		this.setRoleType(json["role_type"]);
		this.setRoleName(json["role_name"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setApproleoperationss(URI.getResourceArray(json["appRoleOperations"],"approleoperations"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZarid()) json += '"zarid"' + ":" + '"' + jsonEscape(this.getZarid())  + '",';
		if(this.getRoleType()) json += '"role_type"' + ":" + '"' + jsonEscape(this.getRoleType())  + '",';
		if(this.getRoleName()) json += '"role_name"' + ":" + '"' + jsonEscape(this.getRoleName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getApproleoperationss()) json += '"appRoleOperations"' + ":" + URI.toJSONArray(this.getApproleoperationss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Role.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zarid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zarid)) { throw new ValidationError(_formprefix + "zarid", ValidationError.PATTERN_FAILED);}
if(this.roleName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.roleName)) { throw new ValidationError(_formprefix + "role_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.approleoperations) { for(i=0; i < this.approleoperations.length; i++ ) { this.approleoperations[i].validate(); } }

	return this;
    }
}
Role.path = "role";
Role.newBuilder = function() {
    return new Role();
};

GroupSyncServices = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var serviceResourceId = "";
this.setServiceResourceId = function(serviceResourceId) { 
    this.serviceResourceId = serviceResourceId;
    return this;
};
this.getServiceResourceId = function() {
    return this.serviceResourceId;
};
var serviceResourceType = "";
this.setServiceResourceType = function(serviceResourceType) { 
    this.serviceResourceType = serviceResourceType;
    return this;
};
this.getServiceResourceType = function() {
    return this.serviceResourceType;
};
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setServiceResourceId(json["service_resource_id"]);
		this.setServiceResourceType(json["service_resource_type"]);
		this.setAppId(json["app_id"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getServiceResourceId()) json += '"service_resource_id"' + ":" + '"' + jsonEscape(this.getServiceResourceId())  + '",';
		if(this.getServiceResourceType()) json += '"service_resource_type"' + ":" + '"' + jsonEscape(this.getServiceResourceType())  + '",';
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(GroupSyncServices.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.serviceResourceId && !Validator.INTEGER.test(this.serviceResourceId)) { throw new ValidationError(_formprefix + "service_resource_id", ValidationError.PATTERN_FAILED);}
if(this.appId && !(/^[a-zA-Z0-9_\-]+$/).test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
GroupSyncServices.path = "groupsyncservices";
GroupSyncServices.newBuilder = function() {
    return new GroupSyncServices();
};

AuthorizedIp = function() {
    var _formprefix = "";
    
var ipid = "";
this.setIpid = function(ipid) { 
    this.ipid = ipid;
    return this;
};
this.getIpid = function() {
    return this.ipid;
};
var name = "";
this.setName = function(name) { 
    this.name = name;
    return this;
};
this.getName = function() {
    return this.name;
};
var fromIp = "";
this.setFromIp = function(fromIp) { 
    this.fromIp = fromIp;
    return this;
};
this.getFromIp = function() {
    return this.fromIp;
};
var toIp = "";
this.setToIp = function(toIp) { 
    this.toIp = toIp;
    return this;
};
this.getToIp = function() {
    return this.toIp;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setIpid(json["ipid"]);
		this.setName(json["name"]);
		this.setFromIp(json["from_ip"]);
		this.setToIp(json["to_ip"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getIpid()) json += '"ipid"' + ":" + '"' + jsonEscape(this.getIpid())  + '",';
		if(this.getName()) json += '"name"' + ":" + '"' + jsonEscape(this.getName())  + '",';
		if(this.getFromIp()) json += '"from_ip"' + ":" + '"' + jsonEscape(this.getFromIp())  + '",';
		if(this.getToIp()) json += '"to_ip"' + ":" + '"' + jsonEscape(this.getToIp())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AuthorizedIp.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.ipid && !Validator.INTEGER.test(this.ipid)) { throw new ValidationError(_formprefix + "ipid", ValidationError.PATTERN_FAILED);}
if(this.fromIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.fromIp)) { throw new ValidationError(_formprefix + "from_ip", ValidationError.PATTERN_FAILED);}
if(this.toIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.toIp)) { throw new ValidationError(_formprefix + "to_ip", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AuthorizedIp.path = "authorizedip";
AuthorizedIp.newBuilder = function() {
    return new AuthorizedIp();
};

PortalAccountMapping = function() {
    var _formprefix = "";
    
var accountId = "";
this.setAccountId = function(accountId) { 
    this.accountId = accountId;
    return this;
};
this.getAccountId = function() {
    return this.accountId;
};
var accountType = "";
this.setAccountType = function(accountType) { 
    this.accountType = accountType;
    return this;
};
this.getAccountType = function() {
    return this.accountType;
};
var accountName = "";
this.setAccountName = function(accountName) { 
    this.accountName = accountName;
    return this;
};
this.getAccountName = function() {
    return this.accountName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAccountId(json["account_id"]);
		this.setAccountType(json["account_type"]);
		this.setAccountName(json["account_name"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAccountId()) json += '"account_id"' + ":" + '"' + jsonEscape(this.getAccountId())  + '",';
		if(this.getAccountType()) json += '"account_type"' + ":" + '"' + jsonEscape(this.getAccountType())  + '",';
		if(this.getAccountName()) json += '"account_name"' + ":" + '"' + jsonEscape(this.getAccountName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(PortalAccountMapping.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.accountId && !Validator.INTEGER.test(this.accountId)) { throw new ValidationError(_formprefix + "account_id", ValidationError.PATTERN_FAILED);}
if(this.accountType && !Validator.INTEGER.test(this.accountType)) { throw new ValidationError(_formprefix + "account_type", ValidationError.PATTERN_FAILED);}
if(this.accountName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.accountName)) { throw new ValidationError(_formprefix + "account_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
PortalAccountMapping.path = "portalaccountmapping";
PortalAccountMapping.newBuilder = function() {
    return new PortalAccountMapping();
};

Domain = function() {
    var _formprefix = "";
    
var domain = "";
this.setDomain = function(domain) { 
    this.domain = domain;
    return this;
};
this.getDomain = function() {
    return this.domain;
};
var isPrimary = "0";
this.setIsPrimary = function(isPrimary) { 
    this.isPrimary = isPrimary;
    return this;
};
this.getIsPrimary = function() {
    return this.isPrimary;
};
var isRegisteredByZoho = "0";
this.setIsRegisteredByZoho = function(isRegisteredByZoho) { 
    this.isRegisteredByZoho = isRegisteredByZoho;
    return this;
};
this.getIsRegisteredByZoho = function() {
    return this.isRegisteredByZoho;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var verificationCode = "";
this.setVerificationCode = function(verificationCode) { 
    this.verificationCode = verificationCode;
    return this;
};
this.getVerificationCode = function() {
    return this.verificationCode;
};
var verificationMode = "";
this.setVerificationMode = function(verificationMode) { 
    this.verificationMode = verificationMode;
    return this;
};
this.getVerificationMode = function() {
    return this.verificationMode;
};
var isVerified = "false";
this.setIsVerified = function(isVerified) { 
    this.isVerified = isVerified;
    return this;
};
this.getIsVerified = function() {
    return this.isVerified;
};
var verificationDate = "";
this.setVerificationDate = function(verificationDate) { 
    this.verificationDate = verificationDate;
    return this;
};
this.getVerificationDate = function() {
    return this.verificationDate;
};
var verifiedBy = "";
this.setVerifiedBy = function(verifiedBy) { 
    this.verifiedBy = verifiedBy;
    return this;
};
this.getVerifiedBy = function() {
    return this.verifiedBy;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var parentDomain = "";
this.setParentDomain = function(parentDomain) { 
    this.parentDomain = parentDomain;
    return this;
};
this.getParentDomain = function() {
    return this.parentDomain;
};
var expiryDate = "";
this.setExpiryDate = function(expiryDate) { 
    this.expiryDate = expiryDate;
    return this;
};
this.getExpiryDate = function() {
    return this.expiryDate;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDomain(json["domain"]);
		this.setIsPrimary(json["is_primary"]);
		this.setIsRegisteredByZoho(json["is_registered_by_zoho"]);
		this.setCreatedTime(json["created_time"]);
		this.setVerificationCode(json["verification_code"]);
		this.setVerificationMode(json["verification_mode"]);
		this.setIsVerified(json["is_verified"]);
		this.setVerificationDate(json["verification_date"]);
		this.setVerifiedBy(json["verified_by"]);
		this.setModifiedTime(json["modified_time"]);
		this.setParentDomain(json["parent_domain"]);
		this.setExpiryDate(json["expiry_date"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDomain()) json += '"domain"' + ":" + '"' + jsonEscape(this.getDomain())  + '",';
		if(this.getIsPrimary()) json += '"is_primary"' + ":" + '"' + jsonEscape(this.getIsPrimary())  + '",';
		if(this.getIsRegisteredByZoho()) json += '"is_registered_by_zoho"' + ":" + '"' + jsonEscape(this.getIsRegisteredByZoho())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getVerificationCode()) json += '"verification_code"' + ":" + '"' + jsonEscape(this.getVerificationCode())  + '",';
		if(this.getVerificationMode()) json += '"verification_mode"' + ":" + '"' + jsonEscape(this.getVerificationMode())  + '",';
		if(this.getIsVerified()) json += '"is_verified"' + ":" + '"' + jsonEscape(this.getIsVerified())  + '",';
		if(this.getVerificationDate()) json += '"verification_date"' + ":" + '"' + jsonEscape(this.getVerificationDate())  + '",';
		if(this.getVerifiedBy()) json += '"verified_by"' + ":" + '"' + jsonEscape(this.getVerifiedBy())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getParentDomain()) json += '"parent_domain"' + ":" + '"' + jsonEscape(this.getParentDomain())  + '",';
		if(this.getExpiryDate()) json += '"expiry_date"' + ":" + '"' + jsonEscape(this.getExpiryDate())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Domain.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.domain && !(/^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)|([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}$/).test(this.domain)) { throw new ValidationError(_formprefix + "domain", ValidationError.PATTERN_FAILED);}
if(this.isPrimary && !Validator.INTEGER.test(this.isPrimary)) { throw new ValidationError(_formprefix + "is_primary", ValidationError.PATTERN_FAILED);}
if(this.isRegisteredByZoho && !Validator.INTEGER.test(this.isRegisteredByZoho)) { throw new ValidationError(_formprefix + "is_registered_by_zoho", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.verificationCode && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.verificationCode)) { throw new ValidationError(_formprefix + "verification_code", ValidationError.PATTERN_FAILED);}
if(this.verificationMode && !Validator.INTEGER.test(this.verificationMode)) { throw new ValidationError(_formprefix + "verification_mode", ValidationError.PATTERN_FAILED);}
if(this.isVerified && !Validator.BOOLEAN.test(this.isVerified)) { throw new ValidationError(_formprefix + "is_verified", ValidationError.PATTERN_FAILED);}
if(this.verificationDate && !Validator.INTEGER.test(this.verificationDate)) { throw new ValidationError(_formprefix + "verification_date", ValidationError.PATTERN_FAILED);}
if(this.verifiedBy && !(/^[a-zA-Z0-9_\-]+$/).test(this.verifiedBy)) { throw new ValidationError(_formprefix + "verified_by", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.parentDomain && !(/^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)|([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}$/).test(this.parentDomain)) { throw new ValidationError(_formprefix + "parent_domain", ValidationError.PATTERN_FAILED);}
if(this.expiryDate && !Validator.INTEGER.test(this.expiryDate)) { throw new ValidationError(_formprefix + "expiry_date", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Domain.path = "domain";
Domain.newBuilder = function() {
    return new Domain();
};

Announcements = function() {
    var _formprefix = "";
    
var announcementId = "";
this.setAnnouncementId = function(announcementId) { 
    this.announcementId = announcementId;
    return this;
};
this.getAnnouncementId = function() {
    return this.announcementId;
};
var title = "";
this.setTitle = function(title) { 
    this.title = title;
    return this;
};
this.getTitle = function() {
    return this.title;
};
var expiryDate = "";
this.setExpiryDate = function(expiryDate) { 
    this.expiryDate = expiryDate;
    return this;
};
this.getExpiryDate = function() {
    return this.expiryDate;
};
var content = "";
this.setContent = function(content) { 
    this.content = content;
    return this;
};
this.getContent = function() {
    return this.content;
};
var announcementOwner = "";
this.setAnnouncementOwner = function(announcementOwner) { 
    this.announcementOwner = announcementOwner;
    return this;
};
this.getAnnouncementOwner = function() {
    return this.announcementOwner;
};
var announcementOwnerResource = "";
this.setAnnouncementOwnerResource = function(announcementOwnerResource) { 
    this.announcementOwnerResource = announcementOwnerResource;
    return this;
};
this.getAnnouncementOwnerResource = function() {
    return this.announcementOwnerResource;
};
var announcementStatus = "";
this.setAnnouncementStatus = function(announcementStatus) { 
    this.announcementStatus = announcementStatus;
    return this;
};
this.getAnnouncementStatus = function() {
    return this.announcementStatus;
};
var createdBy = "";
this.setCreatedBy = function(createdBy) { 
    this.createdBy = createdBy;
    return this;
};
this.getCreatedBy = function() {
    return this.createdBy;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAnnouncementId(json["announcement_id"]);
		this.setTitle(json["title"]);
		this.setExpiryDate(json["expiry_date"]);
		this.setContent(json["content"]);
		this.setAnnouncementOwner(json["announcement_owner"]);
		this.setAnnouncementOwnerResource(json["announcement_owner_resource"]);
		this.setAnnouncementStatus(json["announcement_status"]);
		this.setCreatedBy(json["created_by"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAnnouncementId()) json += '"announcement_id"' + ":" + '"' + jsonEscape(this.getAnnouncementId())  + '",';
		if(this.getTitle()) json += '"title"' + ":" + '"' + jsonEscape(this.getTitle())  + '",';
		if(this.getExpiryDate()) json += '"expiry_date"' + ":" + '"' + jsonEscape(this.getExpiryDate())  + '",';
		if(this.getContent()) json += '"content"' + ":" + '"' + jsonEscape(this.getContent())  + '",';
		if(this.getAnnouncementOwner()) json += '"announcement_owner"' + ":" + '"' + jsonEscape(this.getAnnouncementOwner())  + '",';
		if(this.getAnnouncementOwnerResource()) json += '"announcement_owner_resource"' + ":" + '"' + jsonEscape(this.getAnnouncementOwnerResource())  + '",';
		if(this.getAnnouncementStatus()) json += '"announcement_status"' + ":" + '"' + jsonEscape(this.getAnnouncementStatus())  + '",';
		if(this.getCreatedBy()) json += '"created_by"' + ":" + '"' + jsonEscape(this.getCreatedBy())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Announcements.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.announcementId && !(/^[a-zA-Z0-9_\-]+$/).test(this.announcementId)) { throw new ValidationError(_formprefix + "announcement_id", ValidationError.PATTERN_FAILED);}
if(this.title && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.title)) { throw new ValidationError(_formprefix + "title", ValidationError.PATTERN_FAILED);}
if(this.expiryDate && !Validator.INTEGER.test(this.expiryDate)) { throw new ValidationError(_formprefix + "expiry_date", ValidationError.PATTERN_FAILED);}
if(this.content && !(/xss:throwerror/).test(this.content)) { throw new ValidationError(_formprefix + "content", ValidationError.PATTERN_FAILED);}
if(this.announcementOwner && !(/^([A-Za-z0-9_.\-]+)$/).test(this.announcementOwner)) { throw new ValidationError(_formprefix + "announcement_owner", ValidationError.PATTERN_FAILED);}
if(this.announcementOwnerResource && !(/^([A-Za-z0-9_.\-]+)$/).test(this.announcementOwnerResource)) { throw new ValidationError(_formprefix + "announcement_owner_resource", ValidationError.PATTERN_FAILED);}
if(this.announcementStatus && !Validator.INTEGER.test(this.announcementStatus)) { throw new ValidationError(_formprefix + "announcement_status", ValidationError.PATTERN_FAILED);}
if(this.createdBy && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.createdBy)) { throw new ValidationError(_formprefix + "created_by", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Announcements.path = "announcements";
Announcements.newBuilder = function() {
    return new Announcements();
};

OAuthApiToken = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidType = "1";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var apiKey = "";
this.setApiKey = function(apiKey) { 
    this.apiKey = apiKey;
    return this;
};
this.getApiKey = function() {
    return this.apiKey;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var isActive = "1";
this.setIsActive = function(isActive) { 
    this.isActive = isActive;
    return this;
};
this.getIsActive = function() {
    return this.isActive;
};
var orgType = "";
this.setOrgType = function(orgType) { 
    this.orgType = orgType;
    return this;
};
this.getOrgType = function() {
    return this.orgType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var oauthapitokenscopes = undefined;
this.setOauthapitokenscopess = function(oauthapitokenscopes) { 
    this.oauthapitokenscopes = oauthapitokenscopes;
    return this;
};
this.getOauthapitokenscopess = function() {
    return this.oauthapitokenscopes;
};
this.addOauthapitokenscopes = function(oauthapitokenscopes) { 
 if(!this.oauthapitokenscopes) this.oauthapitokenscopes = new Array(); 
  this.oauthapitokenscopes.push(oauthapitokenscopes); 
 return this;
};

var oauthinternalapitoken = undefined;
this.setOauthinternalapitokens = function(oauthinternalapitoken) { 
    this.oauthinternalapitoken = oauthinternalapitoken;
    return this;
};
this.getOauthinternalapitokens = function() {
    return this.oauthinternalapitoken;
};
this.addOauthinternalapitoken = function(oauthinternalapitoken) { 
 if(!this.oauthinternalapitoken) this.oauthinternalapitoken = new Array(); 
  this.oauthinternalapitoken.push(oauthinternalapitoken); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidType(json["zid_type"]);
		this.setApiKey(json["api_key"]);
		this.setDescription(json["description"]);
		this.setIsActive(json["is_active"]);
		this.setOrgType(json["org_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setOauthapitokenscopess(URI.getResourceArray(json["oAuthApiTokenScopes"],"oauthapitokenscopes"));
		this.setOauthinternalapitokens(URI.getResourceArray(json["oAuthInternalApiToken"],"oauthinternalapitoken"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getApiKey()) json += '"api_key"' + ":" + '"' + jsonEscape(this.getApiKey())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getIsActive()) json += '"is_active"' + ":" + '"' + jsonEscape(this.getIsActive())  + '",';
		if(this.getOrgType()) json += '"org_type"' + ":" + '"' + jsonEscape(this.getOrgType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getOauthapitokenscopess()) json += '"oAuthApiTokenScopes"' + ":" + URI.toJSONArray(this.getOauthapitokenscopess())  + ',';
		if(this.getOauthinternalapitokens()) json += '"oAuthInternalApiToken"' + ":" + URI.toJSONArray(this.getOauthinternalapitokens())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthApiToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.zidType && !Validator.INTEGER.test(this.zidType)) { throw new ValidationError(_formprefix + "zid_type", ValidationError.PATTERN_FAILED);}
if(this.apiKey && !(/xss:throwerror/).test(this.apiKey)) { throw new ValidationError(_formprefix + "api_key", ValidationError.PATTERN_FAILED);}
if(this.description && !(/xss:throwerror/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.isActive && !Validator.INTEGER.test(this.isActive)) { throw new ValidationError(_formprefix + "is_active", ValidationError.PATTERN_FAILED);}
if(this.orgType && !Validator.INTEGER.test(this.orgType)) { throw new ValidationError(_formprefix + "org_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.oauthapitokenscopes) { for(i=0; i < this.oauthapitokenscopes.length; i++ ) { this.oauthapitokenscopes[i].validate(); } }
if(this.oauthinternalapitoken) { for(i=0; i < this.oauthinternalapitoken.length; i++ ) { this.oauthinternalapitoken[i].validate(); } }

	return this;
    }
}
OAuthApiToken.path = "oauthapitoken";
OAuthApiToken.newBuilder = function() {
    return new OAuthApiToken();
};

UserTokenPairDetails = function() {
    var _formprefix = "";
    
var details = "";
this.setDetails = function(details) { 
    this.details = details;
    return this;
};
this.getDetails = function() {
    return this.details;
};
var idleSessionTimeout = "0";
this.setIdleSessionTimeout = function(idleSessionTimeout) { 
    this.idleSessionTimeout = idleSessionTimeout;
    return this;
};
this.getIdleSessionTimeout = function() {
    return this.idleSessionTimeout;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDetails(json["details"]);
		this.setIdleSessionTimeout(json["idle_session_timeout"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDetails()) json += '"details"' + ":" + '"' + jsonEscape(this.getDetails())  + '",';
		if(this.getIdleSessionTimeout()) json += '"idle_session_timeout"' + ":" + '"' + jsonEscape(this.getIdleSessionTimeout())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserTokenPairDetails.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.idleSessionTimeout && !Validator.INTEGER.test(this.idleSessionTimeout)) { throw new ValidationError(_formprefix + "idle_session_timeout", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserTokenPairDetails.path = "usertokenpairdetails";
UserTokenPairDetails.newBuilder = function() {
    return new UserTokenPairDetails();
};

AccountJoinRequests = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var status = "0";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var argsData = "";
this.setArgsData = function(argsData) { 
    this.argsData = argsData;
    return this;
};
this.getArgsData = function() {
    return this.argsData;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setStatus(json["status"]);
		this.setIpAddress(json["ip_address"]);
		this.setArgsData(json["args_data"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getArgsData()) json += '"args_data"' + ":" + '"' + jsonEscape(this.getArgsData())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountJoinRequests.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.status && !Validator.INTEGER.test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountJoinRequests.path = "accountjoinrequests";
AccountJoinRequests.newBuilder = function() {
    return new AccountJoinRequests();
};

OAuthTokenUsage = function() {
    var _formprefix = "";
    
var clientId = "";
this.setClientId = function(clientId) { 
    this.clientId = clientId;
    return this;
};
this.getClientId = function() {
    return this.clientId;
};
var userId = "-1";
this.setUserId = function(userId) { 
    this.userId = userId;
    return this;
};
this.getUserId = function() {
    return this.userId;
};
var clientApprovedTime = "";
this.setClientApprovedTime = function(clientApprovedTime) { 
    this.clientApprovedTime = clientApprovedTime;
    return this;
};
this.getClientApprovedTime = function() {
    return this.clientApprovedTime;
};
var clientAccessedIp = "";
this.setClientAccessedIp = function(clientAccessedIp) { 
    this.clientAccessedIp = clientAccessedIp;
    return this;
};
this.getClientAccessedIp = function() {
    return this.clientAccessedIp;
};
var clientAccessedTime = "";
this.setClientAccessedTime = function(clientAccessedTime) { 
    this.clientAccessedTime = clientAccessedTime;
    return this;
};
this.getClientAccessedTime = function() {
    return this.clientAccessedTime;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClientId(json["client_id"]);
		this.setUserId(json["user_id"]);
		this.setClientApprovedTime(json["client_approved_time"]);
		this.setClientAccessedIp(json["client_accessed_ip"]);
		this.setClientAccessedTime(json["client_accessed_time"]);
		this.setUserAgent(json["user_agent"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClientId()) json += '"client_id"' + ":" + '"' + jsonEscape(this.getClientId())  + '",';
		if(this.getUserId()) json += '"user_id"' + ":" + '"' + jsonEscape(this.getUserId())  + '",';
		if(this.getClientApprovedTime()) json += '"client_approved_time"' + ":" + '"' + jsonEscape(this.getClientApprovedTime())  + '",';
		if(this.getClientAccessedIp()) json += '"client_accessed_ip"' + ":" + '"' + jsonEscape(this.getClientAccessedIp())  + '",';
		if(this.getClientAccessedTime()) json += '"client_accessed_time"' + ":" + '"' + jsonEscape(this.getClientAccessedTime())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthTokenUsage.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.clientId && !(/^(?:[a-z0-9\.\-])+$/).test(this.clientId)) { throw new ValidationError(_formprefix + "client_id", ValidationError.PATTERN_FAILED);}
if(this.userId && !(/^[a-zA-Z0-9_\-]+$/).test(this.userId)) { throw new ValidationError(_formprefix + "user_id", ValidationError.PATTERN_FAILED);}
if(this.clientApprovedTime && !Validator.INTEGER.test(this.clientApprovedTime)) { throw new ValidationError(_formprefix + "client_approved_time", ValidationError.PATTERN_FAILED);}
if(this.clientAccessedIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.clientAccessedIp)) { throw new ValidationError(_formprefix + "client_accessed_ip", ValidationError.PATTERN_FAILED);}
if(this.clientAccessedTime && !Validator.INTEGER.test(this.clientAccessedTime)) { throw new ValidationError(_formprefix + "client_accessed_time", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthTokenUsage.path = "oauthtokenusage";
OAuthTokenUsage.newBuilder = function() {
    return new OAuthTokenUsage();
};

Listener = function() {
    var _formprefix = "";
    
var name = "";
this.setName = function(name) { 
    this.name = name;
    return this;
};
this.getName = function() {
    return this.name;
};
var resourceTypePattern = "";
this.setResourceTypePattern = function(resourceTypePattern) { 
    this.resourceTypePattern = resourceTypePattern;
    return this;
};
this.getResourceTypePattern = function() {
    return this.resourceTypePattern;
};
var lastNotifiedTime = "";
this.setLastNotifiedTime = function(lastNotifiedTime) { 
    this.lastNotifiedTime = lastNotifiedTime;
    return this;
};
this.getLastNotifiedTime = function() {
    return this.lastNotifiedTime;
};
var lastUpdatedTime = "-1";
this.setLastUpdatedTime = function(lastUpdatedTime) { 
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
};
this.getLastUpdatedTime = function() {
    return this.lastUpdatedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setName(json["name"]);
		this.setResourceTypePattern(json["resource_type_pattern"]);
		this.setLastNotifiedTime(json["last_notified_time"]);
		this.setLastUpdatedTime(json["last_updated_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getName()) json += '"name"' + ":" + '"' + jsonEscape(this.getName())  + '",';
		if(this.getResourceTypePattern()) json += '"resource_type_pattern"' + ":" + '"' + jsonEscape(this.getResourceTypePattern())  + '",';
		if(this.getLastNotifiedTime()) json += '"last_notified_time"' + ":" + '"' + jsonEscape(this.getLastNotifiedTime())  + '",';
		if(this.getLastUpdatedTime()) json += '"last_updated_time"' + ":" + '"' + jsonEscape(this.getLastUpdatedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Listener.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.name && !(/^([A-Za-z0-9_.\-]+)$/).test(this.name)) { throw new ValidationError(_formprefix + "name", ValidationError.PATTERN_FAILED);}
if(this.resourceTypePattern && !(/dontdisturb/).test(this.resourceTypePattern)) { throw new ValidationError(_formprefix + "resource_type_pattern", ValidationError.PATTERN_FAILED);}
if(this.lastNotifiedTime && !Validator.INTEGER.test(this.lastNotifiedTime)) { throw new ValidationError(_formprefix + "last_notified_time", ValidationError.PATTERN_FAILED);}
if(this.lastUpdatedTime && !Validator.INTEGER.test(this.lastUpdatedTime)) { throw new ValidationError(_formprefix + "last_updated_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Listener.path = "listener";
Listener.newBuilder = function() {
    return new Listener();
};

TrustedDomain = function() {
    var _formprefix = "";
    
var trustedDomain = "";
this.setTrustedDomain = function(trustedDomain) { 
    this.trustedDomain = trustedDomain;
    return this;
};
this.getTrustedDomain = function() {
    return this.trustedDomain;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var ipAuditInfo = "";
this.setIpAuditInfo = function(ipAuditInfo) { 
    this.ipAuditInfo = ipAuditInfo;
    return this;
};
this.getIpAuditInfo = function() {
    return this.ipAuditInfo;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTrustedDomain(json["trusted_domain"]);
		this.setIpAddress(json["ip_address"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);
		this.setIpAuditInfo(json["ip_audit_info"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTrustedDomain()) json += '"trusted_domain"' + ":" + '"' + jsonEscape(this.getTrustedDomain())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getIpAuditInfo()) json += '"ip_audit_info"' + ":" + '"' + jsonEscape(this.getIpAuditInfo())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(TrustedDomain.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.trustedDomain && !(/^([\p{L}\p{M}\p{N}]([\p{L}\p{M}\p{N}\-]{0,61}[\p{L}\p{M}\p{N}])?\.)+[\p{L}\p{M}]{2,6}$/).test(this.trustedDomain)) { throw new ValidationError(_formprefix + "trusted_domain", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/xss:throwerror/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
TrustedDomain.path = "trusteddomain";
TrustedDomain.newBuilder = function() {
    return new TrustedDomain();
};

UserInfo = function() {
    var _formprefix = "";
    
var state = "";
this.setState = function(state) { 
    this.state = state;
    return this;
};
this.getState = function() {
    return this.state;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setState(json["state"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getState()) json += '"state"' + ":" + '"' + jsonEscape(this.getState())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserInfo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.state && !(/xss:throwerror/).test(this.state)) { throw new ValidationError(_formprefix + "state", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserInfo.path = "userinfo";
UserInfo.newBuilder = function() {
    return new UserInfo();
};

AppAccount = function() {
    var _formprefix = "";
    
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var screenName = "";
this.setScreenName = function(screenName) { 
    this.screenName = screenName;
    return this;
};
this.getScreenName = function() {
    return this.screenName;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var zaaid = "";
this.setZaaid = function(zaaid) { 
    this.zaaid = zaaid;
    return this;
};
this.getZaaid = function() {
    return this.zaaid;
};
var resourceHierarchyId = "";
this.setResourceHierarchyId = function(resourceHierarchyId) { 
    this.resourceHierarchyId = resourceHierarchyId;
    return this;
};
this.getResourceHierarchyId = function() {
    return this.resourceHierarchyId;
};
var roleHierarchyId = "";
this.setRoleHierarchyId = function(roleHierarchyId) { 
    this.roleHierarchyId = roleHierarchyId;
    return this;
};
this.getRoleHierarchyId = function() {
    return this.roleHierarchyId;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var accountStatus = "1";
this.setAccountStatus = function(accountStatus) { 
    this.accountStatus = accountStatus;
    return this;
};
this.getAccountStatus = function() {
    return this.accountStatus;
};
var parentZaaid = "";
this.setParentZaaid = function(parentZaaid) { 
    this.parentZaaid = parentZaaid;
    return this;
};
this.getParentZaaid = function() {
    return this.parentZaaid;
};
var directoryZaaid = "";
this.setDirectoryZaaid = function(directoryZaaid) { 
    this.directoryZaaid = directoryZaaid;
    return this;
};
this.getDirectoryZaaid = function() {
    return this.directoryZaaid;
};
var isExposed = "1";
this.setIsExposed = function(isExposed) { 
    this.isExposed = isExposed;
    return this;
};
this.getIsExposed = function() {
    return this.isExposed;
};
var environment = "1";
this.setEnvironment = function(environment) { 
    this.environment = environment;
    return this;
};
this.getEnvironment = function() {
    return this.environment;
};
var serviceType = "";
this.setServiceType = function(serviceType) { 
    this.serviceType = serviceType;
    return this;
};
this.getServiceType = function() {
    return this.serviceType;
};
var parentOrgType = "";
this.setParentOrgType = function(parentOrgType) { 
    this.parentOrgType = parentOrgType;
    return this;
};
this.getParentOrgType = function() {
    return this.parentOrgType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var appaccountservice = undefined;
this.setAppaccountservices = function(appaccountservice) { 
    this.appaccountservice = appaccountservice;
    return this;
};
this.getAppaccountservices = function() {
    return this.appaccountservice;
};
this.addAppaccountservice = function(appaccountservice) { 
 if(!this.appaccountservice) this.appaccountservice = new Array(); 
  this.appaccountservice.push(appaccountservice); 
 return this;
};

var appaccountmember = undefined;
this.setAppaccountmembers = function(appaccountmember) { 
    this.appaccountmember = appaccountmember;
    return this;
};
this.getAppaccountmembers = function() {
    return this.appaccountmember;
};
this.addAppaccountmember = function(appaccountmember) { 
 if(!this.appaccountmember) this.appaccountmember = new Array(); 
  this.appaccountmember.push(appaccountmember); 
 return this;
};

var rebrand = undefined;
this.setRebrands = function(rebrand) { 
    this.rebrand = rebrand;
    return this;
};
this.getRebrands = function() {
    return this.rebrand;
};
this.addRebrand = function(rebrand) { 
 if(!this.rebrand) this.rebrand = new Array(); 
  this.rebrand.push(rebrand); 
 return this;
};

var license = undefined;
this.setLicenses = function(license) { 
    this.license = license;
    return this;
};
this.getLicenses = function() {
    return this.license;
};
this.addLicense = function(license) { 
 if(!this.license) this.license = new Array(); 
  this.license.push(license); 
 return this;
};

var attribute = undefined;
this.setAttributes = function(attribute) { 
    this.attribute = attribute;
    return this;
};
this.getAttributes = function() {
    return this.attribute;
};
this.addAttribute = function(attribute) { 
 if(!this.attribute) this.attribute = new Array(); 
  this.attribute.push(attribute); 
 return this;
};

var accountattribute = undefined;
this.setAccountattributes = function(accountattribute) { 
    this.accountattribute = accountattribute;
    return this;
};
this.getAccountattributes = function() {
    return this.accountattribute;
};
this.addAccountattribute = function(accountattribute) { 
 if(!this.accountattribute) this.accountattribute = new Array(); 
  this.accountattribute.push(accountattribute); 
 return this;
};

var template = undefined;
this.setTemplates = function(template) { 
    this.template = template;
    return this;
};
this.getTemplates = function() {
    return this.template;
};
this.addTemplate = function(template) { 
 if(!this.template) this.template = new Array(); 
  this.template.push(template); 
 return this;
};

var lang = undefined;
this.setLangs = function(lang) { 
    this.lang = lang;
    return this;
};
this.getLangs = function() {
    return this.lang;
};
this.addLang = function(lang) { 
 if(!this.lang) this.lang = new Array(); 
  this.lang.push(lang); 
 return this;
};

var appaccountaddress = undefined;
this.setAppaccountaddresss = function(appaccountaddress) { 
    this.appaccountaddress = appaccountaddress;
    return this;
};
this.getAppaccountaddresss = function() {
    return this.appaccountaddress;
};
this.addAppaccountaddress = function(appaccountaddress) { 
 if(!this.appaccountaddress) this.appaccountaddress = new Array(); 
  this.appaccountaddress.push(appaccountaddress); 
 return this;
};

var appaccountpolicy = undefined;
this.setAppaccountpolicys = function(appaccountpolicy) { 
    this.appaccountpolicy = appaccountpolicy;
    return this;
};
this.getAppaccountpolicys = function() {
    return this.appaccountpolicy;
};
this.addAppaccountpolicy = function(appaccountpolicy) { 
 if(!this.appaccountpolicy) this.appaccountpolicy = new Array(); 
  this.appaccountpolicy.push(appaccountpolicy); 
 return this;
};

var appaccountpreference = undefined;
this.setAppaccountpreference = function(appaccountpreference) { 
    this.appaccountpreference = appaccountpreference;
    return this;
};
this.getAppaccountpreference = function() {
    return this.appaccountpreference;
};
var appaccountfinancialsettings = undefined;
this.setAppaccountfinancialsettings = function(appaccountfinancialsettings) { 
    this.appaccountfinancialsettings = appaccountfinancialsettings;
    return this;
};
this.getAppaccountfinancialsettings = function() {
    return this.appaccountfinancialsettings;
};
var samlspapp = undefined;
this.setSamlspapps = function(samlspapp) { 
    this.samlspapp = samlspapp;
    return this;
};
this.getSamlspapps = function() {
    return this.samlspapp;
};
this.addSamlspapp = function(samlspapp) { 
 if(!this.samlspapp) this.samlspapp = new Array(); 
  this.samlspapp.push(samlspapp); 
 return this;
};

var appaccountdevices = undefined;
this.setAppaccountdevicess = function(appaccountdevices) { 
    this.appaccountdevices = appaccountdevices;
    return this;
};
this.getAppaccountdevicess = function() {
    return this.appaccountdevices;
};
this.addAppaccountdevices = function(appaccountdevices) { 
 if(!this.appaccountdevices) this.appaccountdevices = new Array(); 
  this.appaccountdevices.push(appaccountdevices); 
 return this;
};

var appaccountlogo = undefined;
this.setAppaccountlogo = function(appaccountlogo) { 
    this.appaccountlogo = appaccountlogo;
    return this;
};
this.getAppaccountlogo = function() {
    return this.appaccountlogo;
};
var acp = undefined;
this.setAcps = function(acp) { 
    this.acp = acp;
    return this;
};
this.getAcps = function() {
    return this.acp;
};
this.addAcp = function(acp) { 
 if(!this.acp) this.acp = new Array(); 
  this.acp.push(acp); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppName(json["app_name"]);
		this.setDisplayName(json["display_name"]);
		this.setScreenName(json["screen_name"]);
		this.setZuid(json["zuid"]);
		this.setZaaid(json["zaaid"]);
		this.setResourceHierarchyId(json["resource_hierarchy_id"]);
		this.setRoleHierarchyId(json["role_hierarchy_id"]);
		this.setDescription(json["description"]);
		this.setAccountStatus(json["account_status"]);
		this.setParentZaaid(json["parent_zaaid"]);
		this.setDirectoryZaaid(json["directory_zaaid"]);
		this.setIsExposed(json["is_exposed"]);
		this.setEnvironment(json["environment"]);
		this.setServiceType(json["service_type"]);
		this.setParentOrgType(json["parent_org_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setAppaccountservices(URI.getResourceArray(json["appAccountService"],"appaccountservice"));
		this.setAppaccountmembers(URI.getResourceArray(json["appAccountMember"],"appaccountmember"));
		this.setRebrands(URI.getResourceArray(json["rebrand"],"rebrand"));
		this.setLicenses(URI.getResourceArray(json["license"],"license"));
		this.setAttributes(URI.getResourceArray(json["attribute"],"attribute"));
		this.setAccountattributes(URI.getResourceArray(json["accountAttribute"],"accountattribute"));
		this.setTemplates(URI.getResourceArray(json["template"],"template"));
		this.setLangs(URI.getResourceArray(json["lang"],"lang"));
		this.setAppaccountaddresss(URI.getResourceArray(json["appAccountAddress"],"appaccountaddress"));
		this.setAppaccountpolicys(URI.getResourceArray(json["appAccountPolicy"],"appaccountpolicy"));
		this.setAppaccountpreference(URI.getResource(json["appAccountPreference"],"appaccountpreference"));
		this.setAppaccountfinancialsettings(URI.getResource(json["appAccountFinancialSettings"],"appaccountfinancialsettings"));
		this.setSamlspapps(URI.getResourceArray(json["sAMLSpApp"],"samlspapp"));
		this.setAppaccountdevicess(URI.getResourceArray(json["appAccountDevices"],"appaccountdevices"));
		this.setAppaccountlogo(URI.getResource(json["appAccountLogo"],"appaccountlogo"));
		this.setAcps(URI.getResourceArray(json["aCP"],"acp"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getScreenName()) json += '"screen_name"' + ":" + '"' + jsonEscape(this.getScreenName())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getZaaid()) json += '"zaaid"' + ":" + '"' + jsonEscape(this.getZaaid())  + '",';
		if(this.getResourceHierarchyId()) json += '"resource_hierarchy_id"' + ":" + '"' + jsonEscape(this.getResourceHierarchyId())  + '",';
		if(this.getRoleHierarchyId()) json += '"role_hierarchy_id"' + ":" + '"' + jsonEscape(this.getRoleHierarchyId())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getAccountStatus()) json += '"account_status"' + ":" + '"' + jsonEscape(this.getAccountStatus())  + '",';
		if(this.getParentZaaid()) json += '"parent_zaaid"' + ":" + '"' + jsonEscape(this.getParentZaaid())  + '",';
		if(this.getDirectoryZaaid()) json += '"directory_zaaid"' + ":" + '"' + jsonEscape(this.getDirectoryZaaid())  + '",';
		if(this.getIsExposed()) json += '"is_exposed"' + ":" + '"' + jsonEscape(this.getIsExposed())  + '",';
		if(this.getEnvironment()) json += '"environment"' + ":" + '"' + jsonEscape(this.getEnvironment())  + '",';
		if(this.getServiceType()) json += '"service_type"' + ":" + '"' + jsonEscape(this.getServiceType())  + '",';
		if(this.getParentOrgType()) json += '"parent_org_type"' + ":" + '"' + jsonEscape(this.getParentOrgType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getAppaccountservices()) json += '"appAccountService"' + ":" + URI.toJSONArray(this.getAppaccountservices())  + ',';
		if(this.getAppaccountmembers()) json += '"appAccountMember"' + ":" + URI.toJSONArray(this.getAppaccountmembers())  + ',';
		if(this.getRebrands()) json += '"rebrand"' + ":" + URI.toJSONArray(this.getRebrands())  + ',';
		if(this.getLicenses()) json += '"license"' + ":" + URI.toJSONArray(this.getLicenses())  + ',';
		if(this.getAttributes()) json += '"attribute"' + ":" + URI.toJSONArray(this.getAttributes())  + ',';
		if(this.getAccountattributes()) json += '"accountAttribute"' + ":" + URI.toJSONArray(this.getAccountattributes())  + ',';
		if(this.getTemplates()) json += '"template"' + ":" + URI.toJSONArray(this.getTemplates())  + ',';
		if(this.getLangs()) json += '"lang"' + ":" + URI.toJSONArray(this.getLangs())  + ',';
		if(this.getAppaccountaddresss()) json += '"appAccountAddress"' + ":" + URI.toJSONArray(this.getAppaccountaddresss())  + ',';
		if(this.getAppaccountpolicys()) json += '"appAccountPolicy"' + ":" + URI.toJSONArray(this.getAppaccountpolicys())  + ',';
		if(this.getAppaccountpreference()) json += '"appAccountPreference"' + ":" + this.getAppaccountpreference().toJSON()  + ',';
		if(this.getAppaccountfinancialsettings()) json += '"appAccountFinancialSettings"' + ":" + this.getAppaccountfinancialsettings().toJSON()  + ',';
		if(this.getSamlspapps()) json += '"sAMLSpApp"' + ":" + URI.toJSONArray(this.getSamlspapps())  + ',';
		if(this.getAppaccountdevicess()) json += '"appAccountDevices"' + ":" + URI.toJSONArray(this.getAppaccountdevicess())  + ',';
		if(this.getAppaccountlogo()) json += '"appAccountLogo"' + ":" + this.getAppaccountlogo().toJSON()  + ',';
		if(this.getAcps()) json += '"aCP"' + ":" + URI.toJSONArray(this.getAcps())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccount.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.screenName && !(/^([\p{L}\p{M}\p{N}\_\.]+)$/).test(this.screenName)) { throw new ValidationError(_formprefix + "screen_name", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.zaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaaid)) { throw new ValidationError(_formprefix + "zaaid", ValidationError.PATTERN_FAILED);}
if(this.resourceHierarchyId && !(/^[a-zA-Z0-9_\-]+$/).test(this.resourceHierarchyId)) { throw new ValidationError(_formprefix + "resource_hierarchy_id", ValidationError.PATTERN_FAILED);}
if(this.roleHierarchyId && !(/^[a-zA-Z0-9_\-]+$/).test(this.roleHierarchyId)) { throw new ValidationError(_formprefix + "role_hierarchy_id", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.accountStatus && !Validator.INTEGER.test(this.accountStatus)) { throw new ValidationError(_formprefix + "account_status", ValidationError.PATTERN_FAILED);}
if(this.parentZaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.parentZaaid)) { throw new ValidationError(_formprefix + "parent_zaaid", ValidationError.PATTERN_FAILED);}
if(this.directoryZaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.directoryZaaid)) { throw new ValidationError(_formprefix + "directory_zaaid", ValidationError.PATTERN_FAILED);}
if(this.isExposed && !Validator.INTEGER.test(this.isExposed)) { throw new ValidationError(_formprefix + "is_exposed", ValidationError.PATTERN_FAILED);}
if(this.environment && !Validator.INTEGER.test(this.environment)) { throw new ValidationError(_formprefix + "environment", ValidationError.PATTERN_FAILED);}
if(this.serviceType && !Validator.INTEGER.test(this.serviceType)) { throw new ValidationError(_formprefix + "service_type", ValidationError.PATTERN_FAILED);}
if(this.parentOrgType && !Validator.INTEGER.test(this.parentOrgType)) { throw new ValidationError(_formprefix + "parent_org_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.appaccountservice) { for(i=0; i < this.appaccountservice.length; i++ ) { this.appaccountservice[i].validate(); } }
if(this.appaccountmember) { for(i=0; i < this.appaccountmember.length; i++ ) { this.appaccountmember[i].validate(); } }
if(this.rebrand) { for(i=0; i < this.rebrand.length; i++ ) { this.rebrand[i].validate(); } }
if(this.license) { for(i=0; i < this.license.length; i++ ) { this.license[i].validate(); } }
if(this.attribute) { for(i=0; i < this.attribute.length; i++ ) { this.attribute[i].validate(); } }
if(this.accountattribute) { for(i=0; i < this.accountattribute.length; i++ ) { this.accountattribute[i].validate(); } }
if(this.template) { for(i=0; i < this.template.length; i++ ) { this.template[i].validate(); } }
if(this.lang) { for(i=0; i < this.lang.length; i++ ) { this.lang[i].validate(); } }
if(this.appaccountaddress) { for(i=0; i < this.appaccountaddress.length; i++ ) { this.appaccountaddress[i].validate(); } }
if(this.appaccountpolicy) { for(i=0; i < this.appaccountpolicy.length; i++ ) { this.appaccountpolicy[i].validate(); } }
if(this.appaccountpreference) { this.appaccountpreference.validate(); }
if(this.appaccountfinancialsettings) { this.appaccountfinancialsettings.validate(); }
if(this.samlspapp) { for(i=0; i < this.samlspapp.length; i++ ) { this.samlspapp[i].validate(); } }
if(this.appaccountdevices) { for(i=0; i < this.appaccountdevices.length; i++ ) { this.appaccountdevices[i].validate(); } }
if(this.appaccountlogo) { this.appaccountlogo.validate(); }
if(this.acp) { for(i=0; i < this.acp.length; i++ ) { this.acp[i].validate(); } }

	return this;
    }
}
AppAccount.path = "appaccount";
AppAccount.newBuilder = function() {
    return new AppAccount();
};

ServiceOrgInvitation = function() {
    var _formprefix = "";
    
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var status = "0";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var userRole = "0";
this.setUserRole = function(userRole) { 
    this.userRole = userRole;
    return this;
};
this.getUserRole = function() {
    return this.userRole;
};
var userType = "1";
this.setUserType = function(userType) { 
    this.userType = userType;
    return this;
};
this.getUserType = function() {
    return this.userType;
};
var sendMail = "true";
this.setSendMail = function(sendMail) { 
    this.sendMail = sendMail;
    return this;
};
this.getSendMail = function() {
    return this.sendMail;
};
var resendLimit = "0";
this.setResendLimit = function(resendLimit) { 
    this.resendLimit = resendLimit;
    return this;
};
this.getResendLimit = function() {
    return this.resendLimit;
};
var rejectedCount = "0";
this.setRejectedCount = function(rejectedCount) { 
    this.rejectedCount = rejectedCount;
    return this;
};
this.getRejectedCount = function() {
    return this.rejectedCount;
};
var acceptUrl = "";
this.setAcceptUrl = function(acceptUrl) { 
    this.acceptUrl = acceptUrl;
    return this;
};
this.getAcceptUrl = function() {
    return this.acceptUrl;
};
var rejectUrl = "";
this.setRejectUrl = function(rejectUrl) { 
    this.rejectUrl = rejectUrl;
    return this;
};
this.getRejectUrl = function() {
    return this.rejectUrl;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var idp = "0";
this.setIdp = function(idp) { 
    this.idp = idp;
    return this;
};
this.getIdp = function() {
    return this.idp;
};
var argsData = "";
this.setArgsData = function(argsData) { 
    this.argsData = argsData;
    return this;
};
this.getArgsData = function() {
    return this.argsData;
};
var invitedBy = "";
this.setInvitedBy = function(invitedBy) { 
    this.invitedBy = invitedBy;
    return this;
};
this.getInvitedBy = function() {
    return this.invitedBy;
};
var firstName = "";
this.setFirstName = function(firstName) { 
    this.firstName = firstName;
    return this;
};
this.getFirstName = function() {
    return this.firstName;
};
var lastName = "";
this.setLastName = function(lastName) { 
    this.lastName = lastName;
    return this;
};
this.getLastName = function() {
    return this.lastName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setEmailId(json["email_id"]);
		this.setStatus(json["status"]);
		this.setUserRole(json["user_role"]);
		this.setUserType(json["user_type"]);
		this.setSendMail(json["send_mail"]);
		this.setResendLimit(json["resend_limit"]);
		this.setRejectedCount(json["rejected_count"]);
		this.setAcceptUrl(json["accept_url"]);
		this.setRejectUrl(json["reject_url"]);
		this.setIpAddress(json["ip_address"]);
		this.setIdp(json["idp"]);
		this.setArgsData(json["args_data"]);
		this.setInvitedBy(json["invited_by"]);
		this.setFirstName(json["first_name"]);
		this.setLastName(json["last_name"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getUserRole()) json += '"user_role"' + ":" + '"' + jsonEscape(this.getUserRole())  + '",';
		if(this.getUserType()) json += '"user_type"' + ":" + '"' + jsonEscape(this.getUserType())  + '",';
		if(this.getSendMail()) json += '"send_mail"' + ":" + '"' + jsonEscape(this.getSendMail())  + '",';
		if(this.getResendLimit()) json += '"resend_limit"' + ":" + '"' + jsonEscape(this.getResendLimit())  + '",';
		if(this.getRejectedCount()) json += '"rejected_count"' + ":" + '"' + jsonEscape(this.getRejectedCount())  + '",';
		if(this.getAcceptUrl()) json += '"accept_url"' + ":" + '"' + jsonEscape(this.getAcceptUrl())  + '",';
		if(this.getRejectUrl()) json += '"reject_url"' + ":" + '"' + jsonEscape(this.getRejectUrl())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getIdp()) json += '"idp"' + ":" + '"' + jsonEscape(this.getIdp())  + '",';
		if(this.getArgsData()) json += '"args_data"' + ":" + '"' + jsonEscape(this.getArgsData())  + '",';
		if(this.getInvitedBy()) json += '"invited_by"' + ":" + '"' + jsonEscape(this.getInvitedBy())  + '",';
		if(this.getFirstName()) json += '"first_name"' + ":" + '"' + jsonEscape(this.getFirstName())  + '",';
		if(this.getLastName()) json += '"last_name"' + ":" + '"' + jsonEscape(this.getLastName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgInvitation.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.emailId && !(/^[a-zA-Z0-9_\-]+$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.status && !Validator.INTEGER.test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.userRole && !Validator.INTEGER.test(this.userRole)) { throw new ValidationError(_formprefix + "user_role", ValidationError.PATTERN_FAILED);}
if(this.userType && !Validator.INTEGER.test(this.userType)) { throw new ValidationError(_formprefix + "user_type", ValidationError.PATTERN_FAILED);}
if(this.sendMail && !Validator.BOOLEAN.test(this.sendMail)) { throw new ValidationError(_formprefix + "send_mail", ValidationError.PATTERN_FAILED);}
if(this.resendLimit && !Validator.INTEGER.test(this.resendLimit)) { throw new ValidationError(_formprefix + "resend_limit", ValidationError.PATTERN_FAILED);}
if(this.acceptUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.acceptUrl)) { throw new ValidationError(_formprefix + "accept_url", ValidationError.PATTERN_FAILED);}
if(this.rejectUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.rejectUrl)) { throw new ValidationError(_formprefix + "reject_url", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.idp && !Validator.INTEGER.test(this.idp)) { throw new ValidationError(_formprefix + "idp", ValidationError.PATTERN_FAILED);}
if(this.invitedBy && !(/^[a-zA-Z0-9_\-]+$/).test(this.invitedBy)) { throw new ValidationError(_formprefix + "invited_by", ValidationError.PATTERN_FAILED);}
if(this.firstName && !(/xss:throwerror/).test(this.firstName)) { throw new ValidationError(_formprefix + "first_name", ValidationError.PATTERN_FAILED);}
if(this.lastName && !(/xss:throwerror/).test(this.lastName)) { throw new ValidationError(_formprefix + "last_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgInvitation.path = "serviceorginvitation";
ServiceOrgInvitation.newBuilder = function() {
    return new ServiceOrgInvitation();
};

Properties = function() {
    var _formprefix = "";
    
var propName = "";
this.setPropName = function(propName) { 
    this.propName = propName;
    return this;
};
this.getPropName = function() {
    return this.propName;
};
var propValue = "";
this.setPropValue = function(propValue) { 
    this.propValue = propValue;
    return this;
};
this.getPropValue = function() {
    return this.propValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPropName(json["prop_name"]);
		this.setPropValue(json["prop_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPropName()) json += '"prop_name"' + ":" + '"' + jsonEscape(this.getPropName())  + '",';
		if(this.getPropValue()) json += '"prop_value"' + ":" + '"' + jsonEscape(this.getPropValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Properties.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.propName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.propName)) { throw new ValidationError(_formprefix + "prop_name", ValidationError.PATTERN_FAILED);}
if(this.propValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.propValue)) { throw new ValidationError(_formprefix + "prop_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Properties.path = "properties";
Properties.newBuilder = function() {
    return new Properties();
};

ConditionalUser = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidType = "1";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var isExcluded = "false";
this.setIsExcluded = function(isExcluded) { 
    this.isExcluded = isExcluded;
    return this;
};
this.getIsExcluded = function() {
    return this.isExcluded;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidType(json["zid_type"]);
		this.setIsExcluded(json["is_excluded"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getIsExcluded()) json += '"is_excluded"' + ":" + '"' + jsonEscape(this.getIsExcluded())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ConditionalUser.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.isExcluded && !Validator.BOOLEAN.test(this.isExcluded)) { throw new ValidationError(_formprefix + "is_excluded", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ConditionalUser.path = "conditionaluser";
ConditionalUser.newBuilder = function() {
    return new ConditionalUser();
};

OAuthAppGroup = function() {
    var _formprefix = "";
    
var oauthAppGroupId = "";
this.setOauthAppGroupId = function(oauthAppGroupId) { 
    this.oauthAppGroupId = oauthAppGroupId;
    return this;
};
this.getOauthAppGroupId = function() {
    return this.oauthAppGroupId;
};
var oauthAppGroupName = "";
this.setOauthAppGroupName = function(oauthAppGroupName) { 
    this.oauthAppGroupName = oauthAppGroupName;
    return this;
};
this.getOauthAppGroupName = function() {
    return this.oauthAppGroupName;
};
var orgType = "-1";
this.setOrgType = function(orgType) { 
    this.orgType = orgType;
    return this;
};
this.getOrgType = function() {
    return this.orgType;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var oauthclient = undefined;
this.setOauthclients = function(oauthclient) { 
    this.oauthclient = oauthclient;
    return this;
};
this.getOauthclients = function() {
    return this.oauthclient;
};
this.addOauthclient = function(oauthclient) { 
 if(!this.oauthclient) this.oauthclient = new Array(); 
  this.oauthclient.push(oauthclient); 
 return this;
};

var oauthkeypair = undefined;
this.setOauthkeypairs = function(oauthkeypair) { 
    this.oauthkeypair = oauthkeypair;
    return this;
};
this.getOauthkeypairs = function() {
    return this.oauthkeypair;
};
this.addOauthkeypair = function(oauthkeypair) { 
 if(!this.oauthkeypair) this.oauthkeypair = new Array(); 
  this.oauthkeypair.push(oauthkeypair); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setOauthAppGroupId(json["oauth_app_group_id"]);
		this.setOauthAppGroupName(json["oauth_app_group_name"]);
		this.setOrgType(json["org_type"]);
		this.setDescription(json["description"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setOauthclients(URI.getResourceArray(json["oAuthClient"],"oauthclient"));
		this.setOauthkeypairs(URI.getResourceArray(json["oAuthKeyPair"],"oauthkeypair"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getOauthAppGroupId()) json += '"oauth_app_group_id"' + ":" + '"' + jsonEscape(this.getOauthAppGroupId())  + '",';
		if(this.getOauthAppGroupName()) json += '"oauth_app_group_name"' + ":" + '"' + jsonEscape(this.getOauthAppGroupName())  + '",';
		if(this.getOrgType()) json += '"org_type"' + ":" + '"' + jsonEscape(this.getOrgType())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getOauthclients()) json += '"oAuthClient"' + ":" + URI.toJSONArray(this.getOauthclients())  + ',';
		if(this.getOauthkeypairs()) json += '"oAuthKeyPair"' + ":" + URI.toJSONArray(this.getOauthkeypairs())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthAppGroup.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.oauthAppGroupId && !(/^[a-zA-Z0-9_\-]+$/).test(this.oauthAppGroupId)) { throw new ValidationError(_formprefix + "oauth_app_group_id", ValidationError.PATTERN_FAILED);}
if(this.oauthAppGroupName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.oauthAppGroupName)) { throw new ValidationError(_formprefix + "oauth_app_group_name", ValidationError.PATTERN_FAILED);}
if(this.orgType && !Validator.INTEGER.test(this.orgType)) { throw new ValidationError(_formprefix + "org_type", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.oauthclient) { for(i=0; i < this.oauthclient.length; i++ ) { this.oauthclient[i].validate(); } }
if(this.oauthkeypair) { for(i=0; i < this.oauthkeypair.length; i++ ) { this.oauthkeypair[i].validate(); } }

	return this;
    }
}
OAuthAppGroup.path = "oauthappgroup";
OAuthAppGroup.newBuilder = function() {
    return new OAuthAppGroup();
};

ScopeDescriptions = function() {
    var _formprefix = "";
    
var operationType = "";
this.setOperationType = function(operationType) { 
    this.operationType = operationType;
    return this;
};
this.getOperationType = function() {
    return this.operationType;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var isI18n = "true";
this.setIsI18n = function(isI18n) { 
    this.isI18n = isI18n;
    return this;
};
this.getIsI18n = function() {
    return this.isI18n;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setOperationType(json["operation_type"]);
		this.setDescription(json["description"]);
		this.setIsI18n(json["is_i18n"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getOperationType()) json += '"operation_type"' + ":" + '"' + jsonEscape(this.getOperationType())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getIsI18n()) json += '"is_i18n"' + ":" + '"' + jsonEscape(this.getIsI18n())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ScopeDescriptions.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.operationType && !(/^[a-zA-Z0-9_\-]+$/).test(this.operationType)) { throw new ValidationError(_formprefix + "operation_type", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[a-zA-Z0-9_\-]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.isI18n && !Validator.BOOLEAN.test(this.isI18n)) { throw new ValidationError(_formprefix + "is_i18n", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ScopeDescriptions.path = "scopedescriptions";
ScopeDescriptions.newBuilder = function() {
    return new ScopeDescriptions();
};

OAuthMobileDevicesDetails = function() {
    var _formprefix = "";
    
var appClientId = "";
this.setAppClientId = function(appClientId) { 
    this.appClientId = appClientId;
    return this;
};
this.getAppClientId = function() {
    return this.appClientId;
};
var projectId = "";
this.setProjectId = function(projectId) { 
    this.projectId = projectId;
    return this;
};
this.getProjectId = function() {
    return this.projectId;
};
var audienceId = "";
this.setAudienceId = function(audienceId) { 
    this.audienceId = audienceId;
    return this;
};
this.getAudienceId = function() {
    return this.audienceId;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppClientId(json["app_client_id"]);
		this.setProjectId(json["project_id"]);
		this.setAudienceId(json["audience_id"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppClientId()) json += '"app_client_id"' + ":" + '"' + jsonEscape(this.getAppClientId())  + '",';
		if(this.getProjectId()) json += '"project_id"' + ":" + '"' + jsonEscape(this.getProjectId())  + '",';
		if(this.getAudienceId()) json += '"audience_id"' + ":" + '"' + jsonEscape(this.getAudienceId())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthMobileDevicesDetails.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.appClientId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.appClientId)) { throw new ValidationError(_formprefix + "app_client_id", ValidationError.PATTERN_FAILED);}
if(this.projectId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.projectId)) { throw new ValidationError(_formprefix + "project_id", ValidationError.PATTERN_FAILED);}
if(this.audienceId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.audienceId)) { throw new ValidationError(_formprefix + "audience_id", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthMobileDevicesDetails.path = "oauthmobiledevicesdetails";
OAuthMobileDevicesDetails.newBuilder = function() {
    return new OAuthMobileDevicesDetails();
};

ScreenName = function() {
    var _formprefix = "";
    
var screenName = "";
this.setScreenName = function(screenName) { 
    this.screenName = screenName;
    return this;
};
this.getScreenName = function() {
    return this.screenName;
};
var isLoginName = "";
this.setIsLoginName = function(isLoginName) { 
    this.isLoginName = isLoginName;
    return this;
};
this.getIsLoginName = function() {
    return this.isLoginName;
};
var isZohoEmailId = "false";
this.setIsZohoEmailId = function(isZohoEmailId) { 
    this.isZohoEmailId = isZohoEmailId;
    return this;
};
this.getIsZohoEmailId = function() {
    return this.isZohoEmailId;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScreenName(json["screen_name"]);
		this.setIsLoginName(json["is_login_name"]);
		this.setIsZohoEmailId(json["is_zoho_email_id"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScreenName()) json += '"screen_name"' + ":" + '"' + jsonEscape(this.getScreenName())  + '",';
		if(this.getIsLoginName()) json += '"is_login_name"' + ":" + '"' + jsonEscape(this.getIsLoginName())  + '",';
		if(this.getIsZohoEmailId()) json += '"is_zoho_email_id"' + ":" + '"' + jsonEscape(this.getIsZohoEmailId())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ScreenName.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.screenName && !(/^([\p{L}\p{M}\p{N}\_\.]+)$/).test(this.screenName)) { throw new ValidationError(_formprefix + "screen_name", ValidationError.PATTERN_FAILED);}
if(this.isLoginName && !Validator.BOOLEAN.test(this.isLoginName)) { throw new ValidationError(_formprefix + "is_login_name", ValidationError.PATTERN_FAILED);}
if(this.isZohoEmailId && !Validator.BOOLEAN.test(this.isZohoEmailId)) { throw new ValidationError(_formprefix + "is_zoho_email_id", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ScreenName.path = "screenname";
ScreenName.newBuilder = function() {
    return new ScreenName();
};

JWTConfiguration = function() {
    var _formprefix = "";
    
var jwt = "0";
this.setJwt = function(jwt) { 
    this.jwt = jwt;
    return this;
};
this.getJwt = function() {
    return this.jwt;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var loginUrl = "";
this.setLoginUrl = function(loginUrl) { 
    this.loginUrl = loginUrl;
    return this;
};
this.getLoginUrl = function() {
    return this.loginUrl;
};
var logoutUrl = "";
this.setLogoutUrl = function(logoutUrl) { 
    this.logoutUrl = logoutUrl;
    return this;
};
this.getLogoutUrl = function() {
    return this.logoutUrl;
};
var algorithm = "";
this.setAlgorithm = function(algorithm) { 
    this.algorithm = algorithm;
    return this;
};
this.getAlgorithm = function() {
    return this.algorithm;
};
var key = "";
this.setKey = function(key) { 
    this.key = key;
    return this;
};
this.getKey = function() {
    return this.key;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var jwtparams = undefined;
this.setJwtparamss = function(jwtparams) { 
    this.jwtparams = jwtparams;
    return this;
};
this.getJwtparamss = function() {
    return this.jwtparams;
};
this.addJwtparams = function(jwtparams) { 
 if(!this.jwtparams) this.jwtparams = new Array(); 
  this.jwtparams.push(jwtparams); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setJwt(json["jwt"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setLoginUrl(json["login_url"]);
		this.setLogoutUrl(json["logout_url"]);
		this.setAlgorithm(json["algorithm"]);
		this.setKey(json["key"]);
		this.setModifiedTime(json["modified_time"]);
		this.setJwtparamss(URI.getResourceArray(json["jWTParams"],"jwtparams"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getJwt()) json += '"jwt"' + ":" + '"' + jsonEscape(this.getJwt())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getLoginUrl()) json += '"login_url"' + ":" + '"' + jsonEscape(this.getLoginUrl())  + '",';
		if(this.getLogoutUrl()) json += '"logout_url"' + ":" + '"' + jsonEscape(this.getLogoutUrl())  + '",';
		if(this.getAlgorithm()) json += '"algorithm"' + ":" + '"' + jsonEscape(this.getAlgorithm())  + '",';
		if(this.getKey()) json += '"key"' + ":" + '"' + jsonEscape(this.getKey())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getJwtparamss()) json += '"jWTParams"' + ":" + URI.toJSONArray(this.getJwtparamss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(JWTConfiguration.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.jwtparams) { for(i=0; i < this.jwtparams.length; i++ ) { this.jwtparams[i].validate(); } }

	return this;
    }
}
JWTConfiguration.path = "jwtconfiguration";
JWTConfiguration.newBuilder = function() {
    return new JWTConfiguration();
};

AppAccountInvitationTemplate = function() {
    var _formprefix = "";
    
var templateId = "";
this.setTemplateId = function(templateId) { 
    this.templateId = templateId;
    return this;
};
this.getTemplateId = function() {
    return this.templateId;
};
var templateName = "";
this.setTemplateName = function(templateName) { 
    this.templateName = templateName;
    return this;
};
this.getTemplateName = function() {
    return this.templateName;
};
var senderEmailId = "";
this.setSenderEmailId = function(senderEmailId) { 
    this.senderEmailId = senderEmailId;
    return this;
};
this.getSenderEmailId = function() {
    return this.senderEmailId;
};
var replyToEmailId = "";
this.setReplyToEmailId = function(replyToEmailId) { 
    this.replyToEmailId = replyToEmailId;
    return this;
};
this.getReplyToEmailId = function() {
    return this.replyToEmailId;
};
var emailSubject = "";
this.setEmailSubject = function(emailSubject) { 
    this.emailSubject = emailSubject;
    return this;
};
this.getEmailSubject = function() {
    return this.emailSubject;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTemplateId(json["template_id"]);
		this.setTemplateName(json["template_name"]);
		this.setSenderEmailId(json["sender_email_id"]);
		this.setReplyToEmailId(json["reply_to_email_id"]);
		this.setEmailSubject(json["email_subject"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTemplateId()) json += '"template_id"' + ":" + '"' + jsonEscape(this.getTemplateId())  + '",';
		if(this.getTemplateName()) json += '"template_name"' + ":" + '"' + jsonEscape(this.getTemplateName())  + '",';
		if(this.getSenderEmailId()) json += '"sender_email_id"' + ":" + '"' + jsonEscape(this.getSenderEmailId())  + '",';
		if(this.getReplyToEmailId()) json += '"reply_to_email_id"' + ":" + '"' + jsonEscape(this.getReplyToEmailId())  + '",';
		if(this.getEmailSubject()) json += '"email_subject"' + ":" + '"' + jsonEscape(this.getEmailSubject())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccountInvitationTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.templateId && !Validator.INTEGER.test(this.templateId)) { throw new ValidationError(_formprefix + "template_id", ValidationError.PATTERN_FAILED);}
if(this.templateName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.templateName)) { throw new ValidationError(_formprefix + "template_name", ValidationError.PATTERN_FAILED);}
if(this.senderEmailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.senderEmailId)) { throw new ValidationError(_formprefix + "sender_email_id", ValidationError.PATTERN_FAILED);}
if(this.replyToEmailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.replyToEmailId)) { throw new ValidationError(_formprefix + "reply_to_email_id", ValidationError.PATTERN_FAILED);}
if(this.emailSubject && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.emailSubject)) { throw new ValidationError(_formprefix + "email_subject", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAccountInvitationTemplate.path = "appaccountinvitationtemplate";
AppAccountInvitationTemplate.newBuilder = function() {
    return new AppAccountInvitationTemplate();
};

OAuthInternalToken = function() {
    var _formprefix = "";
    
var tokenName = "";
this.setTokenName = function(tokenName) { 
    this.tokenName = tokenName;
    return this;
};
this.getTokenName = function() {
    return this.tokenName;
};
var tokenValue = "";
this.setTokenValue = function(tokenValue) { 
    this.tokenValue = tokenValue;
    return this;
};
this.getTokenValue = function() {
    return this.tokenValue;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTokenName(json["token_name"]);
		this.setTokenValue(json["token_value"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTokenName()) json += '"token_name"' + ":" + '"' + jsonEscape(this.getTokenName())  + '",';
		if(this.getTokenValue()) json += '"token_value"' + ":" + '"' + jsonEscape(this.getTokenValue())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthInternalToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.tokenName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.tokenName)) { throw new ValidationError(_formprefix + "token_name", ValidationError.PATTERN_FAILED);}
if(this.tokenValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.tokenValue)) { throw new ValidationError(_formprefix + "token_value", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthInternalToken.path = "oauthinternaltoken";
OAuthInternalToken.newBuilder = function() {
    return new OAuthInternalToken();
};

Password = function() {
    var _formprefix = "";
    
var password = "";
this.setPassword = function(password) { 
    this.password = password;
    return this;
};
this.getPassword = function() {
    return this.password;
};
var salt = "";
this.setSalt = function(salt) { 
    this.salt = salt;
    return this;
};
this.getSalt = function() {
    return this.salt;
};
var isPasswordExpired = "false";
this.setIsPasswordExpired = function(isPasswordExpired) { 
    this.isPasswordExpired = isPasswordExpired;
    return this;
};
this.getIsPasswordExpired = function() {
    return this.isPasswordExpired;
};
var isOneTimePassword = "false";
this.setIsOneTimePassword = function(isOneTimePassword) { 
    this.isOneTimePassword = isOneTimePassword;
    return this;
};
this.getIsOneTimePassword = function() {
    return this.isOneTimePassword;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPassword(json["password"]);
		this.setSalt(json["salt"]);
		this.setIsPasswordExpired(json["is_password_expired"]);
		this.setIsOneTimePassword(json["is_one_time_password"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPassword()) json += '"password"' + ":" + '"' + jsonEscape(this.getPassword())  + '",';
		if(this.getSalt()) json += '"salt"' + ":" + '"' + jsonEscape(this.getSalt())  + '",';
		if(this.getIsPasswordExpired()) json += '"is_password_expired"' + ":" + '"' + jsonEscape(this.getIsPasswordExpired())  + '",';
		if(this.getIsOneTimePassword()) json += '"is_one_time_password"' + ":" + '"' + jsonEscape(this.getIsOneTimePassword())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Password.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.password && !(/dontdisturb/).test(this.password)) { throw new ValidationError(_formprefix + "password", ValidationError.PATTERN_FAILED);}
if(this.salt && !(/^([A-Za-z0-9_.\-]+)$/).test(this.salt)) { throw new ValidationError(_formprefix + "salt", ValidationError.PATTERN_FAILED);}
if(this.isPasswordExpired && !Validator.BOOLEAN.test(this.isPasswordExpired)) { throw new ValidationError(_formprefix + "is_password_expired", ValidationError.PATTERN_FAILED);}
if(this.isOneTimePassword && !Validator.BOOLEAN.test(this.isOneTimePassword)) { throw new ValidationError(_formprefix + "is_one_time_password", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Password.path = "password";
Password.newBuilder = function() {
    return new Password();
};

UserName = function() {
    var _formprefix = "";
    
var userName = "";
this.setUserName = function(userName) { 
    this.userName = userName;
    return this;
};
this.getUserName = function() {
    return this.userName;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setUserName(json["user_name"]);
		this.setZuid(json["zuid"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getUserName()) json += '"user_name"' + ":" + '"' + jsonEscape(this.getUserName())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserName.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.userName && !(/^([\p{L}\p{M}\p{N}\_\.]+)$/).test(this.userName)) { throw new ValidationError(_formprefix + "user_name", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserName.path = "username";
UserName.newBuilder = function() {
    return new UserName();
};

MobileCount = function() {
    var _formprefix = "";
    
var mobile = "";
this.setMobile = function(mobile) { 
    this.mobile = mobile;
    return this;
};
this.getMobile = function() {
    return this.mobile;
};
var count = "0";
this.setCount = function(count) { 
    this.count = count;
    return this;
};
this.getCount = function() {
    return this.count;
};
var zuids = "";
this.setZuids = function(zuids) { 
    this.zuids = zuids;
    return this;
};
this.getZuids = function() {
    return this.zuids;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setMobile(json["mobile"]);
		this.setCount(json["count"]);
		this.setZuids(json["zuids"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getMobile()) json += '"mobile"' + ":" + '"' + jsonEscape(this.getMobile())  + '",';
		if(this.getCount()) json += '"count"' + ":" + '"' + jsonEscape(this.getCount())  + '",';
		if(this.getZuids()) json += '"zuids"' + ":" + '"' + jsonEscape(this.getZuids())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MobileCount.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.mobile && !(/xss:throwerror/).test(this.mobile)) { throw new ValidationError(_formprefix + "mobile", ValidationError.PATTERN_FAILED);}
if(this.count && !Validator.INTEGER.test(this.count)) { throw new ValidationError(_formprefix + "count", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
MobileCount.path = "mobilecount";
MobileCount.newBuilder = function() {
    return new MobileCount();
};

GroupInvitation = function() {
    var _formprefix = "";
    
var inviteEmailId = "";
this.setInviteEmailId = function(inviteEmailId) { 
    this.inviteEmailId = inviteEmailId;
    return this;
};
this.getInviteEmailId = function() {
    return this.inviteEmailId;
};
var inviteZuid = "-1";
this.setInviteZuid = function(inviteZuid) { 
    this.inviteZuid = inviteZuid;
    return this;
};
this.getInviteZuid = function() {
    return this.inviteZuid;
};
var inviteStatus = "0";
this.setInviteStatus = function(inviteStatus) { 
    this.inviteStatus = inviteStatus;
    return this;
};
this.getInviteStatus = function() {
    return this.inviteStatus;
};
var fullName = "";
this.setFullName = function(fullName) { 
    this.fullName = fullName;
    return this;
};
this.getFullName = function() {
    return this.fullName;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var loginName = "";
this.setLoginName = function(loginName) { 
    this.loginName = loginName;
    return this;
};
this.getLoginName = function() {
    return this.loginName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setInviteEmailId(json["invite_email_id"]);
		this.setInviteZuid(json["invite_zuid"]);
		this.setInviteStatus(json["invite_status"]);
		this.setFullName(json["full_name"]);
		this.setDisplayName(json["display_name"]);
		this.setLoginName(json["login_name"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getInviteEmailId()) json += '"invite_email_id"' + ":" + '"' + jsonEscape(this.getInviteEmailId())  + '",';
		if(this.getInviteZuid()) json += '"invite_zuid"' + ":" + '"' + jsonEscape(this.getInviteZuid())  + '",';
		if(this.getInviteStatus()) json += '"invite_status"' + ":" + '"' + jsonEscape(this.getInviteStatus())  + '",';
		if(this.getFullName()) json += '"full_name"' + ":" + '"' + jsonEscape(this.getFullName())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getLoginName()) json += '"login_name"' + ":" + '"' + jsonEscape(this.getLoginName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(GroupInvitation.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.inviteEmailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.inviteEmailId)) { throw new ValidationError(_formprefix + "invite_email_id", ValidationError.PATTERN_FAILED);}
if(this.inviteZuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.inviteZuid)) { throw new ValidationError(_formprefix + "invite_zuid", ValidationError.PATTERN_FAILED);}
if(this.inviteStatus && !Validator.INTEGER.test(this.inviteStatus)) { throw new ValidationError(_formprefix + "invite_status", ValidationError.PATTERN_FAILED);}
if(this.fullName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.fullName)) { throw new ValidationError(_formprefix + "full_name", ValidationError.PATTERN_FAILED);}
if(this.displayName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.displayName)) { throw new ValidationError(_formprefix + "display_name", ValidationError.PATTERN_FAILED);}
if(this.loginName && !(/^([\p{L}\p{M}\p{N}\_\.]+)|[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.loginName)) { throw new ValidationError(_formprefix + "login_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
GroupInvitation.path = "groupinvitation";
GroupInvitation.newBuilder = function() {
    return new GroupInvitation();
};

AccountAuditTemplate = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var operationId = "";
this.setOperationId = function(operationId) { 
    this.operationId = operationId;
    return this;
};
this.getOperationId = function() {
    return this.operationId;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var tokenDigest = "";
this.setTokenDigest = function(tokenDigest) { 
    this.tokenDigest = tokenDigest;
    return this;
};
this.getTokenDigest = function() {
    return this.tokenDigest;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setZuid(json["zuid"]);
		this.setAppId(json["app_id"]);
		this.setOperationId(json["operation_id"]);
		this.setIpAddress(json["ip_address"]);
		this.setReferrer(json["referrer"]);
		this.setTokenDigest(json["token_digest"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getOperationId()) json += '"operation_id"' + ":" + '"' + jsonEscape(this.getOperationId())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getTokenDigest()) json += '"token_digest"' + ":" + '"' + jsonEscape(this.getTokenDigest())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountAuditTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.appId && !Validator.INTEGER.test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.operationId && !Validator.INTEGER.test(this.operationId)) { throw new ValidationError(_formprefix + "operation_id", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.tokenDigest && !(/dontdisturb/).test(this.tokenDigest)) { throw new ValidationError(_formprefix + "token_digest", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountAuditTemplate.path = "accountaudittemplate";
AccountAuditTemplate.newBuilder = function() {
    return new AccountAuditTemplate();
};

UserMailFetchLocation = function() {
    var _formprefix = "";
    
var locationId = "";
this.setLocationId = function(locationId) { 
    this.locationId = locationId;
    return this;
};
this.getLocationId = function() {
    return this.locationId;
};
var location = "";
this.setLocation = function(location) { 
    this.location = location;
    return this;
};
this.getLocation = function() {
    return this.location;
};
var latitude = "";
this.setLatitude = function(latitude) { 
    this.latitude = latitude;
    return this;
};
this.getLatitude = function() {
    return this.latitude;
};
var longitude = "";
this.setLongitude = function(longitude) { 
    this.longitude = longitude;
    return this;
};
this.getLongitude = function() {
    return this.longitude;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLocationId(json["location_id"]);
		this.setLocation(json["location"]);
		this.setLatitude(json["latitude"]);
		this.setLongitude(json["longitude"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLocationId()) json += '"location_id"' + ":" + '"' + jsonEscape(this.getLocationId())  + '",';
		if(this.getLocation()) json += '"location"' + ":" + '"' + jsonEscape(this.getLocation())  + '",';
		if(this.getLatitude()) json += '"latitude"' + ":" + '"' + jsonEscape(this.getLatitude())  + '",';
		if(this.getLongitude()) json += '"longitude"' + ":" + '"' + jsonEscape(this.getLongitude())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserMailFetchLocation.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.locationId && !Validator.INTEGER.test(this.locationId)) { throw new ValidationError(_formprefix + "location_id", ValidationError.PATTERN_FAILED);}
if(this.latitude && !(/^[0-9\-\.]*$/).test(this.latitude)) { throw new ValidationError(_formprefix + "latitude", ValidationError.PATTERN_FAILED);}
if(this.longitude && !(/^[0-9\-\.]*$/).test(this.longitude)) { throw new ValidationError(_formprefix + "longitude", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserMailFetchLocation.path = "usermailfetchlocation";
UserMailFetchLocation.newBuilder = function() {
    return new UserMailFetchLocation();
};

ServiceOrgMember = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var isActive = "1";
this.setIsActive = function(isActive) { 
    this.isActive = isActive;
    return this;
};
this.getIsActive = function() {
    return this.isActive;
};
var userRole = "0";
this.setUserRole = function(userRole) { 
    this.userRole = userRole;
    return this;
};
this.getUserRole = function() {
    return this.userRole;
};
var userType = "1";
this.setUserType = function(userType) { 
    this.userType = userType;
    return this;
};
this.getUserType = function() {
    return this.userType;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var serviceorgmemberrole = undefined;
this.setServiceorgmemberroles = function(serviceorgmemberrole) { 
    this.serviceorgmemberrole = serviceorgmemberrole;
    return this;
};
this.getServiceorgmemberroles = function() {
    return this.serviceorgmemberrole;
};
this.addServiceorgmemberrole = function(serviceorgmemberrole) { 
 if(!this.serviceorgmemberrole) this.serviceorgmemberrole = new Array(); 
  this.serviceorgmemberrole.push(serviceorgmemberrole); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setIsActive(json["is_active"]);
		this.setUserRole(json["user_role"]);
		this.setUserType(json["user_type"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setServiceorgmemberroles(URI.getResourceArray(json["serviceOrgMemberRole"],"serviceorgmemberrole"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getIsActive()) json += '"is_active"' + ":" + '"' + jsonEscape(this.getIsActive())  + '",';
		if(this.getUserRole()) json += '"user_role"' + ":" + '"' + jsonEscape(this.getUserRole())  + '",';
		if(this.getUserType()) json += '"user_type"' + ":" + '"' + jsonEscape(this.getUserType())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getServiceorgmemberroles()) json += '"serviceOrgMemberRole"' + ":" + URI.toJSONArray(this.getServiceorgmemberroles())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgMember.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.userRole && !Validator.INTEGER.test(this.userRole)) { throw new ValidationError(_formprefix + "user_role", ValidationError.PATTERN_FAILED);}
if(this.userType && !Validator.INTEGER.test(this.userType)) { throw new ValidationError(_formprefix + "user_type", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.serviceorgmemberrole) { for(i=0; i < this.serviceorgmemberrole.length; i++ ) { this.serviceorgmemberrole[i].validate(); } }

	return this;
    }
}
ServiceOrgMember.path = "serviceorgmember";
ServiceOrgMember.newBuilder = function() {
    return new ServiceOrgMember();
};

ISCTicketScope = function() {
    var _formprefix = "";
    
var iscTicket = "";
this.setIscTicket = function(iscTicket) { 
    this.iscTicket = iscTicket;
    return this;
};
this.getIscTicket = function() {
    return this.iscTicket;
};
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setIscTicket(json["isc_ticket"]);
		this.setScopeId(json["scope_id"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getIscTicket()) json += '"isc_ticket"' + ":" + '"' + jsonEscape(this.getIscTicket())  + '",';
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ISCTicketScope.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.iscTicket && !(/^(?:[a-z0-9\.\-])+$/).test(this.iscTicket)) { throw new ValidationError(_formprefix + "isc_ticket", ValidationError.PATTERN_FAILED);}
if(this.scopeId && !Validator.INTEGER.test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ISCTicketScope.path = "iscticketscope";
ISCTicketScope.newBuilder = function() {
    return new ISCTicketScope();
};

AccountRemoteAuthConf = function() {
    var _formprefix = "";
    
var remoteAuthName = "";
this.setRemoteAuthName = function(remoteAuthName) { 
    this.remoteAuthName = remoteAuthName;
    return this;
};
this.getRemoteAuthName = function() {
    return this.remoteAuthName;
};
var remoteAuthType = "";
this.setRemoteAuthType = function(remoteAuthType) { 
    this.remoteAuthType = remoteAuthType;
    return this;
};
this.getRemoteAuthType = function() {
    return this.remoteAuthType;
};
var secretKey = "";
this.setSecretKey = function(secretKey) { 
    this.secretKey = secretKey;
    return this;
};
this.getSecretKey = function() {
    return this.secretKey;
};
var verificationUrl = "";
this.setVerificationUrl = function(verificationUrl) { 
    this.verificationUrl = verificationUrl;
    return this;
};
this.getVerificationUrl = function() {
    return this.verificationUrl;
};
var defaultServiceName = "";
this.setDefaultServiceName = function(defaultServiceName) { 
    this.defaultServiceName = defaultServiceName;
    return this;
};
this.getDefaultServiceName = function() {
    return this.defaultServiceName;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRemoteAuthName(json["remote_auth_name"]);
		this.setRemoteAuthType(json["remote_auth_type"]);
		this.setSecretKey(json["secret_key"]);
		this.setVerificationUrl(json["verification_url"]);
		this.setDefaultServiceName(json["default_service_name"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRemoteAuthName()) json += '"remote_auth_name"' + ":" + '"' + jsonEscape(this.getRemoteAuthName())  + '",';
		if(this.getRemoteAuthType()) json += '"remote_auth_type"' + ":" + '"' + jsonEscape(this.getRemoteAuthType())  + '",';
		if(this.getSecretKey()) json += '"secret_key"' + ":" + '"' + jsonEscape(this.getSecretKey())  + '",';
		if(this.getVerificationUrl()) json += '"verification_url"' + ":" + '"' + jsonEscape(this.getVerificationUrl())  + '",';
		if(this.getDefaultServiceName()) json += '"default_service_name"' + ":" + '"' + jsonEscape(this.getDefaultServiceName())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountRemoteAuthConf.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.remoteAuthType && !Validator.INTEGER.test(this.remoteAuthType)) { throw new ValidationError(_formprefix + "remote_auth_type", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountRemoteAuthConf.path = "accountremoteauthconf";
AccountRemoteAuthConf.newBuilder = function() {
    return new AccountRemoteAuthConf();
};

AppAccountAddress = function() {
    var _formprefix = "";
    
var addressType = "";
this.setAddressType = function(addressType) { 
    this.addressType = addressType;
    return this;
};
this.getAddressType = function() {
    return this.addressType;
};
var name = "";
this.setName = function(name) { 
    this.name = name;
    return this;
};
this.getName = function() {
    return this.name;
};
var locationName = "";
this.setLocationName = function(locationName) { 
    this.locationName = locationName;
    return this;
};
this.getLocationName = function() {
    return this.locationName;
};
var postBox = "";
this.setPostBox = function(postBox) { 
    this.postBox = postBox;
    return this;
};
this.getPostBox = function() {
    return this.postBox;
};
var streetAddress = "";
this.setStreetAddress = function(streetAddress) { 
    this.streetAddress = streetAddress;
    return this;
};
this.getStreetAddress = function() {
    return this.streetAddress;
};
var city = "";
this.setCity = function(city) { 
    this.city = city;
    return this;
};
this.getCity = function() {
    return this.city;
};
var state = "";
this.setState = function(state) { 
    this.state = state;
    return this;
};
this.getState = function() {
    return this.state;
};
var country = "";
this.setCountry = function(country) { 
    this.country = country;
    return this;
};
this.getCountry = function() {
    return this.country;
};
var postalCode = "";
this.setPostalCode = function(postalCode) { 
    this.postalCode = postalCode;
    return this;
};
this.getPostalCode = function() {
    return this.postalCode;
};
var latitude = "";
this.setLatitude = function(latitude) { 
    this.latitude = latitude;
    return this;
};
this.getLatitude = function() {
    return this.latitude;
};
var longitude = "";
this.setLongitude = function(longitude) { 
    this.longitude = longitude;
    return this;
};
this.getLongitude = function() {
    return this.longitude;
};
var phone = "";
this.setPhone = function(phone) { 
    this.phone = phone;
    return this;
};
this.getPhone = function() {
    return this.phone;
};
var extension = "";
this.setExtension = function(extension) { 
    this.extension = extension;
    return this;
};
this.getExtension = function() {
    return this.extension;
};
var mobile = "";
this.setMobile = function(mobile) { 
    this.mobile = mobile;
    return this;
};
this.getMobile = function() {
    return this.mobile;
};
var fax = "";
this.setFax = function(fax) { 
    this.fax = fax;
    return this;
};
this.getFax = function() {
    return this.fax;
};
var timezone = "";
this.setTimezone = function(timezone) { 
    this.timezone = timezone;
    return this;
};
this.getTimezone = function() {
    return this.timezone;
};
var language = "";
this.setLanguage = function(language) { 
    this.language = language;
    return this;
};
this.getLanguage = function() {
    return this.language;
};
var websiteUrl = "";
this.setWebsiteUrl = function(websiteUrl) { 
    this.websiteUrl = websiteUrl;
    return this;
};
this.getWebsiteUrl = function() {
    return this.websiteUrl;
};
var blogUrl = "";
this.setBlogUrl = function(blogUrl) { 
    this.blogUrl = blogUrl;
    return this;
};
this.getBlogUrl = function() {
    return this.blogUrl;
};
var twitterUrl = "";
this.setTwitterUrl = function(twitterUrl) { 
    this.twitterUrl = twitterUrl;
    return this;
};
this.getTwitterUrl = function() {
    return this.twitterUrl;
};
var linkedinUrl = "";
this.setLinkedinUrl = function(linkedinUrl) { 
    this.linkedinUrl = linkedinUrl;
    return this;
};
this.getLinkedinUrl = function() {
    return this.linkedinUrl;
};
var flickrUrl = "";
this.setFlickrUrl = function(flickrUrl) { 
    this.flickrUrl = flickrUrl;
    return this;
};
this.getFlickrUrl = function() {
    return this.flickrUrl;
};
var deliciousUrl = "";
this.setDeliciousUrl = function(deliciousUrl) { 
    this.deliciousUrl = deliciousUrl;
    return this;
};
this.getDeliciousUrl = function() {
    return this.deliciousUrl;
};
var amazonUrl = "";
this.setAmazonUrl = function(amazonUrl) { 
    this.amazonUrl = amazonUrl;
    return this;
};
this.getAmazonUrl = function() {
    return this.amazonUrl;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAddressType(json["address_type"]);
		this.setName(json["name"]);
		this.setLocationName(json["location_name"]);
		this.setPostBox(json["post_box"]);
		this.setStreetAddress(json["street_address"]);
		this.setCity(json["city"]);
		this.setState(json["state"]);
		this.setCountry(json["country"]);
		this.setPostalCode(json["postal_code"]);
		this.setLatitude(json["latitude"]);
		this.setLongitude(json["longitude"]);
		this.setPhone(json["phone"]);
		this.setExtension(json["extension"]);
		this.setMobile(json["mobile"]);
		this.setFax(json["fax"]);
		this.setTimezone(json["timezone"]);
		this.setLanguage(json["language"]);
		this.setWebsiteUrl(json["website_url"]);
		this.setBlogUrl(json["blog_url"]);
		this.setTwitterUrl(json["twitter_url"]);
		this.setLinkedinUrl(json["linkedin_url"]);
		this.setFlickrUrl(json["flickr_url"]);
		this.setDeliciousUrl(json["delicious_url"]);
		this.setAmazonUrl(json["amazon_url"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAddressType()) json += '"address_type"' + ":" + '"' + jsonEscape(this.getAddressType())  + '",';
		if(this.getName()) json += '"name"' + ":" + '"' + jsonEscape(this.getName())  + '",';
		if(this.getLocationName()) json += '"location_name"' + ":" + '"' + jsonEscape(this.getLocationName())  + '",';
		if(this.getPostBox()) json += '"post_box"' + ":" + '"' + jsonEscape(this.getPostBox())  + '",';
		if(this.getStreetAddress()) json += '"street_address"' + ":" + '"' + jsonEscape(this.getStreetAddress())  + '",';
		if(this.getCity()) json += '"city"' + ":" + '"' + jsonEscape(this.getCity())  + '",';
		if(this.getState()) json += '"state"' + ":" + '"' + jsonEscape(this.getState())  + '",';
		if(this.getCountry()) json += '"country"' + ":" + '"' + jsonEscape(this.getCountry())  + '",';
		if(this.getPostalCode()) json += '"postal_code"' + ":" + '"' + jsonEscape(this.getPostalCode())  + '",';
		if(this.getLatitude()) json += '"latitude"' + ":" + '"' + jsonEscape(this.getLatitude())  + '",';
		if(this.getLongitude()) json += '"longitude"' + ":" + '"' + jsonEscape(this.getLongitude())  + '",';
		if(this.getPhone()) json += '"phone"' + ":" + '"' + jsonEscape(this.getPhone())  + '",';
		if(this.getExtension()) json += '"extension"' + ":" + '"' + jsonEscape(this.getExtension())  + '",';
		if(this.getMobile()) json += '"mobile"' + ":" + '"' + jsonEscape(this.getMobile())  + '",';
		if(this.getFax()) json += '"fax"' + ":" + '"' + jsonEscape(this.getFax())  + '",';
		if(this.getTimezone()) json += '"timezone"' + ":" + '"' + jsonEscape(this.getTimezone())  + '",';
		if(this.getLanguage()) json += '"language"' + ":" + '"' + jsonEscape(this.getLanguage())  + '",';
		if(this.getWebsiteUrl()) json += '"website_url"' + ":" + '"' + jsonEscape(this.getWebsiteUrl())  + '",';
		if(this.getBlogUrl()) json += '"blog_url"' + ":" + '"' + jsonEscape(this.getBlogUrl())  + '",';
		if(this.getTwitterUrl()) json += '"twitter_url"' + ":" + '"' + jsonEscape(this.getTwitterUrl())  + '",';
		if(this.getLinkedinUrl()) json += '"linkedin_url"' + ":" + '"' + jsonEscape(this.getLinkedinUrl())  + '",';
		if(this.getFlickrUrl()) json += '"flickr_url"' + ":" + '"' + jsonEscape(this.getFlickrUrl())  + '",';
		if(this.getDeliciousUrl()) json += '"delicious_url"' + ":" + '"' + jsonEscape(this.getDeliciousUrl())  + '",';
		if(this.getAmazonUrl()) json += '"amazon_url"' + ":" + '"' + jsonEscape(this.getAmazonUrl())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccountAddress.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.addressType && !Validator.INTEGER.test(this.addressType)) { throw new ValidationError(_formprefix + "address_type", ValidationError.PATTERN_FAILED);}
if(this.name && !(/xss:throwerror/).test(this.name)) { throw new ValidationError(_formprefix + "name", ValidationError.PATTERN_FAILED);}
if(this.locationName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.locationName)) { throw new ValidationError(_formprefix + "location_name", ValidationError.PATTERN_FAILED);}
if(this.postBox && !(/xss:throwerror/).test(this.postBox)) { throw new ValidationError(_formprefix + "post_box", ValidationError.PATTERN_FAILED);}
if(this.streetAddress && !(/xss:throwerror/).test(this.streetAddress)) { throw new ValidationError(_formprefix + "street_address", ValidationError.PATTERN_FAILED);}
if(this.city && !(/xss:throwerror/).test(this.city)) { throw new ValidationError(_formprefix + "city", ValidationError.PATTERN_FAILED);}
if(this.state && !(/xss:throwerror/).test(this.state)) { throw new ValidationError(_formprefix + "state", ValidationError.PATTERN_FAILED);}
if(this.country && !(/^[a-zA-Z0-9]{2,5}$/).test(this.country)) { throw new ValidationError(_formprefix + "country", ValidationError.PATTERN_FAILED);}
if(this.postalCode && !(/xss:throwerror/).test(this.postalCode)) { throw new ValidationError(_formprefix + "postal_code", ValidationError.PATTERN_FAILED);}
if(this.latitude && !(/^[0-9\-\.]*$/).test(this.latitude)) { throw new ValidationError(_formprefix + "latitude", ValidationError.PATTERN_FAILED);}
if(this.longitude && !(/^[0-9\-\.]*$/).test(this.longitude)) { throw new ValidationError(_formprefix + "longitude", ValidationError.PATTERN_FAILED);}
if(this.phone && !(/xss:throwerror/).test(this.phone)) { throw new ValidationError(_formprefix + "phone", ValidationError.PATTERN_FAILED);}
if(this.extension && !(/xss:throwerror/).test(this.extension)) { throw new ValidationError(_formprefix + "extension", ValidationError.PATTERN_FAILED);}
if(this.mobile && !(/xss:throwerror/).test(this.mobile)) { throw new ValidationError(_formprefix + "mobile", ValidationError.PATTERN_FAILED);}
if(this.fax && !(/xss:throwerror/).test(this.fax)) { throw new ValidationError(_formprefix + "fax", ValidationError.PATTERN_FAILED);}
if(this.timezone && !(/xss:throwerror/).test(this.timezone)) { throw new ValidationError(_formprefix + "timezone", ValidationError.PATTERN_FAILED);}
if(this.language && !(/^[a-zA-Z-]{0,5}$/).test(this.language)) { throw new ValidationError(_formprefix + "language", ValidationError.PATTERN_FAILED);}
if(this.websiteUrl && !(/xss:throwerror/).test(this.websiteUrl)) { throw new ValidationError(_formprefix + "website_url", ValidationError.PATTERN_FAILED);}
if(this.blogUrl && !(/xss:throwerror/).test(this.blogUrl)) { throw new ValidationError(_formprefix + "blog_url", ValidationError.PATTERN_FAILED);}
if(this.twitterUrl && !(/xss:throwerror/).test(this.twitterUrl)) { throw new ValidationError(_formprefix + "twitter_url", ValidationError.PATTERN_FAILED);}
if(this.linkedinUrl && !(/xss:throwerror/).test(this.linkedinUrl)) { throw new ValidationError(_formprefix + "linkedin_url", ValidationError.PATTERN_FAILED);}
if(this.flickrUrl && !(/xss:throwerror/).test(this.flickrUrl)) { throw new ValidationError(_formprefix + "flickr_url", ValidationError.PATTERN_FAILED);}
if(this.deliciousUrl && !(/xss:throwerror/).test(this.deliciousUrl)) { throw new ValidationError(_formprefix + "delicious_url", ValidationError.PATTERN_FAILED);}
if(this.amazonUrl && !(/xss:throwerror/).test(this.amazonUrl)) { throw new ValidationError(_formprefix + "amazon_url", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAccountAddress.path = "appaccountaddress";
AppAccountAddress.newBuilder = function() {
    return new AppAccountAddress();
};

AuthTokenDetails = function() {
    var _formprefix = "";
    
var details = "";
this.setDetails = function(details) { 
    this.details = details;
    return this;
};
this.getDetails = function() {
    return this.details;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDetails(json["details"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDetails()) json += '"details"' + ":" + '"' + jsonEscape(this.getDetails())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AuthTokenDetails.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AuthTokenDetails.path = "authtokendetails";
AuthTokenDetails.newBuilder = function() {
    return new AuthTokenDetails();
};

OIDCApp = function() {
    var _formprefix = "";
    
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
var isPrimary = "0";
this.setIsPrimary = function(isPrimary) { 
    this.isPrimary = isPrimary;
    return this;
};
this.getIsPrimary = function() {
    return this.isPrimary;
};
var isEnabled = "1";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClientZid(json["client_zid"]);
		this.setIsPrimary(json["is_primary"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';
		if(this.getIsPrimary()) json += '"is_primary"' + ":" + '"' + jsonEscape(this.getIsPrimary())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OIDCApp.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OIDCApp.path = "oidcapp";
OIDCApp.newBuilder = function() {
    return new OIDCApp();
};

Scope = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var scope = "";
this.setScope = function(scope) { 
    this.scope = scope;
    return this;
};
this.getScope = function() {
    return this.scope;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var parentScopeId = "-1";
this.setParentScopeId = function(parentScopeId) { 
    this.parentScopeId = parentScopeId;
    return this;
};
this.getParentScopeId = function() {
    return this.parentScopeId;
};
var internal = "1";
this.setInternal = function(internal) { 
    this.internal = internal;
    return this;
};
this.getInternal = function() {
    return this.internal;
};
var exposed = "0";
this.setExposed = function(exposed) { 
    this.exposed = exposed;
    return this;
};
this.getExposed = function() {
    return this.exposed;
};
var operationType = "30";
this.setOperationType = function(operationType) { 
    this.operationType = operationType;
    return this;
};
this.getOperationType = function() {
    return this.operationType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var scopedescriptions = undefined;
this.setScopedescriptionss = function(scopedescriptions) { 
    this.scopedescriptions = scopedescriptions;
    return this;
};
this.getScopedescriptionss = function() {
    return this.scopedescriptions;
};
this.addScopedescriptions = function(scopedescriptions) { 
 if(!this.scopedescriptions) this.scopedescriptions = new Array(); 
  this.scopedescriptions.push(scopedescriptions); 
 return this;
};

var subscopes = undefined;
this.setSubscopess = function(subscopes) { 
    this.subscopes = subscopes;
    return this;
};
this.getSubscopess = function() {
    return this.subscopes;
};
this.addSubscopes = function(subscopes) { 
 if(!this.subscopes) this.subscopes = new Array(); 
  this.subscopes.push(subscopes); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setScope(json["scope"]);
		this.setDescription(json["description"]);
		this.setParentScopeId(json["parent_scope_id"]);
		this.setInternal(json["internal"]);
		this.setExposed(json["exposed"]);
		this.setOperationType(json["operation_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setScopedescriptionss(URI.getResourceArray(json["scopeDescriptions"],"scopedescriptions"));
		this.setSubscopess(URI.getResourceArray(json["subScopes"],"subscopes"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getScope()) json += '"scope"' + ":" + '"' + jsonEscape(this.getScope())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getParentScopeId()) json += '"parent_scope_id"' + ":" + '"' + jsonEscape(this.getParentScopeId())  + '",';
		if(this.getInternal()) json += '"internal"' + ":" + '"' + jsonEscape(this.getInternal())  + '",';
		if(this.getExposed()) json += '"exposed"' + ":" + '"' + jsonEscape(this.getExposed())  + '",';
		if(this.getOperationType()) json += '"operation_type"' + ":" + '"' + jsonEscape(this.getOperationType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getScopedescriptionss()) json += '"scopeDescriptions"' + ":" + URI.toJSONArray(this.getScopedescriptionss())  + ',';
		if(this.getSubscopess()) json += '"subScopes"' + ":" + URI.toJSONArray(this.getSubscopess())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Scope.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[a-zA-Z0-9_\-]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.scope && !(/^([A-Za-z0-9_.\-]+)$/).test(this.scope)) { throw new ValidationError(_formprefix + "scope", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^([A-Za-z0-9_.\-]+)$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.parentScopeId && !(/^[a-zA-Z0-9_\-]+$/).test(this.parentScopeId)) { throw new ValidationError(_formprefix + "parent_scope_id", ValidationError.PATTERN_FAILED);}
if(this.internal && !Validator.INTEGER.test(this.internal)) { throw new ValidationError(_formprefix + "internal", ValidationError.PATTERN_FAILED);}
if(this.exposed && !Validator.INTEGER.test(this.exposed)) { throw new ValidationError(_formprefix + "exposed", ValidationError.PATTERN_FAILED);}
if(this.operationType && !Validator.INTEGER.test(this.operationType)) { throw new ValidationError(_formprefix + "operation_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.scopedescriptions) { for(i=0; i < this.scopedescriptions.length; i++ ) { this.scopedescriptions[i].validate(); } }
if(this.subscopes) { for(i=0; i < this.subscopes.length; i++ ) { this.subscopes[i].validate(); } }

	return this;
    }
}
Scope.path = "scope";
Scope.newBuilder = function() {
    return new Scope();
};

ServiceOrgProductionZSOID = function() {
    var _formprefix = "";
    
var productionZsoid = "";
this.setProductionZsoid = function(productionZsoid) { 
    this.productionZsoid = productionZsoid;
    return this;
};
this.getProductionZsoid = function() {
    return this.productionZsoid;
};
var subZsoid = "";
this.setSubZsoid = function(subZsoid) { 
    this.subZsoid = subZsoid;
    return this;
};
this.getSubZsoid = function() {
    return this.subZsoid;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setProductionZsoid(json["production_zsoid"]);
		this.setSubZsoid(json["sub_zsoid"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getProductionZsoid()) json += '"production_zsoid"' + ":" + '"' + jsonEscape(this.getProductionZsoid())  + '",';
		if(this.getSubZsoid()) json += '"sub_zsoid"' + ":" + '"' + jsonEscape(this.getSubZsoid())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgProductionZSOID.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.productionZsoid && !(/^[a-zA-Z0-9_\-]+$/).test(this.productionZsoid)) { throw new ValidationError(_formprefix + "production_zsoid", ValidationError.PATTERN_FAILED);}
if(this.subZsoid && !(/^[a-zA-Z0-9_\-]+$/).test(this.subZsoid)) { throw new ValidationError(_formprefix + "sub_zsoid", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgProductionZSOID.path = "serviceorgproductionzsoid";
ServiceOrgProductionZSOID.newBuilder = function() {
    return new ServiceOrgProductionZSOID();
};

UserExpiry = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setExpiryTime(json["expiry_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserExpiry.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserExpiry.path = "userexpiry";
UserExpiry.newBuilder = function() {
    return new UserExpiry();
};

ZAIDSMSAudit = function() {
    var _formprefix = "";
    
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var mobileNo = "";
this.setMobileNo = function(mobileNo) { 
    this.mobileNo = mobileNo;
    return this;
};
this.getMobileNo = function() {
    return this.mobileNo;
};
var type = "";
this.setType = function(type) { 
    this.type = type;
    return this;
};
this.getType = function() {
    return this.type;
};
var usecase = "";
this.setUsecase = function(usecase) { 
    this.usecase = usecase;
    return this;
};
this.getUsecase = function() {
    return this.usecase;
};
var languageCode = "";
this.setLanguageCode = function(languageCode) { 
    this.languageCode = languageCode;
    return this;
};
this.getLanguageCode = function() {
    return this.languageCode;
};
var response = "";
this.setResponse = function(response) { 
    this.response = response;
    return this;
};
this.getResponse = function() {
    return this.response;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZaid(json["zaid"]);
		this.setZid(json["zid"]);
		this.setMobileNo(json["mobile_no"]);
		this.setType(json["type"]);
		this.setUsecase(json["usecase"]);
		this.setLanguageCode(json["language_code"]);
		this.setResponse(json["response"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getMobileNo()) json += '"mobile_no"' + ":" + '"' + jsonEscape(this.getMobileNo())  + '",';
		if(this.getType()) json += '"type"' + ":" + '"' + jsonEscape(this.getType())  + '",';
		if(this.getUsecase()) json += '"usecase"' + ":" + '"' + jsonEscape(this.getUsecase())  + '",';
		if(this.getLanguageCode()) json += '"language_code"' + ":" + '"' + jsonEscape(this.getLanguageCode())  + '",';
		if(this.getResponse()) json += '"response"' + ":" + '"' + jsonEscape(this.getResponse())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ZAIDSMSAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.mobileNo && !(/dontdisturb/).test(this.mobileNo)) { throw new ValidationError(_formprefix + "mobile_no", ValidationError.PATTERN_FAILED);}
if(this.type && !Validator.INTEGER.test(this.type)) { throw new ValidationError(_formprefix + "type", ValidationError.PATTERN_FAILED);}
if(this.usecase && !Validator.INTEGER.test(this.usecase)) { throw new ValidationError(_formprefix + "usecase", ValidationError.PATTERN_FAILED);}
if(this.languageCode && !(/dontdisturb/).test(this.languageCode)) { throw new ValidationError(_formprefix + "language_code", ValidationError.PATTERN_FAILED);}
if(this.response && !(/dontdisturb/).test(this.response)) { throw new ValidationError(_formprefix + "response", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ZAIDSMSAudit.path = "zaidsmsaudit";
ZAIDSMSAudit.newBuilder = function() {
    return new ZAIDSMSAudit();
};

AuthToken = function() {
    var _formprefix = "";
    
var token = "";
this.setToken = function(token) { 
    this.token = token;
    return this;
};
this.getToken = function() {
    return this.token;
};
var tokenId = "";
this.setTokenId = function(tokenId) { 
    this.tokenId = tokenId;
    return this;
};
this.getTokenId = function() {
    return this.tokenId;
};
var tokenType = "ticket";
this.setTokenType = function(tokenType) { 
    this.tokenType = tokenType;
    return this;
};
this.getTokenType = function() {
    return this.tokenType;
};
var parentTokenId = "";
this.setParentTokenId = function(parentTokenId) { 
    this.parentTokenId = parentTokenId;
    return this;
};
this.getParentTokenId = function() {
    return this.parentTokenId;
};
var serviceDomain = "";
this.setServiceDomain = function(serviceDomain) { 
    this.serviceDomain = serviceDomain;
    return this;
};
this.getServiceDomain = function() {
    return this.serviceDomain;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var validityPeriod = "0";
this.setValidityPeriod = function(validityPeriod) { 
    this.validityPeriod = validityPeriod;
    return this;
};
this.getValidityPeriod = function() {
    return this.validityPeriod;
};
var idlePeriod = "";
this.setIdlePeriod = function(idlePeriod) { 
    this.idlePeriod = idlePeriod;
    return this;
};
this.getIdlePeriod = function() {
    return this.idlePeriod;
};
var isOneTimeToken = "";
this.setIsOneTimeToken = function(isOneTimeToken) { 
    this.isOneTimeToken = isOneTimeToken;
    return this;
};
this.getIsOneTimeToken = function() {
    return this.isOneTimeToken;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var authtokenscope = undefined;
this.setAuthtokenscopes = function(authtokenscope) { 
    this.authtokenscope = authtokenscope;
    return this;
};
this.getAuthtokenscopes = function() {
    return this.authtokenscope;
};
this.addAuthtokenscope = function(authtokenscope) { 
 if(!this.authtokenscope) this.authtokenscope = new Array(); 
  this.authtokenscope.push(authtokenscope); 
 return this;
};

var authtokendetails = undefined;
this.setAuthtokendetails = function(authtokendetails) { 
    this.authtokendetails = authtokendetails;
    return this;
};
this.getAuthtokendetails = function() {
    return this.authtokendetails;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setToken(json["token"]);
		this.setTokenId(json["token_id"]);
		this.setTokenType(json["token_type"]);
		this.setParentTokenId(json["parent_token_id"]);
		this.setServiceDomain(json["service_domain"]);
		this.setIpAddress(json["ip_address"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);
		this.setValidityPeriod(json["validity_period"]);
		this.setIdlePeriod(json["idle_period"]);
		this.setIsOneTimeToken(json["is_one_time_token"]);
		this.setModifiedTime(json["modified_time"]);
		this.setAuthtokenscopes(URI.getResourceArray(json["authTokenScope"],"authtokenscope"));
		this.setAuthtokendetails(URI.getResource(json["authTokenDetails"],"authtokendetails"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getToken()) json += '"token"' + ":" + '"' + jsonEscape(this.getToken())  + '",';
		if(this.getTokenId()) json += '"token_id"' + ":" + '"' + jsonEscape(this.getTokenId())  + '",';
		if(this.getTokenType()) json += '"token_type"' + ":" + '"' + jsonEscape(this.getTokenType())  + '",';
		if(this.getParentTokenId()) json += '"parent_token_id"' + ":" + '"' + jsonEscape(this.getParentTokenId())  + '",';
		if(this.getServiceDomain()) json += '"service_domain"' + ":" + '"' + jsonEscape(this.getServiceDomain())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getValidityPeriod()) json += '"validity_period"' + ":" + '"' + jsonEscape(this.getValidityPeriod())  + '",';
		if(this.getIdlePeriod()) json += '"idle_period"' + ":" + '"' + jsonEscape(this.getIdlePeriod())  + '",';
		if(this.getIsOneTimeToken()) json += '"is_one_time_token"' + ":" + '"' + jsonEscape(this.getIsOneTimeToken())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getAuthtokenscopes()) json += '"authTokenScope"' + ":" + URI.toJSONArray(this.getAuthtokenscopes())  + ',';
		if(this.getAuthtokendetails()) json += '"authTokenDetails"' + ":" + this.getAuthtokendetails().toJSON()  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AuthToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.token && !(/^[a-zA-Z0-9]+\.[a-zA-Z0-9_]+\.[a-f0-9]{128}$/).test(this.token)) { throw new ValidationError(_formprefix + "token", ValidationError.PATTERN_FAILED);}
if(this.tokenId && !Validator.INTEGER.test(this.tokenId)) { throw new ValidationError(_formprefix + "token_id", ValidationError.PATTERN_FAILED);}
if(this.tokenType && !(/^([A-Za-z0-9_.\-]+)$/).test(this.tokenType)) { throw new ValidationError(_formprefix + "token_type", ValidationError.PATTERN_FAILED);}
if(this.parentTokenId && !Validator.INTEGER.test(this.parentTokenId)) { throw new ValidationError(_formprefix + "parent_token_id", ValidationError.PATTERN_FAILED);}
if(this.serviceDomain && !(/^([\p{L}\p{M}\p{N}]([\p{L}\p{M}\p{N}\-]{0,61}[\p{L}\p{M}\p{N}])?\.)+[\p{L}\p{M}]{2,6}$/).test(this.serviceDomain)) { throw new ValidationError(_formprefix + "service_domain", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/xss:htmlfilter/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.validityPeriod && !Validator.INTEGER.test(this.validityPeriod)) { throw new ValidationError(_formprefix + "validity_period", ValidationError.PATTERN_FAILED);}
if(this.idlePeriod && !Validator.INTEGER.test(this.idlePeriod)) { throw new ValidationError(_formprefix + "idle_period", ValidationError.PATTERN_FAILED);}
if(this.isOneTimeToken && !Validator.BOOLEAN.test(this.isOneTimeToken)) { throw new ValidationError(_formprefix + "is_one_time_token", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.authtokenscope) { for(i=0; i < this.authtokenscope.length; i++ ) { this.authtokenscope[i].validate(); } }
if(this.authtokendetails) { this.authtokendetails.validate(); }

	return this;
    }
}
AuthToken.path = "authtoken";
AuthToken.newBuilder = function() {
    return new AuthToken();
};

OAuthMobileAppName = function() {
    var _formprefix = "";
    
var mobileAppName = "";
this.setMobileAppName = function(mobileAppName) { 
    this.mobileAppName = mobileAppName;
    return this;
};
this.getMobileAppName = function() {
    return this.mobileAppName;
};
var appLogo = "";
this.setAppLogo = function(appLogo) { 
    this.appLogo = appLogo;
    return this;
};
this.getAppLogo = function() {
    return this.appLogo;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var appType = "";
this.setAppType = function(appType) { 
    this.appType = appType;
    return this;
};
this.getAppType = function() {
    return this.appType;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var uniqueId = "";
this.setUniqueId = function(uniqueId) { 
    this.uniqueId = uniqueId;
    return this;
};
this.getUniqueId = function() {
    return this.uniqueId;
};
var oauthmobiledevices = undefined;
this.setOauthmobiledevicess = function(oauthmobiledevices) { 
    this.oauthmobiledevices = oauthmobiledevices;
    return this;
};
this.getOauthmobiledevicess = function() {
    return this.oauthmobiledevices;
};
this.addOauthmobiledevices = function(oauthmobiledevices) { 
 if(!this.oauthmobiledevices) this.oauthmobiledevices = new Array(); 
  this.oauthmobiledevices.push(oauthmobiledevices); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setMobileAppName(json["mobile_app_name"]);
		this.setAppLogo(json["app_logo"]);
		this.setDescription(json["description"]);
		this.setAppType(json["app_type"]);
		this.setDisplayName(json["display_name"]);
		this.setUniqueId(json["unique_id"]);
		this.setOauthmobiledevicess(URI.getResourceArray(json["oAuthMobileDevices"],"oauthmobiledevices"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getMobileAppName()) json += '"mobile_app_name"' + ":" + '"' + jsonEscape(this.getMobileAppName())  + '",';
		if(this.getAppLogo()) json += '"app_logo"' + ":" + '"' + jsonEscape(this.getAppLogo())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getAppType()) json += '"app_type"' + ":" + '"' + jsonEscape(this.getAppType())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getUniqueId()) json += '"unique_id"' + ":" + '"' + jsonEscape(this.getUniqueId())  + '",';
		if(this.getOauthmobiledevicess()) json += '"oAuthMobileDevices"' + ":" + URI.toJSONArray(this.getOauthmobiledevicess())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthMobileAppName.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.mobileAppName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.mobileAppName)) { throw new ValidationError(_formprefix + "mobile_app_name", ValidationError.PATTERN_FAILED);}
if(this.appLogo && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.appLogo)) { throw new ValidationError(_formprefix + "app_logo", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.appType && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.appType)) { throw new ValidationError(_formprefix + "app_type", ValidationError.PATTERN_FAILED);}
if(this.displayName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.displayName)) { throw new ValidationError(_formprefix + "display_name", ValidationError.PATTERN_FAILED);}
if(this.uniqueId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.uniqueId)) { throw new ValidationError(_formprefix + "unique_id", ValidationError.PATTERN_FAILED);}
if(this.oauthmobiledevices) { for(i=0; i < this.oauthmobiledevices.length; i++ ) { this.oauthmobiledevices[i].validate(); } }

	return this;
    }
}
OAuthMobileAppName.path = "oauthmobileappname";
OAuthMobileAppName.newBuilder = function() {
    return new OAuthMobileAppName();
};

AccountAudit = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var tokenDigest = "";
this.setTokenDigest = function(tokenDigest) { 
    this.tokenDigest = tokenDigest;
    return this;
};
this.getTokenDigest = function() {
    return this.tokenDigest;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var operationId = "";
this.setOperationId = function(operationId) { 
    this.operationId = operationId;
    return this;
};
this.getOperationId = function() {
    return this.operationId;
};
var useragentaudit = undefined;
this.setUseragentaudit = function(useragentaudit) { 
    this.useragentaudit = useragentaudit;
    return this;
};
this.getUseragentaudit = function() {
    return this.useragentaudit;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setZuid(json["zuid"]);
		this.setIpAddress(json["ip_address"]);
		this.setReferrer(json["referrer"]);
		this.setTokenDigest(json["token_digest"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);
		this.setAppId(json["app_id"]);
		this.setOperationId(json["operation_id"]);
		this.setUseragentaudit(URI.getResource(json["userAgentAudit"],"useragentaudit"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getTokenDigest()) json += '"token_digest"' + ":" + '"' + jsonEscape(this.getTokenDigest())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getOperationId()) json += '"operation_id"' + ":" + '"' + jsonEscape(this.getOperationId())  + '",';
		if(this.getUseragentaudit()) json += '"userAgentAudit"' + ":" + this.getUseragentaudit().toJSON()  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.tokenDigest && !(/dontdisturb/).test(this.tokenDigest)) { throw new ValidationError(_formprefix + "token_digest", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.appId && !Validator.INTEGER.test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.operationId && !Validator.INTEGER.test(this.operationId)) { throw new ValidationError(_formprefix + "operation_id", ValidationError.PATTERN_FAILED);}
if(this.useragentaudit) { this.useragentaudit.validate(); }

	return this;
    }
}
AccountAudit.path = "accountaudit";
AccountAudit.newBuilder = function() {
    return new AccountAudit();
};

OAuthMobileAppService = function() {
    var _formprefix = "";
    
var serviceName = "";
this.setServiceName = function(serviceName) { 
    this.serviceName = serviceName;
    return this;
};
this.getServiceName = function() {
    return this.serviceName;
};
var oauthmobileappname = undefined;
this.setOauthmobileappnames = function(oauthmobileappname) { 
    this.oauthmobileappname = oauthmobileappname;
    return this;
};
this.getOauthmobileappnames = function() {
    return this.oauthmobileappname;
};
this.addOauthmobileappname = function(oauthmobileappname) { 
 if(!this.oauthmobileappname) this.oauthmobileappname = new Array(); 
  this.oauthmobileappname.push(oauthmobileappname); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setServiceName(json["service_name"]);
		this.setOauthmobileappnames(URI.getResourceArray(json["oAuthMobileAppName"],"oauthmobileappname"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getServiceName()) json += '"service_name"' + ":" + '"' + jsonEscape(this.getServiceName())  + '",';
		if(this.getOauthmobileappnames()) json += '"oAuthMobileAppName"' + ":" + URI.toJSONArray(this.getOauthmobileappnames())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthMobileAppService.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.serviceName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.serviceName)) { throw new ValidationError(_formprefix + "service_name", ValidationError.PATTERN_FAILED);}
if(this.oauthmobileappname) { for(i=0; i < this.oauthmobileappname.length; i++ ) { this.oauthmobileappname[i].validate(); } }

	return this;
    }
}
OAuthMobileAppService.path = "oauthmobileappservice";
OAuthMobileAppService.newBuilder = function() {
    return new OAuthMobileAppService();
};

Location = function() {
    var _formprefix = "";
    
var locationNameApl = "";
this.setLocationNameApl = function(locationNameApl) { 
    this.locationNameApl = locationNameApl;
    return this;
};
this.getLocationNameApl = function() {
    return this.locationNameApl;
};
var addressType = "1";
this.setAddressType = function(addressType) { 
    this.addressType = addressType;
    return this;
};
this.getAddressType = function() {
    return this.addressType;
};
var locationName = "";
this.setLocationName = function(locationName) { 
    this.locationName = locationName;
    return this;
};
this.getLocationName = function() {
    return this.locationName;
};
var postBox = "";
this.setPostBox = function(postBox) { 
    this.postBox = postBox;
    return this;
};
this.getPostBox = function() {
    return this.postBox;
};
var streetAddress = "";
this.setStreetAddress = function(streetAddress) { 
    this.streetAddress = streetAddress;
    return this;
};
this.getStreetAddress = function() {
    return this.streetAddress;
};
var city = "";
this.setCity = function(city) { 
    this.city = city;
    return this;
};
this.getCity = function() {
    return this.city;
};
var state = "";
this.setState = function(state) { 
    this.state = state;
    return this;
};
this.getState = function() {
    return this.state;
};
var country = "";
this.setCountry = function(country) { 
    this.country = country;
    return this;
};
this.getCountry = function() {
    return this.country;
};
var postalCode = "";
this.setPostalCode = function(postalCode) { 
    this.postalCode = postalCode;
    return this;
};
this.getPostalCode = function() {
    return this.postalCode;
};
var latitude = "";
this.setLatitude = function(latitude) { 
    this.latitude = latitude;
    return this;
};
this.getLatitude = function() {
    return this.latitude;
};
var longitude = "";
this.setLongitude = function(longitude) { 
    this.longitude = longitude;
    return this;
};
this.getLongitude = function() {
    return this.longitude;
};
var phone = "";
this.setPhone = function(phone) { 
    this.phone = phone;
    return this;
};
this.getPhone = function() {
    return this.phone;
};
var mobile = "";
this.setMobile = function(mobile) { 
    this.mobile = mobile;
    return this;
};
this.getMobile = function() {
    return this.mobile;
};
var fax = "";
this.setFax = function(fax) { 
    this.fax = fax;
    return this;
};
this.getFax = function() {
    return this.fax;
};
var timezone = "";
this.setTimezone = function(timezone) { 
    this.timezone = timezone;
    return this;
};
this.getTimezone = function() {
    return this.timezone;
};
var language = "";
this.setLanguage = function(language) { 
    this.language = language;
    return this;
};
this.getLanguage = function() {
    return this.language;
};
var isPrimary = "0";
this.setIsPrimary = function(isPrimary) { 
    this.isPrimary = isPrimary;
    return this;
};
this.getIsPrimary = function() {
    return this.isPrimary;
};
var websiteUrl = "";
this.setWebsiteUrl = function(websiteUrl) { 
    this.websiteUrl = websiteUrl;
    return this;
};
this.getWebsiteUrl = function() {
    return this.websiteUrl;
};
var blogUrl = "";
this.setBlogUrl = function(blogUrl) { 
    this.blogUrl = blogUrl;
    return this;
};
this.getBlogUrl = function() {
    return this.blogUrl;
};
var twitterUrl = "";
this.setTwitterUrl = function(twitterUrl) { 
    this.twitterUrl = twitterUrl;
    return this;
};
this.getTwitterUrl = function() {
    return this.twitterUrl;
};
var linkedinUrl = "";
this.setLinkedinUrl = function(linkedinUrl) { 
    this.linkedinUrl = linkedinUrl;
    return this;
};
this.getLinkedinUrl = function() {
    return this.linkedinUrl;
};
var flickrUrl = "";
this.setFlickrUrl = function(flickrUrl) { 
    this.flickrUrl = flickrUrl;
    return this;
};
this.getFlickrUrl = function() {
    return this.flickrUrl;
};
var deliciousUrl = "";
this.setDeliciousUrl = function(deliciousUrl) { 
    this.deliciousUrl = deliciousUrl;
    return this;
};
this.getDeliciousUrl = function() {
    return this.deliciousUrl;
};
var amazonUrl = "";
this.setAmazonUrl = function(amazonUrl) { 
    this.amazonUrl = amazonUrl;
    return this;
};
this.getAmazonUrl = function() {
    return this.amazonUrl;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var userlocation = undefined;
this.setUserlocations = function(userlocation) { 
    this.userlocation = userlocation;
    return this;
};
this.getUserlocations = function() {
    return this.userlocation;
};
this.addUserlocation = function(userlocation) { 
 if(!this.userlocation) this.userlocation = new Array(); 
  this.userlocation.push(userlocation); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLocationNameApl(json["location_name_apl"]);
		this.setAddressType(json["address_type"]);
		this.setLocationName(json["location_name"]);
		this.setPostBox(json["post_box"]);
		this.setStreetAddress(json["street_address"]);
		this.setCity(json["city"]);
		this.setState(json["state"]);
		this.setCountry(json["country"]);
		this.setPostalCode(json["postal_code"]);
		this.setLatitude(json["latitude"]);
		this.setLongitude(json["longitude"]);
		this.setPhone(json["phone"]);
		this.setMobile(json["mobile"]);
		this.setFax(json["fax"]);
		this.setTimezone(json["timezone"]);
		this.setLanguage(json["language"]);
		this.setIsPrimary(json["is_primary"]);
		this.setWebsiteUrl(json["website_url"]);
		this.setBlogUrl(json["blog_url"]);
		this.setTwitterUrl(json["twitter_url"]);
		this.setLinkedinUrl(json["linkedin_url"]);
		this.setFlickrUrl(json["flickr_url"]);
		this.setDeliciousUrl(json["delicious_url"]);
		this.setAmazonUrl(json["amazon_url"]);
		this.setModifiedTime(json["modified_time"]);
		this.setUserlocations(URI.getResourceArray(json["userLocation"],"userlocation"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLocationNameApl()) json += '"location_name_apl"' + ":" + '"' + jsonEscape(this.getLocationNameApl())  + '",';
		if(this.getAddressType()) json += '"address_type"' + ":" + '"' + jsonEscape(this.getAddressType())  + '",';
		if(this.getLocationName()) json += '"location_name"' + ":" + '"' + jsonEscape(this.getLocationName())  + '",';
		if(this.getPostBox()) json += '"post_box"' + ":" + '"' + jsonEscape(this.getPostBox())  + '",';
		if(this.getStreetAddress()) json += '"street_address"' + ":" + '"' + jsonEscape(this.getStreetAddress())  + '",';
		if(this.getCity()) json += '"city"' + ":" + '"' + jsonEscape(this.getCity())  + '",';
		if(this.getState()) json += '"state"' + ":" + '"' + jsonEscape(this.getState())  + '",';
		if(this.getCountry()) json += '"country"' + ":" + '"' + jsonEscape(this.getCountry())  + '",';
		if(this.getPostalCode()) json += '"postal_code"' + ":" + '"' + jsonEscape(this.getPostalCode())  + '",';
		if(this.getLatitude()) json += '"latitude"' + ":" + '"' + jsonEscape(this.getLatitude())  + '",';
		if(this.getLongitude()) json += '"longitude"' + ":" + '"' + jsonEscape(this.getLongitude())  + '",';
		if(this.getPhone()) json += '"phone"' + ":" + '"' + jsonEscape(this.getPhone())  + '",';
		if(this.getMobile()) json += '"mobile"' + ":" + '"' + jsonEscape(this.getMobile())  + '",';
		if(this.getFax()) json += '"fax"' + ":" + '"' + jsonEscape(this.getFax())  + '",';
		if(this.getTimezone()) json += '"timezone"' + ":" + '"' + jsonEscape(this.getTimezone())  + '",';
		if(this.getLanguage()) json += '"language"' + ":" + '"' + jsonEscape(this.getLanguage())  + '",';
		if(this.getIsPrimary()) json += '"is_primary"' + ":" + '"' + jsonEscape(this.getIsPrimary())  + '",';
		if(this.getWebsiteUrl()) json += '"website_url"' + ":" + '"' + jsonEscape(this.getWebsiteUrl())  + '",';
		if(this.getBlogUrl()) json += '"blog_url"' + ":" + '"' + jsonEscape(this.getBlogUrl())  + '",';
		if(this.getTwitterUrl()) json += '"twitter_url"' + ":" + '"' + jsonEscape(this.getTwitterUrl())  + '",';
		if(this.getLinkedinUrl()) json += '"linkedin_url"' + ":" + '"' + jsonEscape(this.getLinkedinUrl())  + '",';
		if(this.getFlickrUrl()) json += '"flickr_url"' + ":" + '"' + jsonEscape(this.getFlickrUrl())  + '",';
		if(this.getDeliciousUrl()) json += '"delicious_url"' + ":" + '"' + jsonEscape(this.getDeliciousUrl())  + '",';
		if(this.getAmazonUrl()) json += '"amazon_url"' + ":" + '"' + jsonEscape(this.getAmazonUrl())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getUserlocations()) json += '"userLocation"' + ":" + URI.toJSONArray(this.getUserlocations())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Location.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.locationNameApl && !(/xss:throwerror/).test(this.locationNameApl)) { throw new ValidationError(_formprefix + "location_name_apl", ValidationError.PATTERN_FAILED);}
if(this.addressType && !Validator.INTEGER.test(this.addressType)) { throw new ValidationError(_formprefix + "address_type", ValidationError.PATTERN_FAILED);}
if(this.locationName && !(/xss:throwerror/).test(this.locationName)) { throw new ValidationError(_formprefix + "location_name", ValidationError.PATTERN_FAILED);}
if(this.postBox && !(/xss:throwerror/).test(this.postBox)) { throw new ValidationError(_formprefix + "post_box", ValidationError.PATTERN_FAILED);}
if(this.streetAddress && !(/xss:throwerror/).test(this.streetAddress)) { throw new ValidationError(_formprefix + "street_address", ValidationError.PATTERN_FAILED);}
if(this.city && !(/xss:throwerror/).test(this.city)) { throw new ValidationError(_formprefix + "city", ValidationError.PATTERN_FAILED);}
if(this.state && !(/xss:throwerror/).test(this.state)) { throw new ValidationError(_formprefix + "state", ValidationError.PATTERN_FAILED);}
if(this.country && !(/xss:throwerror/).test(this.country)) { throw new ValidationError(_formprefix + "country", ValidationError.PATTERN_FAILED);}
if(this.postalCode && !(/xss:throwerror/).test(this.postalCode)) { throw new ValidationError(_formprefix + "postal_code", ValidationError.PATTERN_FAILED);}
if(this.latitude && !(/^[0-9\-\.]*$/).test(this.latitude)) { throw new ValidationError(_formprefix + "latitude", ValidationError.PATTERN_FAILED);}
if(this.longitude && !(/^[0-9\-\.]*$/).test(this.longitude)) { throw new ValidationError(_formprefix + "longitude", ValidationError.PATTERN_FAILED);}
if(this.phone && !(/xss:throwerror/).test(this.phone)) { throw new ValidationError(_formprefix + "phone", ValidationError.PATTERN_FAILED);}
if(this.mobile && !(/xss:throwerror/).test(this.mobile)) { throw new ValidationError(_formprefix + "mobile", ValidationError.PATTERN_FAILED);}
if(this.fax && !(/xss:throwerror/).test(this.fax)) { throw new ValidationError(_formprefix + "fax", ValidationError.PATTERN_FAILED);}
if(this.timezone && !(/xss:throwerror/).test(this.timezone)) { throw new ValidationError(_formprefix + "timezone", ValidationError.PATTERN_FAILED);}
if(this.language && !(/xss:throwerror/).test(this.language)) { throw new ValidationError(_formprefix + "language", ValidationError.PATTERN_FAILED);}
if(this.isPrimary && !Validator.INTEGER.test(this.isPrimary)) { throw new ValidationError(_formprefix + "is_primary", ValidationError.PATTERN_FAILED);}
if(this.websiteUrl && !(/xss:throwerror/).test(this.websiteUrl)) { throw new ValidationError(_formprefix + "website_url", ValidationError.PATTERN_FAILED);}
if(this.blogUrl && !(/xss:throwerror/).test(this.blogUrl)) { throw new ValidationError(_formprefix + "blog_url", ValidationError.PATTERN_FAILED);}
if(this.twitterUrl && !(/xss:throwerror/).test(this.twitterUrl)) { throw new ValidationError(_formprefix + "twitter_url", ValidationError.PATTERN_FAILED);}
if(this.linkedinUrl && !(/xss:throwerror/).test(this.linkedinUrl)) { throw new ValidationError(_formprefix + "linkedin_url", ValidationError.PATTERN_FAILED);}
if(this.flickrUrl && !(/xss:throwerror/).test(this.flickrUrl)) { throw new ValidationError(_formprefix + "flickr_url", ValidationError.PATTERN_FAILED);}
if(this.deliciousUrl && !(/xss:throwerror/).test(this.deliciousUrl)) { throw new ValidationError(_formprefix + "delicious_url", ValidationError.PATTERN_FAILED);}
if(this.amazonUrl && !(/xss:throwerror/).test(this.amazonUrl)) { throw new ValidationError(_formprefix + "amazon_url", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.userlocation) { for(i=0; i < this.userlocation.length; i++ ) { this.userlocation[i].validate(); } }

	return this;
    }
}
Location.path = "location";
Location.newBuilder = function() {
    return new Location();
};

Account = function() {
    var _formprefix = "";
    
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var parentZaid = "";
this.setParentZaid = function(parentZaid) { 
    this.parentZaid = parentZaid;
    return this;
};
this.getParentZaid = function() {
    return this.parentZaid;
};
var accountName = "";
this.setAccountName = function(accountName) { 
    this.accountName = accountName;
    return this;
};
this.getAccountName = function() {
    return this.accountName;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var accountType = "PERSONAL";
this.setAccountType = function(accountType) { 
    this.accountType = accountType;
    return this;
};
this.getAccountType = function() {
    return this.accountType;
};
var createdBy = "";
this.setCreatedBy = function(createdBy) { 
    this.createdBy = createdBy;
    return this;
};
this.getCreatedBy = function() {
    return this.createdBy;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var domain = undefined;
this.setDomains = function(domain) { 
    this.domain = domain;
    return this;
};
this.getDomains = function() {
    return this.domain;
};
this.addDomain = function(domain) { 
 if(!this.domain) this.domain = new Array(); 
  this.domain.push(domain); 
 return this;
};

var invitation = undefined;
this.setInvitations = function(invitation) { 
    this.invitation = invitation;
    return this;
};
this.getInvitations = function() {
    return this.invitation;
};
this.addInvitation = function(invitation) { 
 if(!this.invitation) this.invitation = new Array(); 
  this.invitation.push(invitation); 
 return this;
};

var accountjoinrequests = undefined;
this.setAccountjoinrequestss = function(accountjoinrequests) { 
    this.accountjoinrequests = accountjoinrequests;
    return this;
};
this.getAccountjoinrequestss = function() {
    return this.accountjoinrequests;
};
this.addAccountjoinrequests = function(accountjoinrequests) { 
 if(!this.accountjoinrequests) this.accountjoinrequests = new Array(); 
  this.accountjoinrequests.push(accountjoinrequests); 
 return this;
};

var location = undefined;
this.setLocations = function(location) { 
    this.location = location;
    return this;
};
this.getLocations = function() {
    return this.location;
};
this.addLocation = function(location) { 
 if(!this.location) this.location = new Array(); 
  this.location.push(location); 
 return this;
};

var announcements = undefined;
this.setAnnouncementss = function(announcements) { 
    this.announcements = announcements;
    return this;
};
this.getAnnouncementss = function() {
    return this.announcements;
};
this.addAnnouncements = function(announcements) { 
 if(!this.announcements) this.announcements = new Array(); 
  this.announcements.push(announcements); 
 return this;
};

var policy = undefined;
this.setPolicys = function(policy) { 
    this.policy = policy;
    return this;
};
this.getPolicys = function() {
    return this.policy;
};
this.addPolicy = function(policy) { 
 if(!this.policy) this.policy = new Array(); 
  this.policy.push(policy); 
 return this;
};

var accountconfiguration = undefined;
this.setAccountconfigurations = function(accountconfiguration) { 
    this.accountconfiguration = accountconfiguration;
    return this;
};
this.getAccountconfigurations = function() {
    return this.accountconfiguration;
};
this.addAccountconfiguration = function(accountconfiguration) { 
 if(!this.accountconfiguration) this.accountconfiguration = new Array(); 
  this.accountconfiguration.push(accountconfiguration); 
 return this;
};

var automation = undefined;
this.setAutomations = function(automation) { 
    this.automation = automation;
    return this;
};
this.getAutomations = function() {
    return this.automation;
};
this.addAutomation = function(automation) { 
 if(!this.automation) this.automation = new Array(); 
  this.automation.push(automation); 
 return this;
};

var designations = undefined;
this.setDesignationss = function(designations) { 
    this.designations = designations;
    return this;
};
this.getDesignationss = function() {
    return this.designations;
};
this.addDesignations = function(designations) { 
 if(!this.designations) this.designations = new Array(); 
  this.designations.push(designations); 
 return this;
};

var accountremoteauthconf = undefined;
this.setAccountremoteauthconfs = function(accountremoteauthconf) { 
    this.accountremoteauthconf = accountremoteauthconf;
    return this;
};
this.getAccountremoteauthconfs = function() {
    return this.accountremoteauthconf;
};
this.addAccountremoteauthconf = function(accountremoteauthconf) { 
 if(!this.accountremoteauthconf) this.accountremoteauthconf = new Array(); 
  this.accountremoteauthconf.push(accountremoteauthconf); 
 return this;
};

var accountkyc = undefined;
this.setAccountkycs = function(accountkyc) { 
    this.accountkyc = accountkyc;
    return this;
};
this.getAccountkycs = function() {
    return this.accountkyc;
};
this.addAccountkyc = function(accountkyc) { 
 if(!this.accountkyc) this.accountkyc = new Array(); 
  this.accountkyc.push(accountkyc); 
 return this;
};

var manageddevice = undefined;
this.setManageddevices = function(manageddevice) { 
    this.manageddevice = manageddevice;
    return this;
};
this.getManageddevices = function() {
    return this.manageddevice;
};
this.addManageddevice = function(manageddevice) { 
 if(!this.manageddevice) this.manageddevice = new Array(); 
  this.manageddevice.push(manageddevice); 
 return this;
};

var authdomain = undefined;
this.setAuthdomains = function(authdomain) { 
    this.authdomain = authdomain;
    return this;
};
this.getAuthdomains = function() {
    return this.authdomain;
};
this.addAuthdomain = function(authdomain) { 
 if(!this.authdomain) this.authdomain = new Array(); 
  this.authdomain.push(authdomain); 
 return this;
};

var secretkey = undefined;
this.setSecretkeys = function(secretkey) { 
    this.secretkey = secretkey;
    return this;
};
this.getSecretkeys = function() {
    return this.secretkey;
};
this.addSecretkey = function(secretkey) { 
 if(!this.secretkey) this.secretkey = new Array(); 
  this.secretkey.push(secretkey); 
 return this;
};

var captcha = undefined;
this.setCaptchas = function(captcha) { 
    this.captcha = captcha;
    return this;
};
this.getCaptchas = function() {
    return this.captcha;
};
this.addCaptcha = function(captcha) { 
 if(!this.captcha) this.captcha = new Array(); 
  this.captcha.push(captcha); 
 return this;
};

var digest = undefined;
this.setDigests = function(digest) { 
    this.digest = digest;
    return this;
};
this.getDigests = function() {
    return this.digest;
};
this.addDigest = function(digest) { 
 if(!this.digest) this.digest = new Array(); 
  this.digest.push(digest); 
 return this;
};

var user = undefined;
this.setUsers = function(user) { 
    this.user = user;
    return this;
};
this.getUsers = function() {
    return this.user;
};
this.addUser = function(user) { 
 if(!this.user) this.user = new Array(); 
  this.user.push(user); 
 return this;
};

var screenname = undefined;
this.setScreennames = function(screenname) { 
    this.screenname = screenname;
    return this;
};
this.getScreennames = function() {
    return this.screenname;
};
this.addScreenname = function(screenname) { 
 if(!this.screenname) this.screenname = new Array(); 
  this.screenname.push(screenname); 
 return this;
};

var mobilescreenname = undefined;
this.setMobilescreennames = function(mobilescreenname) { 
    this.mobilescreenname = mobilescreenname;
    return this;
};
this.getMobilescreennames = function() {
    return this.mobilescreenname;
};
this.addMobilescreenname = function(mobilescreenname) { 
 if(!this.mobilescreenname) this.mobilescreenname = new Array(); 
  this.mobilescreenname.push(mobilescreenname); 
 return this;
};

var useremail = undefined;
this.setUseremails = function(useremail) { 
    this.useremail = useremail;
    return this;
};
this.getUseremails = function() {
    return this.useremail;
};
this.addUseremail = function(useremail) { 
 if(!this.useremail) this.useremail = new Array(); 
  this.useremail.push(useremail); 
 return this;
};

var usermobile = undefined;
this.setUsermobiles = function(usermobile) { 
    this.usermobile = usermobile;
    return this;
};
this.getUsermobiles = function() {
    return this.usermobile;
};
this.addUsermobile = function(usermobile) { 
 if(!this.usermobile) this.usermobile = new Array(); 
  this.usermobile.push(usermobile); 
 return this;
};

var tag = undefined;
this.setTags = function(tag) { 
    this.tag = tag;
    return this;
};
this.getTags = function() {
    return this.tag;
};
this.addTag = function(tag) { 
 if(!this.tag) this.tag = new Array(); 
  this.tag.push(tag); 
 return this;
};

var customfields = undefined;
this.setCustomfieldss = function(customfields) { 
    this.customfields = customfields;
    return this;
};
this.getCustomfieldss = function() {
    return this.customfields;
};
this.addCustomfields = function(customfields) { 
 if(!this.customfields) this.customfields = new Array(); 
  this.customfields.push(customfields); 
 return this;
};

var group = undefined;
this.setGroups = function(group) { 
    this.group = group;
    return this;
};
this.getGroups = function() {
    return this.group;
};
this.addGroup = function(group) { 
 if(!this.group) this.group = new Array(); 
  this.group.push(group); 
 return this;
};

var appaccount = undefined;
this.setAppaccounts = function(appaccount) { 
    this.appaccount = appaccount;
    return this;
};
this.getAppaccounts = function() {
    return this.appaccount;
};
this.addAppaccount = function(appaccount) { 
 if(!this.appaccount) this.appaccount = new Array(); 
  this.appaccount.push(appaccount); 
 return this;
};

var cportaladmin = undefined;
this.setCportaladmins = function(cportaladmin) { 
    this.cportaladmin = cportaladmin;
    return this;
};
this.getCportaladmins = function() {
    return this.cportaladmin;
};
this.addCportaladmin = function(cportaladmin) { 
 if(!this.cportaladmin) this.cportaladmin = new Array(); 
  this.cportaladmin.push(cportaladmin); 
 return this;
};

var clientportalorgtype = undefined;
this.setClientportalorgtypes = function(clientportalorgtype) { 
    this.clientportalorgtype = clientportalorgtype;
    return this;
};
this.getClientportalorgtypes = function() {
    return this.clientportalorgtype;
};
this.addClientportalorgtype = function(clientportalorgtype) { 
 if(!this.clientportalorgtype) this.clientportalorgtype = new Array(); 
  this.clientportalorgtype.push(clientportalorgtype); 
 return this;
};

var accountscheduledetails = undefined;
this.setAccountscheduledetailss = function(accountscheduledetails) { 
    this.accountscheduledetails = accountscheduledetails;
    return this;
};
this.getAccountscheduledetailss = function() {
    return this.accountscheduledetails;
};
this.addAccountscheduledetails = function(accountscheduledetails) { 
 if(!this.accountscheduledetails) this.accountscheduledetails = new Array(); 
  this.accountscheduledetails.push(accountscheduledetails); 
 return this;
};

var logo = undefined;
this.setLogo = function(logo) { 
    this.logo = logo;
    return this;
};
this.getLogo = function() {
    return this.logo;
};
var routingpolicy = undefined;
this.setRoutingpolicys = function(routingpolicy) { 
    this.routingpolicy = routingpolicy;
    return this;
};
this.getRoutingpolicys = function() {
    return this.routingpolicy;
};
this.addRoutingpolicy = function(routingpolicy) { 
 if(!this.routingpolicy) this.routingpolicy = new Array(); 
  this.routingpolicy.push(routingpolicy); 
 return this;
};

var samlauthentication = undefined;
this.setSamlauthentications = function(samlauthentication) { 
    this.samlauthentication = samlauthentication;
    return this;
};
this.getSamlauthentications = function() {
    return this.samlauthentication;
};
this.addSamlauthentication = function(samlauthentication) { 
 if(!this.samlauthentication) this.samlauthentication = new Array(); 
  this.samlauthentication.push(samlauthentication); 
 return this;
};

var jwtauthentication = undefined;
this.setJwtauthentications = function(jwtauthentication) { 
    this.jwtauthentication = jwtauthentication;
    return this;
};
this.getJwtauthentications = function() {
    return this.jwtauthentication;
};
this.addJwtauthentication = function(jwtauthentication) { 
 if(!this.jwtauthentication) this.jwtauthentication = new Array(); 
  this.jwtauthentication.push(jwtauthentication); 
 return this;
};

var conditionalpolicy = undefined;
this.setConditionalpolicys = function(conditionalpolicy) { 
    this.conditionalpolicy = conditionalpolicy;
    return this;
};
this.getConditionalpolicys = function() {
    return this.conditionalpolicy;
};
this.addConditionalpolicy = function(conditionalpolicy) { 
 if(!this.conditionalpolicy) this.conditionalpolicy = new Array(); 
  this.conditionalpolicy.push(conditionalpolicy); 
 return this;
};

var ipaddress = undefined;
this.setIpaddresss = function(ipaddress) { 
    this.ipaddress = ipaddress;
    return this;
};
this.getIpaddresss = function() {
    return this.ipaddress;
};
this.addIpaddress = function(ipaddress) { 
 if(!this.ipaddress) this.ipaddress = new Array(); 
  this.ipaddress.push(ipaddress); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZaid(json["zaid"]);
		this.setParentZaid(json["parent_zaid"]);
		this.setAccountName(json["account_name"]);
		this.setDisplayName(json["display_name"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setAccountType(json["account_type"]);
		this.setCreatedBy(json["created_by"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setDomains(URI.getResourceArray(json["domain"],"domain"));
		this.setInvitations(URI.getResourceArray(json["invitation"],"invitation"));
		this.setAccountjoinrequestss(URI.getResourceArray(json["accountJoinRequests"],"accountjoinrequests"));
		this.setLocations(URI.getResourceArray(json["location"],"location"));
		this.setAnnouncementss(URI.getResourceArray(json["announcements"],"announcements"));
		this.setPolicys(URI.getResourceArray(json["policy"],"policy"));
		this.setAccountconfigurations(URI.getResourceArray(json["accountConfiguration"],"accountconfiguration"));
		this.setAutomations(URI.getResourceArray(json["automation"],"automation"));
		this.setDesignationss(URI.getResourceArray(json["designations"],"designations"));
		this.setAccountremoteauthconfs(URI.getResourceArray(json["accountRemoteAuthConf"],"accountremoteauthconf"));
		this.setAccountkycs(URI.getResourceArray(json["accountKYC"],"accountkyc"));
		this.setManageddevices(URI.getResourceArray(json["managedDevice"],"manageddevice"));
		this.setAuthdomains(URI.getResourceArray(json["authDomain"],"authdomain"));
		this.setSecretkeys(URI.getResourceArray(json["secretKey"],"secretkey"));
		this.setCaptchas(URI.getResourceArray(json["captcha"],"captcha"));
		this.setDigests(URI.getResourceArray(json["digest"],"digest"));
		this.setUsers(URI.getResourceArray(json["user"],"user"));
		this.setScreennames(URI.getResourceArray(json["screenName"],"screenname"));
		this.setMobilescreennames(URI.getResourceArray(json["mobileScreenName"],"mobilescreenname"));
		this.setUseremails(URI.getResourceArray(json["userEmail"],"useremail"));
		this.setUsermobiles(URI.getResourceArray(json["userMobile"],"usermobile"));
		this.setTags(URI.getResourceArray(json["tag"],"tag"));
		this.setCustomfieldss(URI.getResourceArray(json["customFields"],"customfields"));
		this.setGroups(URI.getResourceArray(json["group"],"group"));
		this.setAppaccounts(URI.getResourceArray(json["appAccount"],"appaccount"));
		this.setCportaladmins(URI.getResourceArray(json["cPortalAdmin"],"cportaladmin"));
		this.setClientportalorgtypes(URI.getResourceArray(json["clientPortalOrgType"],"clientportalorgtype"));
		this.setAccountscheduledetailss(URI.getResourceArray(json["accountScheduleDetails"],"accountscheduledetails"));
		this.setLogo(URI.getResource(json["logo"],"logo"));
		this.setRoutingpolicys(URI.getResourceArray(json["routingPolicy"],"routingpolicy"));
		this.setSamlauthentications(URI.getResourceArray(json["sAMLAuthentication"],"samlauthentication"));
		this.setJwtauthentications(URI.getResourceArray(json["jWTAuthentication"],"jwtauthentication"));
		this.setConditionalpolicys(URI.getResourceArray(json["conditionalPolicy"],"conditionalpolicy"));
		this.setIpaddresss(URI.getResourceArray(json["ipAddress"],"ipaddress"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getParentZaid()) json += '"parent_zaid"' + ":" + '"' + jsonEscape(this.getParentZaid())  + '",';
		if(this.getAccountName()) json += '"account_name"' + ":" + '"' + jsonEscape(this.getAccountName())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getAccountType()) json += '"account_type"' + ":" + '"' + jsonEscape(this.getAccountType())  + '",';
		if(this.getCreatedBy()) json += '"created_by"' + ":" + '"' + jsonEscape(this.getCreatedBy())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getDomains()) json += '"domain"' + ":" + URI.toJSONArray(this.getDomains())  + ',';
		if(this.getInvitations()) json += '"invitation"' + ":" + URI.toJSONArray(this.getInvitations())  + ',';
		if(this.getAccountjoinrequestss()) json += '"accountJoinRequests"' + ":" + URI.toJSONArray(this.getAccountjoinrequestss())  + ',';
		if(this.getLocations()) json += '"location"' + ":" + URI.toJSONArray(this.getLocations())  + ',';
		if(this.getAnnouncementss()) json += '"announcements"' + ":" + URI.toJSONArray(this.getAnnouncementss())  + ',';
		if(this.getPolicys()) json += '"policy"' + ":" + URI.toJSONArray(this.getPolicys())  + ',';
		if(this.getAccountconfigurations()) json += '"accountConfiguration"' + ":" + URI.toJSONArray(this.getAccountconfigurations())  + ',';
		if(this.getAutomations()) json += '"automation"' + ":" + URI.toJSONArray(this.getAutomations())  + ',';
		if(this.getDesignationss()) json += '"designations"' + ":" + URI.toJSONArray(this.getDesignationss())  + ',';
		if(this.getAccountremoteauthconfs()) json += '"accountRemoteAuthConf"' + ":" + URI.toJSONArray(this.getAccountremoteauthconfs())  + ',';
		if(this.getAccountkycs()) json += '"accountKYC"' + ":" + URI.toJSONArray(this.getAccountkycs())  + ',';
		if(this.getManageddevices()) json += '"managedDevice"' + ":" + URI.toJSONArray(this.getManageddevices())  + ',';
		if(this.getAuthdomains()) json += '"authDomain"' + ":" + URI.toJSONArray(this.getAuthdomains())  + ',';
		if(this.getSecretkeys()) json += '"secretKey"' + ":" + URI.toJSONArray(this.getSecretkeys())  + ',';
		if(this.getCaptchas()) json += '"captcha"' + ":" + URI.toJSONArray(this.getCaptchas())  + ',';
		if(this.getDigests()) json += '"digest"' + ":" + URI.toJSONArray(this.getDigests())  + ',';
		if(this.getUsers()) json += '"user"' + ":" + URI.toJSONArray(this.getUsers())  + ',';
		if(this.getScreennames()) json += '"screenName"' + ":" + URI.toJSONArray(this.getScreennames())  + ',';
		if(this.getMobilescreennames()) json += '"mobileScreenName"' + ":" + URI.toJSONArray(this.getMobilescreennames())  + ',';
		if(this.getUseremails()) json += '"userEmail"' + ":" + URI.toJSONArray(this.getUseremails())  + ',';
		if(this.getUsermobiles()) json += '"userMobile"' + ":" + URI.toJSONArray(this.getUsermobiles())  + ',';
		if(this.getTags()) json += '"tag"' + ":" + URI.toJSONArray(this.getTags())  + ',';
		if(this.getCustomfieldss()) json += '"customFields"' + ":" + URI.toJSONArray(this.getCustomfieldss())  + ',';
		if(this.getGroups()) json += '"group"' + ":" + URI.toJSONArray(this.getGroups())  + ',';
		if(this.getAppaccounts()) json += '"appAccount"' + ":" + URI.toJSONArray(this.getAppaccounts())  + ',';
		if(this.getCportaladmins()) json += '"cPortalAdmin"' + ":" + URI.toJSONArray(this.getCportaladmins())  + ',';
		if(this.getClientportalorgtypes()) json += '"clientPortalOrgType"' + ":" + URI.toJSONArray(this.getClientportalorgtypes())  + ',';
		if(this.getAccountscheduledetailss()) json += '"accountScheduleDetails"' + ":" + URI.toJSONArray(this.getAccountscheduledetailss())  + ',';
		if(this.getLogo()) json += '"logo"' + ":" + this.getLogo().toJSON()  + ',';
		if(this.getRoutingpolicys()) json += '"routingPolicy"' + ":" + URI.toJSONArray(this.getRoutingpolicys())  + ',';
		if(this.getSamlauthentications()) json += '"sAMLAuthentication"' + ":" + URI.toJSONArray(this.getSamlauthentications())  + ',';
		if(this.getJwtauthentications()) json += '"jWTAuthentication"' + ":" + URI.toJSONArray(this.getJwtauthentications())  + ',';
		if(this.getConditionalpolicys()) json += '"conditionalPolicy"' + ":" + URI.toJSONArray(this.getConditionalpolicys())  + ',';
		if(this.getIpaddresss()) json += '"ipAddress"' + ":" + URI.toJSONArray(this.getIpaddresss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Account.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.accountName && !(/xss:throwerror/).test(this.accountName)) { throw new ValidationError(_formprefix + "account_name", ValidationError.PATTERN_FAILED);}
if(this.displayName && !(/xss:throwerror/).test(this.displayName)) { throw new ValidationError(_formprefix + "display_name", ValidationError.PATTERN_FAILED);}
if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.createdBy && !(/^[a-zA-Z0-9\-]+$/).test(this.createdBy)) { throw new ValidationError(_formprefix + "created_by", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.domain) { for(i=0; i < this.domain.length; i++ ) { this.domain[i].validate(); } }
if(this.invitation) { for(i=0; i < this.invitation.length; i++ ) { this.invitation[i].validate(); } }
if(this.accountjoinrequests) { for(i=0; i < this.accountjoinrequests.length; i++ ) { this.accountjoinrequests[i].validate(); } }
if(this.location) { for(i=0; i < this.location.length; i++ ) { this.location[i].validate(); } }
if(this.announcements) { for(i=0; i < this.announcements.length; i++ ) { this.announcements[i].validate(); } }
if(this.policy) { for(i=0; i < this.policy.length; i++ ) { this.policy[i].validate(); } }
if(this.accountconfiguration) { for(i=0; i < this.accountconfiguration.length; i++ ) { this.accountconfiguration[i].validate(); } }
if(this.automation) { for(i=0; i < this.automation.length; i++ ) { this.automation[i].validate(); } }
if(this.designations) { for(i=0; i < this.designations.length; i++ ) { this.designations[i].validate(); } }
if(this.accountremoteauthconf) { for(i=0; i < this.accountremoteauthconf.length; i++ ) { this.accountremoteauthconf[i].validate(); } }
if(this.accountkyc) { for(i=0; i < this.accountkyc.length; i++ ) { this.accountkyc[i].validate(); } }
if(this.manageddevice) { for(i=0; i < this.manageddevice.length; i++ ) { this.manageddevice[i].validate(); } }
if(this.authdomain) { for(i=0; i < this.authdomain.length; i++ ) { this.authdomain[i].validate(); } }
if(this.secretkey) { for(i=0; i < this.secretkey.length; i++ ) { this.secretkey[i].validate(); } }
if(this.captcha) { for(i=0; i < this.captcha.length; i++ ) { this.captcha[i].validate(); } }
if(this.digest) { for(i=0; i < this.digest.length; i++ ) { this.digest[i].validate(); } }
if(this.user) { for(i=0; i < this.user.length; i++ ) { this.user[i].validate(); } }
if(this.screenname) { for(i=0; i < this.screenname.length; i++ ) { this.screenname[i].validate(); } }
if(this.mobilescreenname) { for(i=0; i < this.mobilescreenname.length; i++ ) { this.mobilescreenname[i].validate(); } }
if(this.useremail) { for(i=0; i < this.useremail.length; i++ ) { this.useremail[i].validate(); } }
if(this.usermobile) { for(i=0; i < this.usermobile.length; i++ ) { this.usermobile[i].validate(); } }
if(this.tag) { for(i=0; i < this.tag.length; i++ ) { this.tag[i].validate(); } }
if(this.customfields) { for(i=0; i < this.customfields.length; i++ ) { this.customfields[i].validate(); } }
if(this.group) { for(i=0; i < this.group.length; i++ ) { this.group[i].validate(); } }
if(this.appaccount) { for(i=0; i < this.appaccount.length; i++ ) { this.appaccount[i].validate(); } }
if(this.cportaladmin) { for(i=0; i < this.cportaladmin.length; i++ ) { this.cportaladmin[i].validate(); } }
if(this.clientportalorgtype) { for(i=0; i < this.clientportalorgtype.length; i++ ) { this.clientportalorgtype[i].validate(); } }
if(this.accountscheduledetails) { for(i=0; i < this.accountscheduledetails.length; i++ ) { this.accountscheduledetails[i].validate(); } }
if(this.logo) { this.logo.validate(); }
if(this.routingpolicy) { for(i=0; i < this.routingpolicy.length; i++ ) { this.routingpolicy[i].validate(); } }
if(this.samlauthentication) { for(i=0; i < this.samlauthentication.length; i++ ) { this.samlauthentication[i].validate(); } }
if(this.jwtauthentication) { for(i=0; i < this.jwtauthentication.length; i++ ) { this.jwtauthentication[i].validate(); } }
if(this.conditionalpolicy) { for(i=0; i < this.conditionalpolicy.length; i++ ) { this.conditionalpolicy[i].validate(); } }
if(this.ipaddress) { for(i=0; i < this.ipaddress.length; i++ ) { this.ipaddress[i].validate(); } }

	return this;
    }
}
Account.path = "account";
Account.newBuilder = function() {
    return new Account();
};

AccountCloseAudit = function() {
    var _formprefix = "";
    
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var usedServices = "";
this.setUsedServices = function(usedServices) { 
    this.usedServices = usedServices;
    return this;
};
this.getUsedServices = function() {
    return this.usedServices;
};
var comments = "";
this.setComments = function(comments) { 
    this.comments = comments;
    return this;
};
this.getComments = function() {
    return this.comments;
};
var username = "";
this.setUsername = function(username) { 
    this.username = username;
    return this;
};
this.getUsername = function() {
    return this.username;
};
var reason = "1";
this.setReason = function(reason) { 
    this.reason = reason;
    return this;
};
this.getReason = function() {
    return this.reason;
};
var registeredTime = "";
this.setRegisteredTime = function(registeredTime) { 
    this.registeredTime = registeredTime;
    return this;
};
this.getRegisteredTime = function() {
    return this.registeredTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZaid(json["zaid"]);
		this.setZuid(json["zuid"]);
		this.setUsedServices(json["used_services"]);
		this.setComments(json["comments"]);
		this.setUsername(json["username"]);
		this.setReason(json["reason"]);
		this.setRegisteredTime(json["registered_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getUsedServices()) json += '"used_services"' + ":" + '"' + jsonEscape(this.getUsedServices())  + '",';
		if(this.getComments()) json += '"comments"' + ":" + '"' + jsonEscape(this.getComments())  + '",';
		if(this.getUsername()) json += '"username"' + ":" + '"' + jsonEscape(this.getUsername())  + '",';
		if(this.getReason()) json += '"reason"' + ":" + '"' + jsonEscape(this.getReason())  + '",';
		if(this.getRegisteredTime()) json += '"registered_time"' + ":" + '"' + jsonEscape(this.getRegisteredTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountCloseAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.usedServices && !(/dontdisturb/).test(this.usedServices)) { throw new ValidationError(_formprefix + "used_services", ValidationError.PATTERN_FAILED);}
if(this.comments && !(/dontdisturb/).test(this.comments)) { throw new ValidationError(_formprefix + "comments", ValidationError.PATTERN_FAILED);}
if(this.username && !(/dontdisturb/).test(this.username)) { throw new ValidationError(_formprefix + "username", ValidationError.PATTERN_FAILED);}
if(this.registeredTime && !Validator.INTEGER.test(this.registeredTime)) { throw new ValidationError(_formprefix + "registered_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountCloseAudit.path = "accountcloseaudit";
AccountCloseAudit.newBuilder = function() {
    return new AccountCloseAudit();
};

Address = function() {
    var _formprefix = "";
    
var addressType = "";
this.setAddressType = function(addressType) { 
    this.addressType = addressType;
    return this;
};
this.getAddressType = function() {
    return this.addressType;
};
var companyName = "";
this.setCompanyName = function(companyName) { 
    this.companyName = companyName;
    return this;
};
this.getCompanyName = function() {
    return this.companyName;
};
var jobTitle = "";
this.setJobTitle = function(jobTitle) { 
    this.jobTitle = jobTitle;
    return this;
};
this.getJobTitle = function() {
    return this.jobTitle;
};
var locationName = "";
this.setLocationName = function(locationName) { 
    this.locationName = locationName;
    return this;
};
this.getLocationName = function() {
    return this.locationName;
};
var postBox = "";
this.setPostBox = function(postBox) { 
    this.postBox = postBox;
    return this;
};
this.getPostBox = function() {
    return this.postBox;
};
var streetAddress = "";
this.setStreetAddress = function(streetAddress) { 
    this.streetAddress = streetAddress;
    return this;
};
this.getStreetAddress = function() {
    return this.streetAddress;
};
var city = "";
this.setCity = function(city) { 
    this.city = city;
    return this;
};
this.getCity = function() {
    return this.city;
};
var state = "";
this.setState = function(state) { 
    this.state = state;
    return this;
};
this.getState = function() {
    return this.state;
};
var country = "";
this.setCountry = function(country) { 
    this.country = country;
    return this;
};
this.getCountry = function() {
    return this.country;
};
var postalCode = "";
this.setPostalCode = function(postalCode) { 
    this.postalCode = postalCode;
    return this;
};
this.getPostalCode = function() {
    return this.postalCode;
};
var latitude = "";
this.setLatitude = function(latitude) { 
    this.latitude = latitude;
    return this;
};
this.getLatitude = function() {
    return this.latitude;
};
var longitude = "";
this.setLongitude = function(longitude) { 
    this.longitude = longitude;
    return this;
};
this.getLongitude = function() {
    return this.longitude;
};
var phone = "";
this.setPhone = function(phone) { 
    this.phone = phone;
    return this;
};
this.getPhone = function() {
    return this.phone;
};
var extension = "";
this.setExtension = function(extension) { 
    this.extension = extension;
    return this;
};
this.getExtension = function() {
    return this.extension;
};
var mobile = "";
this.setMobile = function(mobile) { 
    this.mobile = mobile;
    return this;
};
this.getMobile = function() {
    return this.mobile;
};
var fax = "";
this.setFax = function(fax) { 
    this.fax = fax;
    return this;
};
this.getFax = function() {
    return this.fax;
};
var seatingLocation = "";
this.setSeatingLocation = function(seatingLocation) { 
    this.seatingLocation = seatingLocation;
    return this;
};
this.getSeatingLocation = function() {
    return this.seatingLocation;
};
var timezone = "";
this.setTimezone = function(timezone) { 
    this.timezone = timezone;
    return this;
};
this.getTimezone = function() {
    return this.timezone;
};
var language = "";
this.setLanguage = function(language) { 
    this.language = language;
    return this;
};
this.getLanguage = function() {
    return this.language;
};
var websiteUrl = "";
this.setWebsiteUrl = function(websiteUrl) { 
    this.websiteUrl = websiteUrl;
    return this;
};
this.getWebsiteUrl = function() {
    return this.websiteUrl;
};
var blogUrl = "";
this.setBlogUrl = function(blogUrl) { 
    this.blogUrl = blogUrl;
    return this;
};
this.getBlogUrl = function() {
    return this.blogUrl;
};
var twitterUrl = "";
this.setTwitterUrl = function(twitterUrl) { 
    this.twitterUrl = twitterUrl;
    return this;
};
this.getTwitterUrl = function() {
    return this.twitterUrl;
};
var linkedinUrl = "";
this.setLinkedinUrl = function(linkedinUrl) { 
    this.linkedinUrl = linkedinUrl;
    return this;
};
this.getLinkedinUrl = function() {
    return this.linkedinUrl;
};
var flickrUrl = "";
this.setFlickrUrl = function(flickrUrl) { 
    this.flickrUrl = flickrUrl;
    return this;
};
this.getFlickrUrl = function() {
    return this.flickrUrl;
};
var deliciousUrl = "";
this.setDeliciousUrl = function(deliciousUrl) { 
    this.deliciousUrl = deliciousUrl;
    return this;
};
this.getDeliciousUrl = function() {
    return this.deliciousUrl;
};
var amazonUrl = "";
this.setAmazonUrl = function(amazonUrl) { 
    this.amazonUrl = amazonUrl;
    return this;
};
this.getAmazonUrl = function() {
    return this.amazonUrl;
};
var facebookUrl = "";
this.setFacebookUrl = function(facebookUrl) { 
    this.facebookUrl = facebookUrl;
    return this;
};
this.getFacebookUrl = function() {
    return this.facebookUrl;
};
var googleplusUrl = "";
this.setGoogleplusUrl = function(googleplusUrl) { 
    this.googleplusUrl = googleplusUrl;
    return this;
};
this.getGoogleplusUrl = function() {
    return this.googleplusUrl;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAddressType(json["address_type"]);
		this.setCompanyName(json["company_name"]);
		this.setJobTitle(json["job_title"]);
		this.setLocationName(json["location_name"]);
		this.setPostBox(json["post_box"]);
		this.setStreetAddress(json["street_address"]);
		this.setCity(json["city"]);
		this.setState(json["state"]);
		this.setCountry(json["country"]);
		this.setPostalCode(json["postal_code"]);
		this.setLatitude(json["latitude"]);
		this.setLongitude(json["longitude"]);
		this.setPhone(json["phone"]);
		this.setExtension(json["extension"]);
		this.setMobile(json["mobile"]);
		this.setFax(json["fax"]);
		this.setSeatingLocation(json["seating_location"]);
		this.setTimezone(json["timezone"]);
		this.setLanguage(json["language"]);
		this.setWebsiteUrl(json["website_url"]);
		this.setBlogUrl(json["blog_url"]);
		this.setTwitterUrl(json["twitter_url"]);
		this.setLinkedinUrl(json["linkedin_url"]);
		this.setFlickrUrl(json["flickr_url"]);
		this.setDeliciousUrl(json["delicious_url"]);
		this.setAmazonUrl(json["amazon_url"]);
		this.setFacebookUrl(json["facebook_url"]);
		this.setGoogleplusUrl(json["googleplus_url"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAddressType()) json += '"address_type"' + ":" + '"' + jsonEscape(this.getAddressType())  + '",';
		if(this.getCompanyName()) json += '"company_name"' + ":" + '"' + jsonEscape(this.getCompanyName())  + '",';
		if(this.getJobTitle()) json += '"job_title"' + ":" + '"' + jsonEscape(this.getJobTitle())  + '",';
		if(this.getLocationName()) json += '"location_name"' + ":" + '"' + jsonEscape(this.getLocationName())  + '",';
		if(this.getPostBox()) json += '"post_box"' + ":" + '"' + jsonEscape(this.getPostBox())  + '",';
		if(this.getStreetAddress()) json += '"street_address"' + ":" + '"' + jsonEscape(this.getStreetAddress())  + '",';
		if(this.getCity()) json += '"city"' + ":" + '"' + jsonEscape(this.getCity())  + '",';
		if(this.getState()) json += '"state"' + ":" + '"' + jsonEscape(this.getState())  + '",';
		if(this.getCountry()) json += '"country"' + ":" + '"' + jsonEscape(this.getCountry())  + '",';
		if(this.getPostalCode()) json += '"postal_code"' + ":" + '"' + jsonEscape(this.getPostalCode())  + '",';
		if(this.getLatitude()) json += '"latitude"' + ":" + '"' + jsonEscape(this.getLatitude())  + '",';
		if(this.getLongitude()) json += '"longitude"' + ":" + '"' + jsonEscape(this.getLongitude())  + '",';
		if(this.getPhone()) json += '"phone"' + ":" + '"' + jsonEscape(this.getPhone())  + '",';
		if(this.getExtension()) json += '"extension"' + ":" + '"' + jsonEscape(this.getExtension())  + '",';
		if(this.getMobile()) json += '"mobile"' + ":" + '"' + jsonEscape(this.getMobile())  + '",';
		if(this.getFax()) json += '"fax"' + ":" + '"' + jsonEscape(this.getFax())  + '",';
		if(this.getSeatingLocation()) json += '"seating_location"' + ":" + '"' + jsonEscape(this.getSeatingLocation())  + '",';
		if(this.getTimezone()) json += '"timezone"' + ":" + '"' + jsonEscape(this.getTimezone())  + '",';
		if(this.getLanguage()) json += '"language"' + ":" + '"' + jsonEscape(this.getLanguage())  + '",';
		if(this.getWebsiteUrl()) json += '"website_url"' + ":" + '"' + jsonEscape(this.getWebsiteUrl())  + '",';
		if(this.getBlogUrl()) json += '"blog_url"' + ":" + '"' + jsonEscape(this.getBlogUrl())  + '",';
		if(this.getTwitterUrl()) json += '"twitter_url"' + ":" + '"' + jsonEscape(this.getTwitterUrl())  + '",';
		if(this.getLinkedinUrl()) json += '"linkedin_url"' + ":" + '"' + jsonEscape(this.getLinkedinUrl())  + '",';
		if(this.getFlickrUrl()) json += '"flickr_url"' + ":" + '"' + jsonEscape(this.getFlickrUrl())  + '",';
		if(this.getDeliciousUrl()) json += '"delicious_url"' + ":" + '"' + jsonEscape(this.getDeliciousUrl())  + '",';
		if(this.getAmazonUrl()) json += '"amazon_url"' + ":" + '"' + jsonEscape(this.getAmazonUrl())  + '",';
		if(this.getFacebookUrl()) json += '"facebook_url"' + ":" + '"' + jsonEscape(this.getFacebookUrl())  + '",';
		if(this.getGoogleplusUrl()) json += '"googleplus_url"' + ":" + '"' + jsonEscape(this.getGoogleplusUrl())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Address.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.addressType && !Validator.INTEGER.test(this.addressType)) { throw new ValidationError(_formprefix + "address_type", ValidationError.PATTERN_FAILED);}
if(this.companyName && !(/xss:throwerror/).test(this.companyName)) { throw new ValidationError(_formprefix + "company_name", ValidationError.PATTERN_FAILED);}
if(this.jobTitle && !(/xss:throwerror/).test(this.jobTitle)) { throw new ValidationError(_formprefix + "job_title", ValidationError.PATTERN_FAILED);}
if(this.locationName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.locationName)) { throw new ValidationError(_formprefix + "location_name", ValidationError.PATTERN_FAILED);}
if(this.postBox && !(/xss:throwerror/).test(this.postBox)) { throw new ValidationError(_formprefix + "post_box", ValidationError.PATTERN_FAILED);}
if(this.streetAddress && !(/xss:throwerror/).test(this.streetAddress)) { throw new ValidationError(_formprefix + "street_address", ValidationError.PATTERN_FAILED);}
if(this.city && !(/xss:throwerror/).test(this.city)) { throw new ValidationError(_formprefix + "city", ValidationError.PATTERN_FAILED);}
if(this.state && !(/xss:throwerror/).test(this.state)) { throw new ValidationError(_formprefix + "state", ValidationError.PATTERN_FAILED);}
if(this.country && !(/^[a-zA-Z0-9]{2,5}$/).test(this.country)) { throw new ValidationError(_formprefix + "country", ValidationError.PATTERN_FAILED);}
if(this.postalCode && !(/xss:throwerror/).test(this.postalCode)) { throw new ValidationError(_formprefix + "postal_code", ValidationError.PATTERN_FAILED);}
if(this.latitude && !(/^[0-9\-\.]*$/).test(this.latitude)) { throw new ValidationError(_formprefix + "latitude", ValidationError.PATTERN_FAILED);}
if(this.longitude && !(/^[0-9\-\.]*$/).test(this.longitude)) { throw new ValidationError(_formprefix + "longitude", ValidationError.PATTERN_FAILED);}
if(this.phone && !(/xss:throwerror/).test(this.phone)) { throw new ValidationError(_formprefix + "phone", ValidationError.PATTERN_FAILED);}
if(this.extension && !(/xss:throwerror/).test(this.extension)) { throw new ValidationError(_formprefix + "extension", ValidationError.PATTERN_FAILED);}
if(this.mobile && !(/xss:throwerror/).test(this.mobile)) { throw new ValidationError(_formprefix + "mobile", ValidationError.PATTERN_FAILED);}
if(this.fax && !(/xss:throwerror/).test(this.fax)) { throw new ValidationError(_formprefix + "fax", ValidationError.PATTERN_FAILED);}
if(this.seatingLocation && !(/xss:throwerror/).test(this.seatingLocation)) { throw new ValidationError(_formprefix + "seating_location", ValidationError.PATTERN_FAILED);}
if(this.timezone && !(/xss:throwerror/).test(this.timezone)) { throw new ValidationError(_formprefix + "timezone", ValidationError.PATTERN_FAILED);}
if(this.language && !(/^[a-zA-Z-]{0,5}$/).test(this.language)) { throw new ValidationError(_formprefix + "language", ValidationError.PATTERN_FAILED);}
if(this.websiteUrl && !(/xss:throwerror/).test(this.websiteUrl)) { throw new ValidationError(_formprefix + "website_url", ValidationError.PATTERN_FAILED);}
if(this.blogUrl && !(/xss:throwerror/).test(this.blogUrl)) { throw new ValidationError(_formprefix + "blog_url", ValidationError.PATTERN_FAILED);}
if(this.twitterUrl && !(/xss:throwerror/).test(this.twitterUrl)) { throw new ValidationError(_formprefix + "twitter_url", ValidationError.PATTERN_FAILED);}
if(this.linkedinUrl && !(/xss:throwerror/).test(this.linkedinUrl)) { throw new ValidationError(_formprefix + "linkedin_url", ValidationError.PATTERN_FAILED);}
if(this.flickrUrl && !(/xss:throwerror/).test(this.flickrUrl)) { throw new ValidationError(_formprefix + "flickr_url", ValidationError.PATTERN_FAILED);}
if(this.deliciousUrl && !(/xss:throwerror/).test(this.deliciousUrl)) { throw new ValidationError(_formprefix + "delicious_url", ValidationError.PATTERN_FAILED);}
if(this.amazonUrl && !(/xss:throwerror/).test(this.amazonUrl)) { throw new ValidationError(_formprefix + "amazon_url", ValidationError.PATTERN_FAILED);}
if(this.facebookUrl && !(/xss:throwerror/).test(this.facebookUrl)) { throw new ValidationError(_formprefix + "facebook_url", ValidationError.PATTERN_FAILED);}
if(this.googleplusUrl && !(/xss:throwerror/).test(this.googleplusUrl)) { throw new ValidationError(_formprefix + "googleplus_url", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Address.path = "address";
Address.newBuilder = function() {
    return new Address();
};

AuthTokenScope = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AuthTokenScope.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !Validator.INTEGER.test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AuthTokenScope.path = "authtokenscope";
AuthTokenScope.newBuilder = function() {
    return new AuthTokenScope();
};

License = function() {
    var _formprefix = "";
    
var licenseAttributeKey = "";
this.setLicenseAttributeKey = function(licenseAttributeKey) { 
    this.licenseAttributeKey = licenseAttributeKey;
    return this;
};
this.getLicenseAttributeKey = function() {
    return this.licenseAttributeKey;
};
var licenseAttributeValue = "";
this.setLicenseAttributeValue = function(licenseAttributeValue) { 
    this.licenseAttributeValue = licenseAttributeValue;
    return this;
};
this.getLicenseAttributeValue = function() {
    return this.licenseAttributeValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLicenseAttributeKey(json["license_attribute_key"]);
		this.setLicenseAttributeValue(json["license_attribute_value"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLicenseAttributeKey()) json += '"license_attribute_key"' + ":" + '"' + jsonEscape(this.getLicenseAttributeKey())  + '",';
		if(this.getLicenseAttributeValue()) json += '"license_attribute_value"' + ":" + '"' + jsonEscape(this.getLicenseAttributeValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(License.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.licenseAttributeValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.licenseAttributeValue)) { throw new ValidationError(_formprefix + "license_attribute_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
License.path = "license";
License.newBuilder = function() {
    return new License();
};

MailSender = function() {
    var _formprefix = "";
    
var connectorName = "isc";
this.setConnectorName = function(connectorName) { 
    this.connectorName = connectorName;
    return this;
};
this.getConnectorName = function() {
    return this.connectorName;
};
var mailSender = "";
this.setMailSender = function(mailSender) { 
    this.mailSender = mailSender;
    return this;
};
this.getMailSender = function() {
    return this.mailSender;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setConnectorName(json["connector_name"]);
		this.setMailSender(json["mail_sender"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getConnectorName()) json += '"connector_name"' + ":" + '"' + jsonEscape(this.getConnectorName())  + '",';
		if(this.getMailSender()) json += '"mail_sender"' + ":" + '"' + jsonEscape(this.getMailSender())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MailSender.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.connectorName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.connectorName)) { throw new ValidationError(_formprefix + "connector_name", ValidationError.PATTERN_FAILED);}
if(this.mailSender && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.mailSender)) { throw new ValidationError(_formprefix + "mail_sender", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
MailSender.path = "mailsender";
MailSender.newBuilder = function() {
    return new MailSender();
};

AccountKYCContact = function() {
    var _formprefix = "";
    
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var firstName = "";
this.setFirstName = function(firstName) { 
    this.firstName = firstName;
    return this;
};
this.getFirstName = function() {
    return this.firstName;
};
var lastName = "";
this.setLastName = function(lastName) { 
    this.lastName = lastName;
    return this;
};
this.getLastName = function() {
    return this.lastName;
};
var dataProtectionOfficer = "false";
this.setDataProtectionOfficer = function(dataProtectionOfficer) { 
    this.dataProtectionOfficer = dataProtectionOfficer;
    return this;
};
this.getDataProtectionOfficer = function() {
    return this.dataProtectionOfficer;
};
var privacyRepresentative = "false";
this.setPrivacyRepresentative = function(privacyRepresentative) { 
    this.privacyRepresentative = privacyRepresentative;
    return this;
};
this.getPrivacyRepresentative = function() {
    return this.privacyRepresentative;
};
var accountDisputeResolution = "false";
this.setAccountDisputeResolution = function(accountDisputeResolution) { 
    this.accountDisputeResolution = accountDisputeResolution;
    return this;
};
this.getAccountDisputeResolution = function() {
    return this.accountDisputeResolution;
};
var breachNotification = "false";
this.setBreachNotification = function(breachNotification) { 
    this.breachNotification = breachNotification;
    return this;
};
this.getBreachNotification = function() {
    return this.breachNotification;
};
var subprocessorNotification = "false";
this.setSubprocessorNotification = function(subprocessorNotification) { 
    this.subprocessorNotification = subprocessorNotification;
    return this;
};
this.getSubprocessorNotification = function() {
    return this.subprocessorNotification;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setEmailId(json["email_id"]);
		this.setFirstName(json["first_name"]);
		this.setLastName(json["last_name"]);
		this.setDataProtectionOfficer(json["data_protection_officer"]);
		this.setPrivacyRepresentative(json["privacy_representative"]);
		this.setAccountDisputeResolution(json["account_dispute_resolution"]);
		this.setBreachNotification(json["breach_notification"]);
		this.setSubprocessorNotification(json["subprocessor_notification"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getFirstName()) json += '"first_name"' + ":" + '"' + jsonEscape(this.getFirstName())  + '",';
		if(this.getLastName()) json += '"last_name"' + ":" + '"' + jsonEscape(this.getLastName())  + '",';
		if(this.getDataProtectionOfficer()) json += '"data_protection_officer"' + ":" + '"' + jsonEscape(this.getDataProtectionOfficer())  + '",';
		if(this.getPrivacyRepresentative()) json += '"privacy_representative"' + ":" + '"' + jsonEscape(this.getPrivacyRepresentative())  + '",';
		if(this.getAccountDisputeResolution()) json += '"account_dispute_resolution"' + ":" + '"' + jsonEscape(this.getAccountDisputeResolution())  + '",';
		if(this.getBreachNotification()) json += '"breach_notification"' + ":" + '"' + jsonEscape(this.getBreachNotification())  + '",';
		if(this.getSubprocessorNotification()) json += '"subprocessor_notification"' + ":" + '"' + jsonEscape(this.getSubprocessorNotification())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountKYCContact.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.firstName && !(/xss:throwerror/).test(this.firstName)) { throw new ValidationError(_formprefix + "first_name", ValidationError.PATTERN_FAILED);}
if(this.lastName && !(/xss:throwerror/).test(this.lastName)) { throw new ValidationError(_formprefix + "last_name", ValidationError.PATTERN_FAILED);}
if(this.dataProtectionOfficer && !Validator.BOOLEAN.test(this.dataProtectionOfficer)) { throw new ValidationError(_formprefix + "data_protection_officer", ValidationError.PATTERN_FAILED);}
if(this.privacyRepresentative && !Validator.BOOLEAN.test(this.privacyRepresentative)) { throw new ValidationError(_formprefix + "privacy_representative", ValidationError.PATTERN_FAILED);}
if(this.accountDisputeResolution && !Validator.BOOLEAN.test(this.accountDisputeResolution)) { throw new ValidationError(_formprefix + "account_dispute_resolution", ValidationError.PATTERN_FAILED);}
if(this.breachNotification && !Validator.BOOLEAN.test(this.breachNotification)) { throw new ValidationError(_formprefix + "breach_notification", ValidationError.PATTERN_FAILED);}
if(this.subprocessorNotification && !Validator.BOOLEAN.test(this.subprocessorNotification)) { throw new ValidationError(_formprefix + "subprocessor_notification", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountKYCContact.path = "accountkyccontact";
AccountKYCContact.newBuilder = function() {
    return new AccountKYCContact();
};

PasswordHistory = function() {
    var _formprefix = "";
    
var password = "";
this.setPassword = function(password) { 
    this.password = password;
    return this;
};
this.getPassword = function() {
    return this.password;
};
var salt = "";
this.setSalt = function(salt) { 
    this.salt = salt;
    return this;
};
this.getSalt = function() {
    return this.salt;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPassword(json["password"]);
		this.setSalt(json["salt"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPassword()) json += '"password"' + ":" + '"' + jsonEscape(this.getPassword())  + '",';
		if(this.getSalt()) json += '"salt"' + ":" + '"' + jsonEscape(this.getSalt())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(PasswordHistory.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.password && !(/dontdisturb/).test(this.password)) { throw new ValidationError(_formprefix + "password", ValidationError.PATTERN_FAILED);}
if(this.salt && !(/^([A-Za-z0-9_.\-]+)$/).test(this.salt)) { throw new ValidationError(_formprefix + "salt", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
PasswordHistory.path = "passwordhistory";
PasswordHistory.newBuilder = function() {
    return new PasswordHistory();
};

UserTPSecretGroup = function() {
    var _formprefix = "";
    
var groupId = "";
this.setGroupId = function(groupId) { 
    this.groupId = groupId;
    return this;
};
this.getGroupId = function() {
    return this.groupId;
};
var groupName = "";
this.setGroupName = function(groupName) { 
    this.groupName = groupName;
    return this;
};
this.getGroupName = function() {
    return this.groupName;
};
var groupDetails = "";
this.setGroupDetails = function(groupDetails) { 
    this.groupDetails = groupDetails;
    return this;
};
this.getGroupDetails = function() {
    return this.groupDetails;
};
var nextId = "-1";
this.setNextId = function(nextId) { 
    this.nextId = nextId;
    return this;
};
this.getNextId = function() {
    return this.nextId;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var userthirdpartysecretkeys = undefined;
this.setUserthirdpartysecretkeyss = function(userthirdpartysecretkeys) { 
    this.userthirdpartysecretkeys = userthirdpartysecretkeys;
    return this;
};
this.getUserthirdpartysecretkeyss = function() {
    return this.userthirdpartysecretkeys;
};
this.addUserthirdpartysecretkeys = function(userthirdpartysecretkeys) { 
 if(!this.userthirdpartysecretkeys) this.userthirdpartysecretkeys = new Array(); 
  this.userthirdpartysecretkeys.push(userthirdpartysecretkeys); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setGroupId(json["group_id"]);
		this.setGroupName(json["group_name"]);
		this.setGroupDetails(json["group_details"]);
		this.setNextId(json["next_id"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setUserthirdpartysecretkeyss(URI.getResourceArray(json["userThirdPartySecretKeys"],"userthirdpartysecretkeys"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getGroupId()) json += '"group_id"' + ":" + '"' + jsonEscape(this.getGroupId())  + '",';
		if(this.getGroupName()) json += '"group_name"' + ":" + '"' + jsonEscape(this.getGroupName())  + '",';
		if(this.getGroupDetails()) json += '"group_details"' + ":" + '"' + jsonEscape(this.getGroupDetails())  + '",';
		if(this.getNextId()) json += '"next_id"' + ":" + '"' + jsonEscape(this.getNextId())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getUserthirdpartysecretkeyss()) json += '"userThirdPartySecretKeys"' + ":" + URI.toJSONArray(this.getUserthirdpartysecretkeyss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserTPSecretGroup.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.groupId && !(/^[a-zA-Z0-9_\-]+$/).test(this.groupId)) { throw new ValidationError(_formprefix + "group_id", ValidationError.PATTERN_FAILED);}
if(this.groupName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.groupName)) { throw new ValidationError(_formprefix + "group_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.userthirdpartysecretkeys) { for(i=0; i < this.userthirdpartysecretkeys.length; i++ ) { this.userthirdpartysecretkeys[i].validate(); } }

	return this;
    }
}
UserTPSecretGroup.path = "usertpsecretgroup";
UserTPSecretGroup.newBuilder = function() {
    return new UserTPSecretGroup();
};

ServiceOrgMemberRole = function() {
    var _formprefix = "";
    
var zarid = "";
this.setZarid = function(zarid) { 
    this.zarid = zarid;
    return this;
};
this.getZarid = function() {
    return this.zarid;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZarid(json["zarid"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZarid()) json += '"zarid"' + ":" + '"' + jsonEscape(this.getZarid())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgMemberRole.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zarid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zarid)) { throw new ValidationError(_formprefix + "zarid", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgMemberRole.path = "serviceorgmemberrole";
ServiceOrgMemberRole.newBuilder = function() {
    return new ServiceOrgMemberRole();
};

TelesignLanguage = function() {
    var _formprefix = "";
    
var langName = "";
this.setLangName = function(langName) { 
    this.langName = langName;
    return this;
};
this.getLangName = function() {
    return this.langName;
};
var langCode = "";
this.setLangCode = function(langCode) { 
    this.langCode = langCode;
    return this;
};
this.getLangCode = function() {
    return this.langCode;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLangName(json["lang_name"]);
		this.setLangCode(json["lang_code"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLangName()) json += '"lang_name"' + ":" + '"' + jsonEscape(this.getLangName())  + '",';
		if(this.getLangCode()) json += '"lang_code"' + ":" + '"' + jsonEscape(this.getLangCode())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(TelesignLanguage.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.langName && !(/xss:throwerror/).test(this.langName)) { throw new ValidationError(_formprefix + "lang_name", ValidationError.PATTERN_FAILED);}
if(this.langCode && !(/^[a-zA-Z0-9]{2,5}$/).test(this.langCode)) { throw new ValidationError(_formprefix + "lang_code", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
TelesignLanguage.path = "telesignlanguage";
TelesignLanguage.newBuilder = function() {
    return new TelesignLanguage();
};

ManagedDeviceUsers = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidType = "1";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidType(json["zid_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ManagedDeviceUsers.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.zidType && !Validator.INTEGER.test(this.zidType)) { throw new ValidationError(_formprefix + "zid_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ManagedDeviceUsers.path = "manageddeviceusers";
ManagedDeviceUsers.newBuilder = function() {
    return new ManagedDeviceUsers();
};

UserGDPRDetails = function() {
    var _formprefix = "";
    
var dpaStatus = "0";
this.setDpaStatus = function(dpaStatus) { 
    this.dpaStatus = dpaStatus;
    return this;
};
this.getDpaStatus = function() {
    return this.dpaStatus;
};
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDpaStatus(json["dpa_status"]);
		this.setEmailId(json["email_id"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDpaStatus()) json += '"dpa_status"' + ":" + '"' + jsonEscape(this.getDpaStatus())  + '",';
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserGDPRDetails.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.dpaStatus && !Validator.INTEGER.test(this.dpaStatus)) { throw new ValidationError(_formprefix + "dpa_status", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserGDPRDetails.path = "usergdprdetails";
UserGDPRDetails.newBuilder = function() {
    return new UserGDPRDetails();
};

OAuthMobileUserDeviceSubClients = function() {
    var _formprefix = "";
    
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClientZid(json["client_zid"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthMobileUserDeviceSubClients.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.clientZid && !(/^[0-9]+\.[0-9]+$/).test(this.clientZid)) { throw new ValidationError(_formprefix + "client_zid", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthMobileUserDeviceSubClients.path = "oauthmobileuserdevicesubclients";
OAuthMobileUserDeviceSubClients.newBuilder = function() {
    return new OAuthMobileUserDeviceSubClients();
};

ServiceOrgDomain = function() {
    var _formprefix = "";
    
var zsoid = "";
this.setZsoid = function(zsoid) { 
    this.zsoid = zsoid;
    return this;
};
this.getZsoid = function() {
    return this.zsoid;
};
var domain = "";
this.setDomain = function(domain) { 
    this.domain = domain;
    return this;
};
this.getDomain = function() {
    return this.domain;
};
var isPrimary = "";
this.setIsPrimary = function(isPrimary) { 
    this.isPrimary = isPrimary;
    return this;
};
this.getIsPrimary = function() {
    return this.isPrimary;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var isVerified = "true";
this.setIsVerified = function(isVerified) { 
    this.isVerified = isVerified;
    return this;
};
this.getIsVerified = function() {
    return this.isVerified;
};
var domainType = "0";
this.setDomainType = function(domainType) { 
    this.domainType = domainType;
    return this;
};
this.getDomainType = function() {
    return this.domainType;
};
var environment = "1";
this.setEnvironment = function(environment) { 
    this.environment = environment;
    return this;
};
this.getEnvironment = function() {
    return this.environment;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZsoid(json["zsoid"]);
		this.setDomain(json["domain"]);
		this.setIsPrimary(json["is_primary"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setIsVerified(json["is_verified"]);
		this.setDomainType(json["domain_type"]);
		this.setEnvironment(json["environment"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZsoid()) json += '"zsoid"' + ":" + '"' + jsonEscape(this.getZsoid())  + '",';
		if(this.getDomain()) json += '"domain"' + ":" + '"' + jsonEscape(this.getDomain())  + '",';
		if(this.getIsPrimary()) json += '"is_primary"' + ":" + '"' + jsonEscape(this.getIsPrimary())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getIsVerified()) json += '"is_verified"' + ":" + '"' + jsonEscape(this.getIsVerified())  + '",';
		if(this.getDomainType()) json += '"domain_type"' + ":" + '"' + jsonEscape(this.getDomainType())  + '",';
		if(this.getEnvironment()) json += '"environment"' + ":" + '"' + jsonEscape(this.getEnvironment())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgDomain.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zsoid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zsoid)) { throw new ValidationError(_formprefix + "zsoid", ValidationError.PATTERN_FAILED);}
if(this.domain && !(/^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)|([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}$/).test(this.domain)) { throw new ValidationError(_formprefix + "domain", ValidationError.PATTERN_FAILED);}
if(this.isPrimary && !Validator.BOOLEAN.test(this.isPrimary)) { throw new ValidationError(_formprefix + "is_primary", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.isVerified && !Validator.BOOLEAN.test(this.isVerified)) { throw new ValidationError(_formprefix + "is_verified", ValidationError.PATTERN_FAILED);}
if(this.environment && !Validator.INTEGER.test(this.environment)) { throw new ValidationError(_formprefix + "environment", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgDomain.path = "serviceorgdomain";
ServiceOrgDomain.newBuilder = function() {
    return new ServiceOrgDomain();
};

OAuthMobileUserDeviceClients = function() {
    var _formprefix = "";
    
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
var userZuid = "";
this.setUserZuid = function(userZuid) { 
    this.userZuid = userZuid;
    return this;
};
this.getUserZuid = function() {
    return this.userZuid;
};
var refreshToken = "";
this.setRefreshToken = function(refreshToken) { 
    this.refreshToken = refreshToken;
    return this;
};
this.getRefreshToken = function() {
    return this.refreshToken;
};
var oauthmobileuserdevicesubclients = undefined;
this.setOauthmobileuserdevicesubclientss = function(oauthmobileuserdevicesubclients) { 
    this.oauthmobileuserdevicesubclients = oauthmobileuserdevicesubclients;
    return this;
};
this.getOauthmobileuserdevicesubclientss = function() {
    return this.oauthmobileuserdevicesubclients;
};
this.addOauthmobileuserdevicesubclients = function(oauthmobileuserdevicesubclients) { 
 if(!this.oauthmobileuserdevicesubclients) this.oauthmobileuserdevicesubclients = new Array(); 
  this.oauthmobileuserdevicesubclients.push(oauthmobileuserdevicesubclients); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClientZid(json["client_zid"]);
		this.setUserZuid(json["user_zuid"]);
		this.setRefreshToken(json["refresh_token"]);
		this.setOauthmobileuserdevicesubclientss(URI.getResourceArray(json["oAuthMobileUserDeviceSubClients"],"oauthmobileuserdevicesubclients"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';
		if(this.getUserZuid()) json += '"user_zuid"' + ":" + '"' + jsonEscape(this.getUserZuid())  + '",';
		if(this.getRefreshToken()) json += '"refresh_token"' + ":" + '"' + jsonEscape(this.getRefreshToken())  + '",';
		if(this.getOauthmobileuserdevicesubclientss()) json += '"oAuthMobileUserDeviceSubClients"' + ":" + URI.toJSONArray(this.getOauthmobileuserdevicesubclientss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthMobileUserDeviceClients.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.clientZid && !(/^[0-9]+\.[0-9]+$/).test(this.clientZid)) { throw new ValidationError(_formprefix + "client_zid", ValidationError.PATTERN_FAILED);}
if(this.userZuid && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.userZuid)) { throw new ValidationError(_formprefix + "user_zuid", ValidationError.PATTERN_FAILED);}
if(this.refreshToken && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.refreshToken)) { throw new ValidationError(_formprefix + "refresh_token", ValidationError.PATTERN_FAILED);}
if(this.oauthmobileuserdevicesubclients) { for(i=0; i < this.oauthmobileuserdevicesubclients.length; i++ ) { this.oauthmobileuserdevicesubclients[i].validate(); } }

	return this;
    }
}
OAuthMobileUserDeviceClients.path = "oauthmobileuserdeviceclients";
OAuthMobileUserDeviceClients.newBuilder = function() {
    return new OAuthMobileUserDeviceClients();
};

ServiceOrgType = function() {
    var _formprefix = "";
    
var serviceName = "";
this.setServiceName = function(serviceName) { 
    this.serviceName = serviceName;
    return this;
};
this.getServiceName = function() {
    return this.serviceName;
};
var orgType = "";
this.setOrgType = function(orgType) { 
    this.orgType = orgType;
    return this;
};
this.getOrgType = function() {
    return this.orgType;
};
var serviceorgdomain = undefined;
this.setServiceorgdomains = function(serviceorgdomain) { 
    this.serviceorgdomain = serviceorgdomain;
    return this;
};
this.getServiceorgdomains = function() {
    return this.serviceorgdomain;
};
this.addServiceorgdomain = function(serviceorgdomain) { 
 if(!this.serviceorgdomain) this.serviceorgdomain = new Array(); 
  this.serviceorgdomain.push(serviceorgdomain); 
 return this;
};

var serviceorg = undefined;
this.setServiceorgs = function(serviceorg) { 
    this.serviceorg = serviceorg;
    return this;
};
this.getServiceorgs = function() {
    return this.serviceorg;
};
this.addServiceorg = function(serviceorg) { 
 if(!this.serviceorg) this.serviceorg = new Array(); 
  this.serviceorg.push(serviceorg); 
 return this;
};

var serviceorgzaid = undefined;
this.setServiceorgzaids = function(serviceorgzaid) { 
    this.serviceorgzaid = serviceorgzaid;
    return this;
};
this.getServiceorgzaids = function() {
    return this.serviceorgzaid;
};
this.addServiceorgzaid = function(serviceorgzaid) { 
 if(!this.serviceorgzaid) this.serviceorgzaid = new Array(); 
  this.serviceorgzaid.push(serviceorgzaid); 
 return this;
};

var invitedorgdetails = undefined;
this.setInvitedorgdetailss = function(invitedorgdetails) { 
    this.invitedorgdetails = invitedorgdetails;
    return this;
};
this.getInvitedorgdetailss = function() {
    return this.invitedorgdetails;
};
this.addInvitedorgdetails = function(invitedorgdetails) { 
 if(!this.invitedorgdetails) this.invitedorgdetails = new Array(); 
  this.invitedorgdetails.push(invitedorgdetails); 
 return this;
};

var userserviceorgpreference = undefined;
this.setUserserviceorgpreferences = function(userserviceorgpreference) { 
    this.userserviceorgpreference = userserviceorgpreference;
    return this;
};
this.getUserserviceorgpreferences = function() {
    return this.userserviceorgpreference;
};
this.addUserserviceorgpreference = function(userserviceorgpreference) { 
 if(!this.userserviceorgpreference) this.userserviceorgpreference = new Array(); 
  this.userserviceorgpreference.push(userserviceorgpreference); 
 return this;
};

var partnerzaaid = undefined;
this.setPartnerzaaids = function(partnerzaaid) { 
    this.partnerzaaid = partnerzaaid;
    return this;
};
this.getPartnerzaaids = function() {
    return this.partnerzaaid;
};
this.addPartnerzaaid = function(partnerzaaid) { 
 if(!this.partnerzaaid) this.partnerzaaid = new Array(); 
  this.partnerzaaid.push(partnerzaaid); 
 return this;
};

var serviceorgtempaccess = undefined;
this.setServiceorgtempaccesss = function(serviceorgtempaccess) { 
    this.serviceorgtempaccess = serviceorgtempaccess;
    return this;
};
this.getServiceorgtempaccesss = function() {
    return this.serviceorgtempaccess;
};
this.addServiceorgtempaccess = function(serviceorgtempaccess) { 
 if(!this.serviceorgtempaccess) this.serviceorgtempaccess = new Array(); 
  this.serviceorgtempaccess.push(serviceorgtempaccess); 
 return this;
};

var serviceorgproductionzsoid = undefined;
this.setServiceorgproductionzsoids = function(serviceorgproductionzsoid) { 
    this.serviceorgproductionzsoid = serviceorgproductionzsoid;
    return this;
};
this.getServiceorgproductionzsoids = function() {
    return this.serviceorgproductionzsoid;
};
this.addServiceorgproductionzsoid = function(serviceorgproductionzsoid) { 
 if(!this.serviceorgproductionzsoid) this.serviceorgproductionzsoid = new Array(); 
  this.serviceorgproductionzsoid.push(serviceorgproductionzsoid); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setServiceName(json["service_name"]);
		this.setOrgType(json["org_type"]);
		this.setServiceorgdomains(URI.getResourceArray(json["serviceOrgDomain"],"serviceorgdomain"));
		this.setServiceorgs(URI.getResourceArray(json["serviceOrg"],"serviceorg"));
		this.setServiceorgzaids(URI.getResourceArray(json["serviceOrgZAID"],"serviceorgzaid"));
		this.setInvitedorgdetailss(URI.getResourceArray(json["invitedOrgDetails"],"invitedorgdetails"));
		this.setUserserviceorgpreferences(URI.getResourceArray(json["userServiceOrgPreference"],"userserviceorgpreference"));
		this.setPartnerzaaids(URI.getResourceArray(json["partnerZAAID"],"partnerzaaid"));
		this.setServiceorgtempaccesss(URI.getResourceArray(json["serviceOrgTempAccess"],"serviceorgtempaccess"));
		this.setServiceorgproductionzsoids(URI.getResourceArray(json["serviceOrgProductionZSOID"],"serviceorgproductionzsoid"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getServiceName()) json += '"service_name"' + ":" + '"' + jsonEscape(this.getServiceName())  + '",';
		if(this.getOrgType()) json += '"org_type"' + ":" + '"' + jsonEscape(this.getOrgType())  + '",';
		if(this.getServiceorgdomains()) json += '"serviceOrgDomain"' + ":" + URI.toJSONArray(this.getServiceorgdomains())  + ',';
		if(this.getServiceorgs()) json += '"serviceOrg"' + ":" + URI.toJSONArray(this.getServiceorgs())  + ',';
		if(this.getServiceorgzaids()) json += '"serviceOrgZAID"' + ":" + URI.toJSONArray(this.getServiceorgzaids())  + ',';
		if(this.getInvitedorgdetailss()) json += '"invitedOrgDetails"' + ":" + URI.toJSONArray(this.getInvitedorgdetailss())  + ',';
		if(this.getUserserviceorgpreferences()) json += '"userServiceOrgPreference"' + ":" + URI.toJSONArray(this.getUserserviceorgpreferences())  + ',';
		if(this.getPartnerzaaids()) json += '"partnerZAAID"' + ":" + URI.toJSONArray(this.getPartnerzaaids())  + ',';
		if(this.getServiceorgtempaccesss()) json += '"serviceOrgTempAccess"' + ":" + URI.toJSONArray(this.getServiceorgtempaccesss())  + ',';
		if(this.getServiceorgproductionzsoids()) json += '"serviceOrgProductionZSOID"' + ":" + URI.toJSONArray(this.getServiceorgproductionzsoids())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgType.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.orgType && !Validator.INTEGER.test(this.orgType)) { throw new ValidationError(_formprefix + "org_type", ValidationError.PATTERN_FAILED);}
if(this.serviceorgdomain) { for(i=0; i < this.serviceorgdomain.length; i++ ) { this.serviceorgdomain[i].validate(); } }
if(this.serviceorg) { for(i=0; i < this.serviceorg.length; i++ ) { this.serviceorg[i].validate(); } }
if(this.serviceorgzaid) { for(i=0; i < this.serviceorgzaid.length; i++ ) { this.serviceorgzaid[i].validate(); } }
if(this.invitedorgdetails) { for(i=0; i < this.invitedorgdetails.length; i++ ) { this.invitedorgdetails[i].validate(); } }
if(this.userserviceorgpreference) { for(i=0; i < this.userserviceorgpreference.length; i++ ) { this.userserviceorgpreference[i].validate(); } }
if(this.partnerzaaid) { for(i=0; i < this.partnerzaaid.length; i++ ) { this.partnerzaaid[i].validate(); } }
if(this.serviceorgtempaccess) { for(i=0; i < this.serviceorgtempaccess.length; i++ ) { this.serviceorgtempaccess[i].validate(); } }
if(this.serviceorgproductionzsoid) { for(i=0; i < this.serviceorgproductionzsoid.length; i++ ) { this.serviceorgproductionzsoid[i].validate(); } }

	return this;
    }
}
ServiceOrgType.path = "serviceorgtype";
ServiceOrgType.newBuilder = function() {
    return new ServiceOrgType();
};

ZGID = function() {
    var _formprefix = "";
    
var zgid = "";
this.setZgid = function(zgid) { 
    this.zgid = zgid;
    return this;
};
this.getZgid = function() {
    return this.zgid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZgid(json["zgid"]);
		this.setZaid(json["zaid"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZgid()) json += '"zgid"' + ":" + '"' + jsonEscape(this.getZgid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ZGID.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zgid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zgid)) { throw new ValidationError(_formprefix + "zgid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ZGID.path = "zgid";
ZGID.newBuilder = function() {
    return new ZGID();
};

AppLanguages = function() {
    var _formprefix = "";
    
var languageCode = "";
this.setLanguageCode = function(languageCode) { 
    this.languageCode = languageCode;
    return this;
};
this.getLanguageCode = function() {
    return this.languageCode;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var appi18n = undefined;
this.setAppi18ns = function(appi18n) { 
    this.appi18n = appi18n;
    return this;
};
this.getAppi18ns = function() {
    return this.appi18n;
};
this.addAppi18n = function(appi18n) { 
 if(!this.appi18n) this.appi18n = new Array(); 
  this.appi18n.push(appi18n); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLanguageCode(json["language_code"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setAppi18ns(URI.getResourceArray(json["appI18n"],"appi18n"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLanguageCode()) json += '"language_code"' + ":" + '"' + jsonEscape(this.getLanguageCode())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getAppi18ns()) json += '"appI18n"' + ":" + URI.toJSONArray(this.getAppi18ns())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppLanguages.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.languageCode && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.languageCode)) { throw new ValidationError(_formprefix + "language_code", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.appi18n) { for(i=0; i < this.appi18n.length; i++ ) { this.appi18n[i].validate(); } }

	return this;
    }
}
AppLanguages.path = "applanguages";
AppLanguages.newBuilder = function() {
    return new AppLanguages();
};

UserThirdPartySecretKeys = function() {
    var _formprefix = "";
    
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var label = "";
this.setLabel = function(label) { 
    this.label = label;
    return this;
};
this.getLabel = function() {
    return this.label;
};
var appSecret = "";
this.setAppSecret = function(appSecret) { 
    this.appSecret = appSecret;
    return this;
};
this.getAppSecret = function() {
    return this.appSecret;
};
var durations = "30";
this.setDurations = function(durations) { 
    this.durations = durations;
    return this;
};
this.getDurations = function() {
    return this.durations;
};
var appDetails = "";
this.setAppDetails = function(appDetails) { 
    this.appDetails = appDetails;
    return this;
};
this.getAppDetails = function() {
    return this.appDetails;
};
var appLogo = "0";
this.setAppLogo = function(appLogo) { 
    this.appLogo = appLogo;
    return this;
};
this.getAppLogo = function() {
    return this.appLogo;
};
var nextId = "-1";
this.setNextId = function(nextId) { 
    this.nextId = nextId;
    return this;
};
this.getNextId = function() {
    return this.nextId;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppId(json["app_id"]);
		this.setAppName(json["app_name"]);
		this.setLabel(json["label"]);
		this.setAppSecret(json["app_secret"]);
		this.setDurations(json["durations"]);
		this.setAppDetails(json["app_details"]);
		this.setAppLogo(json["app_logo"]);
		this.setNextId(json["next_id"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getLabel()) json += '"label"' + ":" + '"' + jsonEscape(this.getLabel())  + '",';
		if(this.getAppSecret()) json += '"app_secret"' + ":" + '"' + jsonEscape(this.getAppSecret())  + '",';
		if(this.getDurations()) json += '"durations"' + ":" + '"' + jsonEscape(this.getDurations())  + '",';
		if(this.getAppDetails()) json += '"app_details"' + ":" + '"' + jsonEscape(this.getAppDetails())  + '",';
		if(this.getAppLogo()) json += '"app_logo"' + ":" + '"' + jsonEscape(this.getAppLogo())  + '",';
		if(this.getNextId()) json += '"next_id"' + ":" + '"' + jsonEscape(this.getNextId())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserThirdPartySecretKeys.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.appId && !(/^[a-zA-Z0-9_\-]+$/).test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.label && !(/^([A-Za-z0-9_.\-]+)$/).test(this.label)) { throw new ValidationError(_formprefix + "label", ValidationError.PATTERN_FAILED);}
if(this.appSecret && !(/^([A-Za-z0-9_.\-]+)$/).test(this.appSecret)) { throw new ValidationError(_formprefix + "app_secret", ValidationError.PATTERN_FAILED);}
if(this.durations && !Validator.INTEGER.test(this.durations)) { throw new ValidationError(_formprefix + "durations", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserThirdPartySecretKeys.path = "userthirdpartysecretkeys";
UserThirdPartySecretKeys.newBuilder = function() {
    return new UserThirdPartySecretKeys();
};

DomainVsAuthSecret = function() {
    var _formprefix = "";
    
var authSecret = "";
this.setAuthSecret = function(authSecret) { 
    this.authSecret = authSecret;
    return this;
};
this.getAuthSecret = function() {
    return this.authSecret;
};
var accountName = "";
this.setAccountName = function(accountName) { 
    this.accountName = accountName;
    return this;
};
this.getAccountName = function() {
    return this.accountName;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAuthSecret(json["auth_secret"]);
		this.setAccountName(json["account_name"]);
		this.setZaid(json["zaid"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAuthSecret()) json += '"auth_secret"' + ":" + '"' + jsonEscape(this.getAuthSecret())  + '",';
		if(this.getAccountName()) json += '"account_name"' + ":" + '"' + jsonEscape(this.getAccountName())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(DomainVsAuthSecret.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.authSecret && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.authSecret)) { throw new ValidationError(_formprefix + "auth_secret", ValidationError.PATTERN_FAILED);}
if(this.accountName && !(/^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)|([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}$/).test(this.accountName)) { throw new ValidationError(_formprefix + "account_name", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
DomainVsAuthSecret.path = "domainvsauthsecret";
DomainVsAuthSecret.newBuilder = function() {
    return new DomainVsAuthSecret();
};

AcpSecret = function() {
    var _formprefix = "";
    
var secretKey = "";
this.setSecretKey = function(secretKey) { 
    this.secretKey = secretKey;
    return this;
};
this.getSecretKey = function() {
    return this.secretKey;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setSecretKey(json["secret_key"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getSecretKey()) json += '"secret_key"' + ":" + '"' + jsonEscape(this.getSecretKey())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AcpSecret.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.secretKey && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.secretKey)) { throw new ValidationError(_formprefix + "secret_key", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AcpSecret.path = "acpsecret";
AcpSecret.newBuilder = function() {
    return new AcpSecret();
};

RoutingPolicyUser = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidType = "1";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var isExcluded = "false";
this.setIsExcluded = function(isExcluded) { 
    this.isExcluded = isExcluded;
    return this;
};
this.getIsExcluded = function() {
    return this.isExcluded;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidType(json["zid_type"]);
		this.setIsExcluded(json["is_excluded"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getIsExcluded()) json += '"is_excluded"' + ":" + '"' + jsonEscape(this.getIsExcluded())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(RoutingPolicyUser.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.isExcluded && !Validator.BOOLEAN.test(this.isExcluded)) { throw new ValidationError(_formprefix + "is_excluded", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
RoutingPolicyUser.path = "routingpolicyuser";
RoutingPolicyUser.newBuilder = function() {
    return new RoutingPolicyUser();
};

Preference = function() {
    var _formprefix = "";
    
var theme = "";
this.setTheme = function(theme) { 
    this.theme = theme;
    return this;
};
this.getTheme = function() {
    return this.theme;
};
var dateFormat = "";
this.setDateFormat = function(dateFormat) { 
    this.dateFormat = dateFormat;
    return this;
};
this.getDateFormat = function() {
    return this.dateFormat;
};
var font = "";
this.setFont = function(font) { 
    this.font = font;
    return this;
};
this.getFont = function() {
    return this.font;
};
var alwaysSecure = "";
this.setAlwaysSecure = function(alwaysSecure) { 
    this.alwaysSecure = alwaysSecure;
    return this;
};
this.getAlwaysSecure = function() {
    return this.alwaysSecure;
};
var newsLetterSubscription = "";
this.setNewsLetterSubscription = function(newsLetterSubscription) { 
    this.newsLetterSubscription = newsLetterSubscription;
    return this;
};
this.getNewsLetterSubscription = function() {
    return this.newsLetterSubscription;
};
var notifyMeBy = "0";
this.setNotifyMeBy = function(notifyMeBy) { 
    this.notifyMeBy = notifyMeBy;
    return this;
};
this.getNotifyMeBy = function() {
    return this.notifyMeBy;
};
var userTfaStatus = "0";
this.setUserTfaStatus = function(userTfaStatus) { 
    this.userTfaStatus = userTfaStatus;
    return this;
};
this.getUserTfaStatus = function() {
    return this.userTfaStatus;
};
var tfaPrefOption = "-1";
this.setTfaPrefOption = function(tfaPrefOption) { 
    this.tfaPrefOption = tfaPrefOption;
    return this;
};
this.getTfaPrefOption = function() {
    return this.tfaPrefOption;
};
var passwordExpiryNotification = "true";
this.setPasswordExpiryNotification = function(passwordExpiryNotification) { 
    this.passwordExpiryNotification = passwordExpiryNotification;
    return this;
};
this.getPasswordExpiryNotification = function() {
    return this.passwordExpiryNotification;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTheme(json["theme"]);
		this.setDateFormat(json["date_format"]);
		this.setFont(json["font"]);
		this.setAlwaysSecure(json["always_secure"]);
		this.setNewsLetterSubscription(json["news_letter_subscription"]);
		this.setNotifyMeBy(json["notify_me_by"]);
		this.setUserTfaStatus(json["user_tfa_status"]);
		this.setTfaPrefOption(json["tfa_pref_option"]);
		this.setPasswordExpiryNotification(json["password_expiry_notification"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTheme()) json += '"theme"' + ":" + '"' + jsonEscape(this.getTheme())  + '",';
		if(this.getDateFormat()) json += '"date_format"' + ":" + '"' + jsonEscape(this.getDateFormat())  + '",';
		if(this.getFont()) json += '"font"' + ":" + '"' + jsonEscape(this.getFont())  + '",';
		if(this.getAlwaysSecure()) json += '"always_secure"' + ":" + '"' + jsonEscape(this.getAlwaysSecure())  + '",';
		if(this.getNewsLetterSubscription()) json += '"news_letter_subscription"' + ":" + '"' + jsonEscape(this.getNewsLetterSubscription())  + '",';
		if(this.getNotifyMeBy()) json += '"notify_me_by"' + ":" + '"' + jsonEscape(this.getNotifyMeBy())  + '",';
		if(this.getUserTfaStatus()) json += '"user_tfa_status"' + ":" + '"' + jsonEscape(this.getUserTfaStatus())  + '",';
		if(this.getTfaPrefOption()) json += '"tfa_pref_option"' + ":" + '"' + jsonEscape(this.getTfaPrefOption())  + '",';
		if(this.getPasswordExpiryNotification()) json += '"password_expiry_notification"' + ":" + '"' + jsonEscape(this.getPasswordExpiryNotification())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Preference.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.theme && !(/^([A-Za-z0-9_.\-]+)$/).test(this.theme)) { throw new ValidationError(_formprefix + "theme", ValidationError.PATTERN_FAILED);}
if(this.dateFormat && !(/xss:throwerror/).test(this.dateFormat)) { throw new ValidationError(_formprefix + "date_format", ValidationError.PATTERN_FAILED);}
if(this.font && !(/^([A-Za-z0-9_.\-]+)$/).test(this.font)) { throw new ValidationError(_formprefix + "font", ValidationError.PATTERN_FAILED);}
if(this.alwaysSecure && !Validator.BOOLEAN.test(this.alwaysSecure)) { throw new ValidationError(_formprefix + "always_secure", ValidationError.PATTERN_FAILED);}
if(this.newsLetterSubscription && !Validator.INTEGER.test(this.newsLetterSubscription)) { throw new ValidationError(_formprefix + "news_letter_subscription", ValidationError.PATTERN_FAILED);}
if(this.notifyMeBy && !Validator.INTEGER.test(this.notifyMeBy)) { throw new ValidationError(_formprefix + "notify_me_by", ValidationError.PATTERN_FAILED);}
if(this.userTfaStatus && !Validator.INTEGER.test(this.userTfaStatus)) { throw new ValidationError(_formprefix + "user_tfa_status", ValidationError.PATTERN_FAILED);}
if(this.tfaPrefOption && !Validator.INTEGER.test(this.tfaPrefOption)) { throw new ValidationError(_formprefix + "tfa_pref_option", ValidationError.PATTERN_FAILED);}
if(this.passwordExpiryNotification && !Validator.BOOLEAN.test(this.passwordExpiryNotification)) { throw new ValidationError(_formprefix + "password_expiry_notification", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Preference.path = "preference";
Preference.newBuilder = function() {
    return new Preference();
};

UserVerificationCode = function() {
    var _formprefix = "";
    
var vcid = "";
this.setVcid = function(vcid) { 
    this.vcid = vcid;
    return this;
};
this.getVcid = function() {
    return this.vcid;
};
var mobileNo = "";
this.setMobileNo = function(mobileNo) { 
    this.mobileNo = mobileNo;
    return this;
};
this.getMobileNo = function() {
    return this.mobileNo;
};
var verificationCode = "";
this.setVerificationCode = function(verificationCode) { 
    this.verificationCode = verificationCode;
    return this;
};
this.getVerificationCode = function() {
    return this.verificationCode;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setVcid(json["vcid"]);
		this.setMobileNo(json["mobile_no"]);
		this.setVerificationCode(json["verification_code"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getVcid()) json += '"vcid"' + ":" + '"' + jsonEscape(this.getVcid())  + '",';
		if(this.getMobileNo()) json += '"mobile_no"' + ":" + '"' + jsonEscape(this.getMobileNo())  + '",';
		if(this.getVerificationCode()) json += '"verification_code"' + ":" + '"' + jsonEscape(this.getVerificationCode())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserVerificationCode.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.vcid && !(/^[a-zA-Z0-9_\-]+$/).test(this.vcid)) { throw new ValidationError(_formprefix + "vcid", ValidationError.PATTERN_FAILED);}
if(this.mobileNo && !(/xss:throwerror/).test(this.mobileNo)) { throw new ValidationError(_formprefix + "mobile_no", ValidationError.PATTERN_FAILED);}
if(this.verificationCode && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.verificationCode)) { throw new ValidationError(_formprefix + "verification_code", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserVerificationCode.path = "userverificationcode";
UserVerificationCode.newBuilder = function() {
    return new UserVerificationCode();
};

ServiceOrgTempAccess = function() {
    var _formprefix = "";
    
var zsoid = "";
this.setZsoid = function(zsoid) { 
    this.zsoid = zsoid;
    return this;
};
this.getZsoid = function() {
    return this.zsoid;
};
var subOrgType = "-1";
this.setSubOrgType = function(subOrgType) { 
    this.subOrgType = subOrgType;
    return this;
};
this.getSubOrgType = function() {
    return this.subOrgType;
};
var enabledBy = "";
this.setEnabledBy = function(enabledBy) { 
    this.enabledBy = enabledBy;
    return this;
};
this.getEnabledBy = function() {
    return this.enabledBy;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZsoid(json["zsoid"]);
		this.setSubOrgType(json["sub_org_type"]);
		this.setEnabledBy(json["enabled_by"]);
		this.setExpiryTime(json["expiry_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZsoid()) json += '"zsoid"' + ":" + '"' + jsonEscape(this.getZsoid())  + '",';
		if(this.getSubOrgType()) json += '"sub_org_type"' + ":" + '"' + jsonEscape(this.getSubOrgType())  + '",';
		if(this.getEnabledBy()) json += '"enabled_by"' + ":" + '"' + jsonEscape(this.getEnabledBy())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgTempAccess.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zsoid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zsoid)) { throw new ValidationError(_formprefix + "zsoid", ValidationError.PATTERN_FAILED);}
if(this.subOrgType && !Validator.INTEGER.test(this.subOrgType)) { throw new ValidationError(_formprefix + "sub_org_type", ValidationError.PATTERN_FAILED);}
if(this.enabledBy && !(/^[a-zA-Z0-9_\-]+$/).test(this.enabledBy)) { throw new ValidationError(_formprefix + "enabled_by", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgTempAccess.path = "serviceorgtempaccess";
ServiceOrgTempAccess.newBuilder = function() {
    return new ServiceOrgTempAccess();
};

EmailAction = function() {
    var _formprefix = "";
    
var emailActionId = "";
this.setEmailActionId = function(emailActionId) { 
    this.emailActionId = emailActionId;
    return this;
};
this.getEmailActionId = function() {
    return this.emailActionId;
};
var emailIds = "";
this.setEmailIds = function(emailIds) { 
    this.emailIds = emailIds;
    return this;
};
this.getEmailIds = function() {
    return this.emailIds;
};
var emailTemplateUri = "";
this.setEmailTemplateUri = function(emailTemplateUri) { 
    this.emailTemplateUri = emailTemplateUri;
    return this;
};
this.getEmailTemplateUri = function() {
    return this.emailTemplateUri;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setEmailActionId(json["email_action_id"]);
		this.setEmailIds(json["email_ids"]);
		this.setEmailTemplateUri(json["email_template_uri"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getEmailActionId()) json += '"email_action_id"' + ":" + '"' + jsonEscape(this.getEmailActionId())  + '",';
		if(this.getEmailIds()) json += '"email_ids"' + ":" + '"' + jsonEscape(this.getEmailIds())  + '",';
		if(this.getEmailTemplateUri()) json += '"email_template_uri"' + ":" + '"' + jsonEscape(this.getEmailTemplateUri())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(EmailAction.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
EmailAction.path = "emailaction";
EmailAction.newBuilder = function() {
    return new EmailAction();
};

AppPassword = function() {
    var _formprefix = "";
    
var passwordId = "";
this.setPasswordId = function(passwordId) { 
    this.passwordId = passwordId;
    return this;
};
this.getPasswordId = function() {
    return this.passwordId;
};
var password = "";
this.setPassword = function(password) { 
    this.password = password;
    return this;
};
this.getPassword = function() {
    return this.password;
};
var keyLabel = "";
this.setKeyLabel = function(keyLabel) { 
    this.keyLabel = keyLabel;
    return this;
};
this.getKeyLabel = function() {
    return this.keyLabel;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var ipAuditInfo = "";
this.setIpAuditInfo = function(ipAuditInfo) { 
    this.ipAuditInfo = ipAuditInfo;
    return this;
};
this.getIpAuditInfo = function() {
    return this.ipAuditInfo;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPasswordId(json["password_id"]);
		this.setPassword(json["password"]);
		this.setKeyLabel(json["key_label"]);
		this.setIpAddress(json["ip_address"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);
		this.setIpAuditInfo(json["ip_audit_info"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPasswordId()) json += '"password_id"' + ":" + '"' + jsonEscape(this.getPasswordId())  + '",';
		if(this.getPassword()) json += '"password"' + ":" + '"' + jsonEscape(this.getPassword())  + '",';
		if(this.getKeyLabel()) json += '"key_label"' + ":" + '"' + jsonEscape(this.getKeyLabel())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getIpAuditInfo()) json += '"ip_audit_info"' + ":" + '"' + jsonEscape(this.getIpAuditInfo())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppPassword.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.passwordId && !(/^[a-zA-Z0-9_\-]+$/).test(this.passwordId)) { throw new ValidationError(_formprefix + "password_id", ValidationError.PATTERN_FAILED);}
if(this.password && !(/dontdisturb/).test(this.password)) { throw new ValidationError(_formprefix + "password", ValidationError.PATTERN_FAILED);}
if(this.keyLabel && !(/xss:throwerror/).test(this.keyLabel)) { throw new ValidationError(_formprefix + "key_label", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/xss:throwerror/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppPassword.path = "apppassword";
AppPassword.newBuilder = function() {
    return new AppPassword();
};

UserBaseDomainToken = function() {
    var _formprefix = "";
    
var baseDomainToken = "";
this.setBaseDomainToken = function(baseDomainToken) { 
    this.baseDomainToken = baseDomainToken;
    return this;
};
this.getBaseDomainToken = function() {
    return this.baseDomainToken;
};
var createdDomain = "";
this.setCreatedDomain = function(createdDomain) { 
    this.createdDomain = createdDomain;
    return this;
};
this.getCreatedDomain = function() {
    return this.createdDomain;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setBaseDomainToken(json["base_domain_token"]);
		this.setCreatedDomain(json["created_domain"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getBaseDomainToken()) json += '"base_domain_token"' + ":" + '"' + jsonEscape(this.getBaseDomainToken())  + '",';
		if(this.getCreatedDomain()) json += '"created_domain"' + ":" + '"' + jsonEscape(this.getCreatedDomain())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserBaseDomainToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.baseDomainToken && !(/^[a-zA-Z0-9\-\_]+$/).test(this.baseDomainToken)) { throw new ValidationError(_formprefix + "base_domain_token", ValidationError.PATTERN_FAILED);}
if(this.createdDomain && !(/^([\p{L}\p{M}\p{N}]([\p{L}\p{M}\p{N}\-]{0,61}[\p{L}\p{M}\p{N}])?\.)+[\p{L}\p{M}]{2,6}$/).test(this.createdDomain)) { throw new ValidationError(_formprefix + "created_domain", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserBaseDomainToken.path = "userbasedomaintoken";
UserBaseDomainToken.newBuilder = function() {
    return new UserBaseDomainToken();
};

UserAgentAudit = function() {
    var _formprefix = "";
    
var deviceType = "";
this.setDeviceType = function(deviceType) { 
    this.deviceType = deviceType;
    return this;
};
this.getDeviceType = function() {
    return this.deviceType;
};
var deviceName = "";
this.setDeviceName = function(deviceName) { 
    this.deviceName = deviceName;
    return this;
};
this.getDeviceName = function() {
    return this.deviceName;
};
var browser = "";
this.setBrowser = function(browser) { 
    this.browser = browser;
    return this;
};
this.getBrowser = function() {
    return this.browser;
};
var browserMajorVersion = "";
this.setBrowserMajorVersion = function(browserMajorVersion) { 
    this.browserMajorVersion = browserMajorVersion;
    return this;
};
this.getBrowserMajorVersion = function() {
    return this.browserMajorVersion;
};
var browserMinorVersion = "";
this.setBrowserMinorVersion = function(browserMinorVersion) { 
    this.browserMinorVersion = browserMinorVersion;
    return this;
};
this.getBrowserMinorVersion = function() {
    return this.browserMinorVersion;
};
var os = "";
this.setOs = function(os) { 
    this.os = os;
    return this;
};
this.getOs = function() {
    return this.os;
};
var osMajorVersion = "";
this.setOsMajorVersion = function(osMajorVersion) { 
    this.osMajorVersion = osMajorVersion;
    return this;
};
this.getOsMajorVersion = function() {
    return this.osMajorVersion;
};
var osMinorVersion = "";
this.setOsMinorVersion = function(osMinorVersion) { 
    this.osMinorVersion = osMinorVersion;
    return this;
};
this.getOsMinorVersion = function() {
    return this.osMinorVersion;
};
var product = "";
this.setProduct = function(product) { 
    this.product = product;
    return this;
};
this.getProduct = function() {
    return this.product;
};
var productVersion = "";
this.setProductVersion = function(productVersion) { 
    this.productVersion = productVersion;
    return this;
};
this.getProductVersion = function() {
    return this.productVersion;
};
var createdDate = "";
this.setCreatedDate = function(createdDate) { 
    this.createdDate = createdDate;
    return this;
};
this.getCreatedDate = function() {
    return this.createdDate;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDeviceType(json["device_type"]);
		this.setDeviceName(json["device_name"]);
		this.setBrowser(json["browser"]);
		this.setBrowserMajorVersion(json["browser_major_version"]);
		this.setBrowserMinorVersion(json["browser_minor_version"]);
		this.setOs(json["os"]);
		this.setOsMajorVersion(json["os_major_version"]);
		this.setOsMinorVersion(json["os_minor_version"]);
		this.setProduct(json["product"]);
		this.setProductVersion(json["product_version"]);
		this.setCreatedDate(json["created_date"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDeviceType()) json += '"device_type"' + ":" + '"' + jsonEscape(this.getDeviceType())  + '",';
		if(this.getDeviceName()) json += '"device_name"' + ":" + '"' + jsonEscape(this.getDeviceName())  + '",';
		if(this.getBrowser()) json += '"browser"' + ":" + '"' + jsonEscape(this.getBrowser())  + '",';
		if(this.getBrowserMajorVersion()) json += '"browser_major_version"' + ":" + '"' + jsonEscape(this.getBrowserMajorVersion())  + '",';
		if(this.getBrowserMinorVersion()) json += '"browser_minor_version"' + ":" + '"' + jsonEscape(this.getBrowserMinorVersion())  + '",';
		if(this.getOs()) json += '"os"' + ":" + '"' + jsonEscape(this.getOs())  + '",';
		if(this.getOsMajorVersion()) json += '"os_major_version"' + ":" + '"' + jsonEscape(this.getOsMajorVersion())  + '",';
		if(this.getOsMinorVersion()) json += '"os_minor_version"' + ":" + '"' + jsonEscape(this.getOsMinorVersion())  + '",';
		if(this.getProduct()) json += '"product"' + ":" + '"' + jsonEscape(this.getProduct())  + '",';
		if(this.getProductVersion()) json += '"product_version"' + ":" + '"' + jsonEscape(this.getProductVersion())  + '",';
		if(this.getCreatedDate()) json += '"created_date"' + ":" + '"' + jsonEscape(this.getCreatedDate())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserAgentAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.deviceType && !(/dontdisturb/).test(this.deviceType)) { throw new ValidationError(_formprefix + "device_type", ValidationError.PATTERN_FAILED);}
if(this.deviceName && !(/dontdisturb/).test(this.deviceName)) { throw new ValidationError(_formprefix + "device_name", ValidationError.PATTERN_FAILED);}
if(this.browser && !(/dontdisturb/).test(this.browser)) { throw new ValidationError(_formprefix + "browser", ValidationError.PATTERN_FAILED);}
if(this.browserMajorVersion && !Validator.INTEGER.test(this.browserMajorVersion)) { throw new ValidationError(_formprefix + "browser_major_version", ValidationError.PATTERN_FAILED);}
if(this.browserMinorVersion && !Validator.INTEGER.test(this.browserMinorVersion)) { throw new ValidationError(_formprefix + "browser_minor_version", ValidationError.PATTERN_FAILED);}
if(this.os && !(/dontdisturb/).test(this.os)) { throw new ValidationError(_formprefix + "os", ValidationError.PATTERN_FAILED);}
if(this.osMajorVersion && !Validator.INTEGER.test(this.osMajorVersion)) { throw new ValidationError(_formprefix + "os_major_version", ValidationError.PATTERN_FAILED);}
if(this.osMinorVersion && !Validator.INTEGER.test(this.osMinorVersion)) { throw new ValidationError(_formprefix + "os_minor_version", ValidationError.PATTERN_FAILED);}
if(this.product && !(/dontdisturb/).test(this.product)) { throw new ValidationError(_formprefix + "product", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserAgentAudit.path = "useragentaudit";
UserAgentAudit.newBuilder = function() {
    return new UserAgentAudit();
};

AccountName = function() {
    var _formprefix = "";
    
var accountName = "";
this.setAccountName = function(accountName) { 
    this.accountName = accountName;
    return this;
};
this.getAccountName = function() {
    return this.accountName;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var domainvsauthsecret = undefined;
this.setDomainvsauthsecrets = function(domainvsauthsecret) { 
    this.domainvsauthsecret = domainvsauthsecret;
    return this;
};
this.getDomainvsauthsecrets = function() {
    return this.domainvsauthsecret;
};
this.addDomainvsauthsecret = function(domainvsauthsecret) { 
 if(!this.domainvsauthsecret) this.domainvsauthsecret = new Array(); 
  this.domainvsauthsecret.push(domainvsauthsecret); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAccountName(json["account_name"]);
		this.setZaid(json["zaid"]);
		this.setDomainvsauthsecrets(URI.getResourceArray(json["domainVsAuthSecret"],"domainvsauthsecret"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAccountName()) json += '"account_name"' + ":" + '"' + jsonEscape(this.getAccountName())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getDomainvsauthsecrets()) json += '"domainVsAuthSecret"' + ":" + URI.toJSONArray(this.getDomainvsauthsecrets())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountName.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.accountName && !(/^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)|([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}$/).test(this.accountName)) { throw new ValidationError(_formprefix + "account_name", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.domainvsauthsecret) { for(i=0; i < this.domainvsauthsecret.length; i++ ) { this.domainvsauthsecret[i].validate(); } }

	return this;
    }
}
AccountName.path = "accountname";
AccountName.newBuilder = function() {
    return new AccountName();
};

NotifyAction = function() {
    var _formprefix = "";
    
var urlActionId = "";
this.setUrlActionId = function(urlActionId) { 
    this.urlActionId = urlActionId;
    return this;
};
this.getUrlActionId = function() {
    return this.urlActionId;
};
var uriToNotify = "";
this.setUriToNotify = function(uriToNotify) { 
    this.uriToNotify = uriToNotify;
    return this;
};
this.getUriToNotify = function() {
    return this.uriToNotify;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setUrlActionId(json["url_action_id"]);
		this.setUriToNotify(json["uri_to_notify"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getUrlActionId()) json += '"url_action_id"' + ":" + '"' + jsonEscape(this.getUrlActionId())  + '",';
		if(this.getUriToNotify()) json += '"uri_to_notify"' + ":" + '"' + jsonEscape(this.getUriToNotify())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(NotifyAction.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
NotifyAction.path = "notifyaction";
NotifyAction.newBuilder = function() {
    return new NotifyAction();
};

AppAccountConfiguration = function() {
    var _formprefix = "";
    
var configName = "";
this.setConfigName = function(configName) { 
    this.configName = configName;
    return this;
};
this.getConfigName = function() {
    return this.configName;
};
var configValue = "";
this.setConfigValue = function(configValue) { 
    this.configValue = configValue;
    return this;
};
this.getConfigValue = function() {
    return this.configValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setConfigName(json["config_name"]);
		this.setConfigValue(json["config_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getConfigName()) json += '"config_name"' + ":" + '"' + jsonEscape(this.getConfigName())  + '",';
		if(this.getConfigValue()) json += '"config_value"' + ":" + '"' + jsonEscape(this.getConfigValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccountConfiguration.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.configName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.configName)) { throw new ValidationError(_formprefix + "config_name", ValidationError.PATTERN_FAILED);}
if(this.configValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.configValue)) { throw new ValidationError(_formprefix + "config_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAccountConfiguration.path = "appaccountconfiguration";
AppAccountConfiguration.newBuilder = function() {
    return new AppAccountConfiguration();
};

UserMobile = function() {
    var _formprefix = "";
    
var mobile = "";
this.setMobile = function(mobile) { 
    this.mobile = mobile;
    return this;
};
this.getMobile = function() {
    return this.mobile;
};
var countryCode = "";
this.setCountryCode = function(countryCode) { 
    this.countryCode = countryCode;
    return this;
};
this.getCountryCode = function() {
    return this.countryCode;
};
var isVerified = "false";
this.setIsVerified = function(isVerified) { 
    this.isVerified = isVerified;
    return this;
};
this.getIsVerified = function() {
    return this.isVerified;
};
var verificationCode = "";
this.setVerificationCode = function(verificationCode) { 
    this.verificationCode = verificationCode;
    return this;
};
this.getVerificationCode = function() {
    return this.verificationCode;
};
var isPrimary = "";
this.setIsPrimary = function(isPrimary) { 
    this.isPrimary = isPrimary;
    return this;
};
this.getIsPrimary = function() {
    return this.isPrimary;
};
var verifyType = "0";
this.setVerifyType = function(verifyType) { 
    this.verifyType = verifyType;
    return this;
};
this.getVerifyType = function() {
    return this.verifyType;
};
var mode = "0";
this.setMode = function(mode) { 
    this.mode = mode;
    return this;
};
this.getMode = function() {
    return this.mode;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setMobile(json["mobile"]);
		this.setCountryCode(json["country_code"]);
		this.setIsVerified(json["is_verified"]);
		this.setVerificationCode(json["verification_code"]);
		this.setIsPrimary(json["is_primary"]);
		this.setVerifyType(json["verify_type"]);
		this.setMode(json["mode"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getMobile()) json += '"mobile"' + ":" + '"' + jsonEscape(this.getMobile())  + '",';
		if(this.getCountryCode()) json += '"country_code"' + ":" + '"' + jsonEscape(this.getCountryCode())  + '",';
		if(this.getIsVerified()) json += '"is_verified"' + ":" + '"' + jsonEscape(this.getIsVerified())  + '",';
		if(this.getVerificationCode()) json += '"verification_code"' + ":" + '"' + jsonEscape(this.getVerificationCode())  + '",';
		if(this.getIsPrimary()) json += '"is_primary"' + ":" + '"' + jsonEscape(this.getIsPrimary())  + '",';
		if(this.getVerifyType()) json += '"verify_type"' + ":" + '"' + jsonEscape(this.getVerifyType())  + '",';
		if(this.getMode()) json += '"mode"' + ":" + '"' + jsonEscape(this.getMode())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserMobile.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.mobile && !(/xss:throwerror/).test(this.mobile)) { throw new ValidationError(_formprefix + "mobile", ValidationError.PATTERN_FAILED);}
if(this.countryCode && !(/^[a-zA-Z0-9]{2,5}$/).test(this.countryCode)) { throw new ValidationError(_formprefix + "country_code", ValidationError.PATTERN_FAILED);}
if(this.isVerified && !Validator.BOOLEAN.test(this.isVerified)) { throw new ValidationError(_formprefix + "is_verified", ValidationError.PATTERN_FAILED);}
if(this.verificationCode && !(/^([A-Za-z0-9_.\-]+)$/).test(this.verificationCode)) { throw new ValidationError(_formprefix + "verification_code", ValidationError.PATTERN_FAILED);}
if(this.isPrimary && !Validator.BOOLEAN.test(this.isPrimary)) { throw new ValidationError(_formprefix + "is_primary", ValidationError.PATTERN_FAILED);}
if(this.verifyType && !Validator.INTEGER.test(this.verifyType)) { throw new ValidationError(_formprefix + "verify_type", ValidationError.PATTERN_FAILED);}
if(this.mode && !Validator.INTEGER.test(this.mode)) { throw new ValidationError(_formprefix + "mode", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserMobile.path = "usermobile";
UserMobile.newBuilder = function() {
    return new UserMobile();
};

AccountUpdateAudit = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var controlQueryString = "";
this.setControlQueryString = function(controlQueryString) { 
    this.controlQueryString = controlQueryString;
    return this;
};
this.getControlQueryString = function() {
    return this.controlQueryString;
};
var responseStatus = "";
this.setResponseStatus = function(responseStatus) { 
    this.responseStatus = responseStatus;
    return this;
};
this.getResponseStatus = function() {
    return this.responseStatus;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setZuid(json["zuid"]);
		this.setControlQueryString(json["control_query_string"]);
		this.setResponseStatus(json["response_status"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getControlQueryString()) json += '"control_query_string"' + ":" + '"' + jsonEscape(this.getControlQueryString())  + '",';
		if(this.getResponseStatus()) json += '"response_status"' + ":" + '"' + jsonEscape(this.getResponseStatus())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountUpdateAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.controlQueryString && !(/dontdisturb/).test(this.controlQueryString)) { throw new ValidationError(_formprefix + "control_query_string", ValidationError.PATTERN_FAILED);}
if(this.responseStatus && !Validator.INTEGER.test(this.responseStatus)) { throw new ValidationError(_formprefix + "response_status", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountUpdateAudit.path = "accountupdateaudit";
AccountUpdateAudit.newBuilder = function() {
    return new AccountUpdateAudit();
};

ZIDAudit = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var type = "";
this.setType = function(type) { 
    this.type = type;
    return this;
};
this.getType = function() {
    return this.type;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setType(json["type"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getType()) json += '"type"' + ":" + '"' + jsonEscape(this.getType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ZIDAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.type && !Validator.INTEGER.test(this.type)) { throw new ValidationError(_formprefix + "type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ZIDAudit.path = "zidaudit";
ZIDAudit.newBuilder = function() {
    return new ZIDAudit();
};

OAuthRefreshTokenKey = function() {
    var _formprefix = "";
    
var keyName = "";
this.setKeyName = function(keyName) { 
    this.keyName = keyName;
    return this;
};
this.getKeyName = function() {
    return this.keyName;
};
var keyValue = "";
this.setKeyValue = function(keyValue) { 
    this.keyValue = keyValue;
    return this;
};
this.getKeyValue = function() {
    return this.keyValue;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setKeyName(json["key_name"]);
		this.setKeyValue(json["key_value"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getKeyName()) json += '"key_name"' + ":" + '"' + jsonEscape(this.getKeyName())  + '",';
		if(this.getKeyValue()) json += '"key_value"' + ":" + '"' + jsonEscape(this.getKeyValue())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthRefreshTokenKey.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.keyName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.keyName)) { throw new ValidationError(_formprefix + "key_name", ValidationError.PATTERN_FAILED);}
if(this.keyValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.keyValue)) { throw new ValidationError(_formprefix + "key_value", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthRefreshTokenKey.path = "oauthrefreshtokenkey";
OAuthRefreshTokenKey.newBuilder = function() {
    return new OAuthRefreshTokenKey();
};

AppLicense = function() {
    var _formprefix = "";
    
var licenseAttributeKey = "";
this.setLicenseAttributeKey = function(licenseAttributeKey) { 
    this.licenseAttributeKey = licenseAttributeKey;
    return this;
};
this.getLicenseAttributeKey = function() {
    return this.licenseAttributeKey;
};
var defaultValue = "";
this.setDefaultValue = function(defaultValue) { 
    this.defaultValue = defaultValue;
    return this;
};
this.getDefaultValue = function() {
    return this.defaultValue;
};
var dataType = "";
this.setDataType = function(dataType) { 
    this.dataType = dataType;
    return this;
};
this.getDataType = function() {
    return this.dataType;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLicenseAttributeKey(json["license_attribute_key"]);
		this.setDefaultValue(json["default_value"]);
		this.setDataType(json["data_type"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLicenseAttributeKey()) json += '"license_attribute_key"' + ":" + '"' + jsonEscape(this.getLicenseAttributeKey())  + '",';
		if(this.getDefaultValue()) json += '"default_value"' + ":" + '"' + jsonEscape(this.getDefaultValue())  + '",';
		if(this.getDataType()) json += '"data_type"' + ":" + '"' + jsonEscape(this.getDataType())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppLicense.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.licenseAttributeKey && !(/^([A-Za-z0-9_.\-]+)$/).test(this.licenseAttributeKey)) { throw new ValidationError(_formprefix + "license_attribute_key", ValidationError.PATTERN_FAILED);}
if(this.defaultValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.defaultValue)) { throw new ValidationError(_formprefix + "default_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppLicense.path = "applicense";
AppLicense.newBuilder = function() {
    return new AppLicense();
};

OAuthOpenId = function() {
    var _formprefix = "";
    
var openId = "";
this.setOpenId = function(openId) { 
    this.openId = openId;
    return this;
};
this.getOpenId = function() {
    return this.openId;
};
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setOpenId(json["open_id"]);
		this.setZid(json["zid"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getOpenId()) json += '"open_id"' + ":" + '"' + jsonEscape(this.getOpenId())  + '",';
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthOpenId.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.openId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.openId)) { throw new ValidationError(_formprefix + "open_id", ValidationError.PATTERN_FAILED);}
if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthOpenId.path = "oauthopenid";
OAuthOpenId.newBuilder = function() {
    return new OAuthOpenId();
};

RegistrationAuditTemplate = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var regId = "";
this.setRegId = function(regId) { 
    this.regId = regId;
    return this;
};
this.getRegId = function() {
    return this.regId;
};
var appIp = "";
this.setAppIp = function(appIp) { 
    this.appIp = appIp;
    return this;
};
this.getAppIp = function() {
    return this.appIp;
};
var remoteIp = "";
this.setRemoteIp = function(remoteIp) { 
    this.remoteIp = remoteIp;
    return this;
};
this.getRemoteIp = function() {
    return this.remoteIp;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var status = "1";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var errors = "";
this.setErrors = function(errors) { 
    this.errors = errors;
    return this;
};
this.getErrors = function() {
    return this.errors;
};
var zuidAfterReg = "";
this.setZuidAfterReg = function(zuidAfterReg) { 
    this.zuidAfterReg = zuidAfterReg;
    return this;
};
this.getZuidAfterReg = function() {
    return this.zuidAfterReg;
};
var currentZuid = "";
this.setCurrentZuid = function(currentZuid) { 
    this.currentZuid = currentZuid;
    return this;
};
this.getCurrentZuid = function() {
    return this.currentZuid;
};
var getCount = "1";
this.setGetCount = function(getCount) { 
    this.getCount = getCount;
    return this;
};
this.getGetCount = function() {
    return this.getCount;
};
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var idp = "Z";
this.setIdp = function(idp) { 
    this.idp = idp;
    return this;
};
this.getIdp = function() {
    return this.idp;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var endTime = "";
this.setEndTime = function(endTime) { 
    this.endTime = endTime;
    return this;
};
this.getEndTime = function() {
    return this.endTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setRegId(json["reg_id"]);
		this.setAppIp(json["app_ip"]);
		this.setRemoteIp(json["remote_ip"]);
		this.setUserAgent(json["user_agent"]);
		this.setReferrer(json["referrer"]);
		this.setAppId(json["app_id"]);
		this.setStatus(json["status"]);
		this.setErrors(json["errors"]);
		this.setZuidAfterReg(json["zuid_after_reg"]);
		this.setCurrentZuid(json["current_zuid"]);
		this.setGetCount(json["get_count"]);
		this.setEmailId(json["email_id"]);
		this.setIdp(json["idp"]);
		this.setCreatedTime(json["created_time"]);
		this.setEndTime(json["end_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getRegId()) json += '"reg_id"' + ":" + '"' + jsonEscape(this.getRegId())  + '",';
		if(this.getAppIp()) json += '"app_ip"' + ":" + '"' + jsonEscape(this.getAppIp())  + '",';
		if(this.getRemoteIp()) json += '"remote_ip"' + ":" + '"' + jsonEscape(this.getRemoteIp())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getErrors()) json += '"errors"' + ":" + '"' + jsonEscape(this.getErrors())  + '",';
		if(this.getZuidAfterReg()) json += '"zuid_after_reg"' + ":" + '"' + jsonEscape(this.getZuidAfterReg())  + '",';
		if(this.getCurrentZuid()) json += '"current_zuid"' + ":" + '"' + jsonEscape(this.getCurrentZuid())  + '",';
		if(this.getGetCount()) json += '"get_count"' + ":" + '"' + jsonEscape(this.getGetCount())  + '",';
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getIdp()) json += '"idp"' + ":" + '"' + jsonEscape(this.getIdp())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getEndTime()) json += '"end_time"' + ":" + '"' + jsonEscape(this.getEndTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(RegistrationAuditTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.regId && !(/dontdisturb/).test(this.regId)) { throw new ValidationError(_formprefix + "reg_id", ValidationError.PATTERN_FAILED);}
if(this.appIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.appIp)) { throw new ValidationError(_formprefix + "app_ip", ValidationError.PATTERN_FAILED);}
if(this.remoteIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.remoteIp)) { throw new ValidationError(_formprefix + "remote_ip", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.appId && !Validator.INTEGER.test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.status && !Validator.INTEGER.test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.errors && !(/dontdisturb/).test(this.errors)) { throw new ValidationError(_formprefix + "errors", ValidationError.PATTERN_FAILED);}
if(this.zuidAfterReg && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuidAfterReg)) { throw new ValidationError(_formprefix + "zuid_after_reg", ValidationError.PATTERN_FAILED);}
if(this.currentZuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.currentZuid)) { throw new ValidationError(_formprefix + "current_zuid", ValidationError.PATTERN_FAILED);}
if(this.getCount && !Validator.INTEGER.test(this.getCount)) { throw new ValidationError(_formprefix + "get_count", ValidationError.PATTERN_FAILED);}
if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.endTime && !Validator.INTEGER.test(this.endTime)) { throw new ValidationError(_formprefix + "end_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
RegistrationAuditTemplate.path = "registrationaudittemplate";
RegistrationAuditTemplate.newBuilder = function() {
    return new RegistrationAuditTemplate();
};

OAuthRefreshTokenScopes = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var allowedOperations = "";
this.setAllowedOperations = function(allowedOperations) { 
    this.allowedOperations = allowedOperations;
    return this;
};
this.getAllowedOperations = function() {
    return this.allowedOperations;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setAllowedOperations(json["allowed_operations"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getAllowedOperations()) json += '"allowed_operations"' + ":" + '"' + jsonEscape(this.getAllowedOperations())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthRefreshTokenScopes.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.allowedOperations && !Validator.INTEGER.test(this.allowedOperations)) { throw new ValidationError(_formprefix + "allowed_operations", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthRefreshTokenScopes.path = "oauthrefreshtokenscopes";
OAuthRefreshTokenScopes.newBuilder = function() {
    return new OAuthRefreshTokenScopes();
};

TemplateImage = function() {
    var _formprefix = "";
    
var imageNameApl = "";
this.setImageNameApl = function(imageNameApl) { 
    this.imageNameApl = imageNameApl;
    return this;
};
this.getImageNameApl = function() {
    return this.imageNameApl;
};
var dfsLocation = "";
this.setDfsLocation = function(dfsLocation) { 
    this.dfsLocation = dfsLocation;
    return this;
};
this.getDfsLocation = function() {
    return this.dfsLocation;
};
var transmailId = "";
this.setTransmailId = function(transmailId) { 
    this.transmailId = transmailId;
    return this;
};
this.getTransmailId = function() {
    return this.transmailId;
};
var transmailStatus = "0";
this.setTransmailStatus = function(transmailStatus) { 
    this.transmailStatus = transmailStatus;
    return this;
};
this.getTransmailStatus = function() {
    return this.transmailStatus;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setImageNameApl(json["image_name_apl"]);
		this.setDfsLocation(json["dfs_location"]);
		this.setTransmailId(json["transmail_id"]);
		this.setTransmailStatus(json["transmail_status"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getImageNameApl()) json += '"image_name_apl"' + ":" + '"' + jsonEscape(this.getImageNameApl())  + '",';
		if(this.getDfsLocation()) json += '"dfs_location"' + ":" + '"' + jsonEscape(this.getDfsLocation())  + '",';
		if(this.getTransmailId()) json += '"transmail_id"' + ":" + '"' + jsonEscape(this.getTransmailId())  + '",';
		if(this.getTransmailStatus()) json += '"transmail_status"' + ":" + '"' + jsonEscape(this.getTransmailStatus())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(TemplateImage.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.imageNameApl && !(/xss:throwerror/).test(this.imageNameApl)) { throw new ValidationError(_formprefix + "image_name_apl", ValidationError.PATTERN_FAILED);}
if(this.dfsLocation && !(/^([A-Za-z0-9_.\-]+)$/).test(this.dfsLocation)) { throw new ValidationError(_formprefix + "dfs_location", ValidationError.PATTERN_FAILED);}
if(this.transmailId && !(/^([A-Za-z0-9_.\-]+)$/).test(this.transmailId)) { throw new ValidationError(_formprefix + "transmail_id", ValidationError.PATTERN_FAILED);}
if(this.transmailStatus && !Validator.INTEGER.test(this.transmailStatus)) { throw new ValidationError(_formprefix + "transmail_status", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
TemplateImage.path = "templateimage";
TemplateImage.newBuilder = function() {
    return new TemplateImage();
};

AuthDomainPolicy = function() {
    var _formprefix = "";
    
var policyKey = "";
this.setPolicyKey = function(policyKey) { 
    this.policyKey = policyKey;
    return this;
};
this.getPolicyKey = function() {
    return this.policyKey;
};
var policyValue = "";
this.setPolicyValue = function(policyValue) { 
    this.policyValue = policyValue;
    return this;
};
this.getPolicyValue = function() {
    return this.policyValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPolicyKey(json["policy_key"]);
		this.setPolicyValue(json["policy_value"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPolicyKey()) json += '"policy_key"' + ":" + '"' + jsonEscape(this.getPolicyKey())  + '",';
		if(this.getPolicyValue()) json += '"policy_value"' + ":" + '"' + jsonEscape(this.getPolicyValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AuthDomainPolicy.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.policyKey && !(/^([A-Za-z0-9_.\-]+)$/).test(this.policyKey)) { throw new ValidationError(_formprefix + "policy_key", ValidationError.PATTERN_FAILED);}
if(this.policyValue && !(/^([A-Za-z0-9_.\-]+)$/).test(this.policyValue)) { throw new ValidationError(_formprefix + "policy_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AuthDomainPolicy.path = "authdomainpolicy";
AuthDomainPolicy.newBuilder = function() {
    return new AuthDomainPolicy();
};

ParentGroup = function() {
    var _formprefix = "";
    
var parentZgid = "";
this.setParentZgid = function(parentZgid) { 
    this.parentZgid = parentZgid;
    return this;
};
this.getParentZgid = function() {
    return this.parentZgid;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setParentZgid(json["parent_zgid"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getParentZgid()) json += '"parent_zgid"' + ":" + '"' + jsonEscape(this.getParentZgid())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ParentGroup.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ParentGroup.path = "parentgroup";
ParentGroup.newBuilder = function() {
    return new ParentGroup();
};

AppAccountPreference = function() {
    var _formprefix = "";
    
var daylightSavingEnabled = "";
this.setDaylightSavingEnabled = function(daylightSavingEnabled) { 
    this.daylightSavingEnabled = daylightSavingEnabled;
    return this;
};
this.getDaylightSavingEnabled = function() {
    return this.daylightSavingEnabled;
};
var weekStartsOn = "";
this.setWeekStartsOn = function(weekStartsOn) { 
    this.weekStartsOn = weekStartsOn;
    return this;
};
this.getWeekStartsOn = function() {
    return this.weekStartsOn;
};
var nameFormat = "";
this.setNameFormat = function(nameFormat) { 
    this.nameFormat = nameFormat;
    return this;
};
this.getNameFormat = function() {
    return this.nameFormat;
};
var shortDateFormat = "";
this.setShortDateFormat = function(shortDateFormat) { 
    this.shortDateFormat = shortDateFormat;
    return this;
};
this.getShortDateFormat = function() {
    return this.shortDateFormat;
};
var mediumDateFormat = "";
this.setMediumDateFormat = function(mediumDateFormat) { 
    this.mediumDateFormat = mediumDateFormat;
    return this;
};
this.getMediumDateFormat = function() {
    return this.mediumDateFormat;
};
var longDateFormat = "";
this.setLongDateFormat = function(longDateFormat) { 
    this.longDateFormat = longDateFormat;
    return this;
};
this.getLongDateFormat = function() {
    return this.longDateFormat;
};
var shortTimeFormat = "";
this.setShortTimeFormat = function(shortTimeFormat) { 
    this.shortTimeFormat = shortTimeFormat;
    return this;
};
this.getShortTimeFormat = function() {
    return this.shortTimeFormat;
};
var mediumTimeFormat = "";
this.setMediumTimeFormat = function(mediumTimeFormat) { 
    this.mediumTimeFormat = mediumTimeFormat;
    return this;
};
this.getMediumTimeFormat = function() {
    return this.mediumTimeFormat;
};
var longTimeFormat = "";
this.setLongTimeFormat = function(longTimeFormat) { 
    this.longTimeFormat = longTimeFormat;
    return this;
};
this.getLongTimeFormat = function() {
    return this.longTimeFormat;
};
var use24hrTime = "";
this.setUse24hrTime = function(use24hrTime) { 
    this.use24hrTime = use24hrTime;
    return this;
};
this.getUse24hrTime = function() {
    return this.use24hrTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDaylightSavingEnabled(json["daylight_saving_enabled"]);
		this.setWeekStartsOn(json["week_starts_on"]);
		this.setNameFormat(json["name_format"]);
		this.setShortDateFormat(json["short_date_format"]);
		this.setMediumDateFormat(json["medium_date_format"]);
		this.setLongDateFormat(json["long_date_format"]);
		this.setShortTimeFormat(json["short_time_format"]);
		this.setMediumTimeFormat(json["medium_time_format"]);
		this.setLongTimeFormat(json["long_time_format"]);
		this.setUse24hrTime(json["use_24hr_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDaylightSavingEnabled()) json += '"daylight_saving_enabled"' + ":" + '"' + jsonEscape(this.getDaylightSavingEnabled())  + '",';
		if(this.getWeekStartsOn()) json += '"week_starts_on"' + ":" + '"' + jsonEscape(this.getWeekStartsOn())  + '",';
		if(this.getNameFormat()) json += '"name_format"' + ":" + '"' + jsonEscape(this.getNameFormat())  + '",';
		if(this.getShortDateFormat()) json += '"short_date_format"' + ":" + '"' + jsonEscape(this.getShortDateFormat())  + '",';
		if(this.getMediumDateFormat()) json += '"medium_date_format"' + ":" + '"' + jsonEscape(this.getMediumDateFormat())  + '",';
		if(this.getLongDateFormat()) json += '"long_date_format"' + ":" + '"' + jsonEscape(this.getLongDateFormat())  + '",';
		if(this.getShortTimeFormat()) json += '"short_time_format"' + ":" + '"' + jsonEscape(this.getShortTimeFormat())  + '",';
		if(this.getMediumTimeFormat()) json += '"medium_time_format"' + ":" + '"' + jsonEscape(this.getMediumTimeFormat())  + '",';
		if(this.getLongTimeFormat()) json += '"long_time_format"' + ":" + '"' + jsonEscape(this.getLongTimeFormat())  + '",';
		if(this.getUse24hrTime()) json += '"use_24hr_time"' + ":" + '"' + jsonEscape(this.getUse24hrTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccountPreference.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.daylightSavingEnabled && !Validator.BOOLEAN.test(this.daylightSavingEnabled)) { throw new ValidationError(_formprefix + "daylight_saving_enabled", ValidationError.PATTERN_FAILED);}
if(this.use24hrTime && !Validator.BOOLEAN.test(this.use24hrTime)) { throw new ValidationError(_formprefix + "use_24hr_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAccountPreference.path = "appaccountpreference";
AppAccountPreference.newBuilder = function() {
    return new AppAccountPreference();
};

ShortenURL = function() {
    var _formprefix = "";
    
var shortenId = "";
this.setShortenId = function(shortenId) { 
    this.shortenId = shortenId;
    return this;
};
this.getShortenId = function() {
    return this.shortenId;
};
var url = "";
this.setUrl = function(url) { 
    this.url = url;
    return this;
};
this.getUrl = function() {
    return this.url;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setShortenId(json["shorten_id"]);
		this.setUrl(json["url"]);
		this.setExpiryTime(json["expiry_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getShortenId()) json += '"shorten_id"' + ":" + '"' + jsonEscape(this.getShortenId())  + '",';
		if(this.getUrl()) json += '"url"' + ":" + '"' + jsonEscape(this.getUrl())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ShortenURL.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.shortenId && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.shortenId)) { throw new ValidationError(_formprefix + "shorten_id", ValidationError.PATTERN_FAILED);}
if(this.url && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.url)) { throw new ValidationError(_formprefix + "url", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ShortenURL.path = "shortenurl";
ShortenURL.newBuilder = function() {
    return new ShortenURL();
};

UserSigninLocation = function() {
    var _formprefix = "";
    
var location = "";
this.setLocation = function(location) { 
    this.location = location;
    return this;
};
this.getLocation = function() {
    return this.location;
};
var latitude = "";
this.setLatitude = function(latitude) { 
    this.latitude = latitude;
    return this;
};
this.getLatitude = function() {
    return this.latitude;
};
var longitude = "";
this.setLongitude = function(longitude) { 
    this.longitude = longitude;
    return this;
};
this.getLongitude = function() {
    return this.longitude;
};
var usersigninuseragent = undefined;
this.setUsersigninuseragents = function(usersigninuseragent) { 
    this.usersigninuseragent = usersigninuseragent;
    return this;
};
this.getUsersigninuseragents = function() {
    return this.usersigninuseragent;
};
this.addUsersigninuseragent = function(usersigninuseragent) { 
 if(!this.usersigninuseragent) this.usersigninuseragent = new Array(); 
  this.usersigninuseragent.push(usersigninuseragent); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLocation(json["location"]);
		this.setLatitude(json["latitude"]);
		this.setLongitude(json["longitude"]);
		this.setUsersigninuseragents(URI.getResourceArray(json["userSigninUserAgent"],"usersigninuseragent"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLocation()) json += '"location"' + ":" + '"' + jsonEscape(this.getLocation())  + '",';
		if(this.getLatitude()) json += '"latitude"' + ":" + '"' + jsonEscape(this.getLatitude())  + '",';
		if(this.getLongitude()) json += '"longitude"' + ":" + '"' + jsonEscape(this.getLongitude())  + '",';
		if(this.getUsersigninuseragents()) json += '"userSigninUserAgent"' + ":" + URI.toJSONArray(this.getUsersigninuseragents())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserSigninLocation.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.latitude && !(/^[0-9\-\.]*$/).test(this.latitude)) { throw new ValidationError(_formprefix + "latitude", ValidationError.PATTERN_FAILED);}
if(this.longitude && !(/^[0-9\-\.]*$/).test(this.longitude)) { throw new ValidationError(_formprefix + "longitude", ValidationError.PATTERN_FAILED);}
if(this.usersigninuseragent) { for(i=0; i < this.usersigninuseragent.length; i++ ) { this.usersigninuseragent[i].validate(); } }

	return this;
    }
}
UserSigninLocation.path = "usersigninlocation";
UserSigninLocation.newBuilder = function() {
    return new UserSigninLocation();
};

AccountOAuthAccessGrant = function() {
    var _formprefix = "";
    
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var accountoauthaccessgrantscopes = undefined;
this.setAccountoauthaccessgrantscopess = function(accountoauthaccessgrantscopes) { 
    this.accountoauthaccessgrantscopes = accountoauthaccessgrantscopes;
    return this;
};
this.getAccountoauthaccessgrantscopess = function() {
    return this.accountoauthaccessgrantscopes;
};
this.addAccountoauthaccessgrantscopes = function(accountoauthaccessgrantscopes) { 
 if(!this.accountoauthaccessgrantscopes) this.accountoauthaccessgrantscopes = new Array(); 
  this.accountoauthaccessgrantscopes.push(accountoauthaccessgrantscopes); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClientZid(json["client_zid"]);
		this.setIpAddress(json["ip_address"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);
		this.setAccountoauthaccessgrantscopess(URI.getResourceArray(json["accountOAuthAccessGrantScopes"],"accountoauthaccessgrantscopes"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getAccountoauthaccessgrantscopess()) json += '"accountOAuthAccessGrantScopes"' + ":" + URI.toJSONArray(this.getAccountoauthaccessgrantscopess())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountOAuthAccessGrant.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.clientZid && !(/^[0-9]+\.[0-9]+$/).test(this.clientZid)) { throw new ValidationError(_formprefix + "client_zid", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/xss:throwerror/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.accountoauthaccessgrantscopes) { for(i=0; i < this.accountoauthaccessgrantscopes.length; i++ ) { this.accountoauthaccessgrantscopes[i].validate(); } }

	return this;
    }
}
AccountOAuthAccessGrant.path = "accountoauthaccessgrant";
AccountOAuthAccessGrant.newBuilder = function() {
    return new AccountOAuthAccessGrant();
};

WebSignInFailedAudit = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var loginId = "";
this.setLoginId = function(loginId) { 
    this.loginId = loginId;
    return this;
};
this.getLoginId = function() {
    return this.loginId;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var errorCode = "";
this.setErrorCode = function(errorCode) { 
    this.errorCode = errorCode;
    return this;
};
this.getErrorCode = function() {
    return this.errorCode;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var country = "";
this.setCountry = function(country) { 
    this.country = country;
    return this;
};
this.getCountry = function() {
    return this.country;
};
var signinId = "";
this.setSigninId = function(signinId) { 
    this.signinId = signinId;
    return this;
};
this.getSigninId = function() {
    return this.signinId;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setLoginId(json["login_id"]);
		this.setZuid(json["zuid"]);
		this.setErrorCode(json["error_code"]);
		this.setIpAddress(json["ip_address"]);
		this.setUserAgent(json["user_agent"]);
		this.setCountry(json["country"]);
		this.setSigninId(json["signin_id"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getLoginId()) json += '"login_id"' + ":" + '"' + jsonEscape(this.getLoginId())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getErrorCode()) json += '"error_code"' + ":" + '"' + jsonEscape(this.getErrorCode())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCountry()) json += '"country"' + ":" + '"' + jsonEscape(this.getCountry())  + '",';
		if(this.getSigninId()) json += '"signin_id"' + ":" + '"' + jsonEscape(this.getSigninId())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(WebSignInFailedAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.loginId && !(/^([\p{L}\p{M}\p{N}\_\.]+)|[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.loginId)) { throw new ValidationError(_formprefix + "login_id", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.country && !(/^[a-zA-Z0-9]{2,5}$/).test(this.country)) { throw new ValidationError(_formprefix + "country", ValidationError.PATTERN_FAILED);}
if(this.signinId && !(/dontdisturb/).test(this.signinId)) { throw new ValidationError(_formprefix + "signin_id", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
WebSignInFailedAudit.path = "websigninfailedaudit";
WebSignInFailedAudit.newBuilder = function() {
    return new WebSignInFailedAudit();
};

UserDomain = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var zidType = "1";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var isExcluded = "false";
this.setIsExcluded = function(isExcluded) { 
    this.isExcluded = isExcluded;
    return this;
};
this.getIsExcluded = function() {
    return this.isExcluded;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setZidType(json["zid_type"]);
		this.setIsExcluded(json["is_excluded"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getIsExcluded()) json += '"is_excluded"' + ":" + '"' + jsonEscape(this.getIsExcluded())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserDomain.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.zidType && !Validator.INTEGER.test(this.zidType)) { throw new ValidationError(_formprefix + "zid_type", ValidationError.PATTERN_FAILED);}
if(this.isExcluded && !Validator.BOOLEAN.test(this.isExcluded)) { throw new ValidationError(_formprefix + "is_excluded", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserDomain.path = "userdomain";
UserDomain.newBuilder = function() {
    return new UserDomain();
};

SubScopes = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SubScopes.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[a-zA-Z0-9_\-]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SubScopes.path = "subscopes";
SubScopes.newBuilder = function() {
    return new SubScopes();
};

OAuthSessionGrant = function() {
    var _formprefix = "";
    
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
var type = "1";
this.setType = function(type) { 
    this.type = type;
    return this;
};
this.getType = function() {
    return this.type;
};
var orgInfo = "";
this.setOrgInfo = function(orgInfo) { 
    this.orgInfo = orgInfo;
    return this;
};
this.getOrgInfo = function() {
    return this.orgInfo;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClientZid(json["client_zid"]);
		this.setType(json["type"]);
		this.setOrgInfo(json["org_info"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';
		if(this.getType()) json += '"type"' + ":" + '"' + jsonEscape(this.getType())  + '",';
		if(this.getOrgInfo()) json += '"org_info"' + ":" + '"' + jsonEscape(this.getOrgInfo())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthSessionGrant.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.clientZid && !(/^[0-9]+\.[0-9]+$/).test(this.clientZid)) { throw new ValidationError(_formprefix + "client_zid", ValidationError.PATTERN_FAILED);}
if(this.type && !Validator.INTEGER.test(this.type)) { throw new ValidationError(_formprefix + "type", ValidationError.PATTERN_FAILED);}
if(this.orgInfo && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.orgInfo)) { throw new ValidationError(_formprefix + "org_info", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthSessionGrant.path = "oauthsessiongrant";
OAuthSessionGrant.newBuilder = function() {
    return new OAuthSessionGrant();
};

OAuthDeviceToken = function() {
    var _formprefix = "";
    
var userZid = "";
this.setUserZid = function(userZid) { 
    this.userZid = userZid;
    return this;
};
this.getUserZid = function() {
    return this.userZid;
};
var zidType = "1";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var deviceToken = "";
this.setDeviceToken = function(deviceToken) { 
    this.deviceToken = deviceToken;
    return this;
};
this.getDeviceToken = function() {
    return this.deviceToken;
};
var grantType = "";
this.setGrantType = function(grantType) { 
    this.grantType = grantType;
    return this;
};
this.getGrantType = function() {
    return this.grantType;
};
var verificationCode = "";
this.setVerificationCode = function(verificationCode) { 
    this.verificationCode = verificationCode;
    return this;
};
this.getVerificationCode = function() {
    return this.verificationCode;
};
var verificationStatus = "0";
this.setVerificationStatus = function(verificationStatus) { 
    this.verificationStatus = verificationStatus;
    return this;
};
this.getVerificationStatus = function() {
    return this.verificationStatus;
};
var accessType = "1";
this.setAccessType = function(accessType) { 
    this.accessType = accessType;
    return this;
};
this.getAccessType = function() {
    return this.accessType;
};
var userLocation = "NULL";
this.setUserLocation = function(userLocation) { 
    this.userLocation = userLocation;
    return this;
};
this.getUserLocation = function() {
    return this.userLocation;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var oauthdevicetokenscopes = undefined;
this.setOauthdevicetokenscopess = function(oauthdevicetokenscopes) { 
    this.oauthdevicetokenscopes = oauthdevicetokenscopes;
    return this;
};
this.getOauthdevicetokenscopess = function() {
    return this.oauthdevicetokenscopes;
};
this.addOauthdevicetokenscopes = function(oauthdevicetokenscopes) { 
 if(!this.oauthdevicetokenscopes) this.oauthdevicetokenscopes = new Array(); 
  this.oauthdevicetokenscopes.push(oauthdevicetokenscopes); 
 return this;
};

var oauthdevicetokenorginfo = undefined;
this.setOauthdevicetokenorginfos = function(oauthdevicetokenorginfo) { 
    this.oauthdevicetokenorginfo = oauthdevicetokenorginfo;
    return this;
};
this.getOauthdevicetokenorginfos = function() {
    return this.oauthdevicetokenorginfo;
};
this.addOauthdevicetokenorginfo = function(oauthdevicetokenorginfo) { 
 if(!this.oauthdevicetokenorginfo) this.oauthdevicetokenorginfo = new Array(); 
  this.oauthdevicetokenorginfo.push(oauthdevicetokenorginfo); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setUserZid(json["user_zid"]);
		this.setZidType(json["zid_type"]);
		this.setDeviceToken(json["device_token"]);
		this.setGrantType(json["grant_type"]);
		this.setVerificationCode(json["verification_code"]);
		this.setVerificationStatus(json["verification_status"]);
		this.setAccessType(json["access_type"]);
		this.setUserLocation(json["user_location"]);
		this.setCreatedTime(json["created_time"]);
		this.setOauthdevicetokenscopess(URI.getResourceArray(json["oAuthDeviceTokenScopes"],"oauthdevicetokenscopes"));
		this.setOauthdevicetokenorginfos(URI.getResourceArray(json["oAuthDeviceTokenOrgInfo"],"oauthdevicetokenorginfo"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getUserZid()) json += '"user_zid"' + ":" + '"' + jsonEscape(this.getUserZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getDeviceToken()) json += '"device_token"' + ":" + '"' + jsonEscape(this.getDeviceToken())  + '",';
		if(this.getGrantType()) json += '"grant_type"' + ":" + '"' + jsonEscape(this.getGrantType())  + '",';
		if(this.getVerificationCode()) json += '"verification_code"' + ":" + '"' + jsonEscape(this.getVerificationCode())  + '",';
		if(this.getVerificationStatus()) json += '"verification_status"' + ":" + '"' + jsonEscape(this.getVerificationStatus())  + '",';
		if(this.getAccessType()) json += '"access_type"' + ":" + '"' + jsonEscape(this.getAccessType())  + '",';
		if(this.getUserLocation()) json += '"user_location"' + ":" + '"' + jsonEscape(this.getUserLocation())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getOauthdevicetokenscopess()) json += '"oAuthDeviceTokenScopes"' + ":" + URI.toJSONArray(this.getOauthdevicetokenscopess())  + ',';
		if(this.getOauthdevicetokenorginfos()) json += '"oAuthDeviceTokenOrgInfo"' + ":" + URI.toJSONArray(this.getOauthdevicetokenorginfos())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthDeviceToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.userZid && !(/^[a-zA-Z0-9_\-]+$/).test(this.userZid)) { throw new ValidationError(_formprefix + "user_zid", ValidationError.PATTERN_FAILED);}
if(this.zidType && !Validator.INTEGER.test(this.zidType)) { throw new ValidationError(_formprefix + "zid_type", ValidationError.PATTERN_FAILED);}
if(this.deviceToken && !(/xss:throwerror/).test(this.deviceToken)) { throw new ValidationError(_formprefix + "device_token", ValidationError.PATTERN_FAILED);}
if(this.grantType && !(/xss:throwerror/).test(this.grantType)) { throw new ValidationError(_formprefix + "grant_type", ValidationError.PATTERN_FAILED);}
if(this.verificationCode && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.verificationCode)) { throw new ValidationError(_formprefix + "verification_code", ValidationError.PATTERN_FAILED);}
if(this.verificationStatus && !Validator.INTEGER.test(this.verificationStatus)) { throw new ValidationError(_formprefix + "verification_status", ValidationError.PATTERN_FAILED);}
if(this.accessType && !Validator.INTEGER.test(this.accessType)) { throw new ValidationError(_formprefix + "access_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.oauthdevicetokenscopes) { for(i=0; i < this.oauthdevicetokenscopes.length; i++ ) { this.oauthdevicetokenscopes[i].validate(); } }
if(this.oauthdevicetokenorginfo) { for(i=0; i < this.oauthdevicetokenorginfo.length; i++ ) { this.oauthdevicetokenorginfo[i].validate(); } }

	return this;
    }
}
OAuthDeviceToken.path = "oauthdevicetoken";
OAuthDeviceToken.newBuilder = function() {
    return new OAuthDeviceToken();
};

CacheCluster = function() {
    var _formprefix = "";
    
var clusterName = "";
this.setClusterName = function(clusterName) { 
    this.clusterName = clusterName;
    return this;
};
this.getClusterName = function() {
    return this.clusterName;
};
var isSyncEnabled = "true";
this.setIsSyncEnabled = function(isSyncEnabled) { 
    this.isSyncEnabled = isSyncEnabled;
    return this;
};
this.getIsSyncEnabled = function() {
    return this.isSyncEnabled;
};
var syncClusterName = "";
this.setSyncClusterName = function(syncClusterName) { 
    this.syncClusterName = syncClusterName;
    return this;
};
this.getSyncClusterName = function() {
    return this.syncClusterName;
};
var isSyncEnabledForGet = "false";
this.setIsSyncEnabledForGet = function(isSyncEnabledForGet) { 
    this.isSyncEnabledForGet = isSyncEnabledForGet;
    return this;
};
this.getIsSyncEnabledForGet = function() {
    return this.isSyncEnabledForGet;
};
var clusternode = undefined;
this.setClusternodes = function(clusternode) { 
    this.clusternode = clusternode;
    return this;
};
this.getClusternodes = function() {
    return this.clusternode;
};
this.addClusternode = function(clusternode) { 
 if(!this.clusternode) this.clusternode = new Array(); 
  this.clusternode.push(clusternode); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClusterName(json["cluster_name"]);
		this.setIsSyncEnabled(json["is_sync_enabled"]);
		this.setSyncClusterName(json["sync_cluster_name"]);
		this.setIsSyncEnabledForGet(json["is_sync_enabled_for_get"]);
		this.setClusternodes(URI.getResourceArray(json["clusterNode"],"clusternode"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClusterName()) json += '"cluster_name"' + ":" + '"' + jsonEscape(this.getClusterName())  + '",';
		if(this.getIsSyncEnabled()) json += '"is_sync_enabled"' + ":" + '"' + jsonEscape(this.getIsSyncEnabled())  + '",';
		if(this.getSyncClusterName()) json += '"sync_cluster_name"' + ":" + '"' + jsonEscape(this.getSyncClusterName())  + '",';
		if(this.getIsSyncEnabledForGet()) json += '"is_sync_enabled_for_get"' + ":" + '"' + jsonEscape(this.getIsSyncEnabledForGet())  + '",';
		if(this.getClusternodes()) json += '"clusterNode"' + ":" + URI.toJSONArray(this.getClusternodes())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(CacheCluster.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.clusterName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.clusterName)) { throw new ValidationError(_formprefix + "cluster_name", ValidationError.PATTERN_FAILED);}
if(this.isSyncEnabled && !Validator.BOOLEAN.test(this.isSyncEnabled)) { throw new ValidationError(_formprefix + "is_sync_enabled", ValidationError.PATTERN_FAILED);}
if(this.syncClusterName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.syncClusterName)) { throw new ValidationError(_formprefix + "sync_cluster_name", ValidationError.PATTERN_FAILED);}
if(this.isSyncEnabledForGet && !Validator.BOOLEAN.test(this.isSyncEnabledForGet)) { throw new ValidationError(_formprefix + "is_sync_enabled_for_get", ValidationError.PATTERN_FAILED);}
if(this.clusternode) { for(i=0; i < this.clusternode.length; i++ ) { this.clusternode[i].validate(); } }

	return this;
    }
}
CacheCluster.path = "cachecluster";
CacheCluster.newBuilder = function() {
    return new CacheCluster();
};

OAuthDcDetails = function() {
    var _formprefix = "";
    
var dcLocation = "";
this.setDcLocation = function(dcLocation) { 
    this.dcLocation = dcLocation;
    return this;
};
this.getDcLocation = function() {
    return this.dcLocation;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDcLocation(json["dc_location"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDcLocation()) json += '"dc_location"' + ":" + '"' + jsonEscape(this.getDcLocation())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthDcDetails.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthDcDetails.path = "oauthdcdetails";
OAuthDcDetails.newBuilder = function() {
    return new OAuthDcDetails();
};

Partner = function() {
    var _formprefix = "";
    
var partnerDomain = "";
this.setPartnerDomain = function(partnerDomain) { 
    this.partnerDomain = partnerDomain;
    return this;
};
this.getPartnerDomain = function() {
    return this.partnerDomain;
};
var partnerZuid = "";
this.setPartnerZuid = function(partnerZuid) { 
    this.partnerZuid = partnerZuid;
    return this;
};
this.getPartnerZuid = function() {
    return this.partnerZuid;
};
var partnerName = "";
this.setPartnerName = function(partnerName) { 
    this.partnerName = partnerName;
    return this;
};
this.getPartnerName = function() {
    return this.partnerName;
};
var partnerEmailid = "";
this.setPartnerEmailid = function(partnerEmailid) { 
    this.partnerEmailid = partnerEmailid;
    return this;
};
this.getPartnerEmailid = function() {
    return this.partnerEmailid;
};
var partnerStatus = "0";
this.setPartnerStatus = function(partnerStatus) { 
    this.partnerStatus = partnerStatus;
    return this;
};
this.getPartnerStatus = function() {
    return this.partnerStatus;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPartnerDomain(json["partner_domain"]);
		this.setPartnerZuid(json["partner_zuid"]);
		this.setPartnerName(json["partner_name"]);
		this.setPartnerEmailid(json["partner_emailid"]);
		this.setPartnerStatus(json["partner_status"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPartnerDomain()) json += '"partner_domain"' + ":" + '"' + jsonEscape(this.getPartnerDomain())  + '",';
		if(this.getPartnerZuid()) json += '"partner_zuid"' + ":" + '"' + jsonEscape(this.getPartnerZuid())  + '",';
		if(this.getPartnerName()) json += '"partner_name"' + ":" + '"' + jsonEscape(this.getPartnerName())  + '",';
		if(this.getPartnerEmailid()) json += '"partner_emailid"' + ":" + '"' + jsonEscape(this.getPartnerEmailid())  + '",';
		if(this.getPartnerStatus()) json += '"partner_status"' + ":" + '"' + jsonEscape(this.getPartnerStatus())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Partner.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.partnerDomain && !(/^([\p{L}\p{M}\p{N}]([\p{L}\p{M}\p{N}\-]{0,61}[\p{L}\p{M}\p{N}])?\.)+[\p{L}\p{M}]{2,6}$/).test(this.partnerDomain)) { throw new ValidationError(_formprefix + "partner_domain", ValidationError.PATTERN_FAILED);}
if(this.partnerZuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.partnerZuid)) { throw new ValidationError(_formprefix + "partner_zuid", ValidationError.PATTERN_FAILED);}
if(this.partnerName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.partnerName)) { throw new ValidationError(_formprefix + "partner_name", ValidationError.PATTERN_FAILED);}
if(this.partnerEmailid && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.partnerEmailid)) { throw new ValidationError(_formprefix + "partner_emailid", ValidationError.PATTERN_FAILED);}
if(this.partnerStatus && !Validator.INTEGER.test(this.partnerStatus)) { throw new ValidationError(_formprefix + "partner_status", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Partner.path = "partner";
Partner.newBuilder = function() {
    return new Partner();
};

JWTAuthentication = function() {
    var _formprefix = "";
    
var jwtId = "";
this.setJwtId = function(jwtId) { 
    this.jwtId = jwtId;
    return this;
};
this.getJwtId = function() {
    return this.jwtId;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var loginUrl = "";
this.setLoginUrl = function(loginUrl) { 
    this.loginUrl = loginUrl;
    return this;
};
this.getLoginUrl = function() {
    return this.loginUrl;
};
var logoutUrl = "";
this.setLogoutUrl = function(logoutUrl) { 
    this.logoutUrl = logoutUrl;
    return this;
};
this.getLogoutUrl = function() {
    return this.logoutUrl;
};
var algorithm = "";
this.setAlgorithm = function(algorithm) { 
    this.algorithm = algorithm;
    return this;
};
this.getAlgorithm = function() {
    return this.algorithm;
};
var key = "";
this.setKey = function(key) { 
    this.key = key;
    return this;
};
this.getKey = function() {
    return this.key;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var jwtreqparam = undefined;
this.setJwtreqparams = function(jwtreqparam) { 
    this.jwtreqparam = jwtreqparam;
    return this;
};
this.getJwtreqparams = function() {
    return this.jwtreqparam;
};
this.addJwtreqparam = function(jwtreqparam) { 
 if(!this.jwtreqparam) this.jwtreqparam = new Array(); 
  this.jwtreqparam.push(jwtreqparam); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setJwtId(json["jwt_id"]);
		this.setDisplayName(json["display_name"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setLoginUrl(json["login_url"]);
		this.setLogoutUrl(json["logout_url"]);
		this.setAlgorithm(json["algorithm"]);
		this.setKey(json["key"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setJwtreqparams(URI.getResourceArray(json["jWTReqParam"],"jwtreqparam"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getJwtId()) json += '"jwt_id"' + ":" + '"' + jsonEscape(this.getJwtId())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getLoginUrl()) json += '"login_url"' + ":" + '"' + jsonEscape(this.getLoginUrl())  + '",';
		if(this.getLogoutUrl()) json += '"logout_url"' + ":" + '"' + jsonEscape(this.getLogoutUrl())  + '",';
		if(this.getAlgorithm()) json += '"algorithm"' + ":" + '"' + jsonEscape(this.getAlgorithm())  + '",';
		if(this.getKey()) json += '"key"' + ":" + '"' + jsonEscape(this.getKey())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getJwtreqparams()) json += '"jWTReqParam"' + ":" + URI.toJSONArray(this.getJwtreqparams())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(JWTAuthentication.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.jwtreqparam) { for(i=0; i < this.jwtreqparam.length; i++ ) { this.jwtreqparam[i].validate(); } }

	return this;
    }
}
JWTAuthentication.path = "jwtauthentication";
JWTAuthentication.newBuilder = function() {
    return new JWTAuthentication();
};

OAuthRefreshTokenOrgInfo = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidtype = "";
this.setZidtype = function(zidtype) { 
    this.zidtype = zidtype;
    return this;
};
this.getZidtype = function() {
    return this.zidtype;
};
var serviceName = "";
this.setServiceName = function(serviceName) { 
    this.serviceName = serviceName;
    return this;
};
this.getServiceName = function() {
    return this.serviceName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidtype(json["zidtype"]);
		this.setServiceName(json["service_name"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidtype()) json += '"zidtype"' + ":" + '"' + jsonEscape(this.getZidtype())  + '",';
		if(this.getServiceName()) json += '"service_name"' + ":" + '"' + jsonEscape(this.getServiceName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthRefreshTokenOrgInfo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.zidtype && !Validator.INTEGER.test(this.zidtype)) { throw new ValidationError(_formprefix + "zidtype", ValidationError.PATTERN_FAILED);}
if(this.serviceName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.serviceName)) { throw new ValidationError(_formprefix + "service_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthRefreshTokenOrgInfo.path = "oauthrefreshtokenorginfo";
OAuthRefreshTokenOrgInfo.newBuilder = function() {
    return new OAuthRefreshTokenOrgInfo();
};

UserAuthorizedIp = function() {
    var _formprefix = "";
    
var ipid = "";
this.setIpid = function(ipid) { 
    this.ipid = ipid;
    return this;
};
this.getIpid = function() {
    return this.ipid;
};
var ipName = "";
this.setIpName = function(ipName) { 
    this.ipName = ipName;
    return this;
};
this.getIpName = function() {
    return this.ipName;
};
var fromIp = "";
this.setFromIp = function(fromIp) { 
    this.fromIp = fromIp;
    return this;
};
this.getFromIp = function() {
    return this.fromIp;
};
var toIp = "";
this.setToIp = function(toIp) { 
    this.toIp = toIp;
    return this;
};
this.getToIp = function() {
    return this.toIp;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var ipAuditInfo = "";
this.setIpAuditInfo = function(ipAuditInfo) { 
    this.ipAuditInfo = ipAuditInfo;
    return this;
};
this.getIpAuditInfo = function() {
    return this.ipAuditInfo;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setIpid(json["ipid"]);
		this.setIpName(json["ip_name"]);
		this.setFromIp(json["from_ip"]);
		this.setToIp(json["to_ip"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setIpAuditInfo(json["ip_audit_info"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getIpid()) json += '"ipid"' + ":" + '"' + jsonEscape(this.getIpid())  + '",';
		if(this.getIpName()) json += '"ip_name"' + ":" + '"' + jsonEscape(this.getIpName())  + '",';
		if(this.getFromIp()) json += '"from_ip"' + ":" + '"' + jsonEscape(this.getFromIp())  + '",';
		if(this.getToIp()) json += '"to_ip"' + ":" + '"' + jsonEscape(this.getToIp())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getIpAuditInfo()) json += '"ip_audit_info"' + ":" + '"' + jsonEscape(this.getIpAuditInfo())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserAuthorizedIp.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.ipid && !Validator.INTEGER.test(this.ipid)) { throw new ValidationError(_formprefix + "ipid", ValidationError.PATTERN_FAILED);}
if(this.ipName && !(/xss:throwerror/).test(this.ipName)) { throw new ValidationError(_formprefix + "ip_name", ValidationError.PATTERN_FAILED);}
if(this.fromIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.fromIp)) { throw new ValidationError(_formprefix + "from_ip", ValidationError.PATTERN_FAILED);}
if(this.toIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.toIp)) { throw new ValidationError(_formprefix + "to_ip", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/xss:throwerror/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserAuthorizedIp.path = "userauthorizedip";
UserAuthorizedIp.newBuilder = function() {
    return new UserAuthorizedIp();
};

ServiceOrgInvitationTemplate = function() {
    var _formprefix = "";
    
var templateId = "";
this.setTemplateId = function(templateId) { 
    this.templateId = templateId;
    return this;
};
this.getTemplateId = function() {
    return this.templateId;
};
var templateName = "";
this.setTemplateName = function(templateName) { 
    this.templateName = templateName;
    return this;
};
this.getTemplateName = function() {
    return this.templateName;
};
var senderEmailId = "";
this.setSenderEmailId = function(senderEmailId) { 
    this.senderEmailId = senderEmailId;
    return this;
};
this.getSenderEmailId = function() {
    return this.senderEmailId;
};
var replyToEmailId = "";
this.setReplyToEmailId = function(replyToEmailId) { 
    this.replyToEmailId = replyToEmailId;
    return this;
};
this.getReplyToEmailId = function() {
    return this.replyToEmailId;
};
var emailSubject = "";
this.setEmailSubject = function(emailSubject) { 
    this.emailSubject = emailSubject;
    return this;
};
this.getEmailSubject = function() {
    return this.emailSubject;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTemplateId(json["template_id"]);
		this.setTemplateName(json["template_name"]);
		this.setSenderEmailId(json["sender_email_id"]);
		this.setReplyToEmailId(json["reply_to_email_id"]);
		this.setEmailSubject(json["email_subject"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTemplateId()) json += '"template_id"' + ":" + '"' + jsonEscape(this.getTemplateId())  + '",';
		if(this.getTemplateName()) json += '"template_name"' + ":" + '"' + jsonEscape(this.getTemplateName())  + '",';
		if(this.getSenderEmailId()) json += '"sender_email_id"' + ":" + '"' + jsonEscape(this.getSenderEmailId())  + '",';
		if(this.getReplyToEmailId()) json += '"reply_to_email_id"' + ":" + '"' + jsonEscape(this.getReplyToEmailId())  + '",';
		if(this.getEmailSubject()) json += '"email_subject"' + ":" + '"' + jsonEscape(this.getEmailSubject())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgInvitationTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.templateId && !Validator.INTEGER.test(this.templateId)) { throw new ValidationError(_formprefix + "template_id", ValidationError.PATTERN_FAILED);}
if(this.templateName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.templateName)) { throw new ValidationError(_formprefix + "template_name", ValidationError.PATTERN_FAILED);}
if(this.senderEmailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.senderEmailId)) { throw new ValidationError(_formprefix + "sender_email_id", ValidationError.PATTERN_FAILED);}
if(this.replyToEmailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.replyToEmailId)) { throw new ValidationError(_formprefix + "reply_to_email_id", ValidationError.PATTERN_FAILED);}
if(this.emailSubject && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.emailSubject)) { throw new ValidationError(_formprefix + "email_subject", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgInvitationTemplate.path = "serviceorginvitationtemplate";
ServiceOrgInvitationTemplate.newBuilder = function() {
    return new ServiceOrgInvitationTemplate();
};

OAuthGrantTokenOrgInfo = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidtype = "";
this.setZidtype = function(zidtype) { 
    this.zidtype = zidtype;
    return this;
};
this.getZidtype = function() {
    return this.zidtype;
};
var serviceName = "";
this.setServiceName = function(serviceName) { 
    this.serviceName = serviceName;
    return this;
};
this.getServiceName = function() {
    return this.serviceName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidtype(json["zidtype"]);
		this.setServiceName(json["service_name"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidtype()) json += '"zidtype"' + ":" + '"' + jsonEscape(this.getZidtype())  + '",';
		if(this.getServiceName()) json += '"service_name"' + ":" + '"' + jsonEscape(this.getServiceName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthGrantTokenOrgInfo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.zidtype && !Validator.INTEGER.test(this.zidtype)) { throw new ValidationError(_formprefix + "zidtype", ValidationError.PATTERN_FAILED);}
if(this.serviceName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.serviceName)) { throw new ValidationError(_formprefix + "service_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthGrantTokenOrgInfo.path = "oauthgranttokenorginfo";
OAuthGrantTokenOrgInfo.newBuilder = function() {
    return new OAuthGrantTokenOrgInfo();
};

RoutingPolicy = function() {
    var _formprefix = "";
    
var policyId = "";
this.setPolicyId = function(policyId) { 
    this.policyId = policyId;
    return this;
};
this.getPolicyId = function() {
    return this.policyId;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var appliesTo = "0";
this.setAppliesTo = function(appliesTo) { 
    this.appliesTo = appliesTo;
    return this;
};
this.getAppliesTo = function() {
    return this.appliesTo;
};
var allowedModes = "0";
this.setAllowedModes = function(allowedModes) { 
    this.allowedModes = allowedModes;
    return this;
};
this.getAllowedModes = function() {
    return this.allowedModes;
};
var idleTimeout = "0";
this.setIdleTimeout = function(idleTimeout) { 
    this.idleTimeout = idleTimeout;
    return this;
};
this.getIdleTimeout = function() {
    return this.idleTimeout;
};
var sessionTimeout = "0";
this.setSessionTimeout = function(sessionTimeout) { 
    this.sessionTimeout = sessionTimeout;
    return this;
};
this.getSessionTimeout = function() {
    return this.sessionTimeout;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var routingpolicymode = undefined;
this.setRoutingpolicymodes = function(routingpolicymode) { 
    this.routingpolicymode = routingpolicymode;
    return this;
};
this.getRoutingpolicymodes = function() {
    return this.routingpolicymode;
};
this.addRoutingpolicymode = function(routingpolicymode) { 
 if(!this.routingpolicymode) this.routingpolicymode = new Array(); 
  this.routingpolicymode.push(routingpolicymode); 
 return this;
};

var routingpolicyuser = undefined;
this.setRoutingpolicyusers = function(routingpolicyuser) { 
    this.routingpolicyuser = routingpolicyuser;
    return this;
};
this.getRoutingpolicyusers = function() {
    return this.routingpolicyuser;
};
this.addRoutingpolicyuser = function(routingpolicyuser) { 
 if(!this.routingpolicyuser) this.routingpolicyuser = new Array(); 
  this.routingpolicyuser.push(routingpolicyuser); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPolicyId(json["policy_id"]);
		this.setDisplayName(json["display_name"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setAppliesTo(json["applies_to"]);
		this.setAllowedModes(json["allowed_modes"]);
		this.setIdleTimeout(json["idle_timeout"]);
		this.setSessionTimeout(json["session_timeout"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setRoutingpolicymodes(URI.getResourceArray(json["routingPolicyMode"],"routingpolicymode"));
		this.setRoutingpolicyusers(URI.getResourceArray(json["routingPolicyUser"],"routingpolicyuser"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPolicyId()) json += '"policy_id"' + ":" + '"' + jsonEscape(this.getPolicyId())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getAppliesTo()) json += '"applies_to"' + ":" + '"' + jsonEscape(this.getAppliesTo())  + '",';
		if(this.getAllowedModes()) json += '"allowed_modes"' + ":" + '"' + jsonEscape(this.getAllowedModes())  + '",';
		if(this.getIdleTimeout()) json += '"idle_timeout"' + ":" + '"' + jsonEscape(this.getIdleTimeout())  + '",';
		if(this.getSessionTimeout()) json += '"session_timeout"' + ":" + '"' + jsonEscape(this.getSessionTimeout())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getRoutingpolicymodes()) json += '"routingPolicyMode"' + ":" + URI.toJSONArray(this.getRoutingpolicymodes())  + ',';
		if(this.getRoutingpolicyusers()) json += '"routingPolicyUser"' + ":" + URI.toJSONArray(this.getRoutingpolicyusers())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(RoutingPolicy.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.policyId && !(/^([A-Za-z0-9_.\-]+)$/).test(this.policyId)) { throw new ValidationError(_formprefix + "policy_id", ValidationError.PATTERN_FAILED);}
if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.allowedModes && !Validator.INTEGER.test(this.allowedModes)) { throw new ValidationError(_formprefix + "allowed_modes", ValidationError.PATTERN_FAILED);}
if(this.idleTimeout && !Validator.INTEGER.test(this.idleTimeout)) { throw new ValidationError(_formprefix + "idle_timeout", ValidationError.PATTERN_FAILED);}
if(this.sessionTimeout && !Validator.INTEGER.test(this.sessionTimeout)) { throw new ValidationError(_formprefix + "session_timeout", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.routingpolicymode) { for(i=0; i < this.routingpolicymode.length; i++ ) { this.routingpolicymode[i].validate(); } }
if(this.routingpolicyuser) { for(i=0; i < this.routingpolicyuser.length; i++ ) { this.routingpolicyuser[i].validate(); } }

	return this;
    }
}
RoutingPolicy.path = "routingpolicy";
RoutingPolicy.newBuilder = function() {
    return new RoutingPolicy();
};

RoutingPolicyMode = function() {
    var _formprefix = "";
    
var authType = "0";
this.setAuthType = function(authType) { 
    this.authType = authType;
    return this;
};
this.getAuthType = function() {
    return this.authType;
};
var authMode = "";
this.setAuthMode = function(authMode) { 
    this.authMode = authMode;
    return this;
};
this.getAuthMode = function() {
    return this.authMode;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAuthType(json["auth_type"]);
		this.setAuthMode(json["auth_mode"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAuthType()) json += '"auth_type"' + ":" + '"' + jsonEscape(this.getAuthType())  + '",';
		if(this.getAuthMode()) json += '"auth_mode"' + ":" + '"' + jsonEscape(this.getAuthMode())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(RoutingPolicyMode.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
RoutingPolicyMode.path = "routingpolicymode";
RoutingPolicyMode.newBuilder = function() {
    return new RoutingPolicyMode();
};

UserDevice = function() {
    var _formprefix = "";
    
var deviceTokenApl = "";
this.setDeviceTokenApl = function(deviceTokenApl) { 
    this.deviceTokenApl = deviceTokenApl;
    return this;
};
this.getDeviceTokenApl = function() {
    return this.deviceTokenApl;
};
var deviceToken = "";
this.setDeviceToken = function(deviceToken) { 
    this.deviceToken = deviceToken;
    return this;
};
this.getDeviceToken = function() {
    return this.deviceToken;
};
var deviceName = "";
this.setDeviceName = function(deviceName) { 
    this.deviceName = deviceName;
    return this;
};
this.getDeviceName = function() {
    return this.deviceName;
};
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var apnsMode = "";
this.setApnsMode = function(apnsMode) { 
    this.apnsMode = apnsMode;
    return this;
};
this.getApnsMode = function() {
    return this.apnsMode;
};
var deviceType = "";
this.setDeviceType = function(deviceType) { 
    this.deviceType = deviceType;
    return this;
};
this.getDeviceType = function() {
    return this.deviceType;
};
var deviceOsVersion = "";
this.setDeviceOsVersion = function(deviceOsVersion) { 
    this.deviceOsVersion = deviceOsVersion;
    return this;
};
this.getDeviceOsVersion = function() {
    return this.deviceOsVersion;
};
var deviceInfo = "";
this.setDeviceInfo = function(deviceInfo) { 
    this.deviceInfo = deviceInfo;
    return this;
};
this.getDeviceInfo = function() {
    return this.deviceInfo;
};
var setupMode = "0";
this.setSetupMode = function(setupMode) { 
    this.setupMode = setupMode;
    return this;
};
this.getSetupMode = function() {
    return this.setupMode;
};
var isPrimary = "false";
this.setIsPrimary = function(isPrimary) { 
    this.isPrimary = isPrimary;
    return this;
};
this.getIsPrimary = function() {
    return this.isPrimary;
};
var isVerified = "false";
this.setIsVerified = function(isVerified) { 
    this.isVerified = isVerified;
    return this;
};
this.getIsVerified = function() {
    return this.isVerified;
};
var isLocked = "false";
this.setIsLocked = function(isLocked) { 
    this.isLocked = isLocked;
    return this;
};
this.getIsLocked = function() {
    return this.isLocked;
};
var publicKey = "";
this.setPublicKey = function(publicKey) { 
    this.publicKey = publicKey;
    return this;
};
this.getPublicKey = function() {
    return this.publicKey;
};
var location = "";
this.setLocation = function(location) { 
    this.location = location;
    return this;
};
this.getLocation = function() {
    return this.location;
};
var refreshToken = "";
this.setRefreshToken = function(refreshToken) { 
    this.refreshToken = refreshToken;
    return this;
};
this.getRefreshToken = function() {
    return this.refreshToken;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var appVersion = "";
this.setAppVersion = function(appVersion) { 
    this.appVersion = appVersion;
    return this;
};
this.getAppVersion = function() {
    return this.appVersion;
};
var mode = "";
this.setMode = function(mode) { 
    this.mode = mode;
    return this;
};
this.getMode = function() {
    return this.mode;
};
var prefOption = "";
this.setPrefOption = function(prefOption) { 
    this.prefOption = prefOption;
    return this;
};
this.getPrefOption = function() {
    return this.prefOption;
};
var secretKey = "";
this.setSecretKey = function(secretKey) { 
    this.secretKey = secretKey;
    return this;
};
this.getSecretKey = function() {
    return this.secretKey;
};
var bioType = "";
this.setBioType = function(bioType) { 
    this.bioType = bioType;
    return this;
};
this.getBioType = function() {
    return this.bioType;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDeviceTokenApl(json["device_token_apl"]);
		this.setDeviceToken(json["device_token"]);
		this.setDeviceName(json["device_name"]);
		this.setAppId(json["app_id"]);
		this.setApnsMode(json["apns_mode"]);
		this.setDeviceType(json["device_type"]);
		this.setDeviceOsVersion(json["device_os_version"]);
		this.setDeviceInfo(json["device_info"]);
		this.setSetupMode(json["setup_mode"]);
		this.setIsPrimary(json["is_primary"]);
		this.setIsVerified(json["is_verified"]);
		this.setIsLocked(json["is_locked"]);
		this.setPublicKey(json["public_key"]);
		this.setLocation(json["location"]);
		this.setRefreshToken(json["refresh_token"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setAppVersion(json["app_version"]);
		this.setMode(json["mode"]);
		this.setPrefOption(json["pref_option"]);
		this.setSecretKey(json["secret_key"]);
		this.setBioType(json["bio_type"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDeviceTokenApl()) json += '"device_token_apl"' + ":" + '"' + jsonEscape(this.getDeviceTokenApl())  + '",';
		if(this.getDeviceToken()) json += '"device_token"' + ":" + '"' + jsonEscape(this.getDeviceToken())  + '",';
		if(this.getDeviceName()) json += '"device_name"' + ":" + '"' + jsonEscape(this.getDeviceName())  + '",';
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getApnsMode()) json += '"apns_mode"' + ":" + '"' + jsonEscape(this.getApnsMode())  + '",';
		if(this.getDeviceType()) json += '"device_type"' + ":" + '"' + jsonEscape(this.getDeviceType())  + '",';
		if(this.getDeviceOsVersion()) json += '"device_os_version"' + ":" + '"' + jsonEscape(this.getDeviceOsVersion())  + '",';
		if(this.getDeviceInfo()) json += '"device_info"' + ":" + '"' + jsonEscape(this.getDeviceInfo())  + '",';
		if(this.getSetupMode()) json += '"setup_mode"' + ":" + '"' + jsonEscape(this.getSetupMode())  + '",';
		if(this.getIsPrimary()) json += '"is_primary"' + ":" + '"' + jsonEscape(this.getIsPrimary())  + '",';
		if(this.getIsVerified()) json += '"is_verified"' + ":" + '"' + jsonEscape(this.getIsVerified())  + '",';
		if(this.getIsLocked()) json += '"is_locked"' + ":" + '"' + jsonEscape(this.getIsLocked())  + '",';
		if(this.getPublicKey()) json += '"public_key"' + ":" + '"' + jsonEscape(this.getPublicKey())  + '",';
		if(this.getLocation()) json += '"location"' + ":" + '"' + jsonEscape(this.getLocation())  + '",';
		if(this.getRefreshToken()) json += '"refresh_token"' + ":" + '"' + jsonEscape(this.getRefreshToken())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getAppVersion()) json += '"app_version"' + ":" + '"' + jsonEscape(this.getAppVersion())  + '",';
		if(this.getMode()) json += '"mode"' + ":" + '"' + jsonEscape(this.getMode())  + '",';
		if(this.getPrefOption()) json += '"pref_option"' + ":" + '"' + jsonEscape(this.getPrefOption())  + '",';
		if(this.getSecretKey()) json += '"secret_key"' + ":" + '"' + jsonEscape(this.getSecretKey())  + '",';
		if(this.getBioType()) json += '"bio_type"' + ":" + '"' + jsonEscape(this.getBioType())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserDevice.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.deviceTokenApl && !(/xss:throwerror/).test(this.deviceTokenApl)) { throw new ValidationError(_formprefix + "device_token_apl", ValidationError.PATTERN_FAILED);}
if(this.deviceToken && !(/xss:throwerror/).test(this.deviceToken)) { throw new ValidationError(_formprefix + "device_token", ValidationError.PATTERN_FAILED);}
if(this.deviceName && !(/xss:throwerror/).test(this.deviceName)) { throw new ValidationError(_formprefix + "device_name", ValidationError.PATTERN_FAILED);}
if(this.appId && !(/xss:throwerror/).test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.apnsMode && !(/xss:throwerror/).test(this.apnsMode)) { throw new ValidationError(_formprefix + "apns_mode", ValidationError.PATTERN_FAILED);}
if(this.deviceType && !Validator.INTEGER.test(this.deviceType)) { throw new ValidationError(_formprefix + "device_type", ValidationError.PATTERN_FAILED);}
if(this.deviceOsVersion && !(/^([A-Za-z0-9_.\-]+)$/).test(this.deviceOsVersion)) { throw new ValidationError(_formprefix + "device_os_version", ValidationError.PATTERN_FAILED);}
if(this.deviceInfo && !(/xss:throwerror/).test(this.deviceInfo)) { throw new ValidationError(_formprefix + "device_info", ValidationError.PATTERN_FAILED);}
if(this.setupMode && !Validator.INTEGER.test(this.setupMode)) { throw new ValidationError(_formprefix + "setup_mode", ValidationError.PATTERN_FAILED);}
if(this.isPrimary && !Validator.BOOLEAN.test(this.isPrimary)) { throw new ValidationError(_formprefix + "is_primary", ValidationError.PATTERN_FAILED);}
if(this.isVerified && !Validator.BOOLEAN.test(this.isVerified)) { throw new ValidationError(_formprefix + "is_verified", ValidationError.PATTERN_FAILED);}
if(this.isLocked && !Validator.BOOLEAN.test(this.isLocked)) { throw new ValidationError(_formprefix + "is_locked", ValidationError.PATTERN_FAILED);}
if(this.publicKey && !(/^([A-Za-z0-9_.\-]+)$/).test(this.publicKey)) { throw new ValidationError(_formprefix + "public_key", ValidationError.PATTERN_FAILED);}
if(this.location && !(/^([A-Za-z0-9_.\-]+)$/).test(this.location)) { throw new ValidationError(_formprefix + "location", ValidationError.PATTERN_FAILED);}
if(this.refreshToken && !(/^([A-Za-z0-9_.\-]+)$/).test(this.refreshToken)) { throw new ValidationError(_formprefix + "refresh_token", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.appVersion && !(/^([A-Za-z0-9_.\-]+)$/).test(this.appVersion)) { throw new ValidationError(_formprefix + "app_version", ValidationError.PATTERN_FAILED);}
if(this.mode && !Validator.INTEGER.test(this.mode)) { throw new ValidationError(_formprefix + "mode", ValidationError.PATTERN_FAILED);}
if(this.prefOption && !Validator.INTEGER.test(this.prefOption)) { throw new ValidationError(_formprefix + "pref_option", ValidationError.PATTERN_FAILED);}
if(this.secretKey && !(/dontdisturb/).test(this.secretKey)) { throw new ValidationError(_formprefix + "secret_key", ValidationError.PATTERN_FAILED);}
if(this.bioType && !Validator.INTEGER.test(this.bioType)) { throw new ValidationError(_formprefix + "bio_type", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserDevice.path = "userdevice";
UserDevice.newBuilder = function() {
    return new UserDevice();
};

SAMLReqParam = function() {
    var _formprefix = "";
    
var requestType = "";
this.setRequestType = function(requestType) { 
    this.requestType = requestType;
    return this;
};
this.getRequestType = function() {
    return this.requestType;
};
var paramName = "";
this.setParamName = function(paramName) { 
    this.paramName = paramName;
    return this;
};
this.getParamName = function() {
    return this.paramName;
};
var paramValue = "";
this.setParamValue = function(paramValue) { 
    this.paramValue = paramValue;
    return this;
};
this.getParamValue = function() {
    return this.paramValue;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRequestType(json["request_type"]);
		this.setParamName(json["param_name"]);
		this.setParamValue(json["param_value"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRequestType()) json += '"request_type"' + ":" + '"' + jsonEscape(this.getRequestType())  + '",';
		if(this.getParamName()) json += '"param_name"' + ":" + '"' + jsonEscape(this.getParamName())  + '",';
		if(this.getParamValue()) json += '"param_value"' + ":" + '"' + jsonEscape(this.getParamValue())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SAMLReqParam.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SAMLReqParam.path = "samlreqparam";
SAMLReqParam.newBuilder = function() {
    return new SAMLReqParam();
};

ResourceAuditTemplate = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var ownerZuid = "";
this.setOwnerZuid = function(ownerZuid) { 
    this.ownerZuid = ownerZuid;
    return this;
};
this.getOwnerZuid = function() {
    return this.ownerZuid;
};
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var requestId = "";
this.setRequestId = function(requestId) { 
    this.requestId = requestId;
    return this;
};
this.getRequestId = function() {
    return this.requestId;
};
var resourceType = "";
this.setResourceType = function(resourceType) { 
    this.resourceType = resourceType;
    return this;
};
this.getResourceType = function() {
    return this.resourceType;
};
var operation = "";
this.setOperation = function(operation) { 
    this.operation = operation;
    return this;
};
this.getOperation = function() {
    return this.operation;
};
var oldData = "";
this.setOldData = function(oldData) { 
    this.oldData = oldData;
    return this;
};
this.getOldData = function() {
    return this.oldData;
};
var newData = "";
this.setNewData = function(newData) { 
    this.newData = newData;
    return this;
};
this.getNewData = function() {
    return this.newData;
};
var restUrl = "";
this.setRestUrl = function(restUrl) { 
    this.restUrl = restUrl;
    return this;
};
this.getRestUrl = function() {
    return this.restUrl;
};
var tokenDigest = "";
this.setTokenDigest = function(tokenDigest) { 
    this.tokenDigest = tokenDigest;
    return this;
};
this.getTokenDigest = function() {
    return this.tokenDigest;
};
var threadId = "";
this.setThreadId = function(threadId) { 
    this.threadId = threadId;
    return this;
};
this.getThreadId = function() {
    return this.threadId;
};
var appIp = "";
this.setAppIp = function(appIp) { 
    this.appIp = appIp;
    return this;
};
this.getAppIp = function() {
    return this.appIp;
};
var remoteIp = "";
this.setRemoteIp = function(remoteIp) { 
    this.remoteIp = remoteIp;
    return this;
};
this.getRemoteIp = function() {
    return this.remoteIp;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var auditedTime = "";
this.setAuditedTime = function(auditedTime) { 
    this.auditedTime = auditedTime;
    return this;
};
this.getAuditedTime = function() {
    return this.auditedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setZuid(json["zuid"]);
		this.setOwnerZuid(json["owner_zuid"]);
		this.setAppId(json["app_id"]);
		this.setRequestId(json["request_id"]);
		this.setResourceType(json["resource_type"]);
		this.setOperation(json["operation"]);
		this.setOldData(json["old_data"]);
		this.setNewData(json["new_data"]);
		this.setRestUrl(json["rest_url"]);
		this.setTokenDigest(json["token_digest"]);
		this.setThreadId(json["thread_id"]);
		this.setAppIp(json["app_ip"]);
		this.setRemoteIp(json["remote_ip"]);
		this.setUserAgent(json["user_agent"]);
		this.setAuditedTime(json["audited_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getOwnerZuid()) json += '"owner_zuid"' + ":" + '"' + jsonEscape(this.getOwnerZuid())  + '",';
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getRequestId()) json += '"request_id"' + ":" + '"' + jsonEscape(this.getRequestId())  + '",';
		if(this.getResourceType()) json += '"resource_type"' + ":" + '"' + jsonEscape(this.getResourceType())  + '",';
		if(this.getOperation()) json += '"operation"' + ":" + '"' + jsonEscape(this.getOperation())  + '",';
		if(this.getOldData()) json += '"old_data"' + ":" + '"' + jsonEscape(this.getOldData())  + '",';
		if(this.getNewData()) json += '"new_data"' + ":" + '"' + jsonEscape(this.getNewData())  + '",';
		if(this.getRestUrl()) json += '"rest_url"' + ":" + '"' + jsonEscape(this.getRestUrl())  + '",';
		if(this.getTokenDigest()) json += '"token_digest"' + ":" + '"' + jsonEscape(this.getTokenDigest())  + '",';
		if(this.getThreadId()) json += '"thread_id"' + ":" + '"' + jsonEscape(this.getThreadId())  + '",';
		if(this.getAppIp()) json += '"app_ip"' + ":" + '"' + jsonEscape(this.getAppIp())  + '",';
		if(this.getRemoteIp()) json += '"remote_ip"' + ":" + '"' + jsonEscape(this.getRemoteIp())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getAuditedTime()) json += '"audited_time"' + ":" + '"' + jsonEscape(this.getAuditedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ResourceAuditTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.ownerZuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.ownerZuid)) { throw new ValidationError(_formprefix + "owner_zuid", ValidationError.PATTERN_FAILED);}
if(this.appId && !Validator.INTEGER.test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.requestId && !(/^[a-zA-Z0-9_\-]+$/).test(this.requestId)) { throw new ValidationError(_formprefix + "request_id", ValidationError.PATTERN_FAILED);}
if(this.resourceType && !(/^[a-zA-Z0-9_]+$/).test(this.resourceType)) { throw new ValidationError(_formprefix + "resource_type", ValidationError.PATTERN_FAILED);}
if(this.oldData && !(/dontdisturb/).test(this.oldData)) { throw new ValidationError(_formprefix + "old_data", ValidationError.PATTERN_FAILED);}
if(this.newData && !(/dontdisturb/).test(this.newData)) { throw new ValidationError(_formprefix + "new_data", ValidationError.PATTERN_FAILED);}
if(this.restUrl && !(/dontdisturb/).test(this.restUrl)) { throw new ValidationError(_formprefix + "rest_url", ValidationError.PATTERN_FAILED);}
if(this.tokenDigest && !(/^[a-f0-9]+$/).test(this.tokenDigest)) { throw new ValidationError(_formprefix + "token_digest", ValidationError.PATTERN_FAILED);}
if(this.threadId && !(/dontdisturb/).test(this.threadId)) { throw new ValidationError(_formprefix + "thread_id", ValidationError.PATTERN_FAILED);}
if(this.appIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.appIp)) { throw new ValidationError(_formprefix + "app_ip", ValidationError.PATTERN_FAILED);}
if(this.remoteIp && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.remoteIp)) { throw new ValidationError(_formprefix + "remote_ip", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.auditedTime && !Validator.INTEGER.test(this.auditedTime)) { throw new ValidationError(_formprefix + "audited_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ResourceAuditTemplate.path = "resourceaudittemplate";
ResourceAuditTemplate.newBuilder = function() {
    return new ResourceAuditTemplate();
};

TagItem = function() {
    var _formprefix = "";
    
var resourceId = "";
this.setResourceId = function(resourceId) { 
    this.resourceId = resourceId;
    return this;
};
this.getResourceId = function() {
    return this.resourceId;
};
var resourceType = "";
this.setResourceType = function(resourceType) { 
    this.resourceType = resourceType;
    return this;
};
this.getResourceType = function() {
    return this.resourceType;
};
var resourceUrl = "";
this.setResourceUrl = function(resourceUrl) { 
    this.resourceUrl = resourceUrl;
    return this;
};
this.getResourceUrl = function() {
    return this.resourceUrl;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setResourceId(json["resource_id"]);
		this.setResourceType(json["resource_type"]);
		this.setResourceUrl(json["resource_url"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getResourceId()) json += '"resource_id"' + ":" + '"' + jsonEscape(this.getResourceId())  + '",';
		if(this.getResourceType()) json += '"resource_type"' + ":" + '"' + jsonEscape(this.getResourceType())  + '",';
		if(this.getResourceUrl()) json += '"resource_url"' + ":" + '"' + jsonEscape(this.getResourceUrl())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(TagItem.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.resourceId && !(/^[a-zA-Z0-9_\-]+$/).test(this.resourceId)) { throw new ValidationError(_formprefix + "resource_id", ValidationError.PATTERN_FAILED);}
if(this.resourceType && !(/^[a-zA-Z0-9_]+$/).test(this.resourceType)) { throw new ValidationError(_formprefix + "resource_type", ValidationError.PATTERN_FAILED);}
if(this.resourceUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.resourceUrl)) { throw new ValidationError(_formprefix + "resource_url", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
TagItem.path = "tagitem";
TagItem.newBuilder = function() {
    return new TagItem();
};

CacheDataStore = function() {
    var _formprefix = "";
    
var key = "";
this.setKey = function(key) { 
    this.key = key;
    return this;
};
this.getKey = function() {
    return this.key;
};
var value = "";
this.setValue = function(value) { 
    this.value = value;
    return this;
};
this.getValue = function() {
    return this.value;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setKey(json["key"]);
		this.setValue(json["value"]);
		this.setExpiryTime(json["expiry_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getKey()) json += '"key"' + ":" + '"' + jsonEscape(this.getKey())  + '",';
		if(this.getValue()) json += '"value"' + ":" + '"' + jsonEscape(this.getValue())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(CacheDataStore.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.key && !(/^([A-Za-z0-9_.\-]+)$/).test(this.key)) { throw new ValidationError(_formprefix + "key", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
CacheDataStore.path = "cachedatastore";
CacheDataStore.newBuilder = function() {
    return new CacheDataStore();
};

AppAccountMember = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidType = "User";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var zarid = "";
this.setZarid = function(zarid) { 
    this.zarid = zarid;
    return this;
};
this.getZarid = function() {
    return this.zarid;
};
var isActive = "1";
this.setIsActive = function(isActive) { 
    this.isActive = isActive;
    return this;
};
this.getIsActive = function() {
    return this.isActive;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidType(json["zid_type"]);
		this.setZarid(json["zarid"]);
		this.setIsActive(json["is_active"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getZarid()) json += '"zarid"' + ":" + '"' + jsonEscape(this.getZarid())  + '",';
		if(this.getIsActive()) json += '"is_active"' + ":" + '"' + jsonEscape(this.getIsActive())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccountMember.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.zarid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zarid)) { throw new ValidationError(_formprefix + "zarid", ValidationError.PATTERN_FAILED);}
if(this.isActive && !Validator.INTEGER.test(this.isActive)) { throw new ValidationError(_formprefix + "is_active", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAccountMember.path = "appaccountmember";
AppAccountMember.newBuilder = function() {
    return new AppAccountMember();
};

SAMLSpAppAttribute = function() {
    var _formprefix = "";
    
var attributeNameApl = "";
this.setAttributeNameApl = function(attributeNameApl) { 
    this.attributeNameApl = attributeNameApl;
    return this;
};
this.getAttributeNameApl = function() {
    return this.attributeNameApl;
};
var attributeName = "";
this.setAttributeName = function(attributeName) { 
    this.attributeName = attributeName;
    return this;
};
this.getAttributeName = function() {
    return this.attributeName;
};
var attributeValue = "-1";
this.setAttributeValue = function(attributeValue) { 
    this.attributeValue = attributeValue;
    return this;
};
this.getAttributeValue = function() {
    return this.attributeValue;
};
var customAttributeValue = "";
this.setCustomAttributeValue = function(customAttributeValue) { 
    this.customAttributeValue = customAttributeValue;
    return this;
};
this.getCustomAttributeValue = function() {
    return this.customAttributeValue;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAttributeNameApl(json["attribute_name_apl"]);
		this.setAttributeName(json["attribute_name"]);
		this.setAttributeValue(json["attribute_value"]);
		this.setCustomAttributeValue(json["custom_attribute_value"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAttributeNameApl()) json += '"attribute_name_apl"' + ":" + '"' + jsonEscape(this.getAttributeNameApl())  + '",';
		if(this.getAttributeName()) json += '"attribute_name"' + ":" + '"' + jsonEscape(this.getAttributeName())  + '",';
		if(this.getAttributeValue()) json += '"attribute_value"' + ":" + '"' + jsonEscape(this.getAttributeValue())  + '",';
		if(this.getCustomAttributeValue()) json += '"custom_attribute_value"' + ":" + '"' + jsonEscape(this.getCustomAttributeValue())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SAMLSpAppAttribute.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.attributeNameApl && !(/xss:throwerror/).test(this.attributeNameApl)) { throw new ValidationError(_formprefix + "attribute_name_apl", ValidationError.PATTERN_FAILED);}
if(this.attributeName && !(/xss:throwerror/).test(this.attributeName)) { throw new ValidationError(_formprefix + "attribute_name", ValidationError.PATTERN_FAILED);}
if(this.attributeValue && !Validator.INTEGER.test(this.attributeValue)) { throw new ValidationError(_formprefix + "attribute_value", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SAMLSpAppAttribute.path = "samlspappattribute";
SAMLSpAppAttribute.newBuilder = function() {
    return new SAMLSpAppAttribute();
};

OAuthKeys = function() {
    var _formprefix = "";
    
var keyId = "";
this.setKeyId = function(keyId) { 
    this.keyId = keyId;
    return this;
};
this.getKeyId = function() {
    return this.keyId;
};
var publicKey = "";
this.setPublicKey = function(publicKey) { 
    this.publicKey = publicKey;
    return this;
};
this.getPublicKey = function() {
    return this.publicKey;
};
var privateKey = "";
this.setPrivateKey = function(privateKey) { 
    this.privateKey = privateKey;
    return this;
};
this.getPrivateKey = function() {
    return this.privateKey;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setKeyId(json["key_id"]);
		this.setPublicKey(json["public_key"]);
		this.setPrivateKey(json["private_key"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getKeyId()) json += '"key_id"' + ":" + '"' + jsonEscape(this.getKeyId())  + '",';
		if(this.getPublicKey()) json += '"public_key"' + ":" + '"' + jsonEscape(this.getPublicKey())  + '",';
		if(this.getPrivateKey()) json += '"private_key"' + ":" + '"' + jsonEscape(this.getPrivateKey())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthKeys.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.keyId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.keyId)) { throw new ValidationError(_formprefix + "key_id", ValidationError.PATTERN_FAILED);}
if(this.publicKey && !(/^[a-zA-Z0-9_\-]+$/).test(this.publicKey)) { throw new ValidationError(_formprefix + "public_key", ValidationError.PATTERN_FAILED);}
if(this.privateKey && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.privateKey)) { throw new ValidationError(_formprefix + "private_key", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthKeys.path = "oauthkeys";
OAuthKeys.newBuilder = function() {
    return new OAuthKeys();
};

AuthDomain = function() {
    var _formprefix = "";
    
var domainName = "";
this.setDomainName = function(domainName) { 
    this.domainName = domainName;
    return this;
};
this.getDomainName = function() {
    return this.domainName;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var allowedAuthTypes = "0";
this.setAllowedAuthTypes = function(allowedAuthTypes) { 
    this.allowedAuthTypes = allowedAuthTypes;
    return this;
};
this.getAllowedAuthTypes = function() {
    return this.allowedAuthTypes;
};
var configuredAuthTypes = "0";
this.setConfiguredAuthTypes = function(configuredAuthTypes) { 
    this.configuredAuthTypes = configuredAuthTypes;
    return this;
};
this.getConfiguredAuthTypes = function() {
    return this.configuredAuthTypes;
};
var allowedFailedLoginAttempts = "-1";
this.setAllowedFailedLoginAttempts = function(allowedFailedLoginAttempts) { 
    this.allowedFailedLoginAttempts = allowedFailedLoginAttempts;
    return this;
};
this.getAllowedFailedLoginAttempts = function() {
    return this.allowedFailedLoginAttempts;
};
var lockPeriod = "";
this.setLockPeriod = function(lockPeriod) { 
    this.lockPeriod = lockPeriod;
    return this;
};
this.getLockPeriod = function() {
    return this.lockPeriod;
};
var duration = "";
this.setDuration = function(duration) { 
    this.duration = duration;
    return this;
};
this.getDuration = function() {
    return this.duration;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var authdomainsignup = undefined;
this.setAuthdomainsignup = function(authdomainsignup) { 
    this.authdomainsignup = authdomainsignup;
    return this;
};
this.getAuthdomainsignup = function() {
    return this.authdomainsignup;
};
var authsecret = undefined;
this.setAuthsecrets = function(authsecret) { 
    this.authsecret = authsecret;
    return this;
};
this.getAuthsecrets = function() {
    return this.authsecret;
};
this.addAuthsecret = function(authsecret) { 
 if(!this.authsecret) this.authsecret = new Array(); 
  this.authsecret.push(authsecret); 
 return this;
};

var saml = undefined;
this.setSaml = function(saml) { 
    this.saml = saml;
    return this;
};
this.getSaml = function() {
    return this.saml;
};
var authorizedip = undefined;
this.setAuthorizedips = function(authorizedip) { 
    this.authorizedip = authorizedip;
    return this;
};
this.getAuthorizedips = function() {
    return this.authorizedip;
};
this.addAuthorizedip = function(authorizedip) { 
 if(!this.authorizedip) this.authorizedip = new Array(); 
  this.authorizedip.push(authorizedip); 
 return this;
};

var passwordpolicy = undefined;
this.setPasswordpolicy = function(passwordpolicy) { 
    this.passwordpolicy = passwordpolicy;
    return this;
};
this.getPasswordpolicy = function() {
    return this.passwordpolicy;
};
var userdomain = undefined;
this.setUserdomains = function(userdomain) { 
    this.userdomain = userdomain;
    return this;
};
this.getUserdomains = function() {
    return this.userdomain;
};
this.addUserdomain = function(userdomain) { 
 if(!this.userdomain) this.userdomain = new Array(); 
  this.userdomain.push(userdomain); 
 return this;
};

var authdomainpolicy = undefined;
this.setAuthdomainpolicys = function(authdomainpolicy) { 
    this.authdomainpolicy = authdomainpolicy;
    return this;
};
this.getAuthdomainpolicys = function() {
    return this.authdomainpolicy;
};
this.addAuthdomainpolicy = function(authdomainpolicy) { 
 if(!this.authdomainpolicy) this.authdomainpolicy = new Array(); 
  this.authdomainpolicy.push(authdomainpolicy); 
 return this;
};

var mfapolicy = undefined;
this.setMfapolicy = function(mfapolicy) { 
    this.mfapolicy = mfapolicy;
    return this;
};
this.getMfapolicy = function() {
    return this.mfapolicy;
};
var jwtconfiguration = undefined;
this.setJwtconfiguration = function(jwtconfiguration) { 
    this.jwtconfiguration = jwtconfiguration;
    return this;
};
this.getJwtconfiguration = function() {
    return this.jwtconfiguration;
};
var whitelistedclients = undefined;
this.setWhitelistedclientss = function(whitelistedclients) { 
    this.whitelistedclients = whitelistedclients;
    return this;
};
this.getWhitelistedclientss = function() {
    return this.whitelistedclients;
};
this.addWhitelistedclients = function(whitelistedclients) { 
 if(!this.whitelistedclients) this.whitelistedclients = new Array(); 
  this.whitelistedclients.push(whitelistedclients); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDomainName(json["domain_name"]);
		this.setDisplayName(json["display_name"]);
		this.setAllowedAuthTypes(json["allowed_auth_types"]);
		this.setConfiguredAuthTypes(json["configured_auth_types"]);
		this.setAllowedFailedLoginAttempts(json["allowed_failed_login_attempts"]);
		this.setLockPeriod(json["lock_period"]);
		this.setDuration(json["duration"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setAuthdomainsignup(URI.getResource(json["authDomainSignup"],"authdomainsignup"));
		this.setAuthsecrets(URI.getResourceArray(json["authSecret"],"authsecret"));
		this.setSaml(URI.getResource(json["saml"],"saml"));
		this.setAuthorizedips(URI.getResourceArray(json["authorizedIp"],"authorizedip"));
		this.setPasswordpolicy(URI.getResource(json["passwordPolicy"],"passwordpolicy"));
		this.setUserdomains(URI.getResourceArray(json["userDomain"],"userdomain"));
		this.setAuthdomainpolicys(URI.getResourceArray(json["authDomainPolicy"],"authdomainpolicy"));
		this.setMfapolicy(URI.getResource(json["mFAPolicy"],"mfapolicy"));
		this.setJwtconfiguration(URI.getResource(json["jWTConfiguration"],"jwtconfiguration"));
		this.setWhitelistedclientss(URI.getResourceArray(json["whiteListedClients"],"whitelistedclients"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDomainName()) json += '"domain_name"' + ":" + '"' + jsonEscape(this.getDomainName())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getAllowedAuthTypes()) json += '"allowed_auth_types"' + ":" + '"' + jsonEscape(this.getAllowedAuthTypes())  + '",';
		if(this.getConfiguredAuthTypes()) json += '"configured_auth_types"' + ":" + '"' + jsonEscape(this.getConfiguredAuthTypes())  + '",';
		if(this.getAllowedFailedLoginAttempts()) json += '"allowed_failed_login_attempts"' + ":" + '"' + jsonEscape(this.getAllowedFailedLoginAttempts())  + '",';
		if(this.getLockPeriod()) json += '"lock_period"' + ":" + '"' + jsonEscape(this.getLockPeriod())  + '",';
		if(this.getDuration()) json += '"duration"' + ":" + '"' + jsonEscape(this.getDuration())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getAuthdomainsignup()) json += '"authDomainSignup"' + ":" + this.getAuthdomainsignup().toJSON()  + ',';
		if(this.getAuthsecrets()) json += '"authSecret"' + ":" + URI.toJSONArray(this.getAuthsecrets())  + ',';
		if(this.getSaml()) json += '"saml"' + ":" + this.getSaml().toJSON()  + ',';
		if(this.getAuthorizedips()) json += '"authorizedIp"' + ":" + URI.toJSONArray(this.getAuthorizedips())  + ',';
		if(this.getPasswordpolicy()) json += '"passwordPolicy"' + ":" + this.getPasswordpolicy().toJSON()  + ',';
		if(this.getUserdomains()) json += '"userDomain"' + ":" + URI.toJSONArray(this.getUserdomains())  + ',';
		if(this.getAuthdomainpolicys()) json += '"authDomainPolicy"' + ":" + URI.toJSONArray(this.getAuthdomainpolicys())  + ',';
		if(this.getMfapolicy()) json += '"mFAPolicy"' + ":" + this.getMfapolicy().toJSON()  + ',';
		if(this.getJwtconfiguration()) json += '"jWTConfiguration"' + ":" + this.getJwtconfiguration().toJSON()  + ',';
		if(this.getWhitelistedclientss()) json += '"whiteListedClients"' + ":" + URI.toJSONArray(this.getWhitelistedclientss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AuthDomain.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.domainName && !(/^([\p{L}\p{M}\p{N}]([\p{L}\p{M}\p{N}\-]{0,61}[\p{L}\p{M}\p{N}])?\.)+[\p{L}\p{M}]{2,6}$/).test(this.domainName)) { throw new ValidationError(_formprefix + "domain_name", ValidationError.PATTERN_FAILED);}
if(this.allowedAuthTypes && !Validator.INTEGER.test(this.allowedAuthTypes)) { throw new ValidationError(_formprefix + "allowed_auth_types", ValidationError.PATTERN_FAILED);}
if(this.configuredAuthTypes && !Validator.INTEGER.test(this.configuredAuthTypes)) { throw new ValidationError(_formprefix + "configured_auth_types", ValidationError.PATTERN_FAILED);}
if(this.allowedFailedLoginAttempts && !Validator.INTEGER.test(this.allowedFailedLoginAttempts)) { throw new ValidationError(_formprefix + "allowed_failed_login_attempts", ValidationError.PATTERN_FAILED);}
if(this.lockPeriod && !Validator.INTEGER.test(this.lockPeriod)) { throw new ValidationError(_formprefix + "lock_period", ValidationError.PATTERN_FAILED);}
if(this.duration && !Validator.INTEGER.test(this.duration)) { throw new ValidationError(_formprefix + "duration", ValidationError.PATTERN_FAILED);}
if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.authdomainsignup) { this.authdomainsignup.validate(); }
if(this.authsecret) { for(i=0; i < this.authsecret.length; i++ ) { this.authsecret[i].validate(); } }
if(this.saml) { this.saml.validate(); }
if(this.authorizedip) { for(i=0; i < this.authorizedip.length; i++ ) { this.authorizedip[i].validate(); } }
if(this.passwordpolicy) { this.passwordpolicy.validate(); }
if(this.userdomain) { for(i=0; i < this.userdomain.length; i++ ) { this.userdomain[i].validate(); } }
if(this.authdomainpolicy) { for(i=0; i < this.authdomainpolicy.length; i++ ) { this.authdomainpolicy[i].validate(); } }
if(this.mfapolicy) { this.mfapolicy.validate(); }
if(this.jwtconfiguration) { this.jwtconfiguration.validate(); }
if(this.whitelistedclients) { for(i=0; i < this.whitelistedclients.length; i++ ) { this.whitelistedclients[i].validate(); } }

	return this;
    }
}
AuthDomain.path = "authdomain";
AuthDomain.newBuilder = function() {
    return new AuthDomain();
};

Tag = function() {
    var _formprefix = "";
    
var tagName = "";
this.setTagName = function(tagName) { 
    this.tagName = tagName;
    return this;
};
this.getTagName = function() {
    return this.tagName;
};
var tagType = "";
this.setTagType = function(tagType) { 
    this.tagType = tagType;
    return this;
};
this.getTagType = function() {
    return this.tagType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var tagitem = undefined;
this.setTagitems = function(tagitem) { 
    this.tagitem = tagitem;
    return this;
};
this.getTagitems = function() {
    return this.tagitem;
};
this.addTagitem = function(tagitem) { 
 if(!this.tagitem) this.tagitem = new Array(); 
  this.tagitem.push(tagitem); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTagName(json["tag_name"]);
		this.setTagType(json["tag_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setTagitems(URI.getResourceArray(json["tagItem"],"tagitem"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTagName()) json += '"tag_name"' + ":" + '"' + jsonEscape(this.getTagName())  + '",';
		if(this.getTagType()) json += '"tag_type"' + ":" + '"' + jsonEscape(this.getTagType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getTagitems()) json += '"tagItem"' + ":" + URI.toJSONArray(this.getTagitems())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Tag.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.tagName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.tagName)) { throw new ValidationError(_formprefix + "tag_name", ValidationError.PATTERN_FAILED);}
if(this.tagType && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.tagType)) { throw new ValidationError(_formprefix + "tag_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.tagitem) { for(i=0; i < this.tagitem.length; i++ ) { this.tagitem[i].validate(); } }

	return this;
    }
}
Tag.path = "tag";
Tag.newBuilder = function() {
    return new Tag();
};

UserSecretKey = function() {
    var _formprefix = "";
    
var secretKey = "";
this.setSecretKey = function(secretKey) { 
    this.secretKey = secretKey;
    return this;
};
this.getSecretKey = function() {
    return this.secretKey;
};
var tokenId = "";
this.setTokenId = function(tokenId) { 
    this.tokenId = tokenId;
    return this;
};
this.getTokenId = function() {
    return this.tokenId;
};
var keyLabel = "";
this.setKeyLabel = function(keyLabel) { 
    this.keyLabel = keyLabel;
    return this;
};
this.getKeyLabel = function() {
    return this.keyLabel;
};
var type = "Smart Phone";
this.setType = function(type) { 
    this.type = type;
    return this;
};
this.getType = function() {
    return this.type;
};
var timePeriod = "30";
this.setTimePeriod = function(timePeriod) { 
    this.timePeriod = timePeriod;
    return this;
};
this.getTimePeriod = function() {
    return this.timePeriod;
};
var codeSize = "6";
this.setCodeSize = function(codeSize) { 
    this.codeSize = codeSize;
    return this;
};
this.getCodeSize = function() {
    return this.codeSize;
};
var isVerified = "false";
this.setIsVerified = function(isVerified) { 
    this.isVerified = isVerified;
    return this;
};
this.getIsVerified = function() {
    return this.isVerified;
};
var isPrimary = "false";
this.setIsPrimary = function(isPrimary) { 
    this.isPrimary = isPrimary;
    return this;
};
this.getIsPrimary = function() {
    return this.isPrimary;
};
var keyType = "0";
this.setKeyType = function(keyType) { 
    this.keyType = keyType;
    return this;
};
this.getKeyType = function() {
    return this.keyType;
};
var hmacAlgorithm = "SHA1";
this.setHmacAlgorithm = function(hmacAlgorithm) { 
    this.hmacAlgorithm = hmacAlgorithm;
    return this;
};
this.getHmacAlgorithm = function() {
    return this.hmacAlgorithm;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setSecretKey(json["secret_key"]);
		this.setTokenId(json["token_id"]);
		this.setKeyLabel(json["key_label"]);
		this.setType(json["type"]);
		this.setTimePeriod(json["time_period"]);
		this.setCodeSize(json["code_size"]);
		this.setIsVerified(json["is_verified"]);
		this.setIsPrimary(json["is_primary"]);
		this.setKeyType(json["key_type"]);
		this.setHmacAlgorithm(json["hmac_algorithm"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getSecretKey()) json += '"secret_key"' + ":" + '"' + jsonEscape(this.getSecretKey())  + '",';
		if(this.getTokenId()) json += '"token_id"' + ":" + '"' + jsonEscape(this.getTokenId())  + '",';
		if(this.getKeyLabel()) json += '"key_label"' + ":" + '"' + jsonEscape(this.getKeyLabel())  + '",';
		if(this.getType()) json += '"type"' + ":" + '"' + jsonEscape(this.getType())  + '",';
		if(this.getTimePeriod()) json += '"time_period"' + ":" + '"' + jsonEscape(this.getTimePeriod())  + '",';
		if(this.getCodeSize()) json += '"code_size"' + ":" + '"' + jsonEscape(this.getCodeSize())  + '",';
		if(this.getIsVerified()) json += '"is_verified"' + ":" + '"' + jsonEscape(this.getIsVerified())  + '",';
		if(this.getIsPrimary()) json += '"is_primary"' + ":" + '"' + jsonEscape(this.getIsPrimary())  + '",';
		if(this.getKeyType()) json += '"key_type"' + ":" + '"' + jsonEscape(this.getKeyType())  + '",';
		if(this.getHmacAlgorithm()) json += '"hmac_algorithm"' + ":" + '"' + jsonEscape(this.getHmacAlgorithm())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserSecretKey.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.secretKey && !(/dontdisturb/).test(this.secretKey)) { throw new ValidationError(_formprefix + "secret_key", ValidationError.PATTERN_FAILED);}
if(this.tokenId && !Validator.INTEGER.test(this.tokenId)) { throw new ValidationError(_formprefix + "token_id", ValidationError.PATTERN_FAILED);}
if(this.keyLabel && !(/xss:throwerror/).test(this.keyLabel)) { throw new ValidationError(_formprefix + "key_label", ValidationError.PATTERN_FAILED);}
if(this.timePeriod && !Validator.INTEGER.test(this.timePeriod)) { throw new ValidationError(_formprefix + "time_period", ValidationError.PATTERN_FAILED);}
if(this.codeSize && !Validator.INTEGER.test(this.codeSize)) { throw new ValidationError(_formprefix + "code_size", ValidationError.PATTERN_FAILED);}
if(this.isVerified && !Validator.BOOLEAN.test(this.isVerified)) { throw new ValidationError(_formprefix + "is_verified", ValidationError.PATTERN_FAILED);}
if(this.isPrimary && !Validator.BOOLEAN.test(this.isPrimary)) { throw new ValidationError(_formprefix + "is_primary", ValidationError.PATTERN_FAILED);}
if(this.keyType && !Validator.INTEGER.test(this.keyType)) { throw new ValidationError(_formprefix + "key_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserSecretKey.path = "usersecretkey";
UserSecretKey.newBuilder = function() {
    return new UserSecretKey();
};

Policy = function() {
    var _formprefix = "";
    
var policyKey = "";
this.setPolicyKey = function(policyKey) { 
    this.policyKey = policyKey;
    return this;
};
this.getPolicyKey = function() {
    return this.policyKey;
};
var policyValue = "";
this.setPolicyValue = function(policyValue) { 
    this.policyValue = policyValue;
    return this;
};
this.getPolicyValue = function() {
    return this.policyValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPolicyKey(json["policy_key"]);
		this.setPolicyValue(json["policy_value"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPolicyKey()) json += '"policy_key"' + ":" + '"' + jsonEscape(this.getPolicyKey())  + '",';
		if(this.getPolicyValue()) json += '"policy_value"' + ":" + '"' + jsonEscape(this.getPolicyValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Policy.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.policyKey && !(/^([A-Za-z0-9_.\-]+)$/).test(this.policyKey)) { throw new ValidationError(_formprefix + "policy_key", ValidationError.PATTERN_FAILED);}
if(this.policyValue && !(/^([A-Za-z0-9_.\-]+)$/).test(this.policyValue)) { throw new ValidationError(_formprefix + "policy_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Policy.path = "policy";
Policy.newBuilder = function() {
    return new Policy();
};

ServiceOrgConfiguration = function() {
    var _formprefix = "";
    
var configName = "";
this.setConfigName = function(configName) { 
    this.configName = configName;
    return this;
};
this.getConfigName = function() {
    return this.configName;
};
var configValue = "";
this.setConfigValue = function(configValue) { 
    this.configValue = configValue;
    return this;
};
this.getConfigValue = function() {
    return this.configValue;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setConfigName(json["config_name"]);
		this.setConfigValue(json["config_value"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getConfigName()) json += '"config_name"' + ":" + '"' + jsonEscape(this.getConfigName())  + '",';
		if(this.getConfigValue()) json += '"config_value"' + ":" + '"' + jsonEscape(this.getConfigValue())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgConfiguration.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.configName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.configName)) { throw new ValidationError(_formprefix + "config_name", ValidationError.PATTERN_FAILED);}
if(this.configValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.configValue)) { throw new ValidationError(_formprefix + "config_value", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgConfiguration.path = "serviceorgconfiguration";
ServiceOrgConfiguration.newBuilder = function() {
    return new ServiceOrgConfiguration();
};

ConditionalAccess = function() {
    var _formprefix = "";
    
var conditionType = "1";
this.setConditionType = function(conditionType) { 
    this.conditionType = conditionType;
    return this;
};
this.getConditionType = function() {
    return this.conditionType;
};
var conditionCriteria = "1";
this.setConditionCriteria = function(conditionCriteria) { 
    this.conditionCriteria = conditionCriteria;
    return this;
};
this.getConditionCriteria = function() {
    return this.conditionCriteria;
};
var conditionValue = "";
this.setConditionValue = function(conditionValue) { 
    this.conditionValue = conditionValue;
    return this;
};
this.getConditionValue = function() {
    return this.conditionValue;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setConditionType(json["condition_type"]);
		this.setConditionCriteria(json["condition_criteria"]);
		this.setConditionValue(json["condition_value"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getConditionType()) json += '"condition_type"' + ":" + '"' + jsonEscape(this.getConditionType())  + '",';
		if(this.getConditionCriteria()) json += '"condition_criteria"' + ":" + '"' + jsonEscape(this.getConditionCriteria())  + '",';
		if(this.getConditionValue()) json += '"condition_value"' + ":" + '"' + jsonEscape(this.getConditionValue())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ConditionalAccess.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ConditionalAccess.path = "conditionalaccess";
ConditionalAccess.newBuilder = function() {
    return new ConditionalAccess();
};

MailTemplateProps = function() {
    var _formprefix = "";
    
var subject = "";
this.setSubject = function(subject) { 
    this.subject = subject;
    return this;
};
this.getSubject = function() {
    return this.subject;
};
var fromAddress = "";
this.setFromAddress = function(fromAddress) { 
    this.fromAddress = fromAddress;
    return this;
};
this.getFromAddress = function() {
    return this.fromAddress;
};
var replyToAddress = "";
this.setReplyToAddress = function(replyToAddress) { 
    this.replyToAddress = replyToAddress;
    return this;
};
this.getReplyToAddress = function() {
    return this.replyToAddress;
};
var plainText = "";
this.setPlainText = function(plainText) { 
    this.plainText = plainText;
    return this;
};
this.getPlainText = function() {
    return this.plainText;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setSubject(json["subject"]);
		this.setFromAddress(json["from_address"]);
		this.setReplyToAddress(json["reply_to_address"]);
		this.setPlainText(json["plain_text"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getSubject()) json += '"subject"' + ":" + '"' + jsonEscape(this.getSubject())  + '",';
		if(this.getFromAddress()) json += '"from_address"' + ":" + '"' + jsonEscape(this.getFromAddress())  + '",';
		if(this.getReplyToAddress()) json += '"reply_to_address"' + ":" + '"' + jsonEscape(this.getReplyToAddress())  + '",';
		if(this.getPlainText()) json += '"plain_text"' + ":" + '"' + jsonEscape(this.getPlainText())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MailTemplateProps.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.subject && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.subject)) { throw new ValidationError(_formprefix + "subject", ValidationError.PATTERN_FAILED);}
if(this.fromAddress && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.fromAddress)) { throw new ValidationError(_formprefix + "from_address", ValidationError.PATTERN_FAILED);}
if(this.replyToAddress && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.replyToAddress)) { throw new ValidationError(_formprefix + "reply_to_address", ValidationError.PATTERN_FAILED);}
if(this.plainText && !(/dontdisturb/).test(this.plainText)) { throw new ValidationError(_formprefix + "plain_text", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
MailTemplateProps.path = "mailtemplateprops";
MailTemplateProps.newBuilder = function() {
    return new MailTemplateProps();
};

SystemOpenId = function() {
    var _formprefix = "";
    
var openIdApl = "";
this.setOpenIdApl = function(openIdApl) { 
    this.openIdApl = openIdApl;
    return this;
};
this.getOpenIdApl = function() {
    return this.openIdApl;
};
var openId = "";
this.setOpenId = function(openId) { 
    this.openId = openId;
    return this;
};
this.getOpenId = function() {
    return this.openId;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var idp = "0";
this.setIdp = function(idp) { 
    this.idp = idp;
    return this;
};
this.getIdp = function() {
    return this.idp;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setOpenIdApl(json["open_id_apl"]);
		this.setOpenId(json["open_id"]);
		this.setZuid(json["zuid"]);
		this.setEmailId(json["email_id"]);
		this.setIdp(json["idp"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getOpenIdApl()) json += '"open_id_apl"' + ":" + '"' + jsonEscape(this.getOpenIdApl())  + '",';
		if(this.getOpenId()) json += '"open_id"' + ":" + '"' + jsonEscape(this.getOpenId())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getIdp()) json += '"idp"' + ":" + '"' + jsonEscape(this.getIdp())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SystemOpenId.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.openIdApl && !(/xss:throwerror/).test(this.openIdApl)) { throw new ValidationError(_formprefix + "open_id_apl", ValidationError.PATTERN_FAILED);}
if(this.openId && !(/^([A-Za-z0-9_.\-]+)$/).test(this.openId)) { throw new ValidationError(_formprefix + "open_id", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.idp && !Validator.INTEGER.test(this.idp)) { throw new ValidationError(_formprefix + "idp", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SystemOpenId.path = "systemopenid";
SystemOpenId.newBuilder = function() {
    return new SystemOpenId();
};

OAuthAccessGrantScopes = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var allowedOperations = "";
this.setAllowedOperations = function(allowedOperations) { 
    this.allowedOperations = allowedOperations;
    return this;
};
this.getAllowedOperations = function() {
    return this.allowedOperations;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setAllowedOperations(json["allowed_operations"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getAllowedOperations()) json += '"allowed_operations"' + ":" + '"' + jsonEscape(this.getAllowedOperations())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthAccessGrantScopes.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.allowedOperations && !Validator.INTEGER.test(this.allowedOperations)) { throw new ValidationError(_formprefix + "allowed_operations", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthAccessGrantScopes.path = "oauthaccessgrantscopes";
OAuthAccessGrantScopes.newBuilder = function() {
    return new OAuthAccessGrantScopes();
};

ZAAID = function() {
    var _formprefix = "";
    
var zaaid = "";
this.setZaaid = function(zaaid) { 
    this.zaaid = zaaid;
    return this;
};
this.getZaaid = function() {
    return this.zaaid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZaaid(json["zaaid"]);
		this.setZaid(json["zaid"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZaaid()) json += '"zaaid"' + ":" + '"' + jsonEscape(this.getZaaid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ZAAID.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaaid)) { throw new ValidationError(_formprefix + "zaaid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ZAAID.path = "zaaid";
ZAAID.newBuilder = function() {
    return new ZAAID();
};

AccountKYC = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var organisationName = "";
this.setOrganisationName = function(organisationName) { 
    this.organisationName = organisationName;
    return this;
};
this.getOrganisationName = function() {
    return this.organisationName;
};
var industry = "";
this.setIndustry = function(industry) { 
    this.industry = industry;
    return this;
};
this.getIndustry = function() {
    return this.industry;
};
var employeeCount = "-1";
this.setEmployeeCount = function(employeeCount) { 
    this.employeeCount = employeeCount;
    return this;
};
this.getEmployeeCount = function() {
    return this.employeeCount;
};
var orgContactEmailid = "";
this.setOrgContactEmailid = function(orgContactEmailid) { 
    this.orgContactEmailid = orgContactEmailid;
    return this;
};
this.getOrgContactEmailid = function() {
    return this.orgContactEmailid;
};
var firstName = "";
this.setFirstName = function(firstName) { 
    this.firstName = firstName;
    return this;
};
this.getFirstName = function() {
    return this.firstName;
};
var lastName = "";
this.setLastName = function(lastName) { 
    this.lastName = lastName;
    return this;
};
this.getLastName = function() {
    return this.lastName;
};
var mobileNumber = "";
this.setMobileNumber = function(mobileNumber) { 
    this.mobileNumber = mobileNumber;
    return this;
};
this.getMobileNumber = function() {
    return this.mobileNumber;
};
var designation = "";
this.setDesignation = function(designation) { 
    this.designation = designation;
    return this;
};
this.getDesignation = function() {
    return this.designation;
};
var accountkyccontact = undefined;
this.setAccountkyccontacts = function(accountkyccontact) { 
    this.accountkyccontact = accountkyccontact;
    return this;
};
this.getAccountkyccontacts = function() {
    return this.accountkyccontact;
};
this.addAccountkyccontact = function(accountkyccontact) { 
 if(!this.accountkyccontact) this.accountkyccontact = new Array(); 
  this.accountkyccontact.push(accountkyccontact); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setOrganisationName(json["organisation_name"]);
		this.setIndustry(json["industry"]);
		this.setEmployeeCount(json["employee_count"]);
		this.setOrgContactEmailid(json["org_contact_emailid"]);
		this.setFirstName(json["first_name"]);
		this.setLastName(json["last_name"]);
		this.setMobileNumber(json["mobile_number"]);
		this.setDesignation(json["designation"]);
		this.setAccountkyccontacts(URI.getResourceArray(json["accountKYCContact"],"accountkyccontact"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getOrganisationName()) json += '"organisation_name"' + ":" + '"' + jsonEscape(this.getOrganisationName())  + '",';
		if(this.getIndustry()) json += '"industry"' + ":" + '"' + jsonEscape(this.getIndustry())  + '",';
		if(this.getEmployeeCount()) json += '"employee_count"' + ":" + '"' + jsonEscape(this.getEmployeeCount())  + '",';
		if(this.getOrgContactEmailid()) json += '"org_contact_emailid"' + ":" + '"' + jsonEscape(this.getOrgContactEmailid())  + '",';
		if(this.getFirstName()) json += '"first_name"' + ":" + '"' + jsonEscape(this.getFirstName())  + '",';
		if(this.getLastName()) json += '"last_name"' + ":" + '"' + jsonEscape(this.getLastName())  + '",';
		if(this.getMobileNumber()) json += '"mobile_number"' + ":" + '"' + jsonEscape(this.getMobileNumber())  + '",';
		if(this.getDesignation()) json += '"designation"' + ":" + '"' + jsonEscape(this.getDesignation())  + '",';
		if(this.getAccountkyccontacts()) json += '"accountKYCContact"' + ":" + URI.toJSONArray(this.getAccountkyccontacts())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountKYC.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.organisationName && !(/xss:throwerror/).test(this.organisationName)) { throw new ValidationError(_formprefix + "organisation_name", ValidationError.PATTERN_FAILED);}
if(this.industry && !(/xss:throwerror/).test(this.industry)) { throw new ValidationError(_formprefix + "industry", ValidationError.PATTERN_FAILED);}
if(this.employeeCount && !Validator.INTEGER.test(this.employeeCount)) { throw new ValidationError(_formprefix + "employee_count", ValidationError.PATTERN_FAILED);}
if(this.orgContactEmailid && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.orgContactEmailid)) { throw new ValidationError(_formprefix + "org_contact_emailid", ValidationError.PATTERN_FAILED);}
if(this.firstName && !(/xss:throwerror/).test(this.firstName)) { throw new ValidationError(_formprefix + "first_name", ValidationError.PATTERN_FAILED);}
if(this.lastName && !(/xss:throwerror/).test(this.lastName)) { throw new ValidationError(_formprefix + "last_name", ValidationError.PATTERN_FAILED);}
if(this.mobileNumber && !(/xss:throwerror/).test(this.mobileNumber)) { throw new ValidationError(_formprefix + "mobile_number", ValidationError.PATTERN_FAILED);}
if(this.designation && !(/xss:throwerror/).test(this.designation)) { throw new ValidationError(_formprefix + "designation", ValidationError.PATTERN_FAILED);}
if(this.accountkyccontact) { for(i=0; i < this.accountkyccontact.length; i++ ) { this.accountkyccontact[i].validate(); } }

	return this;
    }
}
AccountKYC.path = "accountkyc";
AccountKYC.newBuilder = function() {
    return new AccountKYC();
};

TFAAuditTemplate = function() {
    var _formprefix = "";
    
var tfaauditId = "";
this.setTfaauditId = function(tfaauditId) { 
    this.tfaauditId = tfaauditId;
    return this;
};
this.getTfaauditId = function() {
    return this.tfaauditId;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var operationId = "1";
this.setOperationId = function(operationId) { 
    this.operationId = operationId;
    return this;
};
this.getOperationId = function() {
    return this.operationId;
};
var status = "";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var errors = "";
this.setErrors = function(errors) { 
    this.errors = errors;
    return this;
};
this.getErrors = function() {
    return this.errors;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var startedTime = "";
this.setStartedTime = function(startedTime) { 
    this.startedTime = startedTime;
    return this;
};
this.getStartedTime = function() {
    return this.startedTime;
};
var alteredTime = "";
this.setAlteredTime = function(alteredTime) { 
    this.alteredTime = alteredTime;
    return this;
};
this.getAlteredTime = function() {
    return this.alteredTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTfaauditId(json["tfaaudit_id"]);
		this.setZaid(json["zaid"]);
		this.setZid(json["zid"]);
		this.setAppId(json["app_id"]);
		this.setOperationId(json["operation_id"]);
		this.setStatus(json["status"]);
		this.setErrors(json["errors"]);
		this.setUserAgent(json["user_agent"]);
		this.setReferrer(json["referrer"]);
		this.setStartedTime(json["started_time"]);
		this.setAlteredTime(json["altered_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTfaauditId()) json += '"tfaaudit_id"' + ":" + '"' + jsonEscape(this.getTfaauditId())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getOperationId()) json += '"operation_id"' + ":" + '"' + jsonEscape(this.getOperationId())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getErrors()) json += '"errors"' + ":" + '"' + jsonEscape(this.getErrors())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getStartedTime()) json += '"started_time"' + ":" + '"' + jsonEscape(this.getStartedTime())  + '",';
		if(this.getAlteredTime()) json += '"altered_time"' + ":" + '"' + jsonEscape(this.getAlteredTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(TFAAuditTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.tfaauditId && !(/dontdisturb/).test(this.tfaauditId)) { throw new ValidationError(_formprefix + "tfaaudit_id", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.appId && !Validator.INTEGER.test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.operationId && !Validator.INTEGER.test(this.operationId)) { throw new ValidationError(_formprefix + "operation_id", ValidationError.PATTERN_FAILED);}
if(this.status && !(/dontdisturb/).test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.errors && !(/dontdisturb/).test(this.errors)) { throw new ValidationError(_formprefix + "errors", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.startedTime && !Validator.INTEGER.test(this.startedTime)) { throw new ValidationError(_formprefix + "started_time", ValidationError.PATTERN_FAILED);}
if(this.alteredTime && !Validator.INTEGER.test(this.alteredTime)) { throw new ValidationError(_formprefix + "altered_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
TFAAuditTemplate.path = "tfaaudittemplate";
TFAAuditTemplate.newBuilder = function() {
    return new TFAAuditTemplate();
};

Template = function() {
    var _formprefix = "";
    
var templateName = "";
this.setTemplateName = function(templateName) { 
    this.templateName = templateName;
    return this;
};
this.getTemplateName = function() {
    return this.templateName;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var subject = "";
this.setSubject = function(subject) { 
    this.subject = subject;
    return this;
};
this.getSubject = function() {
    return this.subject;
};
var fromAddress = "";
this.setFromAddress = function(fromAddress) { 
    this.fromAddress = fromAddress;
    return this;
};
this.getFromAddress = function() {
    return this.fromAddress;
};
var replyToAddress = "";
this.setReplyToAddress = function(replyToAddress) { 
    this.replyToAddress = replyToAddress;
    return this;
};
this.getReplyToAddress = function() {
    return this.replyToAddress;
};
var templateHtml = "";
this.setTemplateHtml = function(templateHtml) { 
    this.templateHtml = templateHtml;
    return this;
};
this.getTemplateHtml = function() {
    return this.templateHtml;
};
var plainText = "";
this.setPlainText = function(plainText) { 
    this.plainText = plainText;
    return this;
};
this.getPlainText = function() {
    return this.plainText;
};
var overridable = "true";
this.setOverridable = function(overridable) { 
    this.overridable = overridable;
    return this;
};
this.getOverridable = function() {
    return this.overridable;
};
var templateType = "0";
this.setTemplateType = function(templateType) { 
    this.templateType = templateType;
    return this;
};
this.getTemplateType = function() {
    return this.templateType;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var templateimage = undefined;
this.setTemplateimages = function(templateimage) { 
    this.templateimage = templateimage;
    return this;
};
this.getTemplateimages = function() {
    return this.templateimage;
};
this.addTemplateimage = function(templateimage) { 
 if(!this.templateimage) this.templateimage = new Array(); 
  this.templateimage.push(templateimage); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTemplateName(json["template_name"]);
		this.setDescription(json["description"]);
		this.setSubject(json["subject"]);
		this.setFromAddress(json["from_address"]);
		this.setReplyToAddress(json["reply_to_address"]);
		this.setTemplateHtml(json["template_html"]);
		this.setPlainText(json["plain_text"]);
		this.setOverridable(json["overridable"]);
		this.setTemplateType(json["template_type"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setTemplateimages(URI.getResourceArray(json["templateImage"],"templateimage"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTemplateName()) json += '"template_name"' + ":" + '"' + jsonEscape(this.getTemplateName())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getSubject()) json += '"subject"' + ":" + '"' + jsonEscape(this.getSubject())  + '",';
		if(this.getFromAddress()) json += '"from_address"' + ":" + '"' + jsonEscape(this.getFromAddress())  + '",';
		if(this.getReplyToAddress()) json += '"reply_to_address"' + ":" + '"' + jsonEscape(this.getReplyToAddress())  + '",';
		if(this.getTemplateHtml()) json += '"template_html"' + ":" + '"' + jsonEscape(this.getTemplateHtml())  + '",';
		if(this.getPlainText()) json += '"plain_text"' + ":" + '"' + jsonEscape(this.getPlainText())  + '",';
		if(this.getOverridable()) json += '"overridable"' + ":" + '"' + jsonEscape(this.getOverridable())  + '",';
		if(this.getTemplateType()) json += '"template_type"' + ":" + '"' + jsonEscape(this.getTemplateType())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getTemplateimages()) json += '"templateImage"' + ":" + URI.toJSONArray(this.getTemplateimages())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Template.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.templateName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.templateName)) { throw new ValidationError(_formprefix + "template_name", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.subject && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.subject)) { throw new ValidationError(_formprefix + "subject", ValidationError.PATTERN_FAILED);}
if(this.fromAddress && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.fromAddress)) { throw new ValidationError(_formprefix + "from_address", ValidationError.PATTERN_FAILED);}
if(this.replyToAddress && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.replyToAddress)) { throw new ValidationError(_formprefix + "reply_to_address", ValidationError.PATTERN_FAILED);}
if(this.templateHtml && !(/dontdisturb/).test(this.templateHtml)) { throw new ValidationError(_formprefix + "template_html", ValidationError.PATTERN_FAILED);}
if(this.plainText && !(/dontdisturb/).test(this.plainText)) { throw new ValidationError(_formprefix + "plain_text", ValidationError.PATTERN_FAILED);}
if(this.overridable && !Validator.BOOLEAN.test(this.overridable)) { throw new ValidationError(_formprefix + "overridable", ValidationError.PATTERN_FAILED);}
if(this.templateType && !Validator.INTEGER.test(this.templateType)) { throw new ValidationError(_formprefix + "template_type", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.templateimage) { for(i=0; i < this.templateimage.length; i++ ) { this.templateimage[i].validate(); } }

	return this;
    }
}
Template.path = "template";
Template.newBuilder = function() {
    return new Template();
};

UserOAuthApps = function() {
    var _formprefix = "";
    
var appClientZid = "";
this.setAppClientZid = function(appClientZid) { 
    this.appClientZid = appClientZid;
    return this;
};
this.getAppClientZid = function() {
    return this.appClientZid;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppClientZid(json["app_client_zid"]);
		this.setIpAddress(json["ip_address"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppClientZid()) json += '"app_client_zid"' + ":" + '"' + jsonEscape(this.getAppClientZid())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserOAuthApps.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.appClientZid && !(/^[a-zA-Z0-9_\-]+$/).test(this.appClientZid)) { throw new ValidationError(_formprefix + "app_client_zid", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserOAuthApps.path = "useroauthapps";
UserOAuthApps.newBuilder = function() {
    return new UserOAuthApps();
};

OAuthMobileUserDevice = function() {
    var _formprefix = "";
    
var deviceId = "";
this.setDeviceId = function(deviceId) { 
    this.deviceId = deviceId;
    return this;
};
this.getDeviceId = function() {
    return this.deviceId;
};
var deviceName = "";
this.setDeviceName = function(deviceName) { 
    this.deviceName = deviceName;
    return this;
};
this.getDeviceName = function() {
    return this.deviceName;
};
var deviceModel = "";
this.setDeviceModel = function(deviceModel) { 
    this.deviceModel = deviceModel;
    return this;
};
this.getDeviceModel = function() {
    return this.deviceModel;
};
var deviceType = "0";
this.setDeviceType = function(deviceType) { 
    this.deviceType = deviceType;
    return this;
};
this.getDeviceType = function() {
    return this.deviceType;
};
var mdmToken = "";
this.setMdmToken = function(mdmToken) { 
    this.mdmToken = mdmToken;
    return this;
};
this.getMdmToken = function() {
    return this.mdmToken;
};
var oauthmobileuserdeviceclients = undefined;
this.setOauthmobileuserdeviceclientss = function(oauthmobileuserdeviceclients) { 
    this.oauthmobileuserdeviceclients = oauthmobileuserdeviceclients;
    return this;
};
this.getOauthmobileuserdeviceclientss = function() {
    return this.oauthmobileuserdeviceclients;
};
this.addOauthmobileuserdeviceclients = function(oauthmobileuserdeviceclients) { 
 if(!this.oauthmobileuserdeviceclients) this.oauthmobileuserdeviceclients = new Array(); 
  this.oauthmobileuserdeviceclients.push(oauthmobileuserdeviceclients); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDeviceId(json["device_id"]);
		this.setDeviceName(json["device_name"]);
		this.setDeviceModel(json["device_model"]);
		this.setDeviceType(json["device_type"]);
		this.setMdmToken(json["mdm_token"]);
		this.setOauthmobileuserdeviceclientss(URI.getResourceArray(json["oAuthMobileUserDeviceClients"],"oauthmobileuserdeviceclients"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDeviceId()) json += '"device_id"' + ":" + '"' + jsonEscape(this.getDeviceId())  + '",';
		if(this.getDeviceName()) json += '"device_name"' + ":" + '"' + jsonEscape(this.getDeviceName())  + '",';
		if(this.getDeviceModel()) json += '"device_model"' + ":" + '"' + jsonEscape(this.getDeviceModel())  + '",';
		if(this.getDeviceType()) json += '"device_type"' + ":" + '"' + jsonEscape(this.getDeviceType())  + '",';
		if(this.getMdmToken()) json += '"mdm_token"' + ":" + '"' + jsonEscape(this.getMdmToken())  + '",';
		if(this.getOauthmobileuserdeviceclientss()) json += '"oAuthMobileUserDeviceClients"' + ":" + URI.toJSONArray(this.getOauthmobileuserdeviceclientss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthMobileUserDevice.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.deviceId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.deviceId)) { throw new ValidationError(_formprefix + "device_id", ValidationError.PATTERN_FAILED);}
if(this.deviceName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.deviceName)) { throw new ValidationError(_formprefix + "device_name", ValidationError.PATTERN_FAILED);}
if(this.deviceModel && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.deviceModel)) { throw new ValidationError(_formprefix + "device_model", ValidationError.PATTERN_FAILED);}
if(this.deviceType && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.deviceType)) { throw new ValidationError(_formprefix + "device_type", ValidationError.PATTERN_FAILED);}
if(this.mdmToken && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.mdmToken)) { throw new ValidationError(_formprefix + "mdm_token", ValidationError.PATTERN_FAILED);}
if(this.oauthmobileuserdeviceclients) { for(i=0; i < this.oauthmobileuserdeviceclients.length; i++ ) { this.oauthmobileuserdeviceclients[i].validate(); } }

	return this;
    }
}
OAuthMobileUserDevice.path = "oauthmobileuserdevice";
OAuthMobileUserDevice.newBuilder = function() {
    return new OAuthMobileUserDevice();
};

WhiteListedClients = function() {
    var _formprefix = "";
    
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
var isWhitelisted = "0";
this.setIsWhitelisted = function(isWhitelisted) { 
    this.isWhitelisted = isWhitelisted;
    return this;
};
this.getIsWhitelisted = function() {
    return this.isWhitelisted;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClientZid(json["client_zid"]);
		this.setIsWhitelisted(json["is_whitelisted"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';
		if(this.getIsWhitelisted()) json += '"is_whitelisted"' + ":" + '"' + jsonEscape(this.getIsWhitelisted())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(WhiteListedClients.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.clientZid && !(/^[0-9]+\.[0-9]+$/).test(this.clientZid)) { throw new ValidationError(_formprefix + "client_zid", ValidationError.PATTERN_FAILED);}
if(this.isWhitelisted && !Validator.INTEGER.test(this.isWhitelisted)) { throw new ValidationError(_formprefix + "is_whitelisted", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
WhiteListedClients.path = "whitelistedclients";
WhiteListedClients.newBuilder = function() {
    return new WhiteListedClients();
};

UserLocation = function() {
    var _formprefix = "";
    
var locationNameApl = "";
this.setLocationNameApl = function(locationNameApl) { 
    this.locationNameApl = locationNameApl;
    return this;
};
this.getLocationNameApl = function() {
    return this.locationNameApl;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLocationNameApl(json["location_name_apl"]);
		this.setZuid(json["zuid"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLocationNameApl()) json += '"location_name_apl"' + ":" + '"' + jsonEscape(this.getLocationNameApl())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserLocation.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.locationNameApl && !(/xss:throwerror/).test(this.locationNameApl)) { throw new ValidationError(_formprefix + "location_name_apl", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserLocation.path = "userlocation";
UserLocation.newBuilder = function() {
    return new UserLocation();
};

UniqueIdRange = function() {
    var _formprefix = "";
    
var uniqueIdRangeName = "";
this.setUniqueIdRangeName = function(uniqueIdRangeName) { 
    this.uniqueIdRangeName = uniqueIdRangeName;
    return this;
};
this.getUniqueIdRangeName = function() {
    return this.uniqueIdRangeName;
};
var rangeSize = "";
this.setRangeSize = function(rangeSize) { 
    this.rangeSize = rangeSize;
    return this;
};
this.getRangeSize = function() {
    return this.rangeSize;
};
var rangeResetThreshold = "10";
this.setRangeResetThreshold = function(rangeResetThreshold) { 
    this.rangeResetThreshold = rangeResetThreshold;
    return this;
};
this.getRangeResetThreshold = function() {
    return this.rangeResetThreshold;
};
var reservedUpto = "-1";
this.setReservedUpto = function(reservedUpto) { 
    this.reservedUpto = reservedUpto;
    return this;
};
this.getReservedUpto = function() {
    return this.reservedUpto;
};
var dcRangeResetThreshold = "50";
this.setDcRangeResetThreshold = function(dcRangeResetThreshold) { 
    this.dcRangeResetThreshold = dcRangeResetThreshold;
    return this;
};
this.getDcRangeResetThreshold = function() {
    return this.dcRangeResetThreshold;
};
var dcReservedUpto = "-1";
this.setDcReservedUpto = function(dcReservedUpto) { 
    this.dcReservedUpto = dcReservedUpto;
    return this;
};
this.getDcReservedUpto = function() {
    return this.dcReservedUpto;
};
var uniqueidrangegenerationaudit = undefined;
this.setUniqueidrangegenerationaudits = function(uniqueidrangegenerationaudit) { 
    this.uniqueidrangegenerationaudit = uniqueidrangegenerationaudit;
    return this;
};
this.getUniqueidrangegenerationaudits = function() {
    return this.uniqueidrangegenerationaudit;
};
this.addUniqueidrangegenerationaudit = function(uniqueidrangegenerationaudit) { 
 if(!this.uniqueidrangegenerationaudit) this.uniqueidrangegenerationaudit = new Array(); 
  this.uniqueidrangegenerationaudit.push(uniqueidrangegenerationaudit); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setUniqueIdRangeName(json["unique_id_range_name"]);
		this.setRangeSize(json["range_size"]);
		this.setRangeResetThreshold(json["range_reset_threshold"]);
		this.setReservedUpto(json["reserved_upto"]);
		this.setDcRangeResetThreshold(json["dc_range_reset_threshold"]);
		this.setDcReservedUpto(json["dc_reserved_upto"]);
		this.setUniqueidrangegenerationaudits(URI.getResourceArray(json["uniqueIdRangeGenerationAudit"],"uniqueidrangegenerationaudit"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getUniqueIdRangeName()) json += '"unique_id_range_name"' + ":" + '"' + jsonEscape(this.getUniqueIdRangeName())  + '",';
		if(this.getRangeSize()) json += '"range_size"' + ":" + '"' + jsonEscape(this.getRangeSize())  + '",';
		if(this.getRangeResetThreshold()) json += '"range_reset_threshold"' + ":" + '"' + jsonEscape(this.getRangeResetThreshold())  + '",';
		if(this.getReservedUpto()) json += '"reserved_upto"' + ":" + '"' + jsonEscape(this.getReservedUpto())  + '",';
		if(this.getDcRangeResetThreshold()) json += '"dc_range_reset_threshold"' + ":" + '"' + jsonEscape(this.getDcRangeResetThreshold())  + '",';
		if(this.getDcReservedUpto()) json += '"dc_reserved_upto"' + ":" + '"' + jsonEscape(this.getDcReservedUpto())  + '",';
		if(this.getUniqueidrangegenerationaudits()) json += '"uniqueIdRangeGenerationAudit"' + ":" + URI.toJSONArray(this.getUniqueidrangegenerationaudits())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UniqueIdRange.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.uniqueIdRangeName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.uniqueIdRangeName)) { throw new ValidationError(_formprefix + "unique_id_range_name", ValidationError.PATTERN_FAILED);}
if(this.rangeSize && !Validator.INTEGER.test(this.rangeSize)) { throw new ValidationError(_formprefix + "range_size", ValidationError.PATTERN_FAILED);}
if(this.rangeResetThreshold && !Validator.INTEGER.test(this.rangeResetThreshold)) { throw new ValidationError(_formprefix + "range_reset_threshold", ValidationError.PATTERN_FAILED);}
if(this.reservedUpto && !Validator.INTEGER.test(this.reservedUpto)) { throw new ValidationError(_formprefix + "reserved_upto", ValidationError.PATTERN_FAILED);}
if(this.dcRangeResetThreshold && !Validator.INTEGER.test(this.dcRangeResetThreshold)) { throw new ValidationError(_formprefix + "dc_range_reset_threshold", ValidationError.PATTERN_FAILED);}
if(this.dcReservedUpto && !Validator.INTEGER.test(this.dcReservedUpto)) { throw new ValidationError(_formprefix + "dc_reserved_upto", ValidationError.PATTERN_FAILED);}
if(this.uniqueidrangegenerationaudit) { for(i=0; i < this.uniqueidrangegenerationaudit.length; i++ ) { this.uniqueidrangegenerationaudit[i].validate(); } }

	return this;
    }
}
UniqueIdRange.path = "uniqueidrange";
UniqueIdRange.newBuilder = function() {
    return new UniqueIdRange();
};

UserServiceOrgPreference = function() {
    var _formprefix = "";
    
var orgType = "-1";
this.setOrgType = function(orgType) { 
    this.orgType = orgType;
    return this;
};
this.getOrgType = function() {
    return this.orgType;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var preferenceKey = "";
this.setPreferenceKey = function(preferenceKey) { 
    this.preferenceKey = preferenceKey;
    return this;
};
this.getPreferenceKey = function() {
    return this.preferenceKey;
};
var preferenceValue = "";
this.setPreferenceValue = function(preferenceValue) { 
    this.preferenceValue = preferenceValue;
    return this;
};
this.getPreferenceValue = function() {
    return this.preferenceValue;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setOrgType(json["org_type"]);
		this.setZuid(json["zuid"]);
		this.setPreferenceKey(json["preference_key"]);
		this.setPreferenceValue(json["preference_value"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getOrgType()) json += '"org_type"' + ":" + '"' + jsonEscape(this.getOrgType())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getPreferenceKey()) json += '"preference_key"' + ":" + '"' + jsonEscape(this.getPreferenceKey())  + '",';
		if(this.getPreferenceValue()) json += '"preference_value"' + ":" + '"' + jsonEscape(this.getPreferenceValue())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserServiceOrgPreference.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.orgType && !Validator.INTEGER.test(this.orgType)) { throw new ValidationError(_formprefix + "org_type", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.preferenceKey && !(/^[a-zA-Z0-9_\-]+$/).test(this.preferenceKey)) { throw new ValidationError(_formprefix + "preference_key", ValidationError.PATTERN_FAILED);}
if(this.preferenceValue && !(/^[a-zA-Z0-9_\-]+$/).test(this.preferenceValue)) { throw new ValidationError(_formprefix + "preference_value", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserServiceOrgPreference.path = "userserviceorgpreference";
UserServiceOrgPreference.newBuilder = function() {
    return new UserServiceOrgPreference();
};

OneAuthPreference = function() {
    var _formprefix = "";
    
var privateKey = "";
this.setPrivateKey = function(privateKey) { 
    this.privateKey = privateKey;
    return this;
};
this.getPrivateKey = function() {
    return this.privateKey;
};
var publicKey = "";
this.setPublicKey = function(publicKey) { 
    this.publicKey = publicKey;
    return this;
};
this.getPublicKey = function() {
    return this.publicKey;
};
var secretKey = "";
this.setSecretKey = function(secretKey) { 
    this.secretKey = secretKey;
    return this;
};
this.getSecretKey = function() {
    return this.secretKey;
};
var passPhrase = "";
this.setPassPhrase = function(passPhrase) { 
    this.passPhrase = passPhrase;
    return this;
};
this.getPassPhrase = function() {
    return this.passPhrase;
};
var passPhraseTime = "";
this.setPassPhraseTime = function(passPhraseTime) { 
    this.passPhraseTime = passPhraseTime;
    return this;
};
this.getPassPhraseTime = function() {
    return this.passPhraseTime;
};
var restrictSignin = "false";
this.setRestrictSignin = function(restrictSignin) { 
    this.restrictSignin = restrictSignin;
    return this;
};
this.getRestrictSignin = function() {
    return this.restrictSignin;
};
var tpSecretSync = "false";
this.setTpSecretSync = function(tpSecretSync) { 
    this.tpSecretSync = tpSecretSync;
    return this;
};
this.getTpSecretSync = function() {
    return this.tpSecretSync;
};
var encProvider = "";
this.setEncProvider = function(encProvider) { 
    this.encProvider = encProvider;
    return this;
};
this.getEncProvider = function() {
    return this.encProvider;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPrivateKey(json["private_key"]);
		this.setPublicKey(json["public_key"]);
		this.setSecretKey(json["secret_key"]);
		this.setPassPhrase(json["pass_phrase"]);
		this.setPassPhraseTime(json["pass_phrase_time"]);
		this.setRestrictSignin(json["restrict_signin"]);
		this.setTpSecretSync(json["tp_secret_sync"]);
		this.setEncProvider(json["enc_provider"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPrivateKey()) json += '"private_key"' + ":" + '"' + jsonEscape(this.getPrivateKey())  + '",';
		if(this.getPublicKey()) json += '"public_key"' + ":" + '"' + jsonEscape(this.getPublicKey())  + '",';
		if(this.getSecretKey()) json += '"secret_key"' + ":" + '"' + jsonEscape(this.getSecretKey())  + '",';
		if(this.getPassPhrase()) json += '"pass_phrase"' + ":" + '"' + jsonEscape(this.getPassPhrase())  + '",';
		if(this.getPassPhraseTime()) json += '"pass_phrase_time"' + ":" + '"' + jsonEscape(this.getPassPhraseTime())  + '",';
		if(this.getRestrictSignin()) json += '"restrict_signin"' + ":" + '"' + jsonEscape(this.getRestrictSignin())  + '",';
		if(this.getTpSecretSync()) json += '"tp_secret_sync"' + ":" + '"' + jsonEscape(this.getTpSecretSync())  + '",';
		if(this.getEncProvider()) json += '"enc_provider"' + ":" + '"' + jsonEscape(this.getEncProvider())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OneAuthPreference.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.secretKey && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.secretKey)) { throw new ValidationError(_formprefix + "secret_key", ValidationError.PATTERN_FAILED);}
if(this.passPhrase && !(/^([A-Za-z0-9_.\-]+)$/).test(this.passPhrase)) { throw new ValidationError(_formprefix + "pass_phrase", ValidationError.PATTERN_FAILED);}
if(this.passPhraseTime && !Validator.INTEGER.test(this.passPhraseTime)) { throw new ValidationError(_formprefix + "pass_phrase_time", ValidationError.PATTERN_FAILED);}
if(this.restrictSignin && !Validator.BOOLEAN.test(this.restrictSignin)) { throw new ValidationError(_formprefix + "restrict_signin", ValidationError.PATTERN_FAILED);}
if(this.tpSecretSync && !Validator.BOOLEAN.test(this.tpSecretSync)) { throw new ValidationError(_formprefix + "tp_secret_sync", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OneAuthPreference.path = "oneauthpreference";
OneAuthPreference.newBuilder = function() {
    return new OneAuthPreference();
};

ClusterNode = function() {
    var _formprefix = "";
    
var nodeName = "";
this.setNodeName = function(nodeName) { 
    this.nodeName = nodeName;
    return this;
};
this.getNodeName = function() {
    return this.nodeName;
};
var cacheType = "";
this.setCacheType = function(cacheType) { 
    this.cacheType = cacheType;
    return this;
};
this.getCacheType = function() {
    return this.cacheType;
};
var serverIpPort = "";
this.setServerIpPort = function(serverIpPort) { 
    this.serverIpPort = serverIpPort;
    return this;
};
this.getServerIpPort = function() {
    return this.serverIpPort;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var cacheProperties = "";
this.setCacheProperties = function(cacheProperties) { 
    this.cacheProperties = cacheProperties;
    return this;
};
this.getCacheProperties = function() {
    return this.cacheProperties;
};
var noderange = undefined;
this.setNoderanges = function(noderange) { 
    this.noderange = noderange;
    return this;
};
this.getNoderanges = function() {
    return this.noderange;
};
this.addNoderange = function(noderange) { 
 if(!this.noderange) this.noderange = new Array(); 
  this.noderange.push(noderange); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setNodeName(json["node_name"]);
		this.setCacheType(json["cache_type"]);
		this.setServerIpPort(json["server_ip_port"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setCacheProperties(json["cache_properties"]);
		this.setNoderanges(URI.getResourceArray(json["nodeRange"],"noderange"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getNodeName()) json += '"node_name"' + ":" + '"' + jsonEscape(this.getNodeName())  + '",';
		if(this.getCacheType()) json += '"cache_type"' + ":" + '"' + jsonEscape(this.getCacheType())  + '",';
		if(this.getServerIpPort()) json += '"server_ip_port"' + ":" + '"' + jsonEscape(this.getServerIpPort())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getCacheProperties()) json += '"cache_properties"' + ":" + '"' + jsonEscape(this.getCacheProperties())  + '",';
		if(this.getNoderanges()) json += '"nodeRange"' + ":" + URI.toJSONArray(this.getNoderanges())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ClusterNode.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.nodeName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.nodeName)) { throw new ValidationError(_formprefix + "node_name", ValidationError.PATTERN_FAILED);}
if(this.cacheType && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.cacheType)) { throw new ValidationError(_formprefix + "cache_type", ValidationError.PATTERN_FAILED);}
if(this.serverIpPort && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.serverIpPort)) { throw new ValidationError(_formprefix + "server_ip_port", ValidationError.PATTERN_FAILED);}
if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.noderange) { for(i=0; i < this.noderange.length; i++ ) { this.noderange[i].validate(); } }

	return this;
    }
}
ClusterNode.path = "clusternode";
ClusterNode.newBuilder = function() {
    return new ClusterNode();
};

BreachedPassword = function() {
    var _formprefix = "";
    
var password = "";
this.setPassword = function(password) { 
    this.password = password;
    return this;
};
this.getPassword = function() {
    return this.password;
};
var count = "0";
this.setCount = function(count) { 
    this.count = count;
    return this;
};
this.getCount = function() {
    return this.count;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPassword(json["password"]);
		this.setCount(json["count"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPassword()) json += '"password"' + ":" + '"' + jsonEscape(this.getPassword())  + '",';
		if(this.getCount()) json += '"count"' + ":" + '"' + jsonEscape(this.getCount())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(BreachedPassword.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.password && !(/dontdisturb/).test(this.password)) { throw new ValidationError(_formprefix + "password", ValidationError.PATTERN_FAILED);}
if(this.count && !Validator.INTEGER.test(this.count)) { throw new ValidationError(_formprefix + "count", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
BreachedPassword.path = "breachedpassword";
BreachedPassword.newBuilder = function() {
    return new BreachedPassword();
};

SAMLSpAppLogo = function() {
    var _formprefix = "";
    
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SAMLSpAppLogo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SAMLSpAppLogo.path = "samlspapplogo";
SAMLSpAppLogo.newBuilder = function() {
    return new SAMLSpAppLogo();
};

AppAllowedMethods = function() {
    var _formprefix = "";
    
var methodId = "";
this.setMethodId = function(methodId) { 
    this.methodId = methodId;
    return this;
};
this.getMethodId = function() {
    return this.methodId;
};
var methodName = "";
this.setMethodName = function(methodName) { 
    this.methodName = methodName;
    return this;
};
this.getMethodName = function() {
    return this.methodName;
};
var isAllowed = "true";
this.setIsAllowed = function(isAllowed) { 
    this.isAllowed = isAllowed;
    return this;
};
this.getIsAllowed = function() {
    return this.isAllowed;
};
var isAclEnabled = "true";
this.setIsAclEnabled = function(isAclEnabled) { 
    this.isAclEnabled = isAclEnabled;
    return this;
};
this.getIsAclEnabled = function() {
    return this.isAclEnabled;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setMethodId(json["method_id"]);
		this.setMethodName(json["method_name"]);
		this.setIsAllowed(json["is_allowed"]);
		this.setIsAclEnabled(json["is_acl_enabled"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getMethodId()) json += '"method_id"' + ":" + '"' + jsonEscape(this.getMethodId())  + '",';
		if(this.getMethodName()) json += '"method_name"' + ":" + '"' + jsonEscape(this.getMethodName())  + '",';
		if(this.getIsAllowed()) json += '"is_allowed"' + ":" + '"' + jsonEscape(this.getIsAllowed())  + '",';
		if(this.getIsAclEnabled()) json += '"is_acl_enabled"' + ":" + '"' + jsonEscape(this.getIsAclEnabled())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAllowedMethods.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.methodId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.methodId)) { throw new ValidationError(_formprefix + "method_id", ValidationError.PATTERN_FAILED);}
if(this.methodName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.methodName)) { throw new ValidationError(_formprefix + "method_name", ValidationError.PATTERN_FAILED);}
if(this.isAllowed && !Validator.BOOLEAN.test(this.isAllowed)) { throw new ValidationError(_formprefix + "is_allowed", ValidationError.PATTERN_FAILED);}
if(this.isAclEnabled && !Validator.BOOLEAN.test(this.isAclEnabled)) { throw new ValidationError(_formprefix + "is_acl_enabled", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAllowedMethods.path = "appallowedmethods";
AppAllowedMethods.newBuilder = function() {
    return new AppAllowedMethods();
};

GroupLogo = function() {
    var _formprefix = "";
    
var viewPermission = "";
this.setViewPermission = function(viewPermission) { 
    this.viewPermission = viewPermission;
    return this;
};
this.getViewPermission = function() {
    return this.viewPermission;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setViewPermission(json["view_permission"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getViewPermission()) json += '"view_permission"' + ":" + '"' + jsonEscape(this.getViewPermission())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(GroupLogo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.viewPermission && !Validator.INTEGER.test(this.viewPermission)) { throw new ValidationError(_formprefix + "view_permission", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
GroupLogo.path = "grouplogo";
GroupLogo.newBuilder = function() {
    return new GroupLogo();
};

ServiceOrgKYC = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var employeeCount = "-1";
this.setEmployeeCount = function(employeeCount) { 
    this.employeeCount = employeeCount;
    return this;
};
this.getEmployeeCount = function() {
    return this.employeeCount;
};
var organisationName = "";
this.setOrganisationName = function(organisationName) { 
    this.organisationName = organisationName;
    return this;
};
this.getOrganisationName = function() {
    return this.organisationName;
};
var industry = "";
this.setIndustry = function(industry) { 
    this.industry = industry;
    return this;
};
this.getIndustry = function() {
    return this.industry;
};
var orgContactEmailid = "";
this.setOrgContactEmailid = function(orgContactEmailid) { 
    this.orgContactEmailid = orgContactEmailid;
    return this;
};
this.getOrgContactEmailid = function() {
    return this.orgContactEmailid;
};
var firstName = "";
this.setFirstName = function(firstName) { 
    this.firstName = firstName;
    return this;
};
this.getFirstName = function() {
    return this.firstName;
};
var lastName = "";
this.setLastName = function(lastName) { 
    this.lastName = lastName;
    return this;
};
this.getLastName = function() {
    return this.lastName;
};
var mobileNumber = "";
this.setMobileNumber = function(mobileNumber) { 
    this.mobileNumber = mobileNumber;
    return this;
};
this.getMobileNumber = function() {
    return this.mobileNumber;
};
var designation = "";
this.setDesignation = function(designation) { 
    this.designation = designation;
    return this;
};
this.getDesignation = function() {
    return this.designation;
};
var serviceorgkyccontact = undefined;
this.setServiceorgkyccontacts = function(serviceorgkyccontact) { 
    this.serviceorgkyccontact = serviceorgkyccontact;
    return this;
};
this.getServiceorgkyccontacts = function() {
    return this.serviceorgkyccontact;
};
this.addServiceorgkyccontact = function(serviceorgkyccontact) { 
 if(!this.serviceorgkyccontact) this.serviceorgkyccontact = new Array(); 
  this.serviceorgkyccontact.push(serviceorgkyccontact); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setEmployeeCount(json["employee_count"]);
		this.setOrganisationName(json["organisation_name"]);
		this.setIndustry(json["industry"]);
		this.setOrgContactEmailid(json["org_contact_emailid"]);
		this.setFirstName(json["first_name"]);
		this.setLastName(json["last_name"]);
		this.setMobileNumber(json["mobile_number"]);
		this.setDesignation(json["designation"]);
		this.setServiceorgkyccontacts(URI.getResourceArray(json["serviceOrgKYCContact"],"serviceorgkyccontact"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getEmployeeCount()) json += '"employee_count"' + ":" + '"' + jsonEscape(this.getEmployeeCount())  + '",';
		if(this.getOrganisationName()) json += '"organisation_name"' + ":" + '"' + jsonEscape(this.getOrganisationName())  + '",';
		if(this.getIndustry()) json += '"industry"' + ":" + '"' + jsonEscape(this.getIndustry())  + '",';
		if(this.getOrgContactEmailid()) json += '"org_contact_emailid"' + ":" + '"' + jsonEscape(this.getOrgContactEmailid())  + '",';
		if(this.getFirstName()) json += '"first_name"' + ":" + '"' + jsonEscape(this.getFirstName())  + '",';
		if(this.getLastName()) json += '"last_name"' + ":" + '"' + jsonEscape(this.getLastName())  + '",';
		if(this.getMobileNumber()) json += '"mobile_number"' + ":" + '"' + jsonEscape(this.getMobileNumber())  + '",';
		if(this.getDesignation()) json += '"designation"' + ":" + '"' + jsonEscape(this.getDesignation())  + '",';
		if(this.getServiceorgkyccontacts()) json += '"serviceOrgKYCContact"' + ":" + URI.toJSONArray(this.getServiceorgkyccontacts())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgKYC.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.employeeCount && !Validator.INTEGER.test(this.employeeCount)) { throw new ValidationError(_formprefix + "employee_count", ValidationError.PATTERN_FAILED);}
if(this.organisationName && !(/xss:throwerror/).test(this.organisationName)) { throw new ValidationError(_formprefix + "organisation_name", ValidationError.PATTERN_FAILED);}
if(this.industry && !(/xss:throwerror/).test(this.industry)) { throw new ValidationError(_formprefix + "industry", ValidationError.PATTERN_FAILED);}
if(this.orgContactEmailid && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.orgContactEmailid)) { throw new ValidationError(_formprefix + "org_contact_emailid", ValidationError.PATTERN_FAILED);}
if(this.firstName && !(/xss:throwerror/).test(this.firstName)) { throw new ValidationError(_formprefix + "first_name", ValidationError.PATTERN_FAILED);}
if(this.lastName && !(/xss:throwerror/).test(this.lastName)) { throw new ValidationError(_formprefix + "last_name", ValidationError.PATTERN_FAILED);}
if(this.mobileNumber && !(/xss:throwerror/).test(this.mobileNumber)) { throw new ValidationError(_formprefix + "mobile_number", ValidationError.PATTERN_FAILED);}
if(this.designation && !(/xss:throwerror/).test(this.designation)) { throw new ValidationError(_formprefix + "designation", ValidationError.PATTERN_FAILED);}
if(this.serviceorgkyccontact) { for(i=0; i < this.serviceorgkyccontact.length; i++ ) { this.serviceorgkyccontact[i].validate(); } }

	return this;
    }
}
ServiceOrgKYC.path = "serviceorgkyc";
ServiceOrgKYC.newBuilder = function() {
    return new ServiceOrgKYC();
};

OAuthRedirectURL = function() {
    var _formprefix = "";
    
var redirectUrl = "";
this.setRedirectUrl = function(redirectUrl) { 
    this.redirectUrl = redirectUrl;
    return this;
};
this.getRedirectUrl = function() {
    return this.redirectUrl;
};
var redirectUrlApl = "";
this.setRedirectUrlApl = function(redirectUrlApl) { 
    this.redirectUrlApl = redirectUrlApl;
    return this;
};
this.getRedirectUrlApl = function() {
    return this.redirectUrlApl;
};
var redirectUrlType = "1";
this.setRedirectUrlType = function(redirectUrlType) { 
    this.redirectUrlType = redirectUrlType;
    return this;
};
this.getRedirectUrlType = function() {
    return this.redirectUrlType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRedirectUrl(json["redirect_url"]);
		this.setRedirectUrlApl(json["redirect_url_apl"]);
		this.setRedirectUrlType(json["redirect_url_type"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRedirectUrl()) json += '"redirect_url"' + ":" + '"' + jsonEscape(this.getRedirectUrl())  + '",';
		if(this.getRedirectUrlApl()) json += '"redirect_url_apl"' + ":" + '"' + jsonEscape(this.getRedirectUrlApl())  + '",';
		if(this.getRedirectUrlType()) json += '"redirect_url_type"' + ":" + '"' + jsonEscape(this.getRedirectUrlType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthRedirectURL.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.redirectUrl && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.redirectUrl)) { throw new ValidationError(_formprefix + "redirect_url", ValidationError.PATTERN_FAILED);}
if(this.redirectUrlApl && !(/xss:throwerror/).test(this.redirectUrlApl)) { throw new ValidationError(_formprefix + "redirect_url_apl", ValidationError.PATTERN_FAILED);}
if(this.redirectUrlType && !Validator.INTEGER.test(this.redirectUrlType)) { throw new ValidationError(_formprefix + "redirect_url_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthRedirectURL.path = "oauthredirecturl";
OAuthRedirectURL.newBuilder = function() {
    return new OAuthRedirectURL();
};

Invitation = function() {
    var _formprefix = "";
    
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var inviteStatus = "0";
this.setInviteStatus = function(inviteStatus) { 
    this.inviteStatus = inviteStatus;
    return this;
};
this.getInviteStatus = function() {
    return this.inviteStatus;
};
var sendMail = "true";
this.setSendMail = function(sendMail) { 
    this.sendMail = sendMail;
    return this;
};
this.getSendMail = function() {
    return this.sendMail;
};
var resendLimit = "0";
this.setResendLimit = function(resendLimit) { 
    this.resendLimit = resendLimit;
    return this;
};
this.getResendLimit = function() {
    return this.resendLimit;
};
var fromUrl = "";
this.setFromUrl = function(fromUrl) { 
    this.fromUrl = fromUrl;
    return this;
};
this.getFromUrl = function() {
    return this.fromUrl;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var idp = "0";
this.setIdp = function(idp) { 
    this.idp = idp;
    return this;
};
this.getIdp = function() {
    return this.idp;
};
var argsData = "";
this.setArgsData = function(argsData) { 
    this.argsData = argsData;
    return this;
};
this.getArgsData = function() {
    return this.argsData;
};
var invitedBy = "";
this.setInvitedBy = function(invitedBy) { 
    this.invitedBy = invitedBy;
    return this;
};
this.getInvitedBy = function() {
    return this.invitedBy;
};
var firstName = "";
this.setFirstName = function(firstName) { 
    this.firstName = firstName;
    return this;
};
this.getFirstName = function() {
    return this.firstName;
};
var lastName = "";
this.setLastName = function(lastName) { 
    this.lastName = lastName;
    return this;
};
this.getLastName = function() {
    return this.lastName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var invitationdetails = undefined;
this.setInvitationdetailss = function(invitationdetails) { 
    this.invitationdetails = invitationdetails;
    return this;
};
this.getInvitationdetailss = function() {
    return this.invitationdetails;
};
this.addInvitationdetails = function(invitationdetails) { 
 if(!this.invitationdetails) this.invitationdetails = new Array(); 
  this.invitationdetails.push(invitationdetails); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setEmailId(json["email_id"]);
		this.setInviteStatus(json["invite_status"]);
		this.setSendMail(json["send_mail"]);
		this.setResendLimit(json["resend_limit"]);
		this.setFromUrl(json["from_url"]);
		this.setIpAddress(json["ip_address"]);
		this.setIdp(json["idp"]);
		this.setArgsData(json["args_data"]);
		this.setInvitedBy(json["invited_by"]);
		this.setFirstName(json["first_name"]);
		this.setLastName(json["last_name"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setInvitationdetailss(URI.getResourceArray(json["invitationDetails"],"invitationdetails"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getInviteStatus()) json += '"invite_status"' + ":" + '"' + jsonEscape(this.getInviteStatus())  + '",';
		if(this.getSendMail()) json += '"send_mail"' + ":" + '"' + jsonEscape(this.getSendMail())  + '",';
		if(this.getResendLimit()) json += '"resend_limit"' + ":" + '"' + jsonEscape(this.getResendLimit())  + '",';
		if(this.getFromUrl()) json += '"from_url"' + ":" + '"' + jsonEscape(this.getFromUrl())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getIdp()) json += '"idp"' + ":" + '"' + jsonEscape(this.getIdp())  + '",';
		if(this.getArgsData()) json += '"args_data"' + ":" + '"' + jsonEscape(this.getArgsData())  + '",';
		if(this.getInvitedBy()) json += '"invited_by"' + ":" + '"' + jsonEscape(this.getInvitedBy())  + '",';
		if(this.getFirstName()) json += '"first_name"' + ":" + '"' + jsonEscape(this.getFirstName())  + '",';
		if(this.getLastName()) json += '"last_name"' + ":" + '"' + jsonEscape(this.getLastName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getInvitationdetailss()) json += '"invitationDetails"' + ":" + URI.toJSONArray(this.getInvitationdetailss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Invitation.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.inviteStatus && !Validator.INTEGER.test(this.inviteStatus)) { throw new ValidationError(_formprefix + "invite_status", ValidationError.PATTERN_FAILED);}
if(this.sendMail && !Validator.BOOLEAN.test(this.sendMail)) { throw new ValidationError(_formprefix + "send_mail", ValidationError.PATTERN_FAILED);}
if(this.resendLimit && !Validator.INTEGER.test(this.resendLimit)) { throw new ValidationError(_formprefix + "resend_limit", ValidationError.PATTERN_FAILED);}
if(this.fromUrl && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.fromUrl)) { throw new ValidationError(_formprefix + "from_url", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.idp && !Validator.INTEGER.test(this.idp)) { throw new ValidationError(_formprefix + "idp", ValidationError.PATTERN_FAILED);}
if(this.invitedBy && !(/^[a-zA-Z0-9_\-]+$/).test(this.invitedBy)) { throw new ValidationError(_formprefix + "invited_by", ValidationError.PATTERN_FAILED);}
if(this.firstName && !(/xss:throwerror/).test(this.firstName)) { throw new ValidationError(_formprefix + "first_name", ValidationError.PATTERN_FAILED);}
if(this.lastName && !(/xss:throwerror/).test(this.lastName)) { throw new ValidationError(_formprefix + "last_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.invitationdetails) { for(i=0; i < this.invitationdetails.length; i++ ) { this.invitationdetails[i].validate(); } }

	return this;
    }
}
Invitation.path = "invitation";
Invitation.newBuilder = function() {
    return new Invitation();
};

InvitedOrgDetails = function() {
    var _formprefix = "";
    
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var orgId = "";
this.setOrgId = function(orgId) { 
    this.orgId = orgId;
    return this;
};
this.getOrgId = function() {
    return this.orgId;
};
var orgType = "";
this.setOrgType = function(orgType) { 
    this.orgType = orgType;
    return this;
};
this.getOrgType = function() {
    return this.orgType;
};
var status = "1";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var argsData = "";
this.setArgsData = function(argsData) { 
    this.argsData = argsData;
    return this;
};
this.getArgsData = function() {
    return this.argsData;
};
var invitationTime = "";
this.setInvitationTime = function(invitationTime) { 
    this.invitationTime = invitationTime;
    return this;
};
this.getInvitationTime = function() {
    return this.invitationTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setEmailId(json["email_id"]);
		this.setOrgId(json["org_id"]);
		this.setOrgType(json["org_type"]);
		this.setStatus(json["status"]);
		this.setArgsData(json["args_data"]);
		this.setInvitationTime(json["invitation_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getOrgId()) json += '"org_id"' + ":" + '"' + jsonEscape(this.getOrgId())  + '",';
		if(this.getOrgType()) json += '"org_type"' + ":" + '"' + jsonEscape(this.getOrgType())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getArgsData()) json += '"args_data"' + ":" + '"' + jsonEscape(this.getArgsData())  + '",';
		if(this.getInvitationTime()) json += '"invitation_time"' + ":" + '"' + jsonEscape(this.getInvitationTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(InvitedOrgDetails.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.orgId && !(/^[a-zA-Z0-9_\-]+$/).test(this.orgId)) { throw new ValidationError(_formprefix + "org_id", ValidationError.PATTERN_FAILED);}
if(this.orgType && !Validator.INTEGER.test(this.orgType)) { throw new ValidationError(_formprefix + "org_type", ValidationError.PATTERN_FAILED);}
if(this.invitationTime && !Validator.INTEGER.test(this.invitationTime)) { throw new ValidationError(_formprefix + "invitation_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
InvitedOrgDetails.path = "invitedorgdetails";
InvitedOrgDetails.newBuilder = function() {
    return new InvitedOrgDetails();
};

RoleResourceMappings = function() {
    var _formprefix = "";
    
var resource = "";
this.setResource = function(resource) { 
    this.resource = resource;
    return this;
};
this.getResource = function() {
    return this.resource;
};
var operationsAllowed = "NONE";
this.setOperationsAllowed = function(operationsAllowed) { 
    this.operationsAllowed = operationsAllowed;
    return this;
};
this.getOperationsAllowed = function() {
    return this.operationsAllowed;
};
var inheritAllowed = "true";
this.setInheritAllowed = function(inheritAllowed) { 
    this.inheritAllowed = inheritAllowed;
    return this;
};
this.getInheritAllowed = function() {
    return this.inheritAllowed;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setResource(json["resource"]);
		this.setOperationsAllowed(json["operations_allowed"]);
		this.setInheritAllowed(json["inherit_allowed"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getResource()) json += '"resource"' + ":" + '"' + jsonEscape(this.getResource())  + '",';
		if(this.getOperationsAllowed()) json += '"operations_allowed"' + ":" + '"' + jsonEscape(this.getOperationsAllowed())  + '",';
		if(this.getInheritAllowed()) json += '"inherit_allowed"' + ":" + '"' + jsonEscape(this.getInheritAllowed())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(RoleResourceMappings.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.inheritAllowed && !Validator.BOOLEAN.test(this.inheritAllowed)) { throw new ValidationError(_formprefix + "inherit_allowed", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
RoleResourceMappings.path = "roleresourcemappings";
RoleResourceMappings.newBuilder = function() {
    return new RoleResourceMappings();
};

MailClientAuditTemplate = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var auditedTime = "";
this.setAuditedTime = function(auditedTime) { 
    this.auditedTime = auditedTime;
    return this;
};
this.getAuditedTime = function() {
    return this.auditedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZuid(json["zuid"]);
		this.setEmailId(json["email_id"]);
		this.setAppName(json["app_name"]);
		this.setIpAddress(json["ip_address"]);
		this.setUserAgent(json["user_agent"]);
		this.setAuditedTime(json["audited_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getAuditedTime()) json += '"audited_time"' + ":" + '"' + jsonEscape(this.getAuditedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MailClientAuditTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.auditedTime && !Validator.INTEGER.test(this.auditedTime)) { throw new ValidationError(_formprefix + "audited_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
MailClientAuditTemplate.path = "mailclientaudittemplate";
MailClientAuditTemplate.newBuilder = function() {
    return new MailClientAuditTemplate();
};

RoleAccessCheck = function() {
    var _formprefix = "";
    
var role = "";
this.setRole = function(role) { 
    this.role = role;
    return this;
};
this.getRole = function() {
    return this.role;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var roleresourcemappings = undefined;
this.setRoleresourcemappingss = function(roleresourcemappings) { 
    this.roleresourcemappings = roleresourcemappings;
    return this;
};
this.getRoleresourcemappingss = function() {
    return this.roleresourcemappings;
};
this.addRoleresourcemappings = function(roleresourcemappings) { 
 if(!this.roleresourcemappings) this.roleresourcemappings = new Array(); 
  this.roleresourcemappings.push(roleresourcemappings); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRole(json["role"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setRoleresourcemappingss(URI.getResourceArray(json["roleResourceMappings"],"roleresourcemappings"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRole()) json += '"role"' + ":" + '"' + jsonEscape(this.getRole())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getRoleresourcemappingss()) json += '"roleResourceMappings"' + ":" + URI.toJSONArray(this.getRoleresourcemappingss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(RoleAccessCheck.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.roleresourcemappings) { for(i=0; i < this.roleresourcemappings.length; i++ ) { this.roleresourcemappings[i].validate(); } }

	return this;
    }
}
RoleAccessCheck.path = "roleaccesscheck";
RoleAccessCheck.newBuilder = function() {
    return new RoleAccessCheck();
};

CustomFields = function() {
    var _formprefix = "";
    
var customFieldId = "";
this.setCustomFieldId = function(customFieldId) { 
    this.customFieldId = customFieldId;
    return this;
};
this.getCustomFieldId = function() {
    return this.customFieldId;
};
var customFieldName = "";
this.setCustomFieldName = function(customFieldName) { 
    this.customFieldName = customFieldName;
    return this;
};
this.getCustomFieldName = function() {
    return this.customFieldName;
};
var dataType = "";
this.setDataType = function(dataType) { 
    this.dataType = dataType;
    return this;
};
this.getDataType = function() {
    return this.dataType;
};
var nullable = "";
this.setNullable = function(nullable) { 
    this.nullable = nullable;
    return this;
};
this.getNullable = function() {
    return this.nullable;
};
var defaultValue = "";
this.setDefaultValue = function(defaultValue) { 
    this.defaultValue = defaultValue;
    return this;
};
this.getDefaultValue = function() {
    return this.defaultValue;
};
var columnNumber = "";
this.setColumnNumber = function(columnNumber) { 
    this.columnNumber = columnNumber;
    return this;
};
this.getColumnNumber = function() {
    return this.columnNumber;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setCustomFieldId(json["custom_field_id"]);
		this.setCustomFieldName(json["custom_field_name"]);
		this.setDataType(json["data_type"]);
		this.setNullable(json["nullable"]);
		this.setDefaultValue(json["default_value"]);
		this.setColumnNumber(json["column_number"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getCustomFieldId()) json += '"custom_field_id"' + ":" + '"' + jsonEscape(this.getCustomFieldId())  + '",';
		if(this.getCustomFieldName()) json += '"custom_field_name"' + ":" + '"' + jsonEscape(this.getCustomFieldName())  + '",';
		if(this.getDataType()) json += '"data_type"' + ":" + '"' + jsonEscape(this.getDataType())  + '",';
		if(this.getNullable()) json += '"nullable"' + ":" + '"' + jsonEscape(this.getNullable())  + '",';
		if(this.getDefaultValue()) json += '"default_value"' + ":" + '"' + jsonEscape(this.getDefaultValue())  + '",';
		if(this.getColumnNumber()) json += '"column_number"' + ":" + '"' + jsonEscape(this.getColumnNumber())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(CustomFields.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.customFieldId && !(/^[a-zA-Z0-9_\-]+$/).test(this.customFieldId)) { throw new ValidationError(_formprefix + "custom_field_id", ValidationError.PATTERN_FAILED);}
if(this.customFieldName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.customFieldName)) { throw new ValidationError(_formprefix + "custom_field_name", ValidationError.PATTERN_FAILED);}
if(this.nullable && !Validator.BOOLEAN.test(this.nullable)) { throw new ValidationError(_formprefix + "nullable", ValidationError.PATTERN_FAILED);}
if(this.defaultValue && !(/xss:throwerror/).test(this.defaultValue)) { throw new ValidationError(_formprefix + "default_value", ValidationError.PATTERN_FAILED);}
if(this.columnNumber && !Validator.INTEGER.test(this.columnNumber)) { throw new ValidationError(_formprefix + "column_number", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
CustomFields.path = "customfields";
CustomFields.newBuilder = function() {
    return new CustomFields();
};

JWTReqParam = function() {
    var _formprefix = "";
    
var requestType = "";
this.setRequestType = function(requestType) { 
    this.requestType = requestType;
    return this;
};
this.getRequestType = function() {
    return this.requestType;
};
var paramName = "";
this.setParamName = function(paramName) { 
    this.paramName = paramName;
    return this;
};
this.getParamName = function() {
    return this.paramName;
};
var paramValue = "";
this.setParamValue = function(paramValue) { 
    this.paramValue = paramValue;
    return this;
};
this.getParamValue = function() {
    return this.paramValue;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRequestType(json["request_type"]);
		this.setParamName(json["param_name"]);
		this.setParamValue(json["param_value"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRequestType()) json += '"request_type"' + ":" + '"' + jsonEscape(this.getRequestType())  + '",';
		if(this.getParamName()) json += '"param_name"' + ":" + '"' + jsonEscape(this.getParamName())  + '",';
		if(this.getParamValue()) json += '"param_value"' + ":" + '"' + jsonEscape(this.getParamValue())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(JWTReqParam.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
JWTReqParam.path = "jwtreqparam";
JWTReqParam.newBuilder = function() {
    return new JWTReqParam();
};

ServiceOrgSubService = function() {
    var _formprefix = "";
    
var subOrgType = "-1";
this.setSubOrgType = function(subOrgType) { 
    this.subOrgType = subOrgType;
    return this;
};
this.getSubOrgType = function() {
    return this.subOrgType;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var accountStatus = "1";
this.setAccountStatus = function(accountStatus) { 
    this.accountStatus = accountStatus;
    return this;
};
this.getAccountStatus = function() {
    return this.accountStatus;
};
var migratedToOrg = "";
this.setMigratedToOrg = function(migratedToOrg) { 
    this.migratedToOrg = migratedToOrg;
    return this;
};
this.getMigratedToOrg = function() {
    return this.migratedToOrg;
};
var parentZaaid = "";
this.setParentZaaid = function(parentZaaid) { 
    this.parentZaaid = parentZaaid;
    return this;
};
this.getParentZaaid = function() {
    return this.parentZaaid;
};
var directoryZaaid = "";
this.setDirectoryZaaid = function(directoryZaaid) { 
    this.directoryZaaid = directoryZaaid;
    return this;
};
this.getDirectoryZaaid = function() {
    return this.directoryZaaid;
};
var isExposed = "1";
this.setIsExposed = function(isExposed) { 
    this.isExposed = isExposed;
    return this;
};
this.getIsExposed = function() {
    return this.isExposed;
};
var parentOrgType = "";
this.setParentOrgType = function(parentOrgType) { 
    this.parentOrgType = parentOrgType;
    return this;
};
this.getParentOrgType = function() {
    return this.parentOrgType;
};
var environment = "1";
this.setEnvironment = function(environment) { 
    this.environment = environment;
    return this;
};
this.getEnvironment = function() {
    return this.environment;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var serviceorgconfiguration = undefined;
this.setServiceorgconfigurations = function(serviceorgconfiguration) { 
    this.serviceorgconfiguration = serviceorgconfiguration;
    return this;
};
this.getServiceorgconfigurations = function() {
    return this.serviceorgconfiguration;
};
this.addServiceorgconfiguration = function(serviceorgconfiguration) { 
 if(!this.serviceorgconfiguration) this.serviceorgconfiguration = new Array(); 
  this.serviceorgconfiguration.push(serviceorgconfiguration); 
 return this;
};

var serviceorgoauthaccessgrant = undefined;
this.setServiceorgoauthaccessgrants = function(serviceorgoauthaccessgrant) { 
    this.serviceorgoauthaccessgrant = serviceorgoauthaccessgrant;
    return this;
};
this.getServiceorgoauthaccessgrants = function() {
    return this.serviceorgoauthaccessgrant;
};
this.addServiceorgoauthaccessgrant = function(serviceorgoauthaccessgrant) { 
 if(!this.serviceorgoauthaccessgrant) this.serviceorgoauthaccessgrant = new Array(); 
  this.serviceorgoauthaccessgrant.push(serviceorgoauthaccessgrant); 
 return this;
};

var serviceorgmember = undefined;
this.setServiceorgmembers = function(serviceorgmember) { 
    this.serviceorgmember = serviceorgmember;
    return this;
};
this.getServiceorgmembers = function() {
    return this.serviceorgmember;
};
this.addServiceorgmember = function(serviceorgmember) { 
 if(!this.serviceorgmember) this.serviceorgmember = new Array(); 
  this.serviceorgmember.push(serviceorgmember); 
 return this;
};

var serviceorginvitation = undefined;
this.setServiceorginvitations = function(serviceorginvitation) { 
    this.serviceorginvitation = serviceorginvitation;
    return this;
};
this.getServiceorginvitations = function() {
    return this.serviceorginvitation;
};
this.addServiceorginvitation = function(serviceorginvitation) { 
 if(!this.serviceorginvitation) this.serviceorginvitation = new Array(); 
  this.serviceorginvitation.push(serviceorginvitation); 
 return this;
};

var serviceorginvitationtemplate = undefined;
this.setServiceorginvitationtemplates = function(serviceorginvitationtemplate) { 
    this.serviceorginvitationtemplate = serviceorginvitationtemplate;
    return this;
};
this.getServiceorginvitationtemplates = function() {
    return this.serviceorginvitationtemplate;
};
this.addServiceorginvitationtemplate = function(serviceorginvitationtemplate) { 
 if(!this.serviceorginvitationtemplate) this.serviceorginvitationtemplate = new Array(); 
  this.serviceorginvitationtemplate.push(serviceorginvitationtemplate); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setSubOrgType(json["sub_org_type"]);
		this.setZuid(json["zuid"]);
		this.setDescription(json["description"]);
		this.setAccountStatus(json["account_status"]);
		this.setMigratedToOrg(json["migrated_to_org"]);
		this.setParentZaaid(json["parent_zaaid"]);
		this.setDirectoryZaaid(json["directory_zaaid"]);
		this.setIsExposed(json["is_exposed"]);
		this.setParentOrgType(json["parent_org_type"]);
		this.setEnvironment(json["environment"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setServiceorgconfigurations(URI.getResourceArray(json["serviceOrgConfiguration"],"serviceorgconfiguration"));
		this.setServiceorgoauthaccessgrants(URI.getResourceArray(json["serviceOrgOAuthAccessGrant"],"serviceorgoauthaccessgrant"));
		this.setServiceorgmembers(URI.getResourceArray(json["serviceOrgMember"],"serviceorgmember"));
		this.setServiceorginvitations(URI.getResourceArray(json["serviceOrgInvitation"],"serviceorginvitation"));
		this.setServiceorginvitationtemplates(URI.getResourceArray(json["serviceOrgInvitationTemplate"],"serviceorginvitationtemplate"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getSubOrgType()) json += '"sub_org_type"' + ":" + '"' + jsonEscape(this.getSubOrgType())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getAccountStatus()) json += '"account_status"' + ":" + '"' + jsonEscape(this.getAccountStatus())  + '",';
		if(this.getMigratedToOrg()) json += '"migrated_to_org"' + ":" + '"' + jsonEscape(this.getMigratedToOrg())  + '",';
		if(this.getParentZaaid()) json += '"parent_zaaid"' + ":" + '"' + jsonEscape(this.getParentZaaid())  + '",';
		if(this.getDirectoryZaaid()) json += '"directory_zaaid"' + ":" + '"' + jsonEscape(this.getDirectoryZaaid())  + '",';
		if(this.getIsExposed()) json += '"is_exposed"' + ":" + '"' + jsonEscape(this.getIsExposed())  + '",';
		if(this.getParentOrgType()) json += '"parent_org_type"' + ":" + '"' + jsonEscape(this.getParentOrgType())  + '",';
		if(this.getEnvironment()) json += '"environment"' + ":" + '"' + jsonEscape(this.getEnvironment())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getServiceorgconfigurations()) json += '"serviceOrgConfiguration"' + ":" + URI.toJSONArray(this.getServiceorgconfigurations())  + ',';
		if(this.getServiceorgoauthaccessgrants()) json += '"serviceOrgOAuthAccessGrant"' + ":" + URI.toJSONArray(this.getServiceorgoauthaccessgrants())  + ',';
		if(this.getServiceorgmembers()) json += '"serviceOrgMember"' + ":" + URI.toJSONArray(this.getServiceorgmembers())  + ',';
		if(this.getServiceorginvitations()) json += '"serviceOrgInvitation"' + ":" + URI.toJSONArray(this.getServiceorginvitations())  + ',';
		if(this.getServiceorginvitationtemplates()) json += '"serviceOrgInvitationTemplate"' + ":" + URI.toJSONArray(this.getServiceorginvitationtemplates())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgSubService.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.subOrgType && !Validator.INTEGER.test(this.subOrgType)) { throw new ValidationError(_formprefix + "sub_org_type", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.accountStatus && !Validator.INTEGER.test(this.accountStatus)) { throw new ValidationError(_formprefix + "account_status", ValidationError.PATTERN_FAILED);}
if(this.migratedToOrg && !Validator.BOOLEAN.test(this.migratedToOrg)) { throw new ValidationError(_formprefix + "migrated_to_org", ValidationError.PATTERN_FAILED);}
if(this.parentZaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.parentZaaid)) { throw new ValidationError(_formprefix + "parent_zaaid", ValidationError.PATTERN_FAILED);}
if(this.directoryZaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.directoryZaaid)) { throw new ValidationError(_formprefix + "directory_zaaid", ValidationError.PATTERN_FAILED);}
if(this.isExposed && !Validator.INTEGER.test(this.isExposed)) { throw new ValidationError(_formprefix + "is_exposed", ValidationError.PATTERN_FAILED);}
if(this.parentOrgType && !Validator.INTEGER.test(this.parentOrgType)) { throw new ValidationError(_formprefix + "parent_org_type", ValidationError.PATTERN_FAILED);}
if(this.environment && !Validator.INTEGER.test(this.environment)) { throw new ValidationError(_formprefix + "environment", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.serviceorgconfiguration) { for(i=0; i < this.serviceorgconfiguration.length; i++ ) { this.serviceorgconfiguration[i].validate(); } }
if(this.serviceorgoauthaccessgrant) { for(i=0; i < this.serviceorgoauthaccessgrant.length; i++ ) { this.serviceorgoauthaccessgrant[i].validate(); } }
if(this.serviceorgmember) { for(i=0; i < this.serviceorgmember.length; i++ ) { this.serviceorgmember[i].validate(); } }
if(this.serviceorginvitation) { for(i=0; i < this.serviceorginvitation.length; i++ ) { this.serviceorginvitation[i].validate(); } }
if(this.serviceorginvitationtemplate) { for(i=0; i < this.serviceorginvitationtemplate.length; i++ ) { this.serviceorginvitationtemplate[i].validate(); } }

	return this;
    }
}
ServiceOrgSubService.path = "serviceorgsubservice";
ServiceOrgSubService.newBuilder = function() {
    return new ServiceOrgSubService();
};

UserAnnouncementStatus = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var announcementId = "";
this.setAnnouncementId = function(announcementId) { 
    this.announcementId = announcementId;
    return this;
};
this.getAnnouncementId = function() {
    return this.announcementId;
};
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var status = "0";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var visitedTime = "";
this.setVisitedTime = function(visitedTime) { 
    this.visitedTime = visitedTime;
    return this;
};
this.getVisitedTime = function() {
    return this.visitedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setAnnouncementId(json["announcement_id"]);
		this.setArid(json["arid"]);
		this.setStatus(json["status"]);
		this.setVisitedTime(json["visited_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getAnnouncementId()) json += '"announcement_id"' + ":" + '"' + jsonEscape(this.getAnnouncementId())  + '",';
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getVisitedTime()) json += '"visited_time"' + ":" + '"' + jsonEscape(this.getVisitedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserAnnouncementStatus.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.announcementId && !(/dontdisturb/).test(this.announcementId)) { throw new ValidationError(_formprefix + "announcement_id", ValidationError.PATTERN_FAILED);}
if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.status && !Validator.INTEGER.test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.visitedTime && !Validator.INTEGER.test(this.visitedTime)) { throw new ValidationError(_formprefix + "visited_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserAnnouncementStatus.path = "userannouncementstatus";
UserAnnouncementStatus.newBuilder = function() {
    return new UserAnnouncementStatus();
};

AccountConfiguration = function() {
    var _formprefix = "";
    
var configName = "";
this.setConfigName = function(configName) { 
    this.configName = configName;
    return this;
};
this.getConfigName = function() {
    return this.configName;
};
var configValue = "";
this.setConfigValue = function(configValue) { 
    this.configValue = configValue;
    return this;
};
this.getConfigValue = function() {
    return this.configValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setConfigName(json["config_name"]);
		this.setConfigValue(json["config_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getConfigName()) json += '"config_name"' + ":" + '"' + jsonEscape(this.getConfigName())  + '",';
		if(this.getConfigValue()) json += '"config_value"' + ":" + '"' + jsonEscape(this.getConfigValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountConfiguration.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.configName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.configName)) { throw new ValidationError(_formprefix + "config_name", ValidationError.PATTERN_FAILED);}
if(this.configValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.configValue)) { throw new ValidationError(_formprefix + "config_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountConfiguration.path = "accountconfiguration";
AccountConfiguration.newBuilder = function() {
    return new AccountConfiguration();
};

MobileScreenName = function() {
    var _formprefix = "";
    
var mobileScreenName = "";
this.setMobileScreenName = function(mobileScreenName) { 
    this.mobileScreenName = mobileScreenName;
    return this;
};
this.getMobileScreenName = function() {
    return this.mobileScreenName;
};
var userMobileStatus = "0";
this.setUserMobileStatus = function(userMobileStatus) { 
    this.userMobileStatus = userMobileStatus;
    return this;
};
this.getUserMobileStatus = function() {
    return this.userMobileStatus;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setMobileScreenName(json["mobile_screen_name"]);
		this.setUserMobileStatus(json["user_mobile_status"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getMobileScreenName()) json += '"mobile_screen_name"' + ":" + '"' + jsonEscape(this.getMobileScreenName())  + '",';
		if(this.getUserMobileStatus()) json += '"user_mobile_status"' + ":" + '"' + jsonEscape(this.getUserMobileStatus())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MobileScreenName.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.mobileScreenName && !(/^([\p{L}\p{M}\p{N}\_\.]+)$/).test(this.mobileScreenName)) { throw new ValidationError(_formprefix + "mobile_screen_name", ValidationError.PATTERN_FAILED);}
if(this.userMobileStatus && !Validator.INTEGER.test(this.userMobileStatus)) { throw new ValidationError(_formprefix + "user_mobile_status", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
MobileScreenName.path = "mobilescreenname";
MobileScreenName.newBuilder = function() {
    return new MobileScreenName();
};

ZUID = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var primaryZuid = "";
this.setPrimaryZuid = function(primaryZuid) { 
    this.primaryZuid = primaryZuid;
    return this;
};
this.getPrimaryZuid = function() {
    return this.primaryZuid;
};
var userDeletedTime = "-1";
this.setUserDeletedTime = function(userDeletedTime) { 
    this.userDeletedTime = userDeletedTime;
    return this;
};
this.getUserDeletedTime = function() {
    return this.userDeletedTime;
};
var authType = "ZOHO";
this.setAuthType = function(authType) { 
    this.authType = authType;
    return this;
};
this.getAuthType = function() {
    return this.authType;
};
var email = undefined;
this.setEmails = function(email) { 
    this.email = email;
    return this;
};
this.getEmails = function() {
    return this.email;
};
this.addEmail = function(email) { 
 if(!this.email) this.email = new Array(); 
  this.email.push(email); 
 return this;
};

var username = undefined;
this.setUsernames = function(username) { 
    this.username = username;
    return this;
};
this.getUsernames = function() {
    return this.username;
};
this.addUsername = function(username) { 
 if(!this.username) this.username = new Array(); 
  this.username.push(username); 
 return this;
};

var iscticket = undefined;
this.setIsctickets = function(iscticket) { 
    this.iscticket = iscticket;
    return this;
};
this.getIsctickets = function() {
    return this.iscticket;
};
this.addIscticket = function(iscticket) { 
 if(!this.iscticket) this.iscticket = new Array(); 
  this.iscticket.push(iscticket); 
 return this;
};

var orgupauthtoken = undefined;
this.setOrgupauthtokens = function(orgupauthtoken) { 
    this.orgupauthtoken = orgupauthtoken;
    return this;
};
this.getOrgupauthtokens = function() {
    return this.orgupauthtoken;
};
this.addOrgupauthtoken = function(orgupauthtoken) { 
 if(!this.orgupauthtoken) this.orgupauthtoken = new Array(); 
  this.orgupauthtoken.push(orgupauthtoken); 
 return this;
};

var systemopenid = undefined;
this.setSystemopenids = function(systemopenid) { 
    this.systemopenid = systemopenid;
    return this;
};
this.getSystemopenids = function() {
    return this.systemopenid;
};
this.addSystemopenid = function(systemopenid) { 
 if(!this.systemopenid) this.systemopenid = new Array(); 
  this.systemopenid.push(systemopenid); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setZaid(json["zaid"]);
		this.setPrimaryZuid(json["primary_zuid"]);
		this.setUserDeletedTime(json["user_deleted_time"]);
		this.setAuthType(json["auth_type"]);
		this.setEmails(URI.getResourceArray(json["email"],"email"));
		this.setUsernames(URI.getResourceArray(json["userName"],"username"));
		this.setIsctickets(URI.getResourceArray(json["iSCTicket"],"iscticket"));
		this.setOrgupauthtokens(URI.getResourceArray(json["orgUPAuthToken"],"orgupauthtoken"));
		this.setSystemopenids(URI.getResourceArray(json["systemOpenId"],"systemopenid"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getPrimaryZuid()) json += '"primary_zuid"' + ":" + '"' + jsonEscape(this.getPrimaryZuid())  + '",';
		if(this.getUserDeletedTime()) json += '"user_deleted_time"' + ":" + '"' + jsonEscape(this.getUserDeletedTime())  + '",';
		if(this.getAuthType()) json += '"auth_type"' + ":" + '"' + jsonEscape(this.getAuthType())  + '",';
		if(this.getEmails()) json += '"email"' + ":" + URI.toJSONArray(this.getEmails())  + ',';
		if(this.getUsernames()) json += '"userName"' + ":" + URI.toJSONArray(this.getUsernames())  + ',';
		if(this.getIsctickets()) json += '"iSCTicket"' + ":" + URI.toJSONArray(this.getIsctickets())  + ',';
		if(this.getOrgupauthtokens()) json += '"orgUPAuthToken"' + ":" + URI.toJSONArray(this.getOrgupauthtokens())  + ',';
		if(this.getSystemopenids()) json += '"systemOpenId"' + ":" + URI.toJSONArray(this.getSystemopenids())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ZUID.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.primaryZuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.primaryZuid)) { throw new ValidationError(_formprefix + "primary_zuid", ValidationError.PATTERN_FAILED);}
if(this.userDeletedTime && !Validator.INTEGER.test(this.userDeletedTime)) { throw new ValidationError(_formprefix + "user_deleted_time", ValidationError.PATTERN_FAILED);}
if(this.authType && !(/^([A-Za-z0-9_.\-]+)$/).test(this.authType)) { throw new ValidationError(_formprefix + "auth_type", ValidationError.PATTERN_FAILED);}
if(this.email) { for(i=0; i < this.email.length; i++ ) { this.email[i].validate(); } }
if(this.username) { for(i=0; i < this.username.length; i++ ) { this.username[i].validate(); } }
if(this.iscticket) { for(i=0; i < this.iscticket.length; i++ ) { this.iscticket[i].validate(); } }
if(this.orgupauthtoken) { for(i=0; i < this.orgupauthtoken.length; i++ ) { this.orgupauthtoken[i].validate(); } }
if(this.systemopenid) { for(i=0; i < this.systemopenid.length; i++ ) { this.systemopenid[i].validate(); } }

	return this;
    }
}
ZUID.path = "zuid";
ZUID.newBuilder = function() {
    return new ZUID();
};

MFAAuditTemplate = function() {
    var _formprefix = "";
    
var mfaauditId = "";
this.setMfaauditId = function(mfaauditId) { 
    this.mfaauditId = mfaauditId;
    return this;
};
this.getMfaauditId = function() {
    return this.mfaauditId;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var operationId = "1";
this.setOperationId = function(operationId) { 
    this.operationId = operationId;
    return this;
};
this.getOperationId = function() {
    return this.operationId;
};
var status = "";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var errors = "";
this.setErrors = function(errors) { 
    this.errors = errors;
    return this;
};
this.getErrors = function() {
    return this.errors;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var deviceToken = "";
this.setDeviceToken = function(deviceToken) { 
    this.deviceToken = deviceToken;
    return this;
};
this.getDeviceToken = function() {
    return this.deviceToken;
};
var deviceName = "";
this.setDeviceName = function(deviceName) { 
    this.deviceName = deviceName;
    return this;
};
this.getDeviceName = function() {
    return this.deviceName;
};
var location = "";
this.setLocation = function(location) { 
    this.location = location;
    return this;
};
this.getLocation = function() {
    return this.location;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var startedTime = "";
this.setStartedTime = function(startedTime) { 
    this.startedTime = startedTime;
    return this;
};
this.getStartedTime = function() {
    return this.startedTime;
};
var alteredTime = "";
this.setAlteredTime = function(alteredTime) { 
    this.alteredTime = alteredTime;
    return this;
};
this.getAlteredTime = function() {
    return this.alteredTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setMfaauditId(json["mfaaudit_id"]);
		this.setZuid(json["zuid"]);
		this.setOperationId(json["operation_id"]);
		this.setStatus(json["status"]);
		this.setErrors(json["errors"]);
		this.setUserAgent(json["user_agent"]);
		this.setDeviceToken(json["device_token"]);
		this.setDeviceName(json["device_name"]);
		this.setLocation(json["location"]);
		this.setReferrer(json["referrer"]);
		this.setStartedTime(json["started_time"]);
		this.setAlteredTime(json["altered_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getMfaauditId()) json += '"mfaaudit_id"' + ":" + '"' + jsonEscape(this.getMfaauditId())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getOperationId()) json += '"operation_id"' + ":" + '"' + jsonEscape(this.getOperationId())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getErrors()) json += '"errors"' + ":" + '"' + jsonEscape(this.getErrors())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getDeviceToken()) json += '"device_token"' + ":" + '"' + jsonEscape(this.getDeviceToken())  + '",';
		if(this.getDeviceName()) json += '"device_name"' + ":" + '"' + jsonEscape(this.getDeviceName())  + '",';
		if(this.getLocation()) json += '"location"' + ":" + '"' + jsonEscape(this.getLocation())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getStartedTime()) json += '"started_time"' + ":" + '"' + jsonEscape(this.getStartedTime())  + '",';
		if(this.getAlteredTime()) json += '"altered_time"' + ":" + '"' + jsonEscape(this.getAlteredTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MFAAuditTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.mfaauditId && !(/^([A-Za-z0-9_.\-]+)$/).test(this.mfaauditId)) { throw new ValidationError(_formprefix + "mfaaudit_id", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.operationId && !Validator.INTEGER.test(this.operationId)) { throw new ValidationError(_formprefix + "operation_id", ValidationError.PATTERN_FAILED);}
if(this.status && !(/dontdisturb/).test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.errors && !(/dontdisturb/).test(this.errors)) { throw new ValidationError(_formprefix + "errors", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.deviceToken && !(/xss:throwerror/).test(this.deviceToken)) { throw new ValidationError(_formprefix + "device_token", ValidationError.PATTERN_FAILED);}
if(this.deviceName && !(/xss:throwerror/).test(this.deviceName)) { throw new ValidationError(_formprefix + "device_name", ValidationError.PATTERN_FAILED);}
if(this.location && !(/^([A-Za-z0-9_.\-]+)$/).test(this.location)) { throw new ValidationError(_formprefix + "location", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.startedTime && !Validator.INTEGER.test(this.startedTime)) { throw new ValidationError(_formprefix + "started_time", ValidationError.PATTERN_FAILED);}
if(this.alteredTime && !Validator.INTEGER.test(this.alteredTime)) { throw new ValidationError(_formprefix + "altered_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
MFAAuditTemplate.path = "mfaaudittemplate";
MFAAuditTemplate.newBuilder = function() {
    return new MFAAuditTemplate();
};

GroupProperties = function() {
    var _formprefix = "";
    
var propName = "";
this.setPropName = function(propName) { 
    this.propName = propName;
    return this;
};
this.getPropName = function() {
    return this.propName;
};
var propValue = "";
this.setPropValue = function(propValue) { 
    this.propValue = propValue;
    return this;
};
this.getPropValue = function() {
    return this.propValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPropName(json["prop_name"]);
		this.setPropValue(json["prop_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPropName()) json += '"prop_name"' + ":" + '"' + jsonEscape(this.getPropName())  + '",';
		if(this.getPropValue()) json += '"prop_value"' + ":" + '"' + jsonEscape(this.getPropValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(GroupProperties.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.propName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.propName)) { throw new ValidationError(_formprefix + "prop_name", ValidationError.PATTERN_FAILED);}
if(this.propValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.propValue)) { throw new ValidationError(_formprefix + "prop_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
GroupProperties.path = "groupproperties";
GroupProperties.newBuilder = function() {
    return new GroupProperties();
};

OAuthAccessTokenScopes = function() {
    var _formprefix = "";
    
var scopeId = "";
this.setScopeId = function(scopeId) { 
    this.scopeId = scopeId;
    return this;
};
this.getScopeId = function() {
    return this.scopeId;
};
var allowedOperations = "";
this.setAllowedOperations = function(allowedOperations) { 
    this.allowedOperations = allowedOperations;
    return this;
};
this.getAllowedOperations = function() {
    return this.allowedOperations;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setScopeId(json["scope_id"]);
		this.setAllowedOperations(json["allowed_operations"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getScopeId()) json += '"scope_id"' + ":" + '"' + jsonEscape(this.getScopeId())  + '",';
		if(this.getAllowedOperations()) json += '"allowed_operations"' + ":" + '"' + jsonEscape(this.getAllowedOperations())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthAccessTokenScopes.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.scopeId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.scopeId)) { throw new ValidationError(_formprefix + "scope_id", ValidationError.PATTERN_FAILED);}
if(this.allowedOperations && !Validator.INTEGER.test(this.allowedOperations)) { throw new ValidationError(_formprefix + "allowed_operations", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthAccessTokenScopes.path = "oauthaccesstokenscopes";
OAuthAccessTokenScopes.newBuilder = function() {
    return new OAuthAccessTokenScopes();
};

OAuthAccessTokenOrgInfo = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidtype = "";
this.setZidtype = function(zidtype) { 
    this.zidtype = zidtype;
    return this;
};
this.getZidtype = function() {
    return this.zidtype;
};
var serviceName = "";
this.setServiceName = function(serviceName) { 
    this.serviceName = serviceName;
    return this;
};
this.getServiceName = function() {
    return this.serviceName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidtype(json["zidtype"]);
		this.setServiceName(json["service_name"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidtype()) json += '"zidtype"' + ":" + '"' + jsonEscape(this.getZidtype())  + '",';
		if(this.getServiceName()) json += '"service_name"' + ":" + '"' + jsonEscape(this.getServiceName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthAccessTokenOrgInfo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.zidtype && !Validator.INTEGER.test(this.zidtype)) { throw new ValidationError(_formprefix + "zidtype", ValidationError.PATTERN_FAILED);}
if(this.serviceName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.serviceName)) { throw new ValidationError(_formprefix + "service_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthAccessTokenOrgInfo.path = "oauthaccesstokenorginfo";
OAuthAccessTokenOrgInfo.newBuilder = function() {
    return new OAuthAccessTokenOrgInfo();
};

DCLocation = function() {
    var _formprefix = "";
    
var location = "";
this.setLocation = function(location) { 
    this.location = location;
    return this;
};
this.getLocation = function() {
    return this.location;
};
var basedomain = "";
this.setBasedomain = function(basedomain) { 
    this.basedomain = basedomain;
    return this;
};
this.getBasedomain = function() {
    return this.basedomain;
};
var equivalentBasedomains = "";
this.setEquivalentBasedomains = function(equivalentBasedomains) { 
    this.equivalentBasedomains = equivalentBasedomains;
    return this;
};
this.getEquivalentBasedomains = function() {
    return this.equivalentBasedomains;
};
var isPrefixed = "true";
this.setIsPrefixed = function(isPrefixed) { 
    this.isPrefixed = isPrefixed;
    return this;
};
this.getIsPrefixed = function() {
    return this.isPrefixed;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var serverUrl = "";
this.setServerUrl = function(serverUrl) { 
    this.serverUrl = serverUrl;
    return this;
};
this.getServerUrl = function() {
    return this.serverUrl;
};
var salt = "";
this.setSalt = function(salt) { 
    this.salt = salt;
    return this;
};
this.getSalt = function() {
    return this.salt;
};
var symmetricKey = "";
this.setSymmetricKey = function(symmetricKey) { 
    this.symmetricKey = symmetricKey;
    return this;
};
this.getSymmetricKey = function() {
    return this.symmetricKey;
};
var timeZones = "";
this.setTimeZones = function(timeZones) { 
    this.timeZones = timeZones;
    return this;
};
this.getTimeZones = function() {
    return this.timeZones;
};
var dcOrdinal = "";
this.setDcOrdinal = function(dcOrdinal) { 
    this.dcOrdinal = dcOrdinal;
    return this;
};
this.getDcOrdinal = function() {
    return this.dcOrdinal;
};
var dccustomdomains = undefined;
this.setDccustomdomainss = function(dccustomdomains) { 
    this.dccustomdomains = dccustomdomains;
    return this;
};
this.getDccustomdomainss = function() {
    return this.dccustomdomains;
};
this.addDccustomdomains = function(dccustomdomains) { 
 if(!this.dccustomdomains) this.dccustomdomains = new Array(); 
  this.dccustomdomains.push(dccustomdomains); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLocation(json["location"]);
		this.setBasedomain(json["basedomain"]);
		this.setEquivalentBasedomains(json["equivalent_basedomains"]);
		this.setIsPrefixed(json["is_prefixed"]);
		this.setDescription(json["description"]);
		this.setServerUrl(json["server_url"]);
		this.setSalt(json["salt"]);
		this.setSymmetricKey(json["symmetric_key"]);
		this.setTimeZones(json["time_zones"]);
		this.setDcOrdinal(json["dc_ordinal"]);
		this.setDccustomdomainss(URI.getResourceArray(json["dCCustomDomains"],"dccustomdomains"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLocation()) json += '"location"' + ":" + '"' + jsonEscape(this.getLocation())  + '",';
		if(this.getBasedomain()) json += '"basedomain"' + ":" + '"' + jsonEscape(this.getBasedomain())  + '",';
		if(this.getEquivalentBasedomains()) json += '"equivalent_basedomains"' + ":" + '"' + jsonEscape(this.getEquivalentBasedomains())  + '",';
		if(this.getIsPrefixed()) json += '"is_prefixed"' + ":" + '"' + jsonEscape(this.getIsPrefixed())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getServerUrl()) json += '"server_url"' + ":" + '"' + jsonEscape(this.getServerUrl())  + '",';
		if(this.getSalt()) json += '"salt"' + ":" + '"' + jsonEscape(this.getSalt())  + '",';
		if(this.getSymmetricKey()) json += '"symmetric_key"' + ":" + '"' + jsonEscape(this.getSymmetricKey())  + '",';
		if(this.getTimeZones()) json += '"time_zones"' + ":" + '"' + jsonEscape(this.getTimeZones())  + '",';
		if(this.getDcOrdinal()) json += '"dc_ordinal"' + ":" + '"' + jsonEscape(this.getDcOrdinal())  + '",';
		if(this.getDccustomdomainss()) json += '"dCCustomDomains"' + ":" + URI.toJSONArray(this.getDccustomdomainss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(DCLocation.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.isPrefixed && !Validator.BOOLEAN.test(this.isPrefixed)) { throw new ValidationError(_formprefix + "is_prefixed", ValidationError.PATTERN_FAILED);}
if(this.dccustomdomains) { for(i=0; i < this.dccustomdomains.length; i++ ) { this.dccustomdomains[i].validate(); } }

	return this;
    }
}
DCLocation.path = "dclocation";
DCLocation.newBuilder = function() {
    return new DCLocation();
};

OAuthInternalApiToken = function() {
    var _formprefix = "";
    
var tokenName = "";
this.setTokenName = function(tokenName) { 
    this.tokenName = tokenName;
    return this;
};
this.getTokenName = function() {
    return this.tokenName;
};
var tokenValue = "";
this.setTokenValue = function(tokenValue) { 
    this.tokenValue = tokenValue;
    return this;
};
this.getTokenValue = function() {
    return this.tokenValue;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setTokenName(json["token_name"]);
		this.setTokenValue(json["token_value"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getTokenName()) json += '"token_name"' + ":" + '"' + jsonEscape(this.getTokenName())  + '",';
		if(this.getTokenValue()) json += '"token_value"' + ":" + '"' + jsonEscape(this.getTokenValue())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthInternalApiToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.tokenName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.tokenName)) { throw new ValidationError(_formprefix + "token_name", ValidationError.PATTERN_FAILED);}
if(this.tokenValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.tokenValue)) { throw new ValidationError(_formprefix + "token_value", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthInternalApiToken.path = "oauthinternalapitoken";
OAuthInternalApiToken.newBuilder = function() {
    return new OAuthInternalApiToken();
};

User = function() {
    var _formprefix = "";
    
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var firstName = "";
this.setFirstName = function(firstName) { 
    this.firstName = firstName;
    return this;
};
this.getFirstName = function() {
    return this.firstName;
};
var lastName = "";
this.setLastName = function(lastName) { 
    this.lastName = lastName;
    return this;
};
this.getLastName = function() {
    return this.lastName;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var userStatus = "1";
this.setUserStatus = function(userStatus) { 
    this.userStatus = userStatus;
    return this;
};
this.getUserStatus = function() {
    return this.userStatus;
};
var userRole = "0";
this.setUserRole = function(userRole) { 
    this.userRole = userRole;
    return this;
};
this.getUserRole = function() {
    return this.userRole;
};
var userType = "";
this.setUserType = function(userType) { 
    this.userType = userType;
    return this;
};
this.getUserType = function() {
    return this.userType;
};
var gender = "N";
this.setGender = function(gender) { 
    this.gender = gender;
    return this;
};
this.getGender = function() {
    return this.gender;
};
var countryCode = "";
this.setCountryCode = function(countryCode) { 
    this.countryCode = countryCode;
    return this;
};
this.getCountryCode = function() {
    return this.countryCode;
};
var languageCode = "";
this.setLanguageCode = function(languageCode) { 
    this.languageCode = languageCode;
    return this;
};
this.getLanguageCode = function() {
    return this.languageCode;
};
var languageVariant = "";
this.setLanguageVariant = function(languageVariant) { 
    this.languageVariant = languageVariant;
    return this;
};
this.getLanguageVariant = function() {
    return this.languageVariant;
};
var timezone = "";
this.setTimezone = function(timezone) { 
    this.timezone = timezone;
    return this;
};
this.getTimezone = function() {
    return this.timezone;
};
var dateOfBirth = "";
this.setDateOfBirth = function(dateOfBirth) { 
    this.dateOfBirth = dateOfBirth;
    return this;
};
this.getDateOfBirth = function() {
    return this.dateOfBirth;
};
var dateOfJoining = "";
this.setDateOfJoining = function(dateOfJoining) { 
    this.dateOfJoining = dateOfJoining;
    return this;
};
this.getDateOfJoining = function() {
    return this.dateOfJoining;
};
var aboutMe = "";
this.setAboutMe = function(aboutMe) { 
    this.aboutMe = aboutMe;
    return this;
};
this.getAboutMe = function() {
    return this.aboutMe;
};
var idp = "0";
this.setIdp = function(idp) { 
    this.idp = idp;
    return this;
};
this.getIdp = function() {
    return this.idp;
};
var registrationIpAddress = "";
this.setRegistrationIpAddress = function(registrationIpAddress) { 
    this.registrationIpAddress = registrationIpAddress;
    return this;
};
this.getRegistrationIpAddress = function() {
    return this.registrationIpAddress;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var skypeId = "";
this.setSkypeId = function(skypeId) { 
    this.skypeId = skypeId;
    return this;
};
this.getSkypeId = function() {
    return this.skypeId;
};
var authType = "ZOHO";
this.setAuthType = function(authType) { 
    this.authType = authType;
    return this;
};
this.getAuthType = function() {
    return this.authType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var userinfo = undefined;
this.setUserinfo = function(userinfo) { 
    this.userinfo = userinfo;
    return this;
};
this.getUserinfo = function() {
    return this.userinfo;
};
var userlocation = undefined;
this.setUserlocation = function(userlocation) { 
    this.userlocation = userlocation;
    return this;
};
this.getUserlocation = function() {
    return this.userlocation;
};
var screenname = undefined;
this.setScreennames = function(screenname) { 
    this.screenname = screenname;
    return this;
};
this.getScreennames = function() {
    return this.screenname;
};
this.addScreenname = function(screenname) { 
 if(!this.screenname) this.screenname = new Array(); 
  this.screenname.push(screenname); 
 return this;
};

var mobilescreenname = undefined;
this.setMobilescreennames = function(mobilescreenname) { 
    this.mobilescreenname = mobilescreenname;
    return this;
};
this.getMobilescreennames = function() {
    return this.mobilescreenname;
};
this.addMobilescreenname = function(mobilescreenname) { 
 if(!this.mobilescreenname) this.mobilescreenname = new Array(); 
  this.mobilescreenname.push(mobilescreenname); 
 return this;
};

var useremail = undefined;
this.setUseremails = function(useremail) { 
    this.useremail = useremail;
    return this;
};
this.getUseremails = function() {
    return this.useremail;
};
this.addUseremail = function(useremail) { 
 if(!this.useremail) this.useremail = new Array(); 
  this.useremail.push(useremail); 
 return this;
};

var password = undefined;
this.setPassword = function(password) { 
    this.password = password;
    return this;
};
this.getPassword = function() {
    return this.password;
};
var apppassword = undefined;
this.setApppasswords = function(apppassword) { 
    this.apppassword = apppassword;
    return this;
};
this.getApppasswords = function() {
    return this.apppassword;
};
this.addApppassword = function(apppassword) { 
 if(!this.apppassword) this.apppassword = new Array(); 
  this.apppassword.push(apppassword); 
 return this;
};

var securityqa = undefined;
this.setSecurityqas = function(securityqa) { 
    this.securityqa = securityqa;
    return this;
};
this.getSecurityqas = function() {
    return this.securityqa;
};
this.addSecurityqa = function(securityqa) { 
 if(!this.securityqa) this.securityqa = new Array(); 
  this.securityqa.push(securityqa); 
 return this;
};

var usersecretkey = undefined;
this.setUsersecretkeys = function(usersecretkey) { 
    this.usersecretkey = usersecretkey;
    return this;
};
this.getUsersecretkeys = function() {
    return this.usersecretkey;
};
this.addUsersecretkey = function(usersecretkey) { 
 if(!this.usersecretkey) this.usersecretkey = new Array(); 
  this.usersecretkey.push(usersecretkey); 
 return this;
};

var preference = undefined;
this.setPreference = function(preference) { 
    this.preference = preference;
    return this;
};
this.getPreference = function() {
    return this.preference;
};
var address = undefined;
this.setAddresss = function(address) { 
    this.address = address;
    return this;
};
this.getAddresss = function() {
    return this.address;
};
this.addAddress = function(address) { 
 if(!this.address) this.address = new Array(); 
  this.address.push(address); 
 return this;
};

var properties = undefined;
this.setPropertiess = function(properties) { 
    this.properties = properties;
    return this;
};
this.getPropertiess = function() {
    return this.properties;
};
this.addProperties = function(properties) { 
 if(!this.properties) this.properties = new Array(); 
  this.properties.push(properties); 
 return this;
};

var trusteddomain = undefined;
this.setTrusteddomains = function(trusteddomain) { 
    this.trusteddomain = trusteddomain;
    return this;
};
this.getTrusteddomains = function() {
    return this.trusteddomain;
};
this.addTrusteddomain = function(trusteddomain) { 
 if(!this.trusteddomain) this.trusteddomain = new Array(); 
  this.trusteddomain.push(trusteddomain); 
 return this;
};

var usermobile = undefined;
this.setUsermobiles = function(usermobile) { 
    this.usermobile = usermobile;
    return this;
};
this.getUsermobiles = function() {
    return this.usermobile;
};
this.addUsermobile = function(usermobile) { 
 if(!this.usermobile) this.usermobile = new Array(); 
  this.usermobile.push(usermobile); 
 return this;
};

var userdevice = undefined;
this.setUserdevices = function(userdevice) { 
    this.userdevice = userdevice;
    return this;
};
this.getUserdevices = function() {
    return this.userdevice;
};
this.addUserdevice = function(userdevice) { 
 if(!this.userdevice) this.userdevice = new Array(); 
  this.userdevice.push(userdevice); 
 return this;
};

var signinpreference = undefined;
this.setSigninpreference = function(signinpreference) { 
    this.signinpreference = signinpreference;
    return this;
};
this.getSigninpreference = function() {
    return this.signinpreference;
};
var usertpsecretgroup = undefined;
this.setUsertpsecretgroups = function(usertpsecretgroup) { 
    this.usertpsecretgroup = usertpsecretgroup;
    return this;
};
this.getUsertpsecretgroups = function() {
    return this.usertpsecretgroup;
};
this.addUsertpsecretgroup = function(usertpsecretgroup) { 
 if(!this.usertpsecretgroup) this.usertpsecretgroup = new Array(); 
  this.usertpsecretgroup.push(usertpsecretgroup); 
 return this;
};

var userthirdpartysecretkeys = undefined;
this.setUserthirdpartysecretkeyss = function(userthirdpartysecretkeys) { 
    this.userthirdpartysecretkeys = userthirdpartysecretkeys;
    return this;
};
this.getUserthirdpartysecretkeyss = function() {
    return this.userthirdpartysecretkeys;
};
this.addUserthirdpartysecretkeys = function(userthirdpartysecretkeys) { 
 if(!this.userthirdpartysecretkeys) this.userthirdpartysecretkeys = new Array(); 
  this.userthirdpartysecretkeys.push(userthirdpartysecretkeys); 
 return this;
};

var openid = undefined;
this.setOpenids = function(openid) { 
    this.openid = openid;
    return this;
};
this.getOpenids = function() {
    return this.openid;
};
this.addOpenid = function(openid) { 
 if(!this.openid) this.openid = new Array(); 
  this.openid.push(openid); 
 return this;
};

var passwordhistory = undefined;
this.setPasswordhistorys = function(passwordhistory) { 
    this.passwordhistory = passwordhistory;
    return this;
};
this.getPasswordhistorys = function() {
    return this.passwordhistory;
};
this.addPasswordhistory = function(passwordhistory) { 
 if(!this.passwordhistory) this.passwordhistory = new Array(); 
  this.passwordhistory.push(passwordhistory); 
 return this;
};

var userauthorizedip = undefined;
this.setUserauthorizedips = function(userauthorizedip) { 
    this.userauthorizedip = userauthorizedip;
    return this;
};
this.getUserauthorizedips = function() {
    return this.userauthorizedip;
};
this.addUserauthorizedip = function(userauthorizedip) { 
 if(!this.userauthorizedip) this.userauthorizedip = new Array(); 
  this.userauthorizedip.push(userauthorizedip); 
 return this;
};

var usercustomfield = undefined;
this.setUsercustomfields = function(usercustomfield) { 
    this.usercustomfield = usercustomfield;
    return this;
};
this.getUsercustomfields = function() {
    return this.usercustomfield;
};
this.addUsercustomfield = function(usercustomfield) { 
 if(!this.usercustomfield) this.usercustomfield = new Array(); 
  this.usercustomfield.push(usercustomfield); 
 return this;
};

var recoverycode = undefined;
this.setRecoverycodes = function(recoverycode) { 
    this.recoverycode = recoverycode;
    return this;
};
this.getRecoverycodes = function() {
    return this.recoverycode;
};
this.addRecoverycode = function(recoverycode) { 
 if(!this.recoverycode) this.recoverycode = new Array(); 
  this.recoverycode.push(recoverycode); 
 return this;
};

var usersystemproperties = undefined;
this.setUsersystemproperties = function(usersystemproperties) { 
    this.usersystemproperties = usersystemproperties;
    return this;
};
this.getUsersystemproperties = function() {
    return this.usersystemproperties;
};
var userservicedetails = undefined;
this.setUserservicedetailss = function(userservicedetails) { 
    this.userservicedetails = userservicedetails;
    return this;
};
this.getUserservicedetailss = function() {
    return this.userservicedetails;
};
this.addUserservicedetails = function(userservicedetails) { 
 if(!this.userservicedetails) this.userservicedetails = new Array(); 
  this.userservicedetails.push(userservicedetails); 
 return this;
};

var userverificationcode = undefined;
this.setUserverificationcodes = function(userverificationcode) { 
    this.userverificationcode = userverificationcode;
    return this;
};
this.getUserverificationcodes = function() {
    return this.userverificationcode;
};
this.addUserverificationcode = function(userverificationcode) { 
 if(!this.userverificationcode) this.userverificationcode = new Array(); 
  this.userverificationcode.push(userverificationcode); 
 return this;
};

var useraccountsproperties = undefined;
this.setUseraccountsproperties = function(useraccountsproperties) { 
    this.useraccountsproperties = useraccountsproperties;
    return this;
};
this.getUseraccountsproperties = function() {
    return this.useraccountsproperties;
};
var oauthaccessgrant = undefined;
this.setOauthaccessgrants = function(oauthaccessgrant) { 
    this.oauthaccessgrant = oauthaccessgrant;
    return this;
};
this.getOauthaccessgrants = function() {
    return this.oauthaccessgrant;
};
this.addOauthaccessgrant = function(oauthaccessgrant) { 
 if(!this.oauthaccessgrant) this.oauthaccessgrant = new Array(); 
  this.oauthaccessgrant.push(oauthaccessgrant); 
 return this;
};

var useroauthapps = undefined;
this.setUseroauthappss = function(useroauthapps) { 
    this.useroauthapps = useroauthapps;
    return this;
};
this.getUseroauthappss = function() {
    return this.useroauthapps;
};
this.addUseroauthapps = function(useroauthapps) { 
 if(!this.useroauthapps) this.useroauthapps = new Array(); 
  this.useroauthapps.push(useroauthapps); 
 return this;
};

var oauthallowedclients = undefined;
this.setOauthallowedclientss = function(oauthallowedclients) { 
    this.oauthallowedclients = oauthallowedclients;
    return this;
};
this.getOauthallowedclientss = function() {
    return this.oauthallowedclients;
};
this.addOauthallowedclients = function(oauthallowedclients) { 
 if(!this.oauthallowedclients) this.oauthallowedclients = new Array(); 
  this.oauthallowedclients.push(oauthallowedclients); 
 return this;
};

var usergdprdetails = undefined;
this.setUsergdprdetails = function(usergdprdetails) { 
    this.usergdprdetails = usergdprdetails;
    return this;
};
this.getUsergdprdetails = function() {
    return this.usergdprdetails;
};
var usersigninlocation = undefined;
this.setUsersigninlocations = function(usersigninlocation) { 
    this.usersigninlocation = usersigninlocation;
    return this;
};
this.getUsersigninlocations = function() {
    return this.usersigninlocation;
};
this.addUsersigninlocation = function(usersigninlocation) { 
 if(!this.usersigninlocation) this.usersigninlocation = new Array(); 
  this.usersigninlocation.push(usersigninlocation); 
 return this;
};

var userextendedinfo = undefined;
this.setUserextendedinfo = function(userextendedinfo) { 
    this.userextendedinfo = userextendedinfo;
    return this;
};
this.getUserextendedinfo = function() {
    return this.userextendedinfo;
};
var usermailfetchlocation = undefined;
this.setUsermailfetchlocations = function(usermailfetchlocation) { 
    this.usermailfetchlocation = usermailfetchlocation;
    return this;
};
this.getUsermailfetchlocations = function() {
    return this.usermailfetchlocation;
};
this.addUsermailfetchlocation = function(usermailfetchlocation) { 
 if(!this.usermailfetchlocation) this.usermailfetchlocation = new Array(); 
  this.usermailfetchlocation.push(usermailfetchlocation); 
 return this;
};

var yubikeyregistrationdata = undefined;
this.setYubikeyregistrationdatas = function(yubikeyregistrationdata) { 
    this.yubikeyregistrationdata = yubikeyregistrationdata;
    return this;
};
this.getYubikeyregistrationdatas = function() {
    return this.yubikeyregistrationdata;
};
this.addYubikeyregistrationdata = function(yubikeyregistrationdata) { 
 if(!this.yubikeyregistrationdata) this.yubikeyregistrationdata = new Array(); 
  this.yubikeyregistrationdata.push(yubikeyregistrationdata); 
 return this;
};

var oneauthpreference = undefined;
this.setOneauthpreference = function(oneauthpreference) { 
    this.oneauthpreference = oneauthpreference;
    return this;
};
this.getOneauthpreference = function() {
    return this.oneauthpreference;
};
var userappkeystore = undefined;
this.setUserappkeystores = function(userappkeystore) { 
    this.userappkeystore = userappkeystore;
    return this;
};
this.getUserappkeystores = function() {
    return this.userappkeystore;
};
this.addUserappkeystore = function(userappkeystore) { 
 if(!this.userappkeystore) this.userappkeystore = new Array(); 
  this.userappkeystore.push(userappkeystore); 
 return this;
};

var attribute = undefined;
this.setAttributes = function(attribute) { 
    this.attribute = attribute;
    return this;
};
this.getAttributes = function() {
    return this.attribute;
};
this.addAttribute = function(attribute) { 
 if(!this.attribute) this.attribute = new Array(); 
  this.attribute.push(attribute); 
 return this;
};

var userphoto = undefined;
this.setUserphoto = function(userphoto) { 
    this.userphoto = userphoto;
    return this;
};
this.getUserphoto = function() {
    return this.userphoto;
};
var authtoken = undefined;
this.setAuthtokens = function(authtoken) { 
    this.authtoken = authtoken;
    return this;
};
this.getAuthtokens = function() {
    return this.authtoken;
};
this.addAuthtoken = function(authtoken) { 
 if(!this.authtoken) this.authtoken = new Array(); 
  this.authtoken.push(authtoken); 
 return this;
};

var useralldomainstoken = undefined;
this.setUseralldomainstokens = function(useralldomainstoken) { 
    this.useralldomainstoken = useralldomainstoken;
    return this;
};
this.getUseralldomainstokens = function() {
    return this.useralldomainstoken;
};
this.addUseralldomainstoken = function(useralldomainstoken) { 
 if(!this.useralldomainstoken) this.useralldomainstoken = new Array(); 
  this.useralldomainstoken.push(useralldomainstoken); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZuid(json["zuid"]);
		this.setFirstName(json["first_name"]);
		this.setLastName(json["last_name"]);
		this.setDisplayName(json["display_name"]);
		this.setUserStatus(json["user_status"]);
		this.setUserRole(json["user_role"]);
		this.setUserType(json["user_type"]);
		this.setGender(json["gender"]);
		this.setCountryCode(json["country_code"]);
		this.setLanguageCode(json["language_code"]);
		this.setLanguageVariant(json["language_variant"]);
		this.setTimezone(json["timezone"]);
		this.setDateOfBirth(json["date_of_birth"]);
		this.setDateOfJoining(json["date_of_joining"]);
		this.setAboutMe(json["about_me"]);
		this.setIdp(json["idp"]);
		this.setRegistrationIpAddress(json["registration_ip_address"]);
		this.setReferrer(json["referrer"]);
		this.setSkypeId(json["skype_id"]);
		this.setAuthType(json["auth_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setUserinfo(URI.getResource(json["userInfo"],"userinfo"));
		this.setUserlocation(URI.getResource(json["userLocation"],"userlocation"));
		this.setScreennames(URI.getResourceArray(json["screenName"],"screenname"));
		this.setMobilescreennames(URI.getResourceArray(json["mobileScreenName"],"mobilescreenname"));
		this.setUseremails(URI.getResourceArray(json["userEmail"],"useremail"));
		this.setPassword(URI.getResource(json["password"],"password"));
		this.setApppasswords(URI.getResourceArray(json["appPassword"],"apppassword"));
		this.setSecurityqas(URI.getResourceArray(json["securityQA"],"securityqa"));
		this.setUsersecretkeys(URI.getResourceArray(json["userSecretKey"],"usersecretkey"));
		this.setPreference(URI.getResource(json["preference"],"preference"));
		this.setAddresss(URI.getResourceArray(json["address"],"address"));
		this.setPropertiess(URI.getResourceArray(json["properties"],"properties"));
		this.setTrusteddomains(URI.getResourceArray(json["trustedDomain"],"trusteddomain"));
		this.setUsermobiles(URI.getResourceArray(json["userMobile"],"usermobile"));
		this.setUserdevices(URI.getResourceArray(json["userDevice"],"userdevice"));
		this.setSigninpreference(URI.getResource(json["signinPreference"],"signinpreference"));
		this.setUsertpsecretgroups(URI.getResourceArray(json["userTPSecretGroup"],"usertpsecretgroup"));
		this.setUserthirdpartysecretkeyss(URI.getResourceArray(json["userThirdPartySecretKeys"],"userthirdpartysecretkeys"));
		this.setOpenids(URI.getResourceArray(json["openId"],"openid"));
		this.setPasswordhistorys(URI.getResourceArray(json["passwordHistory"],"passwordhistory"));
		this.setUserauthorizedips(URI.getResourceArray(json["userAuthorizedIp"],"userauthorizedip"));
		this.setUsercustomfields(URI.getResourceArray(json["userCustomField"],"usercustomfield"));
		this.setRecoverycodes(URI.getResourceArray(json["recoveryCode"],"recoverycode"));
		this.setUsersystemproperties(URI.getResource(json["userSystemProperties"],"usersystemproperties"));
		this.setUserservicedetailss(URI.getResourceArray(json["userServiceDetails"],"userservicedetails"));
		this.setUserverificationcodes(URI.getResourceArray(json["userVerificationCode"],"userverificationcode"));
		this.setUseraccountsproperties(URI.getResource(json["userAccountsProperties"],"useraccountsproperties"));
		this.setOauthaccessgrants(URI.getResourceArray(json["oAuthAccessGrant"],"oauthaccessgrant"));
		this.setUseroauthappss(URI.getResourceArray(json["userOAuthApps"],"useroauthapps"));
		this.setOauthallowedclientss(URI.getResourceArray(json["oAuthAllowedClients"],"oauthallowedclients"));
		this.setUsergdprdetails(URI.getResource(json["userGDPRDetails"],"usergdprdetails"));
		this.setUsersigninlocations(URI.getResourceArray(json["userSigninLocation"],"usersigninlocation"));
		this.setUserextendedinfo(URI.getResource(json["userExtendedInfo"],"userextendedinfo"));
		this.setUsermailfetchlocations(URI.getResourceArray(json["userMailFetchLocation"],"usermailfetchlocation"));
		this.setYubikeyregistrationdatas(URI.getResourceArray(json["yubikeyRegistrationData"],"yubikeyregistrationdata"));
		this.setOneauthpreference(URI.getResource(json["oneAuthPreference"],"oneauthpreference"));
		this.setUserappkeystores(URI.getResourceArray(json["userAppKeyStore"],"userappkeystore"));
		this.setAttributes(URI.getResourceArray(json["attribute"],"attribute"));
		this.setUserphoto(URI.getResource(json["userPhoto"],"userphoto"));
		this.setAuthtokens(URI.getResourceArray(json["authToken"],"authtoken"));
		this.setUseralldomainstokens(URI.getResourceArray(json["userAllDomainsToken"],"useralldomainstoken"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getFirstName()) json += '"first_name"' + ":" + '"' + jsonEscape(this.getFirstName())  + '",';
		if(this.getLastName()) json += '"last_name"' + ":" + '"' + jsonEscape(this.getLastName())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getUserStatus()) json += '"user_status"' + ":" + '"' + jsonEscape(this.getUserStatus())  + '",';
		if(this.getUserRole()) json += '"user_role"' + ":" + '"' + jsonEscape(this.getUserRole())  + '",';
		if(this.getUserType()) json += '"user_type"' + ":" + '"' + jsonEscape(this.getUserType())  + '",';
		if(this.getGender()) json += '"gender"' + ":" + '"' + jsonEscape(this.getGender())  + '",';
		if(this.getCountryCode()) json += '"country_code"' + ":" + '"' + jsonEscape(this.getCountryCode())  + '",';
		if(this.getLanguageCode()) json += '"language_code"' + ":" + '"' + jsonEscape(this.getLanguageCode())  + '",';
		if(this.getLanguageVariant()) json += '"language_variant"' + ":" + '"' + jsonEscape(this.getLanguageVariant())  + '",';
		if(this.getTimezone()) json += '"timezone"' + ":" + '"' + jsonEscape(this.getTimezone())  + '",';
		if(this.getDateOfBirth()) json += '"date_of_birth"' + ":" + '"' + jsonEscape(this.getDateOfBirth())  + '",';
		if(this.getDateOfJoining()) json += '"date_of_joining"' + ":" + '"' + jsonEscape(this.getDateOfJoining())  + '",';
		if(this.getAboutMe()) json += '"about_me"' + ":" + '"' + jsonEscape(this.getAboutMe())  + '",';
		if(this.getIdp()) json += '"idp"' + ":" + '"' + jsonEscape(this.getIdp())  + '",';
		if(this.getRegistrationIpAddress()) json += '"registration_ip_address"' + ":" + '"' + jsonEscape(this.getRegistrationIpAddress())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getSkypeId()) json += '"skype_id"' + ":" + '"' + jsonEscape(this.getSkypeId())  + '",';
		if(this.getAuthType()) json += '"auth_type"' + ":" + '"' + jsonEscape(this.getAuthType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getUserinfo()) json += '"userInfo"' + ":" + this.getUserinfo().toJSON()  + ',';
		if(this.getUserlocation()) json += '"userLocation"' + ":" + this.getUserlocation().toJSON()  + ',';
		if(this.getScreennames()) json += '"screenName"' + ":" + URI.toJSONArray(this.getScreennames())  + ',';
		if(this.getMobilescreennames()) json += '"mobileScreenName"' + ":" + URI.toJSONArray(this.getMobilescreennames())  + ',';
		if(this.getUseremails()) json += '"userEmail"' + ":" + URI.toJSONArray(this.getUseremails())  + ',';
		if(this.getPassword()) json += '"password"' + ":" + this.getPassword().toJSON()  + ',';
		if(this.getApppasswords()) json += '"appPassword"' + ":" + URI.toJSONArray(this.getApppasswords())  + ',';
		if(this.getSecurityqas()) json += '"securityQA"' + ":" + URI.toJSONArray(this.getSecurityqas())  + ',';
		if(this.getUsersecretkeys()) json += '"userSecretKey"' + ":" + URI.toJSONArray(this.getUsersecretkeys())  + ',';
		if(this.getPreference()) json += '"preference"' + ":" + this.getPreference().toJSON()  + ',';
		if(this.getAddresss()) json += '"address"' + ":" + URI.toJSONArray(this.getAddresss())  + ',';
		if(this.getPropertiess()) json += '"properties"' + ":" + URI.toJSONArray(this.getPropertiess())  + ',';
		if(this.getTrusteddomains()) json += '"trustedDomain"' + ":" + URI.toJSONArray(this.getTrusteddomains())  + ',';
		if(this.getUsermobiles()) json += '"userMobile"' + ":" + URI.toJSONArray(this.getUsermobiles())  + ',';
		if(this.getUserdevices()) json += '"userDevice"' + ":" + URI.toJSONArray(this.getUserdevices())  + ',';
		if(this.getSigninpreference()) json += '"signinPreference"' + ":" + this.getSigninpreference().toJSON()  + ',';
		if(this.getUsertpsecretgroups()) json += '"userTPSecretGroup"' + ":" + URI.toJSONArray(this.getUsertpsecretgroups())  + ',';
		if(this.getUserthirdpartysecretkeyss()) json += '"userThirdPartySecretKeys"' + ":" + URI.toJSONArray(this.getUserthirdpartysecretkeyss())  + ',';
		if(this.getOpenids()) json += '"openId"' + ":" + URI.toJSONArray(this.getOpenids())  + ',';
		if(this.getPasswordhistorys()) json += '"passwordHistory"' + ":" + URI.toJSONArray(this.getPasswordhistorys())  + ',';
		if(this.getUserauthorizedips()) json += '"userAuthorizedIp"' + ":" + URI.toJSONArray(this.getUserauthorizedips())  + ',';
		if(this.getUsercustomfields()) json += '"userCustomField"' + ":" + URI.toJSONArray(this.getUsercustomfields())  + ',';
		if(this.getRecoverycodes()) json += '"recoveryCode"' + ":" + URI.toJSONArray(this.getRecoverycodes())  + ',';
		if(this.getUsersystemproperties()) json += '"userSystemProperties"' + ":" + this.getUsersystemproperties().toJSON()  + ',';
		if(this.getUserservicedetailss()) json += '"userServiceDetails"' + ":" + URI.toJSONArray(this.getUserservicedetailss())  + ',';
		if(this.getUserverificationcodes()) json += '"userVerificationCode"' + ":" + URI.toJSONArray(this.getUserverificationcodes())  + ',';
		if(this.getUseraccountsproperties()) json += '"userAccountsProperties"' + ":" + this.getUseraccountsproperties().toJSON()  + ',';
		if(this.getOauthaccessgrants()) json += '"oAuthAccessGrant"' + ":" + URI.toJSONArray(this.getOauthaccessgrants())  + ',';
		if(this.getUseroauthappss()) json += '"userOAuthApps"' + ":" + URI.toJSONArray(this.getUseroauthappss())  + ',';
		if(this.getOauthallowedclientss()) json += '"oAuthAllowedClients"' + ":" + URI.toJSONArray(this.getOauthallowedclientss())  + ',';
		if(this.getUsergdprdetails()) json += '"userGDPRDetails"' + ":" + this.getUsergdprdetails().toJSON()  + ',';
		if(this.getUsersigninlocations()) json += '"userSigninLocation"' + ":" + URI.toJSONArray(this.getUsersigninlocations())  + ',';
		if(this.getUserextendedinfo()) json += '"userExtendedInfo"' + ":" + this.getUserextendedinfo().toJSON()  + ',';
		if(this.getUsermailfetchlocations()) json += '"userMailFetchLocation"' + ":" + URI.toJSONArray(this.getUsermailfetchlocations())  + ',';
		if(this.getYubikeyregistrationdatas()) json += '"yubikeyRegistrationData"' + ":" + URI.toJSONArray(this.getYubikeyregistrationdatas())  + ',';
		if(this.getOneauthpreference()) json += '"oneAuthPreference"' + ":" + this.getOneauthpreference().toJSON()  + ',';
		if(this.getUserappkeystores()) json += '"userAppKeyStore"' + ":" + URI.toJSONArray(this.getUserappkeystores())  + ',';
		if(this.getAttributes()) json += '"attribute"' + ":" + URI.toJSONArray(this.getAttributes())  + ',';
		if(this.getUserphoto()) json += '"userPhoto"' + ":" + this.getUserphoto().toJSON()  + ',';
		if(this.getAuthtokens()) json += '"authToken"' + ":" + URI.toJSONArray(this.getAuthtokens())  + ',';
		if(this.getUseralldomainstokens()) json += '"userAllDomainsToken"' + ":" + URI.toJSONArray(this.getUseralldomainstokens())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(User.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.firstName && !(/xss:throwerror/).test(this.firstName)) { throw new ValidationError(_formprefix + "first_name", ValidationError.PATTERN_FAILED);}
if(this.lastName && !(/xss:throwerror/).test(this.lastName)) { throw new ValidationError(_formprefix + "last_name", ValidationError.PATTERN_FAILED);}
if(this.displayName && !(/xss:throwerror/).test(this.displayName)) { throw new ValidationError(_formprefix + "display_name", ValidationError.PATTERN_FAILED);}
if(this.userStatus && !Validator.INTEGER.test(this.userStatus)) { throw new ValidationError(_formprefix + "user_status", ValidationError.PATTERN_FAILED);}
if(this.userRole && !Validator.INTEGER.test(this.userRole)) { throw new ValidationError(_formprefix + "user_role", ValidationError.PATTERN_FAILED);}
if(this.userType && !(/^([A-Za-z0-9_.\-]+)$/).test(this.userType)) { throw new ValidationError(_formprefix + "user_type", ValidationError.PATTERN_FAILED);}
if(this.countryCode && !(/^[a-zA-Z0-9]{2,5}$/).test(this.countryCode)) { throw new ValidationError(_formprefix + "country_code", ValidationError.PATTERN_FAILED);}
if(this.languageCode && !(/^[a-zA-Z-]{0,5}$/).test(this.languageCode)) { throw new ValidationError(_formprefix + "language_code", ValidationError.PATTERN_FAILED);}
if(this.languageVariant && !(/^[a-z0-9]{0,30}$/).test(this.languageVariant)) { throw new ValidationError(_formprefix + "language_variant", ValidationError.PATTERN_FAILED);}
if(this.timezone && !(/xss:throwerror/).test(this.timezone)) { throw new ValidationError(_formprefix + "timezone", ValidationError.PATTERN_FAILED);}
if(this.dateOfBirth && !Validator.INTEGER.test(this.dateOfBirth)) { throw new ValidationError(_formprefix + "date_of_birth", ValidationError.PATTERN_FAILED);}
if(this.dateOfJoining && !Validator.INTEGER.test(this.dateOfJoining)) { throw new ValidationError(_formprefix + "date_of_joining", ValidationError.PATTERN_FAILED);}
if(this.aboutMe && !(/xss:throwerror/).test(this.aboutMe)) { throw new ValidationError(_formprefix + "about_me", ValidationError.PATTERN_FAILED);}
if(this.idp && !Validator.INTEGER.test(this.idp)) { throw new ValidationError(_formprefix + "idp", ValidationError.PATTERN_FAILED);}
if(this.registrationIpAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.registrationIpAddress)) { throw new ValidationError(_formprefix + "registration_ip_address", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/xss:throwerror/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.skypeId && !(/^([A-Za-z0-9_.\-]+)$/).test(this.skypeId)) { throw new ValidationError(_formprefix + "skype_id", ValidationError.PATTERN_FAILED);}
if(this.authType && !(/^([A-Za-z0-9_.\-]+)$/).test(this.authType)) { throw new ValidationError(_formprefix + "auth_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.userinfo) { this.userinfo.validate(); }
if(this.userlocation) { this.userlocation.validate(); }
if(this.screenname) { for(i=0; i < this.screenname.length; i++ ) { this.screenname[i].validate(); } }
if(this.mobilescreenname) { for(i=0; i < this.mobilescreenname.length; i++ ) { this.mobilescreenname[i].validate(); } }
if(this.useremail) { for(i=0; i < this.useremail.length; i++ ) { this.useremail[i].validate(); } }
if(this.password) { this.password.validate(); }
if(this.apppassword) { for(i=0; i < this.apppassword.length; i++ ) { this.apppassword[i].validate(); } }
if(this.securityqa) { for(i=0; i < this.securityqa.length; i++ ) { this.securityqa[i].validate(); } }
if(this.usersecretkey) { for(i=0; i < this.usersecretkey.length; i++ ) { this.usersecretkey[i].validate(); } }
if(this.preference) { this.preference.validate(); }
if(this.address) { for(i=0; i < this.address.length; i++ ) { this.address[i].validate(); } }
if(this.properties) { for(i=0; i < this.properties.length; i++ ) { this.properties[i].validate(); } }
if(this.trusteddomain) { for(i=0; i < this.trusteddomain.length; i++ ) { this.trusteddomain[i].validate(); } }
if(this.usermobile) { for(i=0; i < this.usermobile.length; i++ ) { this.usermobile[i].validate(); } }
if(this.userdevice) { for(i=0; i < this.userdevice.length; i++ ) { this.userdevice[i].validate(); } }
if(this.signinpreference) { this.signinpreference.validate(); }
if(this.usertpsecretgroup) { for(i=0; i < this.usertpsecretgroup.length; i++ ) { this.usertpsecretgroup[i].validate(); } }
if(this.userthirdpartysecretkeys) { for(i=0; i < this.userthirdpartysecretkeys.length; i++ ) { this.userthirdpartysecretkeys[i].validate(); } }
if(this.openid) { for(i=0; i < this.openid.length; i++ ) { this.openid[i].validate(); } }
if(this.passwordhistory) { for(i=0; i < this.passwordhistory.length; i++ ) { this.passwordhistory[i].validate(); } }
if(this.userauthorizedip) { for(i=0; i < this.userauthorizedip.length; i++ ) { this.userauthorizedip[i].validate(); } }
if(this.usercustomfield) { for(i=0; i < this.usercustomfield.length; i++ ) { this.usercustomfield[i].validate(); } }
if(this.recoverycode) { for(i=0; i < this.recoverycode.length; i++ ) { this.recoverycode[i].validate(); } }
if(this.usersystemproperties) { this.usersystemproperties.validate(); }
if(this.userservicedetails) { for(i=0; i < this.userservicedetails.length; i++ ) { this.userservicedetails[i].validate(); } }
if(this.userverificationcode) { for(i=0; i < this.userverificationcode.length; i++ ) { this.userverificationcode[i].validate(); } }
if(this.useraccountsproperties) { this.useraccountsproperties.validate(); }
if(this.oauthaccessgrant) { for(i=0; i < this.oauthaccessgrant.length; i++ ) { this.oauthaccessgrant[i].validate(); } }
if(this.useroauthapps) { for(i=0; i < this.useroauthapps.length; i++ ) { this.useroauthapps[i].validate(); } }
if(this.oauthallowedclients) { for(i=0; i < this.oauthallowedclients.length; i++ ) { this.oauthallowedclients[i].validate(); } }
if(this.usergdprdetails) { this.usergdprdetails.validate(); }
if(this.usersigninlocation) { for(i=0; i < this.usersigninlocation.length; i++ ) { this.usersigninlocation[i].validate(); } }
if(this.userextendedinfo) { this.userextendedinfo.validate(); }
if(this.usermailfetchlocation) { for(i=0; i < this.usermailfetchlocation.length; i++ ) { this.usermailfetchlocation[i].validate(); } }
if(this.yubikeyregistrationdata) { for(i=0; i < this.yubikeyregistrationdata.length; i++ ) { this.yubikeyregistrationdata[i].validate(); } }
if(this.oneauthpreference) { this.oneauthpreference.validate(); }
if(this.userappkeystore) { for(i=0; i < this.userappkeystore.length; i++ ) { this.userappkeystore[i].validate(); } }
if(this.attribute) { for(i=0; i < this.attribute.length; i++ ) { this.attribute[i].validate(); } }
if(this.userphoto) { this.userphoto.validate(); }
if(this.authtoken) { for(i=0; i < this.authtoken.length; i++ ) { this.authtoken[i].validate(); } }
if(this.useralldomainstoken) { for(i=0; i < this.useralldomainstoken.length; i++ ) { this.useralldomainstoken[i].validate(); } }

	return this;
    }
}
User.path = "user";
User.newBuilder = function() {
    return new User();
};

AccountMember = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidType = "User";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var zarid = "";
this.setZarid = function(zarid) { 
    this.zarid = zarid;
    return this;
};
this.getZarid = function() {
    return this.zarid;
};
var isActive = "1";
this.setIsActive = function(isActive) { 
    this.isActive = isActive;
    return this;
};
this.getIsActive = function() {
    return this.isActive;
};
var userType = "";
this.setUserType = function(userType) { 
    this.userType = userType;
    return this;
};
this.getUserType = function() {
    return this.userType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var accountmemberrole = undefined;
this.setAccountmemberroles = function(accountmemberrole) { 
    this.accountmemberrole = accountmemberrole;
    return this;
};
this.getAccountmemberroles = function() {
    return this.accountmemberrole;
};
this.addAccountmemberrole = function(accountmemberrole) { 
 if(!this.accountmemberrole) this.accountmemberrole = new Array(); 
  this.accountmemberrole.push(accountmemberrole); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidType(json["zid_type"]);
		this.setZarid(json["zarid"]);
		this.setIsActive(json["is_active"]);
		this.setUserType(json["user_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setAccountmemberroles(URI.getResourceArray(json["accountMemberRole"],"accountmemberrole"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getZarid()) json += '"zarid"' + ":" + '"' + jsonEscape(this.getZarid())  + '",';
		if(this.getIsActive()) json += '"is_active"' + ":" + '"' + jsonEscape(this.getIsActive())  + '",';
		if(this.getUserType()) json += '"user_type"' + ":" + '"' + jsonEscape(this.getUserType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getAccountmemberroles()) json += '"accountMemberRole"' + ":" + URI.toJSONArray(this.getAccountmemberroles())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountMember.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.zarid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zarid)) { throw new ValidationError(_formprefix + "zarid", ValidationError.PATTERN_FAILED);}
if(this.isActive && !Validator.INTEGER.test(this.isActive)) { throw new ValidationError(_formprefix + "is_active", ValidationError.PATTERN_FAILED);}
if(this.userType && !Validator.INTEGER.test(this.userType)) { throw new ValidationError(_formprefix + "user_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.accountmemberrole) { for(i=0; i < this.accountmemberrole.length; i++ ) { this.accountmemberrole[i].validate(); } }

	return this;
    }
}
AccountMember.path = "accountmember";
AccountMember.newBuilder = function() {
    return new AccountMember();
};

ServiceOrgKYCContact = function() {
    var _formprefix = "";
    
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var firstName = "";
this.setFirstName = function(firstName) { 
    this.firstName = firstName;
    return this;
};
this.getFirstName = function() {
    return this.firstName;
};
var lastName = "";
this.setLastName = function(lastName) { 
    this.lastName = lastName;
    return this;
};
this.getLastName = function() {
    return this.lastName;
};
var dataProtectionOfficer = "false";
this.setDataProtectionOfficer = function(dataProtectionOfficer) { 
    this.dataProtectionOfficer = dataProtectionOfficer;
    return this;
};
this.getDataProtectionOfficer = function() {
    return this.dataProtectionOfficer;
};
var privacyRepresentative = "false";
this.setPrivacyRepresentative = function(privacyRepresentative) { 
    this.privacyRepresentative = privacyRepresentative;
    return this;
};
this.getPrivacyRepresentative = function() {
    return this.privacyRepresentative;
};
var accountDisputeResolution = "false";
this.setAccountDisputeResolution = function(accountDisputeResolution) { 
    this.accountDisputeResolution = accountDisputeResolution;
    return this;
};
this.getAccountDisputeResolution = function() {
    return this.accountDisputeResolution;
};
var breachNotification = "false";
this.setBreachNotification = function(breachNotification) { 
    this.breachNotification = breachNotification;
    return this;
};
this.getBreachNotification = function() {
    return this.breachNotification;
};
var subprocessorNotification = "false";
this.setSubprocessorNotification = function(subprocessorNotification) { 
    this.subprocessorNotification = subprocessorNotification;
    return this;
};
this.getSubprocessorNotification = function() {
    return this.subprocessorNotification;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setEmailId(json["email_id"]);
		this.setFirstName(json["first_name"]);
		this.setLastName(json["last_name"]);
		this.setDataProtectionOfficer(json["data_protection_officer"]);
		this.setPrivacyRepresentative(json["privacy_representative"]);
		this.setAccountDisputeResolution(json["account_dispute_resolution"]);
		this.setBreachNotification(json["breach_notification"]);
		this.setSubprocessorNotification(json["subprocessor_notification"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getFirstName()) json += '"first_name"' + ":" + '"' + jsonEscape(this.getFirstName())  + '",';
		if(this.getLastName()) json += '"last_name"' + ":" + '"' + jsonEscape(this.getLastName())  + '",';
		if(this.getDataProtectionOfficer()) json += '"data_protection_officer"' + ":" + '"' + jsonEscape(this.getDataProtectionOfficer())  + '",';
		if(this.getPrivacyRepresentative()) json += '"privacy_representative"' + ":" + '"' + jsonEscape(this.getPrivacyRepresentative())  + '",';
		if(this.getAccountDisputeResolution()) json += '"account_dispute_resolution"' + ":" + '"' + jsonEscape(this.getAccountDisputeResolution())  + '",';
		if(this.getBreachNotification()) json += '"breach_notification"' + ":" + '"' + jsonEscape(this.getBreachNotification())  + '",';
		if(this.getSubprocessorNotification()) json += '"subprocessor_notification"' + ":" + '"' + jsonEscape(this.getSubprocessorNotification())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgKYCContact.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.firstName && !(/xss:throwerror/).test(this.firstName)) { throw new ValidationError(_formprefix + "first_name", ValidationError.PATTERN_FAILED);}
if(this.lastName && !(/xss:throwerror/).test(this.lastName)) { throw new ValidationError(_formprefix + "last_name", ValidationError.PATTERN_FAILED);}
if(this.dataProtectionOfficer && !Validator.BOOLEAN.test(this.dataProtectionOfficer)) { throw new ValidationError(_formprefix + "data_protection_officer", ValidationError.PATTERN_FAILED);}
if(this.privacyRepresentative && !Validator.BOOLEAN.test(this.privacyRepresentative)) { throw new ValidationError(_formprefix + "privacy_representative", ValidationError.PATTERN_FAILED);}
if(this.accountDisputeResolution && !Validator.BOOLEAN.test(this.accountDisputeResolution)) { throw new ValidationError(_formprefix + "account_dispute_resolution", ValidationError.PATTERN_FAILED);}
if(this.breachNotification && !Validator.BOOLEAN.test(this.breachNotification)) { throw new ValidationError(_formprefix + "breach_notification", ValidationError.PATTERN_FAILED);}
if(this.subprocessorNotification && !Validator.BOOLEAN.test(this.subprocessorNotification)) { throw new ValidationError(_formprefix + "subprocessor_notification", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgKYCContact.path = "serviceorgkyccontact";
ServiceOrgKYCContact.newBuilder = function() {
    return new ServiceOrgKYCContact();
};

OAuthClient = function() {
    var _formprefix = "";
    
var clientName = "";
this.setClientName = function(clientName) { 
    this.clientName = clientName;
    return this;
};
this.getClientName = function() {
    return this.clientName;
};
var clientId = "";
this.setClientId = function(clientId) { 
    this.clientId = clientId;
    return this;
};
this.getClientId = function() {
    return this.clientId;
};
var clientSecret = "";
this.setClientSecret = function(clientSecret) { 
    this.clientSecret = clientSecret;
    return this;
};
this.getClientSecret = function() {
    return this.clientSecret;
};
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
var clientDomain = "";
this.setClientDomain = function(clientDomain) { 
    this.clientDomain = clientDomain;
    return this;
};
this.getClientDomain = function() {
    return this.clientDomain;
};
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidType = "1";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var status = "1";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var clientType = "1";
this.setClientType = function(clientType) { 
    this.clientType = clientType;
    return this;
};
this.getClientType = function() {
    return this.clientType;
};
var isRestricted = "0";
this.setIsRestricted = function(isRestricted) { 
    this.isRestricted = isRestricted;
    return this;
};
this.getIsRestricted = function() {
    return this.isRestricted;
};
var homePageUrl = "";
this.setHomePageUrl = function(homePageUrl) { 
    this.homePageUrl = homePageUrl;
    return this;
};
this.getHomePageUrl = function() {
    return this.homePageUrl;
};
var createdBy = "";
this.setCreatedBy = function(createdBy) { 
    this.createdBy = createdBy;
    return this;
};
this.getCreatedBy = function() {
    return this.createdBy;
};
var description = "";
this.setDescription = function(description) { 
    this.description = description;
    return this;
};
this.getDescription = function() {
    return this.description;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var primaryDc = "";
this.setPrimaryDc = function(primaryDc) { 
    this.primaryDc = primaryDc;
    return this;
};
this.getPrimaryDc = function() {
    return this.primaryDc;
};
var lastPrimarySyncTime = "";
this.setLastPrimarySyncTime = function(lastPrimarySyncTime) { 
    this.lastPrimarySyncTime = lastPrimarySyncTime;
    return this;
};
this.getLastPrimarySyncTime = function() {
    return this.lastPrimarySyncTime;
};
var oauthclientscopes = undefined;
this.setOauthclientscopess = function(oauthclientscopes) { 
    this.oauthclientscopes = oauthclientscopes;
    return this;
};
this.getOauthclientscopess = function() {
    return this.oauthclientscopes;
};
this.addOauthclientscopes = function(oauthclientscopes) { 
 if(!this.oauthclientscopes) this.oauthclientscopes = new Array(); 
  this.oauthclientscopes.push(oauthclientscopes); 
 return this;
};

var oauthopenid = undefined;
this.setOauthopenids = function(oauthopenid) { 
    this.oauthopenid = oauthopenid;
    return this;
};
this.getOauthopenids = function() {
    return this.oauthopenid;
};
this.addOauthopenid = function(oauthopenid) { 
 if(!this.oauthopenid) this.oauthopenid = new Array(); 
  this.oauthopenid.push(oauthopenid); 
 return this;
};

var oauthredirecturl = undefined;
this.setOauthredirecturls = function(oauthredirecturl) { 
    this.oauthredirecturl = oauthredirecturl;
    return this;
};
this.getOauthredirecturls = function() {
    return this.oauthredirecturl;
};
this.addOauthredirecturl = function(oauthredirecturl) { 
 if(!this.oauthredirecturl) this.oauthredirecturl = new Array(); 
  this.oauthredirecturl.push(oauthredirecturl); 
 return this;
};

var oauthgranttoken = undefined;
this.setOauthgranttokens = function(oauthgranttoken) { 
    this.oauthgranttoken = oauthgranttoken;
    return this;
};
this.getOauthgranttokens = function() {
    return this.oauthgranttoken;
};
this.addOauthgranttoken = function(oauthgranttoken) { 
 if(!this.oauthgranttoken) this.oauthgranttoken = new Array(); 
  this.oauthgranttoken.push(oauthgranttoken); 
 return this;
};

var oauthrefreshtoken = undefined;
this.setOauthrefreshtokens = function(oauthrefreshtoken) { 
    this.oauthrefreshtoken = oauthrefreshtoken;
    return this;
};
this.getOauthrefreshtokens = function() {
    return this.oauthrefreshtoken;
};
this.addOauthrefreshtoken = function(oauthrefreshtoken) { 
 if(!this.oauthrefreshtoken) this.oauthrefreshtoken = new Array(); 
  this.oauthrefreshtoken.push(oauthrefreshtoken); 
 return this;
};

var oauthaccesstoken = undefined;
this.setOauthaccesstokens = function(oauthaccesstoken) { 
    this.oauthaccesstoken = oauthaccesstoken;
    return this;
};
this.getOauthaccesstokens = function() {
    return this.oauthaccesstoken;
};
this.addOauthaccesstoken = function(oauthaccesstoken) { 
 if(!this.oauthaccesstoken) this.oauthaccesstoken = new Array(); 
  this.oauthaccesstoken.push(oauthaccesstoken); 
 return this;
};

var oauthdevicetoken = undefined;
this.setOauthdevicetokens = function(oauthdevicetoken) { 
    this.oauthdevicetoken = oauthdevicetoken;
    return this;
};
this.getOauthdevicetokens = function() {
    return this.oauthdevicetoken;
};
this.addOauthdevicetoken = function(oauthdevicetoken) { 
 if(!this.oauthdevicetoken) this.oauthdevicetoken = new Array(); 
  this.oauthdevicetoken.push(oauthdevicetoken); 
 return this;
};

var oauthapitoken = undefined;
this.setOauthapitokens = function(oauthapitoken) { 
    this.oauthapitoken = oauthapitoken;
    return this;
};
this.getOauthapitokens = function() {
    return this.oauthapitoken;
};
this.addOauthapitoken = function(oauthapitoken) { 
 if(!this.oauthapitoken) this.oauthapitoken = new Array(); 
  this.oauthapitoken.push(oauthapitoken); 
 return this;
};

var oauthclientproperties = undefined;
this.setOauthclientpropertiess = function(oauthclientproperties) { 
    this.oauthclientproperties = oauthclientproperties;
    return this;
};
this.getOauthclientpropertiess = function() {
    return this.oauthclientproperties;
};
this.addOauthclientproperties = function(oauthclientproperties) { 
 if(!this.oauthclientproperties) this.oauthclientproperties = new Array(); 
  this.oauthclientproperties.push(oauthclientproperties); 
 return this;
};

var oauthdcdigest = undefined;
this.setOauthdcdigests = function(oauthdcdigest) { 
    this.oauthdcdigest = oauthdcdigest;
    return this;
};
this.getOauthdcdigests = function() {
    return this.oauthdcdigest;
};
this.addOauthdcdigest = function(oauthdcdigest) { 
 if(!this.oauthdcdigest) this.oauthdcdigest = new Array(); 
  this.oauthdcdigest.push(oauthdcdigest); 
 return this;
};

var oauthdcdetails = undefined;
this.setOauthdcdetailss = function(oauthdcdetails) { 
    this.oauthdcdetails = oauthdcdetails;
    return this;
};
this.getOauthdcdetailss = function() {
    return this.oauthdcdetails;
};
this.addOauthdcdetails = function(oauthdcdetails) { 
 if(!this.oauthdcdetails) this.oauthdcdetails = new Array(); 
  this.oauthdcdetails.push(oauthdcdetails); 
 return this;
};

var oauthjavascriptdomains = undefined;
this.setOauthjavascriptdomainss = function(oauthjavascriptdomains) { 
    this.oauthjavascriptdomains = oauthjavascriptdomains;
    return this;
};
this.getOauthjavascriptdomainss = function() {
    return this.oauthjavascriptdomains;
};
this.addOauthjavascriptdomains = function(oauthjavascriptdomains) { 
 if(!this.oauthjavascriptdomains) this.oauthjavascriptdomains = new Array(); 
  this.oauthjavascriptdomains.push(oauthjavascriptdomains); 
 return this;
};

var clientaccessip = undefined;
this.setClientaccessips = function(clientaccessip) { 
    this.clientaccessip = clientaccessip;
    return this;
};
this.getClientaccessips = function() {
    return this.clientaccessip;
};
this.addClientaccessip = function(clientaccessip) { 
 if(!this.clientaccessip) this.clientaccessip = new Array(); 
  this.clientaccessip.push(clientaccessip); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClientName(json["client_name"]);
		this.setClientId(json["client_id"]);
		this.setClientSecret(json["client_secret"]);
		this.setClientZid(json["client_zid"]);
		this.setClientDomain(json["client_domain"]);
		this.setZid(json["zid"]);
		this.setZidType(json["zid_type"]);
		this.setStatus(json["status"]);
		this.setClientType(json["client_type"]);
		this.setIsRestricted(json["is_restricted"]);
		this.setHomePageUrl(json["home_page_url"]);
		this.setCreatedBy(json["created_by"]);
		this.setDescription(json["description"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setPrimaryDc(json["primary_dc"]);
		this.setLastPrimarySyncTime(json["last_primary_sync_time"]);
		this.setOauthclientscopess(URI.getResourceArray(json["oAuthClientScopes"],"oauthclientscopes"));
		this.setOauthopenids(URI.getResourceArray(json["oAuthOpenId"],"oauthopenid"));
		this.setOauthredirecturls(URI.getResourceArray(json["oAuthRedirectURL"],"oauthredirecturl"));
		this.setOauthgranttokens(URI.getResourceArray(json["oAuthGrantToken"],"oauthgranttoken"));
		this.setOauthrefreshtokens(URI.getResourceArray(json["oAuthRefreshToken"],"oauthrefreshtoken"));
		this.setOauthaccesstokens(URI.getResourceArray(json["oAuthAccessToken"],"oauthaccesstoken"));
		this.setOauthdevicetokens(URI.getResourceArray(json["oAuthDeviceToken"],"oauthdevicetoken"));
		this.setOauthapitokens(URI.getResourceArray(json["oAuthApiToken"],"oauthapitoken"));
		this.setOauthclientpropertiess(URI.getResourceArray(json["oAuthClientProperties"],"oauthclientproperties"));
		this.setOauthdcdigests(URI.getResourceArray(json["oAuthDCDigest"],"oauthdcdigest"));
		this.setOauthdcdetailss(URI.getResourceArray(json["oAuthDcDetails"],"oauthdcdetails"));
		this.setOauthjavascriptdomainss(URI.getResourceArray(json["oAuthJavaScriptDomains"],"oauthjavascriptdomains"));
		this.setClientaccessips(URI.getResourceArray(json["clientAccessIp"],"clientaccessip"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClientName()) json += '"client_name"' + ":" + '"' + jsonEscape(this.getClientName())  + '",';
		if(this.getClientId()) json += '"client_id"' + ":" + '"' + jsonEscape(this.getClientId())  + '",';
		if(this.getClientSecret()) json += '"client_secret"' + ":" + '"' + jsonEscape(this.getClientSecret())  + '",';
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';
		if(this.getClientDomain()) json += '"client_domain"' + ":" + '"' + jsonEscape(this.getClientDomain())  + '",';
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getClientType()) json += '"client_type"' + ":" + '"' + jsonEscape(this.getClientType())  + '",';
		if(this.getIsRestricted()) json += '"is_restricted"' + ":" + '"' + jsonEscape(this.getIsRestricted())  + '",';
		if(this.getHomePageUrl()) json += '"home_page_url"' + ":" + '"' + jsonEscape(this.getHomePageUrl())  + '",';
		if(this.getCreatedBy()) json += '"created_by"' + ":" + '"' + jsonEscape(this.getCreatedBy())  + '",';
		if(this.getDescription()) json += '"description"' + ":" + '"' + jsonEscape(this.getDescription())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getPrimaryDc()) json += '"primary_dc"' + ":" + '"' + jsonEscape(this.getPrimaryDc())  + '",';
		if(this.getLastPrimarySyncTime()) json += '"last_primary_sync_time"' + ":" + '"' + jsonEscape(this.getLastPrimarySyncTime())  + '",';
		if(this.getOauthclientscopess()) json += '"oAuthClientScopes"' + ":" + URI.toJSONArray(this.getOauthclientscopess())  + ',';
		if(this.getOauthopenids()) json += '"oAuthOpenId"' + ":" + URI.toJSONArray(this.getOauthopenids())  + ',';
		if(this.getOauthredirecturls()) json += '"oAuthRedirectURL"' + ":" + URI.toJSONArray(this.getOauthredirecturls())  + ',';
		if(this.getOauthgranttokens()) json += '"oAuthGrantToken"' + ":" + URI.toJSONArray(this.getOauthgranttokens())  + ',';
		if(this.getOauthrefreshtokens()) json += '"oAuthRefreshToken"' + ":" + URI.toJSONArray(this.getOauthrefreshtokens())  + ',';
		if(this.getOauthaccesstokens()) json += '"oAuthAccessToken"' + ":" + URI.toJSONArray(this.getOauthaccesstokens())  + ',';
		if(this.getOauthdevicetokens()) json += '"oAuthDeviceToken"' + ":" + URI.toJSONArray(this.getOauthdevicetokens())  + ',';
		if(this.getOauthapitokens()) json += '"oAuthApiToken"' + ":" + URI.toJSONArray(this.getOauthapitokens())  + ',';
		if(this.getOauthclientpropertiess()) json += '"oAuthClientProperties"' + ":" + URI.toJSONArray(this.getOauthclientpropertiess())  + ',';
		if(this.getOauthdcdigests()) json += '"oAuthDCDigest"' + ":" + URI.toJSONArray(this.getOauthdcdigests())  + ',';
		if(this.getOauthdcdetailss()) json += '"oAuthDcDetails"' + ":" + URI.toJSONArray(this.getOauthdcdetailss())  + ',';
		if(this.getOauthjavascriptdomainss()) json += '"oAuthJavaScriptDomains"' + ":" + URI.toJSONArray(this.getOauthjavascriptdomainss())  + ',';
		if(this.getClientaccessips()) json += '"clientAccessIp"' + ":" + URI.toJSONArray(this.getClientaccessips())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthClient.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.clientName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.clientName)) { throw new ValidationError(_formprefix + "client_name", ValidationError.PATTERN_FAILED);}
if(this.clientId && !(/^[a-zA-Z0-9_\-]+$/).test(this.clientId)) { throw new ValidationError(_formprefix + "client_id", ValidationError.PATTERN_FAILED);}
if(this.clientSecret && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.clientSecret)) { throw new ValidationError(_formprefix + "client_secret", ValidationError.PATTERN_FAILED);}
if(this.clientZid && !(/^[0-9]+\.[0-9]+$/).test(this.clientZid)) { throw new ValidationError(_formprefix + "client_zid", ValidationError.PATTERN_FAILED);}
if(this.clientDomain && !(/^([\p{L}\p{M}\p{N}]([\p{L}\p{M}\p{N}\-]{0,61}[\p{L}\p{M}\p{N}])?\.)+[\p{L}\p{M}]{2,6}$/).test(this.clientDomain)) { throw new ValidationError(_formprefix + "client_domain", ValidationError.PATTERN_FAILED);}
if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.zidType && !Validator.INTEGER.test(this.zidType)) { throw new ValidationError(_formprefix + "zid_type", ValidationError.PATTERN_FAILED);}
if(this.status && !Validator.INTEGER.test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.clientType && !Validator.INTEGER.test(this.clientType)) { throw new ValidationError(_formprefix + "client_type", ValidationError.PATTERN_FAILED);}
if(this.isRestricted && !Validator.INTEGER.test(this.isRestricted)) { throw new ValidationError(_formprefix + "is_restricted", ValidationError.PATTERN_FAILED);}
if(this.homePageUrl && !(/^([\p{L}\p{M}\p{N}]([\p{L}\p{M}\p{N}\-]{0,61}[\p{L}\p{M}\p{N}])?\.)+[\p{L}\p{M}]{2,6}$/).test(this.homePageUrl)) { throw new ValidationError(_formprefix + "home_page_url", ValidationError.PATTERN_FAILED);}
if(this.createdBy && !(/^[a-zA-Z0-9_\-]+$/).test(this.createdBy)) { throw new ValidationError(_formprefix + "created_by", ValidationError.PATTERN_FAILED);}
if(this.description && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.description)) { throw new ValidationError(_formprefix + "description", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.primaryDc && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.primaryDc)) { throw new ValidationError(_formprefix + "primary_dc", ValidationError.PATTERN_FAILED);}
if(this.lastPrimarySyncTime && !Validator.INTEGER.test(this.lastPrimarySyncTime)) { throw new ValidationError(_formprefix + "last_primary_sync_time", ValidationError.PATTERN_FAILED);}
if(this.oauthclientscopes) { for(i=0; i < this.oauthclientscopes.length; i++ ) { this.oauthclientscopes[i].validate(); } }
if(this.oauthopenid) { for(i=0; i < this.oauthopenid.length; i++ ) { this.oauthopenid[i].validate(); } }
if(this.oauthredirecturl) { for(i=0; i < this.oauthredirecturl.length; i++ ) { this.oauthredirecturl[i].validate(); } }
if(this.oauthgranttoken) { for(i=0; i < this.oauthgranttoken.length; i++ ) { this.oauthgranttoken[i].validate(); } }
if(this.oauthrefreshtoken) { for(i=0; i < this.oauthrefreshtoken.length; i++ ) { this.oauthrefreshtoken[i].validate(); } }
if(this.oauthaccesstoken) { for(i=0; i < this.oauthaccesstoken.length; i++ ) { this.oauthaccesstoken[i].validate(); } }
if(this.oauthdevicetoken) { for(i=0; i < this.oauthdevicetoken.length; i++ ) { this.oauthdevicetoken[i].validate(); } }
if(this.oauthapitoken) { for(i=0; i < this.oauthapitoken.length; i++ ) { this.oauthapitoken[i].validate(); } }
if(this.oauthclientproperties) { for(i=0; i < this.oauthclientproperties.length; i++ ) { this.oauthclientproperties[i].validate(); } }
if(this.oauthdcdigest) { for(i=0; i < this.oauthdcdigest.length; i++ ) { this.oauthdcdigest[i].validate(); } }
if(this.oauthdcdetails) { for(i=0; i < this.oauthdcdetails.length; i++ ) { this.oauthdcdetails[i].validate(); } }
if(this.oauthjavascriptdomains) { for(i=0; i < this.oauthjavascriptdomains.length; i++ ) { this.oauthjavascriptdomains[i].validate(); } }
if(this.clientaccessip) { for(i=0; i < this.clientaccessip.length; i++ ) { this.clientaccessip[i].validate(); } }

	return this;
    }
}
OAuthClient.path = "oauthclient";
OAuthClient.newBuilder = function() {
    return new OAuthClient();
};

AccountUpdateAuditTemplate = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var controlQueryString = "";
this.setControlQueryString = function(controlQueryString) { 
    this.controlQueryString = controlQueryString;
    return this;
};
this.getControlQueryString = function() {
    return this.controlQueryString;
};
var responseStatus = "";
this.setResponseStatus = function(responseStatus) { 
    this.responseStatus = responseStatus;
    return this;
};
this.getResponseStatus = function() {
    return this.responseStatus;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setZaid(json["zaid"]);
		this.setZuid(json["zuid"]);
		this.setControlQueryString(json["control_query_string"]);
		this.setResponseStatus(json["response_status"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getControlQueryString()) json += '"control_query_string"' + ":" + '"' + jsonEscape(this.getControlQueryString())  + '",';
		if(this.getResponseStatus()) json += '"response_status"' + ":" + '"' + jsonEscape(this.getResponseStatus())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountUpdateAuditTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.controlQueryString && !(/dontdisturb/).test(this.controlQueryString)) { throw new ValidationError(_formprefix + "control_query_string", ValidationError.PATTERN_FAILED);}
if(this.responseStatus && !Validator.INTEGER.test(this.responseStatus)) { throw new ValidationError(_formprefix + "response_status", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountUpdateAuditTemplate.path = "accountupdateaudittemplate";
AccountUpdateAuditTemplate.newBuilder = function() {
    return new AccountUpdateAuditTemplate();
};

SAMLAttribute = function() {
    var _formprefix = "";
    
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var fieldName = "";
this.setFieldName = function(fieldName) { 
    this.fieldName = fieldName;
    return this;
};
this.getFieldName = function() {
    return this.fieldName;
};
var attributeName = "";
this.setAttributeName = function(attributeName) { 
    this.attributeName = attributeName;
    return this;
};
this.getAttributeName = function() {
    return this.attributeName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAppId(json["app_id"]);
		this.setFieldName(json["field_name"]);
		this.setAttributeName(json["attribute_name"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getFieldName()) json += '"field_name"' + ":" + '"' + jsonEscape(this.getFieldName())  + '",';
		if(this.getAttributeName()) json += '"attribute_name"' + ":" + '"' + jsonEscape(this.getAttributeName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SAMLAttribute.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SAMLAttribute.path = "samlattribute";
SAMLAttribute.newBuilder = function() {
    return new SAMLAttribute();
};

Operation = function() {
    var _formprefix = "";
    
var operationId = "";
this.setOperationId = function(operationId) { 
    this.operationId = operationId;
    return this;
};
this.getOperationId = function() {
    return this.operationId;
};
var operationName = "";
this.setOperationName = function(operationName) { 
    this.operationName = operationName;
    return this;
};
this.getOperationName = function() {
    return this.operationName;
};
var resourceUri = "";
this.setResourceUri = function(resourceUri) { 
    this.resourceUri = resourceUri;
    return this;
};
this.getResourceUri = function() {
    return this.resourceUri;
};
var operationParams = "";
this.setOperationParams = function(operationParams) { 
    this.operationParams = operationParams;
    return this;
};
this.getOperationParams = function() {
    return this.operationParams;
};
var operationStatus = "";
this.setOperationStatus = function(operationStatus) { 
    this.operationStatus = operationStatus;
    return this;
};
this.getOperationStatus = function() {
    return this.operationStatus;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setOperationId(json["operation_id"]);
		this.setOperationName(json["operation_name"]);
		this.setResourceUri(json["resource_uri"]);
		this.setOperationParams(json["operation_params"]);
		this.setOperationStatus(json["operation_status"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getOperationId()) json += '"operation_id"' + ":" + '"' + jsonEscape(this.getOperationId())  + '",';
		if(this.getOperationName()) json += '"operation_name"' + ":" + '"' + jsonEscape(this.getOperationName())  + '",';
		if(this.getResourceUri()) json += '"resource_uri"' + ":" + '"' + jsonEscape(this.getResourceUri())  + '",';
		if(this.getOperationParams()) json += '"operation_params"' + ":" + '"' + jsonEscape(this.getOperationParams())  + '",';
		if(this.getOperationStatus()) json += '"operation_status"' + ":" + '"' + jsonEscape(this.getOperationStatus())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Operation.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.operationId && !(/^[a-zA-Z0-9_\-]+$/).test(this.operationId)) { throw new ValidationError(_formprefix + "operation_id", ValidationError.PATTERN_FAILED);}
if(this.operationName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.operationName)) { throw new ValidationError(_formprefix + "operation_name", ValidationError.PATTERN_FAILED);}
if(this.operationStatus && !Validator.INTEGER.test(this.operationStatus)) { throw new ValidationError(_formprefix + "operation_status", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Operation.path = "operation";
Operation.newBuilder = function() {
    return new Operation();
};

OAuthKeyPair = function() {
    var _formprefix = "";
    
var keyId = "";
this.setKeyId = function(keyId) { 
    this.keyId = keyId;
    return this;
};
this.getKeyId = function() {
    return this.keyId;
};
var keyType = "0";
this.setKeyType = function(keyType) { 
    this.keyType = keyType;
    return this;
};
this.getKeyType = function() {
    return this.keyType;
};
var algorithm = "";
this.setAlgorithm = function(algorithm) { 
    this.algorithm = algorithm;
    return this;
};
this.getAlgorithm = function() {
    return this.algorithm;
};
var publicKey = "";
this.setPublicKey = function(publicKey) { 
    this.publicKey = publicKey;
    return this;
};
this.getPublicKey = function() {
    return this.publicKey;
};
var privateKey = "";
this.setPrivateKey = function(privateKey) { 
    this.privateKey = privateKey;
    return this;
};
this.getPrivateKey = function() {
    return this.privateKey;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setKeyId(json["key_id"]);
		this.setKeyType(json["key_type"]);
		this.setAlgorithm(json["algorithm"]);
		this.setPublicKey(json["public_key"]);
		this.setPrivateKey(json["private_key"]);
		this.setCreatedTime(json["created_time"]);
		this.setExpiryTime(json["expiry_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getKeyId()) json += '"key_id"' + ":" + '"' + jsonEscape(this.getKeyId())  + '",';
		if(this.getKeyType()) json += '"key_type"' + ":" + '"' + jsonEscape(this.getKeyType())  + '",';
		if(this.getAlgorithm()) json += '"algorithm"' + ":" + '"' + jsonEscape(this.getAlgorithm())  + '",';
		if(this.getPublicKey()) json += '"public_key"' + ":" + '"' + jsonEscape(this.getPublicKey())  + '",';
		if(this.getPrivateKey()) json += '"private_key"' + ":" + '"' + jsonEscape(this.getPrivateKey())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthKeyPair.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.keyId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.keyId)) { throw new ValidationError(_formprefix + "key_id", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthKeyPair.path = "oauthkeypair";
OAuthKeyPair.newBuilder = function() {
    return new OAuthKeyPair();
};

AppKeyStore = function() {
    var _formprefix = "";
    
var label = "isc";
this.setLabel = function(label) { 
    this.label = label;
    return this;
};
this.getLabel = function() {
    return this.label;
};
var publicKey = "";
this.setPublicKey = function(publicKey) { 
    this.publicKey = publicKey;
    return this;
};
this.getPublicKey = function() {
    return this.publicKey;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setLabel(json["label"]);
		this.setPublicKey(json["public_key"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getLabel()) json += '"label"' + ":" + '"' + jsonEscape(this.getLabel())  + '",';
		if(this.getPublicKey()) json += '"public_key"' + ":" + '"' + jsonEscape(this.getPublicKey())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppKeyStore.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.label && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.label)) { throw new ValidationError(_formprefix + "label", ValidationError.PATTERN_FAILED);}
if(this.publicKey && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.publicKey)) { throw new ValidationError(_formprefix + "public_key", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppKeyStore.path = "appkeystore";
AppKeyStore.newBuilder = function() {
    return new AppKeyStore();
};

ISCTicket = function() {
    var _formprefix = "";
    
var iscTicket = "";
this.setIscTicket = function(iscTicket) { 
    this.iscTicket = iscTicket;
    return this;
};
this.getIscTicket = function() {
    return this.iscTicket;
};
var csTicket = "";
this.setCsTicket = function(csTicket) { 
    this.csTicket = csTicket;
    return this;
};
this.getCsTicket = function() {
    return this.csTicket;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var internal = "1";
this.setInternal = function(internal) { 
    this.internal = internal;
    return this;
};
this.getInternal = function() {
    return this.internal;
};
var isEnabled = "false";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var validityPeriod = "";
this.setValidityPeriod = function(validityPeriod) { 
    this.validityPeriod = validityPeriod;
    return this;
};
this.getValidityPeriod = function() {
    return this.validityPeriod;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var ipAuditInfo = "";
this.setIpAuditInfo = function(ipAuditInfo) { 
    this.ipAuditInfo = ipAuditInfo;
    return this;
};
this.getIpAuditInfo = function() {
    return this.ipAuditInfo;
};
var iscticketscope = undefined;
this.setIscticketscopes = function(iscticketscope) { 
    this.iscticketscope = iscticketscope;
    return this;
};
this.getIscticketscopes = function() {
    return this.iscticketscope;
};
this.addIscticketscope = function(iscticketscope) { 
 if(!this.iscticketscope) this.iscticketscope = new Array(); 
  this.iscticketscope.push(iscticketscope); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setIscTicket(json["isc_ticket"]);
		this.setCsTicket(json["cs_ticket"]);
		this.setZuid(json["zuid"]);
		this.setDisplayName(json["display_name"]);
		this.setInternal(json["internal"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setValidityPeriod(json["validity_period"]);
		this.setIpAddress(json["ip_address"]);
		this.setCreatedTime(json["created_time"]);
		this.setIpAuditInfo(json["ip_audit_info"]);
		this.setIscticketscopes(URI.getResourceArray(json["iSCTicketScope"],"iscticketscope"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getIscTicket()) json += '"isc_ticket"' + ":" + '"' + jsonEscape(this.getIscTicket())  + '",';
		if(this.getCsTicket()) json += '"cs_ticket"' + ":" + '"' + jsonEscape(this.getCsTicket())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getInternal()) json += '"internal"' + ":" + '"' + jsonEscape(this.getInternal())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getValidityPeriod()) json += '"validity_period"' + ":" + '"' + jsonEscape(this.getValidityPeriod())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getIpAuditInfo()) json += '"ip_audit_info"' + ":" + '"' + jsonEscape(this.getIpAuditInfo())  + '",';
		if(this.getIscticketscopes()) json += '"iSCTicketScope"' + ":" + URI.toJSONArray(this.getIscticketscopes())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ISCTicket.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.iscTicket && !(/^(?:[a-z0-9\.\-])+$/).test(this.iscTicket)) { throw new ValidationError(_formprefix + "isc_ticket", ValidationError.PATTERN_FAILED);}
if(this.csTicket && !(/^(?:[a-z0-9\.\-])+$/).test(this.csTicket)) { throw new ValidationError(_formprefix + "cs_ticket", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.displayName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.displayName)) { throw new ValidationError(_formprefix + "display_name", ValidationError.PATTERN_FAILED);}
if(this.internal && !Validator.INTEGER.test(this.internal)) { throw new ValidationError(_formprefix + "internal", ValidationError.PATTERN_FAILED);}
if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.validityPeriod && !Validator.INTEGER.test(this.validityPeriod)) { throw new ValidationError(_formprefix + "validity_period", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.iscticketscope) { for(i=0; i < this.iscticketscope.length; i++ ) { this.iscticketscope[i].validate(); } }

	return this;
    }
}
ISCTicket.path = "iscticket";
ISCTicket.newBuilder = function() {
    return new ISCTicket();
};

UserPhoto = function() {
    var _formprefix = "";
    
var viewPermission = "1";
this.setViewPermission = function(viewPermission) { 
    this.viewPermission = viewPermission;
    return this;
};
this.getViewPermission = function() {
    return this.viewPermission;
};
var isPhotoExists = "false";
this.setIsPhotoExists = function(isPhotoExists) { 
    this.isPhotoExists = isPhotoExists;
    return this;
};
this.getIsPhotoExists = function() {
    return this.isPhotoExists;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setViewPermission(json["view_permission"]);
		this.setIsPhotoExists(json["is_photo_exists"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getViewPermission()) json += '"view_permission"' + ":" + '"' + jsonEscape(this.getViewPermission())  + '",';
		if(this.getIsPhotoExists()) json += '"is_photo_exists"' + ":" + '"' + jsonEscape(this.getIsPhotoExists())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserPhoto.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.viewPermission && !Validator.INTEGER.test(this.viewPermission)) { throw new ValidationError(_formprefix + "view_permission", ValidationError.PATTERN_FAILED);}
if(this.isPhotoExists && !Validator.BOOLEAN.test(this.isPhotoExists)) { throw new ValidationError(_formprefix + "is_photo_exists", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserPhoto.path = "userphoto";
UserPhoto.newBuilder = function() {
    return new UserPhoto();
};

OAuthZID = function() {
    var _formprefix = "";
    
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var zidType = "";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var zidOrgType = "-1";
this.setZidOrgType = function(zidOrgType) { 
    this.zidOrgType = zidOrgType;
    return this;
};
this.getZidOrgType = function() {
    return this.zidOrgType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var userrestrictedscope = undefined;
this.setUserrestrictedscope = function(userrestrictedscope) { 
    this.userrestrictedscope = userrestrictedscope;
    return this;
};
this.getUserrestrictedscope = function() {
    return this.userrestrictedscope;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZid(json["zid"]);
		this.setZidType(json["zid_type"]);
		this.setZidOrgType(json["zid_org_type"]);
		this.setCreatedTime(json["created_time"]);
		this.setUserrestrictedscope(URI.getResource(json["userRestrictedScope"],"userrestrictedscope"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getZidOrgType()) json += '"zid_org_type"' + ":" + '"' + jsonEscape(this.getZidOrgType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getUserrestrictedscope()) json += '"userRestrictedScope"' + ":" + this.getUserrestrictedscope().toJSON()  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthZID.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.zidType && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.zidType)) { throw new ValidationError(_formprefix + "zid_type", ValidationError.PATTERN_FAILED);}
if(this.zidOrgType && !(/^[a-zA-Z0-9_\-]+$/).test(this.zidOrgType)) { throw new ValidationError(_formprefix + "zid_org_type", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.userrestrictedscope) { this.userrestrictedscope.validate(); }

	return this;
    }
}
OAuthZID.path = "oauthzid";
OAuthZID.newBuilder = function() {
    return new OAuthZID();
};

SecurityQA = function() {
    var _formprefix = "";
    
var questionApl = "";
this.setQuestionApl = function(questionApl) { 
    this.questionApl = questionApl;
    return this;
};
this.getQuestionApl = function() {
    return this.questionApl;
};
var question = "";
this.setQuestion = function(question) { 
    this.question = question;
    return this;
};
this.getQuestion = function() {
    return this.question;
};
var answer = "";
this.setAnswer = function(answer) { 
    this.answer = answer;
    return this;
};
this.getAnswer = function() {
    return this.answer;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setQuestionApl(json["question_apl"]);
		this.setQuestion(json["question"]);
		this.setAnswer(json["answer"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getQuestionApl()) json += '"question_apl"' + ":" + '"' + jsonEscape(this.getQuestionApl())  + '",';
		if(this.getQuestion()) json += '"question"' + ":" + '"' + jsonEscape(this.getQuestion())  + '",';
		if(this.getAnswer()) json += '"answer"' + ":" + '"' + jsonEscape(this.getAnswer())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SecurityQA.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.questionApl && !(/xss:throwerror/).test(this.questionApl)) { throw new ValidationError(_formprefix + "question_apl", ValidationError.PATTERN_FAILED);}
if(this.question && !(/xss:throwerror/).test(this.question)) { throw new ValidationError(_formprefix + "question", ValidationError.PATTERN_FAILED);}
if(this.answer && !(/xss:throwerror/).test(this.answer)) { throw new ValidationError(_formprefix + "answer", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SecurityQA.path = "securityqa";
SecurityQA.newBuilder = function() {
    return new SecurityQA();
};

MailDetails = function() {
    var _formprefix = "";
    
var connectorName = "isc";
this.setConnectorName = function(connectorName) { 
    this.connectorName = connectorName;
    return this;
};
this.getConnectorName = function() {
    return this.connectorName;
};
var connectorKey = "";
this.setConnectorKey = function(connectorKey) { 
    this.connectorKey = connectorKey;
    return this;
};
this.getConnectorKey = function() {
    return this.connectorKey;
};
var connectorId = "";
this.setConnectorId = function(connectorId) { 
    this.connectorId = connectorId;
    return this;
};
this.getConnectorId = function() {
    return this.connectorId;
};
var defaultMailFrom = "";
this.setDefaultMailFrom = function(defaultMailFrom) { 
    this.defaultMailFrom = defaultMailFrom;
    return this;
};
this.getDefaultMailFrom = function() {
    return this.defaultMailFrom;
};
var mailSenderType = "";
this.setMailSenderType = function(mailSenderType) { 
    this.mailSenderType = mailSenderType;
    return this;
};
this.getMailSenderType = function() {
    return this.mailSenderType;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var mailsender = undefined;
this.setMailsenders = function(mailsender) { 
    this.mailsender = mailsender;
    return this;
};
this.getMailsenders = function() {
    return this.mailsender;
};
this.addMailsender = function(mailsender) { 
 if(!this.mailsender) this.mailsender = new Array(); 
  this.mailsender.push(mailsender); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setConnectorName(json["connector_name"]);
		this.setConnectorKey(json["connector_key"]);
		this.setConnectorId(json["connector_id"]);
		this.setDefaultMailFrom(json["default_mail_from"]);
		this.setMailSenderType(json["mail_sender_type"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setMailsenders(URI.getResourceArray(json["mailSender"],"mailsender"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getConnectorName()) json += '"connector_name"' + ":" + '"' + jsonEscape(this.getConnectorName())  + '",';
		if(this.getConnectorKey()) json += '"connector_key"' + ":" + '"' + jsonEscape(this.getConnectorKey())  + '",';
		if(this.getConnectorId()) json += '"connector_id"' + ":" + '"' + jsonEscape(this.getConnectorId())  + '",';
		if(this.getDefaultMailFrom()) json += '"default_mail_from"' + ":" + '"' + jsonEscape(this.getDefaultMailFrom())  + '",';
		if(this.getMailSenderType()) json += '"mail_sender_type"' + ":" + '"' + jsonEscape(this.getMailSenderType())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getMailsenders()) json += '"mailSender"' + ":" + URI.toJSONArray(this.getMailsenders())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MailDetails.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.connectorName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.connectorName)) { throw new ValidationError(_formprefix + "connector_name", ValidationError.PATTERN_FAILED);}
if(this.connectorKey && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.connectorKey)) { throw new ValidationError(_formprefix + "connector_key", ValidationError.PATTERN_FAILED);}
if(this.connectorId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.connectorId)) { throw new ValidationError(_formprefix + "connector_id", ValidationError.PATTERN_FAILED);}
if(this.defaultMailFrom && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.defaultMailFrom)) { throw new ValidationError(_formprefix + "default_mail_from", ValidationError.PATTERN_FAILED);}
if(this.mailSenderType && !Validator.INTEGER.test(this.mailSenderType)) { throw new ValidationError(_formprefix + "mail_sender_type", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.mailsender) { for(i=0; i < this.mailsender.length; i++ ) { this.mailsender[i].validate(); } }

	return this;
    }
}
MailDetails.path = "maildetails";
MailDetails.newBuilder = function() {
    return new MailDetails();
};

MailStatusQueue = function() {
    var _formprefix = "";
    
var queueId = "";
this.setQueueId = function(queueId) { 
    this.queueId = queueId;
    return this;
};
this.getQueueId = function() {
    return this.queueId;
};
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var type = "";
this.setType = function(type) { 
    this.type = type;
    return this;
};
this.getType = function() {
    return this.type;
};
var sendBy = "0";
this.setSendBy = function(sendBy) { 
    this.sendBy = sendBy;
    return this;
};
this.getSendBy = function() {
    return this.sendBy;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var mobile = "";
this.setMobile = function(mobile) { 
    this.mobile = mobile;
    return this;
};
this.getMobile = function() {
    return this.mobile;
};
var failCount = "0";
this.setFailCount = function(failCount) { 
    this.failCount = failCount;
    return this;
};
this.getFailCount = function() {
    return this.failCount;
};
var status = "0";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var data = "";
this.setData = function(data) { 
    this.data = data;
    return this;
};
this.getData = function() {
    return this.data;
};
var languageCode = "en";
this.setLanguageCode = function(languageCode) { 
    this.languageCode = languageCode;
    return this;
};
this.getLanguageCode = function() {
    return this.languageCode;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setQueueId(json["queue_id"]);
		this.setZaid(json["zaid"]);
		this.setType(json["type"]);
		this.setSendBy(json["send_by"]);
		this.setAppName(json["app_name"]);
		this.setEmailId(json["email_id"]);
		this.setMobile(json["mobile"]);
		this.setFailCount(json["fail_count"]);
		this.setStatus(json["status"]);
		this.setData(json["data"]);
		this.setLanguageCode(json["language_code"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getQueueId()) json += '"queue_id"' + ":" + '"' + jsonEscape(this.getQueueId())  + '",';
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getType()) json += '"type"' + ":" + '"' + jsonEscape(this.getType())  + '",';
		if(this.getSendBy()) json += '"send_by"' + ":" + '"' + jsonEscape(this.getSendBy())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getMobile()) json += '"mobile"' + ":" + '"' + jsonEscape(this.getMobile())  + '",';
		if(this.getFailCount()) json += '"fail_count"' + ":" + '"' + jsonEscape(this.getFailCount())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getData()) json += '"data"' + ":" + '"' + jsonEscape(this.getData())  + '",';
		if(this.getLanguageCode()) json += '"language_code"' + ":" + '"' + jsonEscape(this.getLanguageCode())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(MailStatusQueue.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.queueId && !Validator.INTEGER.test(this.queueId)) { throw new ValidationError(_formprefix + "queue_id", ValidationError.PATTERN_FAILED);}
if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.type && !(/^([A-Za-z0-9_.\-]+)$/).test(this.type)) { throw new ValidationError(_formprefix + "type", ValidationError.PATTERN_FAILED);}
if(this.sendBy && !Validator.INTEGER.test(this.sendBy)) { throw new ValidationError(_formprefix + "send_by", ValidationError.PATTERN_FAILED);}
if(this.appName && !(/^([a-zA-Z0-9])+$/).test(this.appName)) { throw new ValidationError(_formprefix + "app_name", ValidationError.PATTERN_FAILED);}
if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.mobile && !(/dontdisturb/).test(this.mobile)) { throw new ValidationError(_formprefix + "mobile", ValidationError.PATTERN_FAILED);}
if(this.failCount && !Validator.INTEGER.test(this.failCount)) { throw new ValidationError(_formprefix + "fail_count", ValidationError.PATTERN_FAILED);}
if(this.status && !Validator.INTEGER.test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.data && !(/dontdisturb/).test(this.data)) { throw new ValidationError(_formprefix + "data", ValidationError.PATTERN_FAILED);}
if(this.languageCode && !(/^[a-zA-Z-]{0,5}$/).test(this.languageCode)) { throw new ValidationError(_formprefix + "language_code", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
MailStatusQueue.path = "mailstatusqueue";
MailStatusQueue.newBuilder = function() {
    return new MailStatusQueue();
};

AppAccountLogo = function() {
    var _formprefix = "";
    
var viewPermission = "";
this.setViewPermission = function(viewPermission) { 
    this.viewPermission = viewPermission;
    return this;
};
this.getViewPermission = function() {
    return this.viewPermission;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setViewPermission(json["view_permission"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getViewPermission()) json += '"view_permission"' + ":" + '"' + jsonEscape(this.getViewPermission())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAccountLogo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.viewPermission && !Validator.INTEGER.test(this.viewPermission)) { throw new ValidationError(_formprefix + "view_permission", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAccountLogo.path = "appaccountlogo";
AppAccountLogo.newBuilder = function() {
    return new AppAccountLogo();
};

AppAnnouncement = function() {
    var _formprefix = "";
    
var announcementId = "";
this.setAnnouncementId = function(announcementId) { 
    this.announcementId = announcementId;
    return this;
};
this.getAnnouncementId = function() {
    return this.announcementId;
};
var name = "";
this.setName = function(name) { 
    this.name = name;
    return this;
};
this.getName = function() {
    return this.name;
};
var className = "";
this.setClassName = function(className) { 
    this.className = className;
    return this;
};
this.getClassName = function() {
    return this.className;
};
var isEnabled = "true";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var announcementType = "0";
this.setAnnouncementType = function(announcementType) { 
    this.announcementType = announcementType;
    return this;
};
this.getAnnouncementType = function() {
    return this.announcementType;
};
var priority = "-1";
this.setPriority = function(priority) { 
    this.priority = priority;
    return this;
};
this.getPriority = function() {
    return this.priority;
};
var periodOfDays = "";
this.setPeriodOfDays = function(periodOfDays) { 
    this.periodOfDays = periodOfDays;
    return this;
};
this.getPeriodOfDays = function() {
    return this.periodOfDays;
};
var announcementSkipType = "0";
this.setAnnouncementSkipType = function(announcementSkipType) { 
    this.announcementSkipType = announcementSkipType;
    return this;
};
this.getAnnouncementSkipType = function() {
    return this.announcementSkipType;
};
var url = "";
this.setUrl = function(url) { 
    this.url = url;
    return this;
};
this.getUrl = function() {
    return this.url;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setAnnouncementId(json["announcement_id"]);
		this.setName(json["name"]);
		this.setClassName(json["class_name"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setAnnouncementType(json["announcement_type"]);
		this.setPriority(json["priority"]);
		this.setPeriodOfDays(json["period_of_days"]);
		this.setAnnouncementSkipType(json["announcement_skip_type"]);
		this.setUrl(json["url"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getAnnouncementId()) json += '"announcement_id"' + ":" + '"' + jsonEscape(this.getAnnouncementId())  + '",';
		if(this.getName()) json += '"name"' + ":" + '"' + jsonEscape(this.getName())  + '",';
		if(this.getClassName()) json += '"class_name"' + ":" + '"' + jsonEscape(this.getClassName())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getAnnouncementType()) json += '"announcement_type"' + ":" + '"' + jsonEscape(this.getAnnouncementType())  + '",';
		if(this.getPriority()) json += '"priority"' + ":" + '"' + jsonEscape(this.getPriority())  + '",';
		if(this.getPeriodOfDays()) json += '"period_of_days"' + ":" + '"' + jsonEscape(this.getPeriodOfDays())  + '",';
		if(this.getAnnouncementSkipType()) json += '"announcement_skip_type"' + ":" + '"' + jsonEscape(this.getAnnouncementSkipType())  + '",';
		if(this.getUrl()) json += '"url"' + ":" + '"' + jsonEscape(this.getUrl())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AppAnnouncement.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.isEnabled && !Validator.BOOLEAN.test(this.isEnabled)) { throw new ValidationError(_formprefix + "is_enabled", ValidationError.PATTERN_FAILED);}
if(this.announcementType && !Validator.INTEGER.test(this.announcementType)) { throw new ValidationError(_formprefix + "announcement_type", ValidationError.PATTERN_FAILED);}
if(this.priority && !Validator.INTEGER.test(this.priority)) { throw new ValidationError(_formprefix + "priority", ValidationError.PATTERN_FAILED);}
if(this.periodOfDays && !Validator.INTEGER.test(this.periodOfDays)) { throw new ValidationError(_formprefix + "period_of_days", ValidationError.PATTERN_FAILED);}
if(this.url && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.url)) { throw new ValidationError(_formprefix + "url", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AppAnnouncement.path = "appannouncement";
AppAnnouncement.newBuilder = function() {
    return new AppAnnouncement();
};

OAuthMobileDevices = function() {
    var _formprefix = "";
    
var packageName = "";
this.setPackageName = function(packageName) { 
    this.packageName = packageName;
    return this;
};
this.getPackageName = function() {
    return this.packageName;
};
var oauthClientId = "";
this.setOauthClientId = function(oauthClientId) { 
    this.oauthClientId = oauthClientId;
    return this;
};
this.getOauthClientId = function() {
    return this.oauthClientId;
};
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
var clientType = "";
this.setClientType = function(clientType) { 
    this.clientType = clientType;
    return this;
};
this.getClientType = function() {
    return this.clientType;
};
var appType = "";
this.setAppType = function(appType) { 
    this.appType = appType;
    return this;
};
this.getAppType = function() {
    return this.appType;
};
var signature = "";
this.setSignature = function(signature) { 
    this.signature = signature;
    return this;
};
this.getSignature = function() {
    return this.signature;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var oauthmobiledevicesdetails = undefined;
this.setOauthmobiledevicesdetailss = function(oauthmobiledevicesdetails) { 
    this.oauthmobiledevicesdetails = oauthmobiledevicesdetails;
    return this;
};
this.getOauthmobiledevicesdetailss = function() {
    return this.oauthmobiledevicesdetails;
};
this.addOauthmobiledevicesdetails = function(oauthmobiledevicesdetails) { 
 if(!this.oauthmobiledevicesdetails) this.oauthmobiledevicesdetails = new Array(); 
  this.oauthmobiledevicesdetails.push(oauthmobiledevicesdetails); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPackageName(json["package_name"]);
		this.setOauthClientId(json["oauth_client_id"]);
		this.setClientZid(json["client_zid"]);
		this.setClientType(json["client_type"]);
		this.setAppType(json["app_type"]);
		this.setSignature(json["signature"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setOauthmobiledevicesdetailss(URI.getResourceArray(json["oAuthMobileDevicesDetails"],"oauthmobiledevicesdetails"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPackageName()) json += '"package_name"' + ":" + '"' + jsonEscape(this.getPackageName())  + '",';
		if(this.getOauthClientId()) json += '"oauth_client_id"' + ":" + '"' + jsonEscape(this.getOauthClientId())  + '",';
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';
		if(this.getClientType()) json += '"client_type"' + ":" + '"' + jsonEscape(this.getClientType())  + '",';
		if(this.getAppType()) json += '"app_type"' + ":" + '"' + jsonEscape(this.getAppType())  + '",';
		if(this.getSignature()) json += '"signature"' + ":" + '"' + jsonEscape(this.getSignature())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getOauthmobiledevicesdetailss()) json += '"oAuthMobileDevicesDetails"' + ":" + URI.toJSONArray(this.getOauthmobiledevicesdetailss())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthMobileDevices.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.packageName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.packageName)) { throw new ValidationError(_formprefix + "package_name", ValidationError.PATTERN_FAILED);}
if(this.oauthClientId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.oauthClientId)) { throw new ValidationError(_formprefix + "oauth_client_id", ValidationError.PATTERN_FAILED);}
if(this.clientZid && !(/^[0-9]+\.[0-9]+$/).test(this.clientZid)) { throw new ValidationError(_formprefix + "client_zid", ValidationError.PATTERN_FAILED);}
if(this.clientType && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.clientType)) { throw new ValidationError(_formprefix + "client_type", ValidationError.PATTERN_FAILED);}
if(this.appType && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.appType)) { throw new ValidationError(_formprefix + "app_type", ValidationError.PATTERN_FAILED);}
if(this.signature && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.signature)) { throw new ValidationError(_formprefix + "signature", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.oauthmobiledevicesdetails) { for(i=0; i < this.oauthmobiledevicesdetails.length; i++ ) { this.oauthmobiledevicesdetails[i].validate(); } }

	return this;
    }
}
OAuthMobileDevices.path = "oauthmobiledevices";
OAuthMobileDevices.newBuilder = function() {
    return new OAuthMobileDevices();
};

SignInFailedAuditTemplate = function() {
    var _formprefix = "";
    
var arid = "";
this.setArid = function(arid) { 
    this.arid = arid;
    return this;
};
this.getArid = function() {
    return this.arid;
};
var loginId = "";
this.setLoginId = function(loginId) { 
    this.loginId = loginId;
    return this;
};
this.getLoginId = function() {
    return this.loginId;
};
var zuid = "";
this.setZuid = function(zuid) { 
    this.zuid = zuid;
    return this;
};
this.getZuid = function() {
    return this.zuid;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var appId = "";
this.setAppId = function(appId) { 
    this.appId = appId;
    return this;
};
this.getAppId = function() {
    return this.appId;
};
var referrer = "";
this.setReferrer = function(referrer) { 
    this.referrer = referrer;
    return this;
};
this.getReferrer = function() {
    return this.referrer;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var errorCode = "";
this.setErrorCode = function(errorCode) { 
    this.errorCode = errorCode;
    return this;
};
this.getErrorCode = function() {
    return this.errorCode;
};
var country = "";
this.setCountry = function(country) { 
    this.country = country;
    return this;
};
this.getCountry = function() {
    return this.country;
};
var requestType = "";
this.setRequestType = function(requestType) { 
    this.requestType = requestType;
    return this;
};
this.getRequestType = function() {
    return this.requestType;
};
var signinId = "";
this.setSigninId = function(signinId) { 
    this.signinId = signinId;
    return this;
};
this.getSigninId = function() {
    return this.signinId;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setArid(json["arid"]);
		this.setLoginId(json["login_id"]);
		this.setZuid(json["zuid"]);
		this.setIpAddress(json["ip_address"]);
		this.setAppId(json["app_id"]);
		this.setReferrer(json["referrer"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);
		this.setErrorCode(json["error_code"]);
		this.setCountry(json["country"]);
		this.setRequestType(json["request_type"]);
		this.setSigninId(json["signin_id"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getArid()) json += '"arid"' + ":" + '"' + jsonEscape(this.getArid())  + '",';
		if(this.getLoginId()) json += '"login_id"' + ":" + '"' + jsonEscape(this.getLoginId())  + '",';
		if(this.getZuid()) json += '"zuid"' + ":" + '"' + jsonEscape(this.getZuid())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getAppId()) json += '"app_id"' + ":" + '"' + jsonEscape(this.getAppId())  + '",';
		if(this.getReferrer()) json += '"referrer"' + ":" + '"' + jsonEscape(this.getReferrer())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getErrorCode()) json += '"error_code"' + ":" + '"' + jsonEscape(this.getErrorCode())  + '",';
		if(this.getCountry()) json += '"country"' + ":" + '"' + jsonEscape(this.getCountry())  + '",';
		if(this.getRequestType()) json += '"request_type"' + ":" + '"' + jsonEscape(this.getRequestType())  + '",';
		if(this.getSigninId()) json += '"signin_id"' + ":" + '"' + jsonEscape(this.getSigninId())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SignInFailedAuditTemplate.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.arid && !Validator.INTEGER.test(this.arid)) { throw new ValidationError(_formprefix + "arid", ValidationError.PATTERN_FAILED);}
if(this.loginId && !(/^([\p{L}\p{M}\p{N}\_\.]+)|[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.loginId)) { throw new ValidationError(_formprefix + "login_id", ValidationError.PATTERN_FAILED);}
if(this.zuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zuid)) { throw new ValidationError(_formprefix + "zuid", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.appId && !Validator.INTEGER.test(this.appId)) { throw new ValidationError(_formprefix + "app_id", ValidationError.PATTERN_FAILED);}
if(this.referrer && !(/dontdisturb/).test(this.referrer)) { throw new ValidationError(_formprefix + "referrer", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/dontdisturb/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.country && !(/^[a-zA-Z0-9]{2,5}$/).test(this.country)) { throw new ValidationError(_formprefix + "country", ValidationError.PATTERN_FAILED);}
if(this.signinId && !(/dontdisturb/).test(this.signinId)) { throw new ValidationError(_formprefix + "signin_id", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SignInFailedAuditTemplate.path = "signinfailedaudittemplate";
SignInFailedAuditTemplate.newBuilder = function() {
    return new SignInFailedAuditTemplate();
};

JWTParams = function() {
    var _formprefix = "";
    
var requestType = "";
this.setRequestType = function(requestType) { 
    this.requestType = requestType;
    return this;
};
this.getRequestType = function() {
    return this.requestType;
};
var paramName = "";
this.setParamName = function(paramName) { 
    this.paramName = paramName;
    return this;
};
this.getParamName = function() {
    return this.paramName;
};
var paramValue = "";
this.setParamValue = function(paramValue) { 
    this.paramValue = paramValue;
    return this;
};
this.getParamValue = function() {
    return this.paramValue;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setRequestType(json["request_type"]);
		this.setParamName(json["param_name"]);
		this.setParamValue(json["param_value"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getRequestType()) json += '"request_type"' + ":" + '"' + jsonEscape(this.getRequestType())  + '",';
		if(this.getParamName()) json += '"param_name"' + ":" + '"' + jsonEscape(this.getParamName())  + '",';
		if(this.getParamValue()) json += '"param_value"' + ":" + '"' + jsonEscape(this.getParamValue())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(JWTParams.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	
	return this;
    }
}
JWTParams.path = "jwtparams";
JWTParams.newBuilder = function() {
    return new JWTParams();
};

AccountScheduleDetails = function() {
    var _formprefix = "";
    
var jobid = "";
this.setJobid = function(jobid) { 
    this.jobid = jobid;
    return this;
};
this.getJobid = function() {
    return this.jobid;
};
var operationData = "";
this.setOperationData = function(operationData) { 
    this.operationData = operationData;
    return this;
};
this.getOperationData = function() {
    return this.operationData;
};
var resultData = "";
this.setResultData = function(resultData) { 
    this.resultData = resultData;
    return this;
};
this.getResultData = function() {
    return this.resultData;
};
var schedulerType = "";
this.setSchedulerType = function(schedulerType) { 
    this.schedulerType = schedulerType;
    return this;
};
this.getSchedulerType = function() {
    return this.schedulerType;
};
var status = "0";
this.setStatus = function(status) { 
    this.status = status;
    return this;
};
this.getStatus = function() {
    return this.status;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setJobid(json["jobid"]);
		this.setOperationData(json["operation_data"]);
		this.setResultData(json["result_data"]);
		this.setSchedulerType(json["scheduler_type"]);
		this.setStatus(json["status"]);
		this.setExpiryTime(json["expiry_time"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getJobid()) json += '"jobid"' + ":" + '"' + jsonEscape(this.getJobid())  + '",';
		if(this.getOperationData()) json += '"operation_data"' + ":" + '"' + jsonEscape(this.getOperationData())  + '",';
		if(this.getResultData()) json += '"result_data"' + ":" + '"' + jsonEscape(this.getResultData())  + '",';
		if(this.getSchedulerType()) json += '"scheduler_type"' + ":" + '"' + jsonEscape(this.getSchedulerType())  + '",';
		if(this.getStatus()) json += '"status"' + ":" + '"' + jsonEscape(this.getStatus())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AccountScheduleDetails.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.jobid && !(/^[a-zA-Z0-9_\-]+$/).test(this.jobid)) { throw new ValidationError(_formprefix + "jobid", ValidationError.PATTERN_FAILED);}
if(this.schedulerType && !Validator.INTEGER.test(this.schedulerType)) { throw new ValidationError(_formprefix + "scheduler_type", ValidationError.PATTERN_FAILED);}
if(this.status && !Validator.INTEGER.test(this.status)) { throw new ValidationError(_formprefix + "status", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AccountScheduleDetails.path = "accountscheduledetails";
AccountScheduleDetails.newBuilder = function() {
    return new AccountScheduleDetails();
};

Digest = function() {
    var _formprefix = "";
    
var digest = "";
this.setDigest = function(digest) { 
    this.digest = digest;
    return this;
};
this.getDigest = function() {
    return this.digest;
};
var uri = "";
this.setUri = function(uri) { 
    this.uri = uri;
    return this;
};
this.getUri = function() {
    return this.uri;
};
var zid = "";
this.setZid = function(zid) { 
    this.zid = zid;
    return this;
};
this.getZid = function() {
    return this.zid;
};
var digestType = "";
this.setDigestType = function(digestType) { 
    this.digestType = digestType;
    return this;
};
this.getDigestType = function() {
    return this.digestType;
};
var serviceUrl = "";
this.setServiceUrl = function(serviceUrl) { 
    this.serviceUrl = serviceUrl;
    return this;
};
this.getServiceUrl = function() {
    return this.serviceUrl;
};
var argsData = "";
this.setArgsData = function(argsData) { 
    this.argsData = argsData;
    return this;
};
this.getArgsData = function() {
    return this.argsData;
};
var appName = "";
this.setAppName = function(appName) { 
    this.appName = appName;
    return this;
};
this.getAppName = function() {
    return this.appName;
};
var zidType = "";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var isValidated = "false";
this.setIsValidated = function(isValidated) { 
    this.isValidated = isValidated;
    return this;
};
this.getIsValidated = function() {
    return this.isValidated;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDigest(json["digest"]);
		this.setUri(json["uri"]);
		this.setZid(json["zid"]);
		this.setDigestType(json["digest_type"]);
		this.setServiceUrl(json["service_url"]);
		this.setArgsData(json["args_data"]);
		this.setAppName(json["app_name"]);
		this.setZidType(json["zid_type"]);
		this.setEmailId(json["email_id"]);
		this.setIsValidated(json["is_validated"]);
		this.setExpiryTime(json["expiry_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDigest()) json += '"digest"' + ":" + '"' + jsonEscape(this.getDigest())  + '",';
		if(this.getUri()) json += '"uri"' + ":" + '"' + jsonEscape(this.getUri())  + '",';
		if(this.getZid()) json += '"zid"' + ":" + '"' + jsonEscape(this.getZid())  + '",';
		if(this.getDigestType()) json += '"digest_type"' + ":" + '"' + jsonEscape(this.getDigestType())  + '",';
		if(this.getServiceUrl()) json += '"service_url"' + ":" + '"' + jsonEscape(this.getServiceUrl())  + '",';
		if(this.getArgsData()) json += '"args_data"' + ":" + '"' + jsonEscape(this.getArgsData())  + '",';
		if(this.getAppName()) json += '"app_name"' + ":" + '"' + jsonEscape(this.getAppName())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getIsValidated()) json += '"is_validated"' + ":" + '"' + jsonEscape(this.getIsValidated())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Digest.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.digest && !(/^([a-zA-Z0-9\._\*\-])+$/).test(this.digest)) { throw new ValidationError(_formprefix + "digest", ValidationError.PATTERN_FAILED);}
if(this.uri && !(/^(ht|f)tp(s?)\:\/\/[-.\w]*(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+=&%\$#_@]*)?$/).test(this.uri)) { throw new ValidationError(_formprefix + "uri", ValidationError.PATTERN_FAILED);}
if(this.zid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zid)) { throw new ValidationError(_formprefix + "zid", ValidationError.PATTERN_FAILED);}
if(this.serviceUrl && !(/^((ht|f)tp(s?)\:\/\/[-.\w]*)?(\/?)([a-zA-Z0-9\-\.\?\,\:\'\/\\\+\*=&%\$;#_@]*)?$/).test(this.serviceUrl)) { throw new ValidationError(_formprefix + "service_url", ValidationError.PATTERN_FAILED);}
if(this.emailId && !(/^[\p{L}\p{M}\p{N}\_]([\p{L}\p{M}\p{N}\_\+\-\.\'&]*)@(?=.{4,256}$)(([\p{L}\p{M}\p{N}]+)(([\-\_]*[\p{L}\p{M}\p{N}])*)[\.])+[\p{L}\p{M}]{2,22}$/).test(this.emailId)) { throw new ValidationError(_formprefix + "email_id", ValidationError.PATTERN_FAILED);}
if(this.isValidated && !Validator.BOOLEAN.test(this.isValidated)) { throw new ValidationError(_formprefix + "is_validated", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Digest.path = "digest";
Digest.newBuilder = function() {
    return new Digest();
};

ServiceOrgZAID = function() {
    var _formprefix = "";
    
var zaid = "";
this.setZaid = function(zaid) { 
    this.zaid = zaid;
    return this;
};
this.getZaid = function() {
    return this.zaid;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setZaid(json["zaid"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getZaid()) json += '"zaid"' + ":" + '"' + jsonEscape(this.getZaid())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgZAID.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.zaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.zaid)) { throw new ValidationError(_formprefix + "zaid", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgZAID.path = "serviceorgzaid";
ServiceOrgZAID.newBuilder = function() {
    return new ServiceOrgZAID();
};

ServiceOrgDevices = function() {
    var _formprefix = "";
    
var deviceId = "";
this.setDeviceId = function(deviceId) { 
    this.deviceId = deviceId;
    return this;
};
this.getDeviceId = function() {
    return this.deviceId;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var isEnabled = "2";
this.setIsEnabled = function(isEnabled) { 
    this.isEnabled = isEnabled;
    return this;
};
this.getIsEnabled = function() {
    return this.isEnabled;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDeviceId(json["device_id"]);
		this.setDisplayName(json["display_name"]);
		this.setIsEnabled(json["is_enabled"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDeviceId()) json += '"device_id"' + ":" + '"' + jsonEscape(this.getDeviceId())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getIsEnabled()) json += '"is_enabled"' + ":" + '"' + jsonEscape(this.getIsEnabled())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgDevices.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.deviceId && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.deviceId)) { throw new ValidationError(_formprefix + "device_id", ValidationError.PATTERN_FAILED);}
if(this.displayName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.displayName)) { throw new ValidationError(_formprefix + "display_name", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgDevices.path = "serviceorgdevices";
ServiceOrgDevices.newBuilder = function() {
    return new ServiceOrgDevices();
};

ServiceOrgOAuthAccessGrant = function() {
    var _formprefix = "";
    
var clientZid = "";
this.setClientZid = function(clientZid) { 
    this.clientZid = clientZid;
    return this;
};
this.getClientZid = function() {
    return this.clientZid;
};
var ipAddress = "";
this.setIpAddress = function(ipAddress) { 
    this.ipAddress = ipAddress;
    return this;
};
this.getIpAddress = function() {
    return this.ipAddress;
};
var userAgent = "";
this.setUserAgent = function(userAgent) { 
    this.userAgent = userAgent;
    return this;
};
this.getUserAgent = function() {
    return this.userAgent;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var sooauthaccessgrantscopes = undefined;
this.setSooauthaccessgrantscopess = function(sooauthaccessgrantscopes) { 
    this.sooauthaccessgrantscopes = sooauthaccessgrantscopes;
    return this;
};
this.getSooauthaccessgrantscopess = function() {
    return this.sooauthaccessgrantscopes;
};
this.addSooauthaccessgrantscopes = function(sooauthaccessgrantscopes) { 
 if(!this.sooauthaccessgrantscopes) this.sooauthaccessgrantscopes = new Array(); 
  this.sooauthaccessgrantscopes.push(sooauthaccessgrantscopes); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setClientZid(json["client_zid"]);
		this.setIpAddress(json["ip_address"]);
		this.setUserAgent(json["user_agent"]);
		this.setCreatedTime(json["created_time"]);
		this.setSooauthaccessgrantscopess(URI.getResourceArray(json["sOOAuthAccessGrantScopes"],"sooauthaccessgrantscopes"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getClientZid()) json += '"client_zid"' + ":" + '"' + jsonEscape(this.getClientZid())  + '",';
		if(this.getIpAddress()) json += '"ip_address"' + ":" + '"' + jsonEscape(this.getIpAddress())  + '",';
		if(this.getUserAgent()) json += '"user_agent"' + ":" + '"' + jsonEscape(this.getUserAgent())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getSooauthaccessgrantscopess()) json += '"sOOAuthAccessGrantScopes"' + ":" + URI.toJSONArray(this.getSooauthaccessgrantscopess())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgOAuthAccessGrant.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.clientZid && !(/^[0-9]+\.[0-9]+$/).test(this.clientZid)) { throw new ValidationError(_formprefix + "client_zid", ValidationError.PATTERN_FAILED);}
if(this.ipAddress && !(/(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)|(^$)/).test(this.ipAddress)) { throw new ValidationError(_formprefix + "ip_address", ValidationError.PATTERN_FAILED);}
if(this.userAgent && !(/xss:throwerror/).test(this.userAgent)) { throw new ValidationError(_formprefix + "user_agent", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.sooauthaccessgrantscopes) { for(i=0; i < this.sooauthaccessgrantscopes.length; i++ ) { this.sooauthaccessgrantscopes[i].validate(); } }

	return this;
    }
}
ServiceOrgOAuthAccessGrant.path = "serviceorgoauthaccessgrant";
ServiceOrgOAuthAccessGrant.newBuilder = function() {
    return new ServiceOrgOAuthAccessGrant();
};

PrivacyCertificateAudit = function() {
    var _formprefix = "";
    
var emailId = "";
this.setEmailId = function(emailId) { 
    this.emailId = emailId;
    return this;
};
this.getEmailId = function() {
    return this.emailId;
};
var certificateType = "";
this.setCertificateType = function(certificateType) { 
    this.certificateType = certificateType;
    return this;
};
this.getCertificateType = function() {
    return this.certificateType;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setEmailId(json["email_id"]);
		this.setCertificateType(json["certificate_type"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getEmailId()) json += '"email_id"' + ":" + '"' + jsonEscape(this.getEmailId())  + '",';
		if(this.getCertificateType()) json += '"certificate_type"' + ":" + '"' + jsonEscape(this.getCertificateType())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(PrivacyCertificateAudit.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
PrivacyCertificateAudit.path = "privacycertificateaudit";
PrivacyCertificateAudit.newBuilder = function() {
    return new PrivacyCertificateAudit();
};

Logo = function() {
    var _formprefix = "";
    
var viewPermission = "3";
this.setViewPermission = function(viewPermission) { 
    this.viewPermission = viewPermission;
    return this;
};
this.getViewPermission = function() {
    return this.viewPermission;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setViewPermission(json["view_permission"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getViewPermission()) json += '"view_permission"' + ":" + '"' + jsonEscape(this.getViewPermission())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(Logo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.viewPermission && !Validator.INTEGER.test(this.viewPermission)) { throw new ValidationError(_formprefix + "view_permission", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
Logo.path = "logo";
Logo.newBuilder = function() {
    return new Logo();
};

UserExtendedInfo = function() {
    var _formprefix = "";
    
var managerZuid = "";
this.setManagerZuid = function(managerZuid) { 
    this.managerZuid = managerZuid;
    return this;
};
this.getManagerZuid = function() {
    return this.managerZuid;
};
var employeeId = "";
this.setEmployeeId = function(employeeId) { 
    this.employeeId = employeeId;
    return this;
};
this.getEmployeeId = function() {
    return this.employeeId;
};
var designationId = "";
this.setDesignationId = function(designationId) { 
    this.designationId = designationId;
    return this;
};
this.getDesignationId = function() {
    return this.designationId;
};
var lockedUntil = "";
this.setLockedUntil = function(lockedUntil) { 
    this.lockedUntil = lockedUntil;
    return this;
};
this.getLockedUntil = function() {
    return this.lockedUntil;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setManagerZuid(json["manager_zuid"]);
		this.setEmployeeId(json["employee_id"]);
		this.setDesignationId(json["designation_id"]);
		this.setLockedUntil(json["locked_until"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getManagerZuid()) json += '"manager_zuid"' + ":" + '"' + jsonEscape(this.getManagerZuid())  + '",';
		if(this.getEmployeeId()) json += '"employee_id"' + ":" + '"' + jsonEscape(this.getEmployeeId())  + '",';
		if(this.getDesignationId()) json += '"designation_id"' + ":" + '"' + jsonEscape(this.getDesignationId())  + '",';
		if(this.getLockedUntil()) json += '"locked_until"' + ":" + '"' + jsonEscape(this.getLockedUntil())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(UserExtendedInfo.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.managerZuid && !(/^[a-zA-Z0-9_\-]+$/).test(this.managerZuid)) { throw new ValidationError(_formprefix + "manager_zuid", ValidationError.PATTERN_FAILED);}
if(this.employeeId && !(/xss:throwerror/).test(this.employeeId)) { throw new ValidationError(_formprefix + "employee_id", ValidationError.PATTERN_FAILED);}
if(this.designationId && !(/^[a-zA-Z0-9_\-]+$/).test(this.designationId)) { throw new ValidationError(_formprefix + "designation_id", ValidationError.PATTERN_FAILED);}
if(this.lockedUntil && !Validator.INTEGER.test(this.lockedUntil)) { throw new ValidationError(_formprefix + "locked_until", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
UserExtendedInfo.path = "userextendedinfo";
UserExtendedInfo.newBuilder = function() {
    return new UserExtendedInfo();
};

ServiceOrgProperties = function() {
    var _formprefix = "";
    
var propName = "";
this.setPropName = function(propName) { 
    this.propName = propName;
    return this;
};
this.getPropName = function() {
    return this.propName;
};
var propValue = "";
this.setPropValue = function(propValue) { 
    this.propValue = propValue;
    return this;
};
this.getPropValue = function() {
    return this.propValue;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPropName(json["prop_name"]);
		this.setPropValue(json["prop_value"]);
		this.setModifiedTime(json["modified_time"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPropName()) json += '"prop_name"' + ":" + '"' + jsonEscape(this.getPropName())  + '",';
		if(this.getPropValue()) json += '"prop_value"' + ":" + '"' + jsonEscape(this.getPropValue())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(ServiceOrgProperties.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.propName && !(/^([A-Za-z0-9_.\-]+)$/).test(this.propName)) { throw new ValidationError(_formprefix + "prop_name", ValidationError.PATTERN_FAILED);}
if(this.propValue && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.propValue)) { throw new ValidationError(_formprefix + "prop_value", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
ServiceOrgProperties.path = "serviceorgproperties";
ServiceOrgProperties.newBuilder = function() {
    return new ServiceOrgProperties();
};

OAuthRefreshToken = function() {
    var _formprefix = "";
    
var userZid = "";
this.setUserZid = function(userZid) { 
    this.userZid = userZid;
    return this;
};
this.getUserZid = function() {
    return this.userZid;
};
var zidType = "1";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var refreshToken = "";
this.setRefreshToken = function(refreshToken) { 
    this.refreshToken = refreshToken;
    return this;
};
this.getRefreshToken = function() {
    return this.refreshToken;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "-1";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var deviceName = "";
this.setDeviceName = function(deviceName) { 
    this.deviceName = deviceName;
    return this;
};
this.getDeviceName = function() {
    return this.deviceName;
};
var isActive = "1";
this.setIsActive = function(isActive) { 
    this.isActive = isActive;
    return this;
};
this.getIsActive = function() {
    return this.isActive;
};
var ipAuditInfo = "";
this.setIpAuditInfo = function(ipAuditInfo) { 
    this.ipAuditInfo = ipAuditInfo;
    return this;
};
this.getIpAuditInfo = function() {
    return this.ipAuditInfo;
};
var orgType = "";
this.setOrgType = function(orgType) { 
    this.orgType = orgType;
    return this;
};
this.getOrgType = function() {
    return this.orgType;
};
var oauthrefreshtokenscopes = undefined;
this.setOauthrefreshtokenscopess = function(oauthrefreshtokenscopes) { 
    this.oauthrefreshtokenscopes = oauthrefreshtokenscopes;
    return this;
};
this.getOauthrefreshtokenscopess = function() {
    return this.oauthrefreshtokenscopes;
};
this.addOauthrefreshtokenscopes = function(oauthrefreshtokenscopes) { 
 if(!this.oauthrefreshtokenscopes) this.oauthrefreshtokenscopes = new Array(); 
  this.oauthrefreshtokenscopes.push(oauthrefreshtokenscopes); 
 return this;
};

var oauthrefreshtokenorginfo = undefined;
this.setOauthrefreshtokenorginfos = function(oauthrefreshtokenorginfo) { 
    this.oauthrefreshtokenorginfo = oauthrefreshtokenorginfo;
    return this;
};
this.getOauthrefreshtokenorginfos = function() {
    return this.oauthrefreshtokenorginfo;
};
this.addOauthrefreshtokenorginfo = function(oauthrefreshtokenorginfo) { 
 if(!this.oauthrefreshtokenorginfo) this.oauthrefreshtokenorginfo = new Array(); 
  this.oauthrefreshtokenorginfo.push(oauthrefreshtokenorginfo); 
 return this;
};

var oauthrefreshtokenkey = undefined;
this.setOauthrefreshtokenkeys = function(oauthrefreshtokenkey) { 
    this.oauthrefreshtokenkey = oauthrefreshtokenkey;
    return this;
};
this.getOauthrefreshtokenkeys = function() {
    return this.oauthrefreshtokenkey;
};
this.addOauthrefreshtokenkey = function(oauthrefreshtokenkey) { 
 if(!this.oauthrefreshtokenkey) this.oauthrefreshtokenkey = new Array(); 
  this.oauthrefreshtokenkey.push(oauthrefreshtokenkey); 
 return this;
};

var oauthinternaltoken = undefined;
this.setOauthinternaltokens = function(oauthinternaltoken) { 
    this.oauthinternaltoken = oauthinternaltoken;
    return this;
};
this.getOauthinternaltokens = function() {
    return this.oauthinternaltoken;
};
this.addOauthinternaltoken = function(oauthinternaltoken) { 
 if(!this.oauthinternaltoken) this.oauthinternaltoken = new Array(); 
  this.oauthinternaltoken.push(oauthinternaltoken); 
 return this;
};

    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setUserZid(json["user_zid"]);
		this.setZidType(json["zid_type"]);
		this.setRefreshToken(json["refresh_token"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setDeviceName(json["device_name"]);
		this.setIsActive(json["is_active"]);
		this.setIpAuditInfo(json["ip_audit_info"]);
		this.setOrgType(json["org_type"]);
		this.setOauthrefreshtokenscopess(URI.getResourceArray(json["oAuthRefreshTokenScopes"],"oauthrefreshtokenscopes"));
		this.setOauthrefreshtokenorginfos(URI.getResourceArray(json["oAuthRefreshTokenOrgInfo"],"oauthrefreshtokenorginfo"));
		this.setOauthrefreshtokenkeys(URI.getResourceArray(json["oAuthRefreshTokenKey"],"oauthrefreshtokenkey"));
		this.setOauthinternaltokens(URI.getResourceArray(json["oAuthInternalToken"],"oauthinternaltoken"));

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getUserZid()) json += '"user_zid"' + ":" + '"' + jsonEscape(this.getUserZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getRefreshToken()) json += '"refresh_token"' + ":" + '"' + jsonEscape(this.getRefreshToken())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getDeviceName()) json += '"device_name"' + ":" + '"' + jsonEscape(this.getDeviceName())  + '",';
		if(this.getIsActive()) json += '"is_active"' + ":" + '"' + jsonEscape(this.getIsActive())  + '",';
		if(this.getIpAuditInfo()) json += '"ip_audit_info"' + ":" + '"' + jsonEscape(this.getIpAuditInfo())  + '",';
		if(this.getOrgType()) json += '"org_type"' + ":" + '"' + jsonEscape(this.getOrgType())  + '",';
		if(this.getOauthrefreshtokenscopess()) json += '"oAuthRefreshTokenScopes"' + ":" + URI.toJSONArray(this.getOauthrefreshtokenscopess())  + ',';
		if(this.getOauthrefreshtokenorginfos()) json += '"oAuthRefreshTokenOrgInfo"' + ":" + URI.toJSONArray(this.getOauthrefreshtokenorginfos())  + ',';
		if(this.getOauthrefreshtokenkeys()) json += '"oAuthRefreshTokenKey"' + ":" + URI.toJSONArray(this.getOauthrefreshtokenkeys())  + ',';
		if(this.getOauthinternaltokens()) json += '"oAuthInternalToken"' + ":" + URI.toJSONArray(this.getOauthinternaltokens())  + ',';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthRefreshToken.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.userZid && !(/^[a-zA-Z0-9_\-]+$/).test(this.userZid)) { throw new ValidationError(_formprefix + "user_zid", ValidationError.PATTERN_FAILED);}
if(this.zidType && !Validator.INTEGER.test(this.zidType)) { throw new ValidationError(_formprefix + "zid_type", ValidationError.PATTERN_FAILED);}
if(this.refreshToken && !(/xss:throwerror/).test(this.refreshToken)) { throw new ValidationError(_formprefix + "refresh_token", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.deviceName && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.deviceName)) { throw new ValidationError(_formprefix + "device_name", ValidationError.PATTERN_FAILED);}
if(this.isActive && !Validator.INTEGER.test(this.isActive)) { throw new ValidationError(_formprefix + "is_active", ValidationError.PATTERN_FAILED);}
if(this.orgType && !Validator.INTEGER.test(this.orgType)) { throw new ValidationError(_formprefix + "org_type", ValidationError.PATTERN_FAILED);}
if(this.oauthrefreshtokenscopes) { for(i=0; i < this.oauthrefreshtokenscopes.length; i++ ) { this.oauthrefreshtokenscopes[i].validate(); } }
if(this.oauthrefreshtokenorginfo) { for(i=0; i < this.oauthrefreshtokenorginfo.length; i++ ) { this.oauthrefreshtokenorginfo[i].validate(); } }
if(this.oauthrefreshtokenkey) { for(i=0; i < this.oauthrefreshtokenkey.length; i++ ) { this.oauthrefreshtokenkey[i].validate(); } }
if(this.oauthinternaltoken) { for(i=0; i < this.oauthinternaltoken.length; i++ ) { this.oauthinternaltoken[i].validate(); } }

	return this;
    }
}
OAuthRefreshToken.path = "oauthrefreshtoken";
OAuthRefreshToken.newBuilder = function() {
    return new OAuthRefreshToken();
};

PartnerZAAID = function() {
    var _formprefix = "";
    
var partnerZoid = "";
this.setPartnerZoid = function(partnerZoid) { 
    this.partnerZoid = partnerZoid;
    return this;
};
this.getPartnerZoid = function() {
    return this.partnerZoid;
};
var childZaaid = "";
this.setChildZaaid = function(childZaaid) { 
    this.childZaaid = childZaaid;
    return this;
};
this.getChildZaaid = function() {
    return this.childZaaid;
};
var displayName = "";
this.setDisplayName = function(displayName) { 
    this.displayName = displayName;
    return this;
};
this.getDisplayName = function() {
    return this.displayName;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
var parentZid = "";
this.setParentZid = function(parentZid) { 
    this.parentZid = parentZid;
    return this;
};
this.getParentZid = function() {
    return this.parentZid;
};
var childZid = "";
this.setChildZid = function(childZid) { 
    this.childZid = childZid;
    return this;
};
this.getChildZid = function() {
    return this.childZid;
};
var zidType = "";
this.setZidType = function(zidType) { 
    this.zidType = zidType;
    return this;
};
this.getZidType = function() {
    return this.zidType;
};
var zidRelation = "1";
this.setZidRelation = function(zidRelation) { 
    this.zidRelation = zidRelation;
    return this;
};
this.getZidRelation = function() {
    return this.zidRelation;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setPartnerZoid(json["partner_zoid"]);
		this.setChildZaaid(json["child_zaaid"]);
		this.setDisplayName(json["display_name"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);
		this.setParentZid(json["parent_zid"]);
		this.setChildZid(json["child_zid"]);
		this.setZidType(json["zid_type"]);
		this.setZidRelation(json["zid_relation"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getPartnerZoid()) json += '"partner_zoid"' + ":" + '"' + jsonEscape(this.getPartnerZoid())  + '",';
		if(this.getChildZaaid()) json += '"child_zaaid"' + ":" + '"' + jsonEscape(this.getChildZaaid())  + '",';
		if(this.getDisplayName()) json += '"display_name"' + ":" + '"' + jsonEscape(this.getDisplayName())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';
		if(this.getParentZid()) json += '"parent_zid"' + ":" + '"' + jsonEscape(this.getParentZid())  + '",';
		if(this.getChildZid()) json += '"child_zid"' + ":" + '"' + jsonEscape(this.getChildZid())  + '",';
		if(this.getZidType()) json += '"zid_type"' + ":" + '"' + jsonEscape(this.getZidType())  + '",';
		if(this.getZidRelation()) json += '"zid_relation"' + ":" + '"' + jsonEscape(this.getZidRelation())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(PartnerZAAID.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.partnerZoid && !(/^[a-zA-Z0-9_\-]+$/).test(this.partnerZoid)) { throw new ValidationError(_formprefix + "partner_zoid", ValidationError.PATTERN_FAILED);}
if(this.childZaaid && !(/^[a-zA-Z0-9_\-]+$/).test(this.childZaaid)) { throw new ValidationError(_formprefix + "child_zaaid", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}
if(this.parentZid && !(/^[a-zA-Z0-9_\-]+$/).test(this.parentZid)) { throw new ValidationError(_formprefix + "parent_zid", ValidationError.PATTERN_FAILED);}
if(this.childZid && !(/^[a-zA-Z0-9_\-]+$/).test(this.childZid)) { throw new ValidationError(_formprefix + "child_zid", ValidationError.PATTERN_FAILED);}
if(this.zidType && !Validator.INTEGER.test(this.zidType)) { throw new ValidationError(_formprefix + "zid_type", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
PartnerZAAID.path = "partnerzaaid";
PartnerZAAID.newBuilder = function() {
    return new PartnerZAAID();
};

OAuthJavaScriptDomains = function() {
    var _formprefix = "";
    
var domain = "";
this.setDomain = function(domain) { 
    this.domain = domain;
    return this;
};
this.getDomain = function() {
    return this.domain;
};
var domainApl = "";
this.setDomainApl = function(domainApl) { 
    this.domainApl = domainApl;
    return this;
};
this.getDomainApl = function() {
    return this.domainApl;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDomain(json["domain"]);
		this.setDomainApl(json["domain_apl"]);
		this.setCreatedTime(json["created_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDomain()) json += '"domain"' + ":" + '"' + jsonEscape(this.getDomain())  + '",';
		if(this.getDomainApl()) json += '"domain_apl"' + ":" + '"' + jsonEscape(this.getDomainApl())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(OAuthJavaScriptDomains.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.domain && !(/^[0-9a-zA-Z_\-\.\$@\?\,\:\'\/\!\P{InBasicLatin}\s]+$/).test(this.domain)) { throw new ValidationError(_formprefix + "domain", ValidationError.PATTERN_FAILED);}
if(this.domainApl && !(/xss:throwerror/).test(this.domainApl)) { throw new ValidationError(_formprefix + "domain_apl", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
OAuthJavaScriptDomains.path = "oauthjavascriptdomains";
OAuthJavaScriptDomains.newBuilder = function() {
    return new OAuthJavaScriptDomains();
};

AuthTokenDeletion = function() {
    var _formprefix = "";
    
var iscTicket = "";
this.setIscTicket = function(iscTicket) { 
    this.iscTicket = iscTicket;
    return this;
};
this.getIscTicket = function() {
    return this.iscTicket;
};
var expiryTime = "";
this.setExpiryTime = function(expiryTime) { 
    this.expiryTime = expiryTime;
    return this;
};
this.getExpiryTime = function() {
    return this.expiryTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setIscTicket(json["isc_ticket"]);
		this.setExpiryTime(json["expiry_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getIscTicket()) json += '"isc_ticket"' + ":" + '"' + jsonEscape(this.getIscTicket())  + '",';
		if(this.getExpiryTime()) json += '"expiry_time"' + ":" + '"' + jsonEscape(this.getExpiryTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(AuthTokenDeletion.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.iscTicket && !(/^(?:[a-z0-9\.\-])+$/).test(this.iscTicket)) { throw new ValidationError(_formprefix + "isc_ticket", ValidationError.PATTERN_FAILED);}
if(this.expiryTime && !Validator.INTEGER.test(this.expiryTime)) { throw new ValidationError(_formprefix + "expiry_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
AuthTokenDeletion.path = "authtokendeletion";
AuthTokenDeletion.newBuilder = function() {
    return new AuthTokenDeletion();
};

SigninPreference = function() {
    var _formprefix = "";
    
var defaultPreference = "0";
this.setDefaultPreference = function(defaultPreference) { 
    this.defaultPreference = defaultPreference;
    return this;
};
this.getDefaultPreference = function() {
    return this.defaultPreference;
};
var createdTime = "";
this.setCreatedTime = function(createdTime) { 
    this.createdTime = createdTime;
    return this;
};
this.getCreatedTime = function() {
    return this.createdTime;
};
var modifiedTime = "";
this.setModifiedTime = function(modifiedTime) { 
    this.modifiedTime = modifiedTime;
    return this;
};
this.getModifiedTime = function() {
    return this.modifiedTime;
};
    this.json = undefined;
    this.initFromJson = function(json) {
	this.json = json;
		this.setDefaultPreference(json["default_preference"]);
		this.setCreatedTime(json["created_time"]);
		this.setModifiedTime(json["modified_time"]);

	return this;
    }
    this.toJSON = function() {
	var json = "{";
		if(this.getDefaultPreference()) json += '"default_preference"' + ":" + '"' + jsonEscape(this.getDefaultPreference())  + '",';
		if(this.getCreatedTime()) json += '"created_time"' + ":" + '"' + jsonEscape(this.getCreatedTime())  + '",';
		if(this.getModifiedTime()) json += '"modified_time"' + ":" + '"' + jsonEscape(this.getModifiedTime())  + '",';

	json = removeLastComma(json);
	json += "}";
	return json;
    }
    this.initFromForm = function(form, index) {
	_formprefix = URI._formPrefix(SigninPreference.path, index);
	URI._initFromForm(form, this, _formprefix);
	return this;
    }
    this.getReferences = function() {
	if(this.json) {
	    return this.json["reference"];
	}
	return this.json; //undefined
    }
    this.validate = function() {
	var i = 0;
	if(this.defaultPreference && !Validator.INTEGER.test(this.defaultPreference)) { throw new ValidationError(_formprefix + "default_preference", ValidationError.PATTERN_FAILED);}
if(this.createdTime && !Validator.INTEGER.test(this.createdTime)) { throw new ValidationError(_formprefix + "created_time", ValidationError.PATTERN_FAILED);}
if(this.modifiedTime && !Validator.INTEGER.test(this.modifiedTime)) { throw new ValidationError(_formprefix + "modified_time", ValidationError.PATTERN_FAILED);}

	return this;
    }
}
SigninPreference.path = "signinpreference";
SigninPreference.newBuilder = function() {
    return new SigninPreference();
};
Accounts = function() {}; 
 Accounts.instance = function(type) { 
 switch(type) {case 'app' : return App.newBuilder(); 
case 'samlparams' : return SAMLParams.newBuilder(); 
case 'configuration' : return Configuration.newBuilder(); 
case 'samlspapp' : return SAMLSpApp.newBuilder(); 
case 'userservicedetails' : return UserServiceDetails.newBuilder(); 
case 'sooauthaccessgrantscopes' : return SOOAuthAccessGrantScopes.newBuilder(); 
case 'appsystemrole' : return AppSystemRole.newBuilder(); 
case 'serviceorg' : return ServiceOrg.newBuilder(); 
case 'openid' : return OpenId.newBuilder(); 
case 'oauthaudit' : return OAuthAudit.newBuilder(); 
case 'resourceaudit' : return ResourceAudit.newBuilder(); 
case 'conditionalpolicy' : return ConditionalPolicy.newBuilder(); 
case 'tokenpairauthtoken' : return TokenPairAuthToken.newBuilder(); 
case 'oauthgranttoken' : return OAuthGrantToken.newBuilder(); 
case 'samlauthentication' : return SAMLAuthentication.newBuilder(); 
case 'iscuserticketusage' : return ISCUserTicketUsage.newBuilder(); 
case 'i18n' : return I18n.newBuilder(); 
case 'dccustomdomains' : return DCCustomDomains.newBuilder(); 
case 'serviceorgaddress' : return ServiceOrgAddress.newBuilder(); 
case 'oauthgranttokenscopes' : return OAuthGrantTokenScopes.newBuilder(); 
case 'zaidsmsaudittemplate' : return ZAIDSMSAuditTemplate.newBuilder(); 
case 'lang' : return Lang.newBuilder(); 
case 'oauthaccessgrant' : return OAuthAccessGrant.newBuilder(); 
case 'secretkey' : return SecretKey.newBuilder(); 
case 'inviteduserdetails' : return InvitedUserDetails.newBuilder(); 
case 'oauthaccesstoken' : return OAuthAccessToken.newBuilder(); 
case 'deploymentconfig' : return DeploymentConfig.newBuilder(); 
case 'accountoauthaccessgrantscopes' : return AccountOAuthAccessGrantScopes.newBuilder(); 
case 'rebrandl10n' : return RebrandL10n.newBuilder(); 
case 'resourceaction' : return ResourceAction.newBuilder(); 
case 'isdcode' : return ISDCode.newBuilder(); 
case 'appaccountpolicy' : return AppAccountPolicy.newBuilder(); 
case 'apiaudittemplate' : return APIAuditTemplate.newBuilder(); 
case 'group' : return Group.newBuilder(); 
case 'groupmember' : return GroupMember.newBuilder(); 
case 'usersystemproperties' : return UserSystemProperties.newBuilder(); 
case 'usercustomfield' : return UserCustomField.newBuilder(); 
case 'authsecret' : return AuthSecret.newBuilder(); 
case 'attribute' : return Attribute.newBuilder(); 
case 'userapp' : return UserApp.newBuilder(); 
case 'oauthaudittemplate' : return OAuthAuditTemplate.newBuilder(); 
case 'appaccountlicense' : return AppAccountLicense.newBuilder(); 
case 'serviceorgaccountmapping' : return ServiceOrgAccountMapping.newBuilder(); 
case 'useremail' : return UserEmail.newBuilder(); 
case 'noderange' : return NodeRange.newBuilder(); 
case 'samlappsessionindex' : return SamlAppSessionIndex.newBuilder(); 
case 'clientaccessip' : return ClientAccessIp.newBuilder(); 
case 'oauthclientproperties' : return OAuthClientProperties.newBuilder(); 
case 'mailclientaudit' : return MailClientAudit.newBuilder(); 
case 'manageddevice' : return ManagedDevice.newBuilder(); 
case 'accountmemberrole' : return AccountMemberRole.newBuilder(); 
case 'uniqueidrangegenerationaudit' : return UniqueIdRangeGenerationAudit.newBuilder(); 
case 'authenticationtokens' : return AuthenticationTokens.newBuilder(); 
case 'appi18n' : return AppI18n.newBuilder(); 
case 'accountattribute' : return AccountAttribute.newBuilder(); 
case 'automation' : return Automation.newBuilder(); 
case 'ace' : return ACE.newBuilder(); 
case 'recoverycode' : return RecoveryCode.newBuilder(); 
case 'userappkeystore' : return UserAppKeyStore.newBuilder(); 
case 'appaccountfinancialsettings' : return AppAccountFinancialSettings.newBuilder(); 
case 'statement' : return Statement.newBuilder(); 
case 'designations' : return Designations.newBuilder(); 
case 'authtooauth' : return AuthtoOAuth.newBuilder(); 
case 'useralldomainstoken' : return UserAllDomainsToken.newBuilder(); 
case 'bannertemplateprops' : return BannerTemplateProps.newBuilder(); 
case 'approleoperations' : return AppRoleOperations.newBuilder(); 
case 'oauthclientscopes' : return OAuthClientScopes.newBuilder(); 
case 'acp' : return ACP.newBuilder(); 
case 'registrationaudit' : return RegistrationAudit.newBuilder(); 
case 'invitationdetails' : return InvitationDetails.newBuilder(); 
case 'appaccountservice' : return AppAccountService.newBuilder(); 
case 'userservicepreference' : return UserServicePreference.newBuilder(); 
case 'parentzaid' : return ParentZAID.newBuilder(); 
case 'captcha' : return Captcha.newBuilder(); 
case 'oauthapitokenscopes' : return OAuthApiTokenScopes.newBuilder(); 
case 'register' : return Register.newBuilder(); 
case 'mfapolicy' : return MFAPolicy.newBuilder(); 
case 'oauthdevicetokenscopes' : return OAuthDeviceTokenScopes.newBuilder(); 
case 'apiaudit' : return APIAudit.newBuilder(); 
case 'ipaddress' : return IpAddress.newBuilder(); 
case 'oauthallowedclients' : return OAuthAllowedClients.newBuilder(); 
case 'tfaaudit' : return TFAAudit.newBuilder(); 
case 'email' : return Email.newBuilder(); 
case 'signinfailedaudit' : return SignInFailedAudit.newBuilder(); 
case 'clientportalorgtype' : return ClientPortalOrgType.newBuilder(); 
case 'portalmapping' : return PortalMapping.newBuilder(); 
case 'oauthdcdigest' : return OAuthDCDigest.newBuilder(); 
case 'oauthdevicetokenorginfo' : return OAuthDeviceTokenOrgInfo.newBuilder(); 
case 'resourcemapping' : return ResourceMapping.newBuilder(); 
case 'usersigninuseragent' : return UserSigninUserAgent.newBuilder(); 
case 'mfaaudit' : return MFAAudit.newBuilder(); 
case 'passwordpolicy' : return PasswordPolicy.newBuilder(); 
case 'cportaladmin' : return CPortalAdmin.newBuilder(); 
case 'usersystemroles' : return UserSystemRoles.newBuilder(); 
case 'mailtypes' : return MailTypes.newBuilder(); 
case 'orgupauthtoken' : return OrgUPAuthToken.newBuilder(); 
case 'authdomainsignup' : return AuthDomainSignup.newBuilder(); 
case 'uniqueid' : return UniqueId.newBuilder(); 
case 'yubikeyregistrationdata' : return YubikeyRegistrationData.newBuilder(); 
case 'apptemplate' : return AppTemplate.newBuilder(); 
case 'useraccountsproperties' : return UserAccountsProperties.newBuilder(); 
case 'userwhitelistedclient' : return UserWhiteListedClient.newBuilder(); 
case 'rebrand' : return Rebrand.newBuilder(); 
case 'userrestrictedscope' : return UserRestrictedScope.newBuilder(); 
case 'samlspappinfo' : return SAMLSpAppInfo.newBuilder(); 
case 'saml' : return Saml.newBuilder(); 
case 'appaccountdevices' : return AppAccountDevices.newBuilder(); 
case 'zaid' : return ZAID.newBuilder(); 
case 'serviceorglogo' : return ServiceOrgLogo.newBuilder(); 
case 'samlspuser' : return SAMLSpUser.newBuilder(); 
case 'role' : return Role.newBuilder(); 
case 'groupsyncservices' : return GroupSyncServices.newBuilder(); 
case 'authorizedip' : return AuthorizedIp.newBuilder(); 
case 'portalaccountmapping' : return PortalAccountMapping.newBuilder(); 
case 'domain' : return Domain.newBuilder(); 
case 'announcements' : return Announcements.newBuilder(); 
case 'oauthapitoken' : return OAuthApiToken.newBuilder(); 
case 'usertokenpairdetails' : return UserTokenPairDetails.newBuilder(); 
case 'accountjoinrequests' : return AccountJoinRequests.newBuilder(); 
case 'oauthtokenusage' : return OAuthTokenUsage.newBuilder(); 
case 'listener' : return Listener.newBuilder(); 
case 'trusteddomain' : return TrustedDomain.newBuilder(); 
case 'userinfo' : return UserInfo.newBuilder(); 
case 'appaccount' : return AppAccount.newBuilder(); 
case 'serviceorginvitation' : return ServiceOrgInvitation.newBuilder(); 
case 'properties' : return Properties.newBuilder(); 
case 'conditionaluser' : return ConditionalUser.newBuilder(); 
case 'oauthappgroup' : return OAuthAppGroup.newBuilder(); 
case 'scopedescriptions' : return ScopeDescriptions.newBuilder(); 
case 'oauthmobiledevicesdetails' : return OAuthMobileDevicesDetails.newBuilder(); 
case 'screenname' : return ScreenName.newBuilder(); 
case 'jwtconfiguration' : return JWTConfiguration.newBuilder(); 
case 'appaccountinvitationtemplate' : return AppAccountInvitationTemplate.newBuilder(); 
case 'oauthinternaltoken' : return OAuthInternalToken.newBuilder(); 
case 'password' : return Password.newBuilder(); 
case 'username' : return UserName.newBuilder(); 
case 'mobilecount' : return MobileCount.newBuilder(); 
case 'groupinvitation' : return GroupInvitation.newBuilder(); 
case 'accountaudittemplate' : return AccountAuditTemplate.newBuilder(); 
case 'usermailfetchlocation' : return UserMailFetchLocation.newBuilder(); 
case 'serviceorgmember' : return ServiceOrgMember.newBuilder(); 
case 'iscticketscope' : return ISCTicketScope.newBuilder(); 
case 'accountremoteauthconf' : return AccountRemoteAuthConf.newBuilder(); 
case 'appaccountaddress' : return AppAccountAddress.newBuilder(); 
case 'authtokendetails' : return AuthTokenDetails.newBuilder(); 
case 'oidcapp' : return OIDCApp.newBuilder(); 
case 'scope' : return Scope.newBuilder(); 
case 'serviceorgproductionzsoid' : return ServiceOrgProductionZSOID.newBuilder(); 
case 'userexpiry' : return UserExpiry.newBuilder(); 
case 'zaidsmsaudit' : return ZAIDSMSAudit.newBuilder(); 
case 'authtoken' : return AuthToken.newBuilder(); 
case 'oauthmobileappname' : return OAuthMobileAppName.newBuilder(); 
case 'accountaudit' : return AccountAudit.newBuilder(); 
case 'oauthmobileappservice' : return OAuthMobileAppService.newBuilder(); 
case 'location' : return Location.newBuilder(); 
case 'account' : return Account.newBuilder(); 
case 'accountcloseaudit' : return AccountCloseAudit.newBuilder(); 
case 'address' : return Address.newBuilder(); 
case 'authtokenscope' : return AuthTokenScope.newBuilder(); 
case 'license' : return License.newBuilder(); 
case 'mailsender' : return MailSender.newBuilder(); 
case 'accountkyccontact' : return AccountKYCContact.newBuilder(); 
case 'passwordhistory' : return PasswordHistory.newBuilder(); 
case 'usertpsecretgroup' : return UserTPSecretGroup.newBuilder(); 
case 'serviceorgmemberrole' : return ServiceOrgMemberRole.newBuilder(); 
case 'telesignlanguage' : return TelesignLanguage.newBuilder(); 
case 'manageddeviceusers' : return ManagedDeviceUsers.newBuilder(); 
case 'usergdprdetails' : return UserGDPRDetails.newBuilder(); 
case 'oauthmobileuserdevicesubclients' : return OAuthMobileUserDeviceSubClients.newBuilder(); 
case 'serviceorgdomain' : return ServiceOrgDomain.newBuilder(); 
case 'oauthmobileuserdeviceclients' : return OAuthMobileUserDeviceClients.newBuilder(); 
case 'serviceorgtype' : return ServiceOrgType.newBuilder(); 
case 'zgid' : return ZGID.newBuilder(); 
case 'applanguages' : return AppLanguages.newBuilder(); 
case 'userthirdpartysecretkeys' : return UserThirdPartySecretKeys.newBuilder(); 
case 'domainvsauthsecret' : return DomainVsAuthSecret.newBuilder(); 
case 'acpsecret' : return AcpSecret.newBuilder(); 
case 'routingpolicyuser' : return RoutingPolicyUser.newBuilder(); 
case 'preference' : return Preference.newBuilder(); 
case 'userverificationcode' : return UserVerificationCode.newBuilder(); 
case 'serviceorgtempaccess' : return ServiceOrgTempAccess.newBuilder(); 
case 'emailaction' : return EmailAction.newBuilder(); 
case 'apppassword' : return AppPassword.newBuilder(); 
case 'userbasedomaintoken' : return UserBaseDomainToken.newBuilder(); 
case 'useragentaudit' : return UserAgentAudit.newBuilder(); 
case 'accountname' : return AccountName.newBuilder(); 
case 'notifyaction' : return NotifyAction.newBuilder(); 
case 'appaccountconfiguration' : return AppAccountConfiguration.newBuilder(); 
case 'usermobile' : return UserMobile.newBuilder(); 
case 'accountupdateaudit' : return AccountUpdateAudit.newBuilder(); 
case 'zidaudit' : return ZIDAudit.newBuilder(); 
case 'oauthrefreshtokenkey' : return OAuthRefreshTokenKey.newBuilder(); 
case 'applicense' : return AppLicense.newBuilder(); 
case 'oauthopenid' : return OAuthOpenId.newBuilder(); 
case 'registrationaudittemplate' : return RegistrationAuditTemplate.newBuilder(); 
case 'oauthrefreshtokenscopes' : return OAuthRefreshTokenScopes.newBuilder(); 
case 'templateimage' : return TemplateImage.newBuilder(); 
case 'authdomainpolicy' : return AuthDomainPolicy.newBuilder(); 
case 'parentgroup' : return ParentGroup.newBuilder(); 
case 'appaccountpreference' : return AppAccountPreference.newBuilder(); 
case 'shortenurl' : return ShortenURL.newBuilder(); 
case 'usersigninlocation' : return UserSigninLocation.newBuilder(); 
case 'accountoauthaccessgrant' : return AccountOAuthAccessGrant.newBuilder(); 
case 'websigninfailedaudit' : return WebSignInFailedAudit.newBuilder(); 
case 'userdomain' : return UserDomain.newBuilder(); 
case 'subscopes' : return SubScopes.newBuilder(); 
case 'oauthsessiongrant' : return OAuthSessionGrant.newBuilder(); 
case 'oauthdevicetoken' : return OAuthDeviceToken.newBuilder(); 
case 'cachecluster' : return CacheCluster.newBuilder(); 
case 'oauthdcdetails' : return OAuthDcDetails.newBuilder(); 
case 'partner' : return Partner.newBuilder(); 
case 'jwtauthentication' : return JWTAuthentication.newBuilder(); 
case 'oauthrefreshtokenorginfo' : return OAuthRefreshTokenOrgInfo.newBuilder(); 
case 'userauthorizedip' : return UserAuthorizedIp.newBuilder(); 
case 'serviceorginvitationtemplate' : return ServiceOrgInvitationTemplate.newBuilder(); 
case 'oauthgranttokenorginfo' : return OAuthGrantTokenOrgInfo.newBuilder(); 
case 'routingpolicy' : return RoutingPolicy.newBuilder(); 
case 'routingpolicymode' : return RoutingPolicyMode.newBuilder(); 
case 'userdevice' : return UserDevice.newBuilder(); 
case 'samlreqparam' : return SAMLReqParam.newBuilder(); 
case 'resourceaudittemplate' : return ResourceAuditTemplate.newBuilder(); 
case 'tagitem' : return TagItem.newBuilder(); 
case 'cachedatastore' : return CacheDataStore.newBuilder(); 
case 'appaccountmember' : return AppAccountMember.newBuilder(); 
case 'samlspappattribute' : return SAMLSpAppAttribute.newBuilder(); 
case 'oauthkeys' : return OAuthKeys.newBuilder(); 
case 'authdomain' : return AuthDomain.newBuilder(); 
case 'tag' : return Tag.newBuilder(); 
case 'usersecretkey' : return UserSecretKey.newBuilder(); 
case 'policy' : return Policy.newBuilder(); 
case 'serviceorgconfiguration' : return ServiceOrgConfiguration.newBuilder(); 
case 'conditionalaccess' : return ConditionalAccess.newBuilder(); 
case 'mailtemplateprops' : return MailTemplateProps.newBuilder(); 
case 'systemopenid' : return SystemOpenId.newBuilder(); 
case 'oauthaccessgrantscopes' : return OAuthAccessGrantScopes.newBuilder(); 
case 'zaaid' : return ZAAID.newBuilder(); 
case 'accountkyc' : return AccountKYC.newBuilder(); 
case 'tfaaudittemplate' : return TFAAuditTemplate.newBuilder(); 
case 'template' : return Template.newBuilder(); 
case 'useroauthapps' : return UserOAuthApps.newBuilder(); 
case 'oauthmobileuserdevice' : return OAuthMobileUserDevice.newBuilder(); 
case 'whitelistedclients' : return WhiteListedClients.newBuilder(); 
case 'userlocation' : return UserLocation.newBuilder(); 
case 'uniqueidrange' : return UniqueIdRange.newBuilder(); 
case 'userserviceorgpreference' : return UserServiceOrgPreference.newBuilder(); 
case 'oneauthpreference' : return OneAuthPreference.newBuilder(); 
case 'clusternode' : return ClusterNode.newBuilder(); 
case 'breachedpassword' : return BreachedPassword.newBuilder(); 
case 'samlspapplogo' : return SAMLSpAppLogo.newBuilder(); 
case 'appallowedmethods' : return AppAllowedMethods.newBuilder(); 
case 'grouplogo' : return GroupLogo.newBuilder(); 
case 'serviceorgkyc' : return ServiceOrgKYC.newBuilder(); 
case 'oauthredirecturl' : return OAuthRedirectURL.newBuilder(); 
case 'invitation' : return Invitation.newBuilder(); 
case 'invitedorgdetails' : return InvitedOrgDetails.newBuilder(); 
case 'roleresourcemappings' : return RoleResourceMappings.newBuilder(); 
case 'mailclientaudittemplate' : return MailClientAuditTemplate.newBuilder(); 
case 'roleaccesscheck' : return RoleAccessCheck.newBuilder(); 
case 'customfields' : return CustomFields.newBuilder(); 
case 'jwtreqparam' : return JWTReqParam.newBuilder(); 
case 'serviceorgsubservice' : return ServiceOrgSubService.newBuilder(); 
case 'userannouncementstatus' : return UserAnnouncementStatus.newBuilder(); 
case 'accountconfiguration' : return AccountConfiguration.newBuilder(); 
case 'mobilescreenname' : return MobileScreenName.newBuilder(); 
case 'zuid' : return ZUID.newBuilder(); 
case 'mfaaudittemplate' : return MFAAuditTemplate.newBuilder(); 
case 'groupproperties' : return GroupProperties.newBuilder(); 
case 'oauthaccesstokenscopes' : return OAuthAccessTokenScopes.newBuilder(); 
case 'oauthaccesstokenorginfo' : return OAuthAccessTokenOrgInfo.newBuilder(); 
case 'dclocation' : return DCLocation.newBuilder(); 
case 'oauthinternalapitoken' : return OAuthInternalApiToken.newBuilder(); 
case 'user' : return User.newBuilder(); 
case 'accountmember' : return AccountMember.newBuilder(); 
case 'serviceorgkyccontact' : return ServiceOrgKYCContact.newBuilder(); 
case 'oauthclient' : return OAuthClient.newBuilder(); 
case 'accountupdateaudittemplate' : return AccountUpdateAuditTemplate.newBuilder(); 
case 'samlattribute' : return SAMLAttribute.newBuilder(); 
case 'operation' : return Operation.newBuilder(); 
case 'oauthkeypair' : return OAuthKeyPair.newBuilder(); 
case 'appkeystore' : return AppKeyStore.newBuilder(); 
case 'iscticket' : return ISCTicket.newBuilder(); 
case 'userphoto' : return UserPhoto.newBuilder(); 
case 'oauthzid' : return OAuthZID.newBuilder(); 
case 'securityqa' : return SecurityQA.newBuilder(); 
case 'maildetails' : return MailDetails.newBuilder(); 
case 'mailstatusqueue' : return MailStatusQueue.newBuilder(); 
case 'appaccountlogo' : return AppAccountLogo.newBuilder(); 
case 'appannouncement' : return AppAnnouncement.newBuilder(); 
case 'oauthmobiledevices' : return OAuthMobileDevices.newBuilder(); 
case 'signinfailedaudittemplate' : return SignInFailedAuditTemplate.newBuilder(); 
case 'jwtparams' : return JWTParams.newBuilder(); 
case 'accountscheduledetails' : return AccountScheduleDetails.newBuilder(); 
case 'digest' : return Digest.newBuilder(); 
case 'serviceorgzaid' : return ServiceOrgZAID.newBuilder(); 
case 'serviceorgdevices' : return ServiceOrgDevices.newBuilder(); 
case 'serviceorgoauthaccessgrant' : return ServiceOrgOAuthAccessGrant.newBuilder(); 
case 'privacycertificateaudit' : return PrivacyCertificateAudit.newBuilder(); 
case 'logo' : return Logo.newBuilder(); 
case 'userextendedinfo' : return UserExtendedInfo.newBuilder(); 
case 'serviceorgproperties' : return ServiceOrgProperties.newBuilder(); 
case 'oauthrefreshtoken' : return OAuthRefreshToken.newBuilder(); 
case 'partnerzaaid' : return PartnerZAAID.newBuilder(); 
case 'oauthjavascriptdomains' : return OAuthJavaScriptDomains.newBuilder(); 
case 'authtokendeletion' : return AuthTokenDeletion.newBuilder(); 
case 'signinpreference' : return SigninPreference.newBuilder(); 
} }; 
 Accounts.getURITemplate = function(type) { 
 switch(type) {case 'app' : return "/"; 
case 'samlparams' : return "/account/${account.zaid}/authdomain/${authdomain.domain_name}/saml/${saml.saml}/samlparams/${samlparams.param_name}"; 
case 'configuration' : return "/app/${app.app_name}/configuration/${configuration.config_name}"; 
case 'samlspapp' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/samlspapp/${samlspapp.app_id}"; 
case 'userservicedetails' : return "/account/${account.zaid}/user/${user.zuid}/userservicedetails/${userservicedetails.app_id}"; 
case 'sooauthaccessgrantscopes' : return "/serviceorgtype/${serviceorgtype.org_type}/serviceorg/${serviceorg.zsoid}/serviceorgsubservice/${serviceorgsubservice.sub_org_type}/serviceorgoauthaccessgrant/${serviceorgoauthaccessgrant.client_zid}/sooauthaccessgrantscopes/${sooauthaccessgrantscopes.scope_id}"; 
case 'appsystemrole' : return "/app/${app.app_name}/appsystemrole/${appsystemrole.system_role_name}"; 
case 'serviceorg' : return "/serviceorgtype/${serviceorgtype.org_type}/serviceorg/${serviceorg.zsoid}"; 
case 'openid' : return "/account/${account.zaid}/user/${user.zuid}/openid/${openid.open_id_apl}"; 
case 'oauthaudit' : return "/"; 
case 'resourceaudit' : return "/"; 
case 'conditionalpolicy' : return "/account/${account.zaid}/conditionalpolicy/${conditionalpolicy.condition_id}"; 
case 'tokenpairauthtoken' : return "/account/${account.zaid}/user/${user.zuid}/useralldomainstoken/${useralldomainstoken.token}/tokenpairauthtoken/${tokenpairauthtoken.auth_token}"; 
case 'oauthgranttoken' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthgranttoken/${oauthgranttoken.grant_token}"; 
case 'samlauthentication' : return "/account/${account.zaid}/samlauthentication/${samlauthentication.saml_id}"; 
case 'iscuserticketusage' : return "/"; 
case 'i18n' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/lang/${lang.language_code}/i18n/${i18n.i18n_attribute_name}"; 
case 'dccustomdomains' : return "/dclocation/${dclocation.location}/dccustomdomains/${dccustomdomains.entity_name}"; 
case 'serviceorgaddress' : return "/serviceorgtype/${serviceorgtype.org_type}/serviceorg/${serviceorg.zsoid}/serviceorgaddress/${serviceorgaddress.address_type}"; 
case 'oauthgranttokenscopes' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthgranttoken/${oauthgranttoken.grant_token}/oauthgranttokenscopes/${oauthgranttokenscopes.scope_id}"; 
case 'zaidsmsaudittemplate' : return "/"; 
case 'lang' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/lang/${lang.language_code}"; 
case 'oauthaccessgrant' : return "/account/${account.zaid}/user/${user.zuid}/oauthaccessgrant/${oauthaccessgrant.client_zid}"; 
case 'secretkey' : return "/account/${account.zaid}/secretkey/${secretkey.key_label}"; 
case 'inviteduserdetails' : return "/"; 
case 'oauthaccesstoken' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthaccesstoken/${oauthaccesstoken.access_token}"; 
case 'deploymentconfig' : return "/"; 
case 'accountoauthaccessgrantscopes' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/appaccountservice/${appaccountservice.sub_service_type}/accountoauthaccessgrant/${accountoauthaccessgrant.client_zid}/accountoauthaccessgrantscopes/${accountoauthaccessgrantscopes.scope_id}"; 
case 'rebrandl10n' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/lang/${lang.language_code}/rebrandl10n/${rebrandl10n.rebrand_attribute_name}"; 
case 'resourceaction' : return "/account/${account.zaid}/automation/${automation.automation_name}/resourceaction/${resourceaction.resource_action_id}"; 
case 'isdcode' : return "/"; 
case 'appaccountpolicy' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/appaccountpolicy/${appaccountpolicy.policy_key}"; 
case 'apiaudittemplate' : return "/"; 
case 'group' : return "/account/${account.zaid}/group/${group.zgid}"; 
case 'groupmember' : return "/account/${account.zaid}/group/${group.zgid}/groupmember/${groupmember.zuid}"; 
case 'usersystemproperties' : return "/account/${account.zaid}/user/${user.zuid}/usersystemproperties"; 
case 'usercustomfield' : return "/account/${account.zaid}/user/${user.zuid}/usercustomfield/${usercustomfield.zuid}"; 
case 'authsecret' : return "/account/${account.zaid}/authdomain/${authdomain.domain_name}/authsecret/${authsecret.auth_secret}"; 
case 'attribute' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/attribute/${attribute.zuid}"; 
case 'userapp' : return "/"; 
case 'oauthaudittemplate' : return "/"; 
case 'appaccountlicense' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/appaccountservice/${appaccountservice.sub_service_type}/appaccountlicense/${appaccountlicense.license_attribute_key}"; 
case 'serviceorgaccountmapping' : return "/serviceorgtype/${serviceorgtype.org_type}/serviceorg/${serviceorg.zsoid}/serviceorgaccountmapping/${serviceorgaccountmapping.account_id}"; 
case 'useremail' : return "/account/${account.zaid}/user/${user.zuid}/useremail/${useremail.email_id}"; 
case 'noderange' : return "/cachecluster/${cachecluster.cluster_name}/clusternode/${clusternode.node_name}/noderange/${noderange.range_name}"; 
case 'samlappsessionindex' : return "/account/${account.zaid}/user/${user.zuid}/useralldomainstoken/${useralldomainstoken.token}/samlappsessionindex/${samlappsessionindex.session_index}"; 
case 'clientaccessip' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/clientaccessip/${clientaccessip.from_ip}"; 
case 'oauthclientproperties' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthclientproperties/${oauthclientproperties.prop_name}"; 
case 'mailclientaudit' : return "/"; 
case 'manageddevice' : return "/account/${account.zaid}/manageddevice/${manageddevice.api_token}"; 
case 'accountmemberrole' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/appaccountservice/${appaccountservice.sub_service_type}/accountmember/${accountmember.zid}/accountmemberrole/${accountmemberrole.zarid}"; 
case 'uniqueidrangegenerationaudit' : return "/uniqueidrange/${uniqueidrange.unique_id_range_name}/uniqueidrangegenerationaudit/${uniqueidrangegenerationaudit.reserved_from}"; 
case 'authenticationtokens' : return "/app/${app.app_name}/authenticationtokens/${authenticationtokens.token_name}"; 
case 'appi18n' : return "/app/${app.app_name}/applanguages/${applanguages.language_code}/appi18n/${appi18n.i18n_attribute_name}"; 
case 'accountattribute' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/accountattribute/${accountattribute.attribute_key}"; 
case 'automation' : return "/account/${account.zaid}/automation/${automation.automation_name}"; 
case 'ace' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/acp/${acp.acp_id}/ace/${ace.ace_index}"; 
case 'recoverycode' : return "/account/${account.zaid}/user/${user.zuid}/recoverycode/${recoverycode.recovery_code}"; 
case 'userappkeystore' : return "/account/${account.zaid}/user/${user.zuid}/userappkeystore/${userappkeystore.label}"; 
case 'appaccountfinancialsettings' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/appaccountfinancialsettings"; 
case 'statement' : return "/app/${app.app_name}/statement/${statement.statement_id}"; 
case 'designations' : return "/account/${account.zaid}/designations/${designations.designation_id}"; 
case 'authtooauth' : return "/"; 
case 'useralldomainstoken' : return "/account/${account.zaid}/user/${user.zuid}/useralldomainstoken/${useralldomainstoken.token}"; 
case 'bannertemplateprops' : return "/app/${app.app_name}/apptemplate/${apptemplate.template_name}/bannertemplateprops"; 
case 'approleoperations' : return "/app/${app.app_name}/role/${role.role_name}/approleoperations/${approleoperations.operation}"; 
case 'oauthclientscopes' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthclientscopes/${oauthclientscopes.scope_id}"; 
case 'acp' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/acp/${acp.acp_id}"; 
case 'registrationaudit' : return "/"; 
case 'invitationdetails' : return "/account/${account.zaid}/invitation/${invitation.email_id}/invitationdetails/${invitationdetails.appaccount_invitation_id}"; 
case 'appaccountservice' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/appaccountservice/${appaccountservice.sub_service_type}"; 
case 'userservicepreference' : return "/account/${account.zaid}/user/${user.zuid}/userservicedetails/${userservicedetails.app_id}/userservicepreference/${userservicepreference.preference_key}"; 
case 'parentzaid' : return "/zaid/${zaid.zaid}/parentzaid/${parentzaid.parent_zaid}"; 
case 'captcha' : return "/account/${account.zaid}/captcha/${captcha.captcha_digest}"; 
case 'oauthapitokenscopes' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthapitoken/${oauthapitoken.api_key}/oauthapitokenscopes/${oauthapitokenscopes.scope_id}"; 
case 'register' : return "/"; 
case 'mfapolicy' : return "/account/${account.zaid}/authdomain/${authdomain.domain_name}/mfapolicy"; 
case 'oauthdevicetokenscopes' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthdevicetoken/${oauthdevicetoken.device_token}/oauthdevicetokenscopes/${oauthdevicetokenscopes.scope_id}"; 
case 'apiaudit' : return "/"; 
case 'ipaddress' : return "/account/${account.zaid}/ipaddress/${ipaddress.ip_id}"; 
case 'oauthallowedclients' : return "/account/${account.zaid}/user/${user.zuid}/oauthallowedclients/${oauthallowedclients.allowed_client_zid}"; 
case 'tfaaudit' : return "/"; 
case 'email' : return "/zaid/${zaid.zaid}/zuid/${zuid.zuid}/email/${email.email_id}"; 
case 'signinfailedaudit' : return "/"; 
case 'clientportalorgtype' : return "/account/${account.zaid}/clientportalorgtype/${clientportalorgtype.org_type}"; 
case 'portalmapping' : return "/account/${account.zaid}/clientportalorgtype/${clientportalorgtype.org_type}/portalmapping/${portalmapping.mapping_key}"; 
case 'oauthdcdigest' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthdcdigest/${oauthdcdigest.digest}"; 
case 'oauthdevicetokenorginfo' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthdevicetoken/${oauthdevicetoken.device_token}/oauthdevicetokenorginfo/${oauthdevicetokenorginfo.zid}"; 
case 'resourcemapping' : return "/account/${account.zaid}/automation/${automation.automation_name}/resourceaction/${resourceaction.resource_action_id}/resourcemapping/${resourcemapping.resource_mapping_action_id}"; 
case 'usersigninuseragent' : return "/account/${account.zaid}/user/${user.zuid}/usersigninlocation/${usersigninlocation.location}/usersigninuseragent/${usersigninuseragent.user_agent_id}"; 
case 'mfaaudit' : return "/"; 
case 'passwordpolicy' : return "/account/${account.zaid}/authdomain/${authdomain.domain_name}/passwordpolicy"; 
case 'cportaladmin' : return "/account/${account.zaid}/cportaladmin/${cportaladmin.zuid}"; 
case 'usersystemroles' : return "/app/${app.app_name}/appsystemrole/${appsystemrole.system_role_name}/usersystemroles/${usersystemroles.zuid}"; 
case 'mailtypes' : return "/app/${app.app_name}/mailtypes/${mailtypes.mail_type_name}"; 
case 'orgupauthtoken' : return "/zaid/${zaid.zaid}/zuid/${zuid.zuid}/orgupauthtoken/${orgupauthtoken.auth_token}"; 
case 'authdomainsignup' : return "/account/${account.zaid}/authdomain/${authdomain.domain_name}/authdomainsignup"; 
case 'uniqueid' : return "/"; 
case 'yubikeyregistrationdata' : return "/account/${account.zaid}/user/${user.zuid}/yubikeyregistrationdata/${yubikeyregistrationdata.yubikey_id}"; 
case 'apptemplate' : return "/app/${app.app_name}/apptemplate/${apptemplate.template_name}"; 
case 'useraccountsproperties' : return "/account/${account.zaid}/user/${user.zuid}/useraccountsproperties"; 
case 'userwhitelistedclient' : return "/account/${account.zaid}/user/${user.zuid}/oauthaccessgrant/${oauthaccessgrant.client_zid}/userwhitelistedclient"; 
case 'rebrand' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/rebrand/${rebrand.rebrand_attribute_key}"; 
case 'userrestrictedscope' : return "/oauthzid/${oauthzid.zid}/userrestrictedscope/${userrestrictedscope.scope_id}"; 
case 'samlspappinfo' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/samlspapp/${samlspapp.app_id}/samlspappinfo"; 
case 'saml' : return "/account/${account.zaid}/authdomain/${authdomain.domain_name}/saml/${saml.saml}"; 
case 'appaccountdevices' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/appaccountdevices/${appaccountdevices.device_id}"; 
case 'zaid' : return "/"; 
case 'serviceorglogo' : return "/serviceorgtype/${serviceorgtype.org_type}/serviceorg/${serviceorg.zsoid}/serviceorglogo"; 
case 'samlspuser' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/samlspapp/${samlspapp.app_id}/samlspuser/${samlspuser.zid}"; 
case 'role' : return "/app/${app.app_name}/role/${role.role_name}"; 
case 'groupsyncservices' : return "/account/${account.zaid}/group/${group.zgid}/groupsyncservices/${groupsyncservices.arid}"; 
case 'authorizedip' : return "/account/${account.zaid}/authdomain/${authdomain.domain_name}/authorizedip/${authorizedip.from_ip}"; 
case 'portalaccountmapping' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/appaccountservice/${appaccountservice.sub_service_type}/portalaccountmapping/${portalaccountmapping.account_id}"; 
case 'domain' : return "/account/${account.zaid}/domain/${domain.domain}"; 
case 'announcements' : return "/account/${account.zaid}/announcements/${announcements.announcement_id}"; 
case 'oauthapitoken' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthapitoken/${oauthapitoken.api_key}"; 
case 'usertokenpairdetails' : return "/account/${account.zaid}/user/${user.zuid}/useralldomainstoken/${useralldomainstoken.token}/usertokenpairdetails"; 
case 'accountjoinrequests' : return "/account/${account.zaid}/accountjoinrequests/${accountjoinrequests.zuid}"; 
case 'oauthtokenusage' : return "/"; 
case 'listener' : return "/"; 
case 'trusteddomain' : return "/account/${account.zaid}/user/${user.zuid}/trusteddomain/${trusteddomain.trusted_domain}"; 
case 'userinfo' : return "/account/${account.zaid}/user/${user.zuid}/userinfo"; 
case 'appaccount' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}"; 
case 'serviceorginvitation' : return "/serviceorgtype/${serviceorgtype.org_type}/serviceorg/${serviceorg.zsoid}/serviceorgsubservice/${serviceorgsubservice.sub_org_type}/serviceorginvitation/${serviceorginvitation.email_id}"; 
case 'properties' : return "/account/${account.zaid}/user/${user.zuid}/properties/${properties.prop_name}"; 
case 'conditionaluser' : return "/account/${account.zaid}/conditionalpolicy/${conditionalpolicy.condition_id}/conditionaluser/${conditionaluser.zid}"; 
case 'oauthappgroup' : return "/"; 
case 'scopedescriptions' : return "/app/${app.app_name}/scope/${scope.scope_id}/scopedescriptions/${scopedescriptions.operation_type}"; 
case 'oauthmobiledevicesdetails' : return "/oauthmobileappservice/${oauthmobileappservice.service_name}/oauthmobileappname/${oauthmobileappname.mobile_app_name}/oauthmobiledevices/${oauthmobiledevices.oauth_client_id}/oauthmobiledevicesdetails"; 
case 'screenname' : return "/account/${account.zaid}/user/${user.zuid}/screenname/${screenname.screen_name}"; 
case 'jwtconfiguration' : return "/account/${account.zaid}/authdomain/${authdomain.domain_name}/jwtconfiguration/${jwtconfiguration.jwt}"; 
case 'appaccountinvitationtemplate' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/appaccountservice/${appaccountservice.sub_service_type}/appaccountinvitationtemplate/${appaccountinvitationtemplate.template_id}"; 
case 'oauthinternaltoken' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthrefreshtoken/${oauthrefreshtoken.refresh_token}/oauthinternaltoken/${oauthinternaltoken.token_value}"; 
case 'password' : return "/account/${account.zaid}/user/${user.zuid}/password"; 
case 'username' : return "/zaid/${zaid.zaid}/zuid/${zuid.zuid}/username/${username.user_name}"; 
case 'mobilecount' : return "/"; 
case 'groupinvitation' : return "/account/${account.zaid}/group/${group.zgid}/groupinvitation/${groupinvitation.invite_email_id}"; 
case 'accountaudittemplate' : return "/"; 
case 'usermailfetchlocation' : return "/account/${account.zaid}/user/${user.zuid}/usermailfetchlocation/${usermailfetchlocation.location_id}"; 
case 'serviceorgmember' : return "/serviceorgtype/${serviceorgtype.org_type}/serviceorg/${serviceorg.zsoid}/serviceorgsubservice/${serviceorgsubservice.sub_org_type}/serviceorgmember/${serviceorgmember.zuid}"; 
case 'iscticketscope' : return "/zaid/${zaid.zaid}/zuid/${zuid.zuid}/iscticket/${iscticket.isc_ticket}/iscticketscope/${iscticketscope.scope_id}"; 
case 'accountremoteauthconf' : return "/account/${account.zaid}/accountremoteauthconf/${accountremoteauthconf.remote_auth_name}"; 
case 'appaccountaddress' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/appaccountaddress/${appaccountaddress.address_type}"; 
case 'authtokendetails' : return "/account/${account.zaid}/user/${user.zuid}/authtoken/${authtoken.token}/authtokendetails"; 
case 'oidcapp' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/samlspapp/${samlspapp.app_id}/oidcapp/${oidcapp.client_zid}"; 
case 'scope' : return "/app/${app.app_name}/scope/${scope.scope_id}"; 
case 'serviceorgproductionzsoid' : return "/serviceorgtype/${serviceorgtype.org_type}/serviceorgproductionzsoid/${serviceorgproductionzsoid.sub_zsoid}"; 
case 'userexpiry' : return "/"; 
case 'zaidsmsaudit' : return "/"; 
case 'authtoken' : return "/account/${account.zaid}/user/${user.zuid}/authtoken/${authtoken.token}"; 
case 'oauthmobileappname' : return "/oauthmobileappservice/${oauthmobileappservice.service_name}/oauthmobileappname/${oauthmobileappname.mobile_app_name}"; 
case 'accountaudit' : return "/"; 
case 'oauthmobileappservice' : return "/"; 
case 'location' : return "/account/${account.zaid}/location/${location.location_name_apl}"; 
case 'account' : return "/"; 
case 'accountcloseaudit' : return "/"; 
case 'address' : return "/account/${account.zaid}/user/${user.zuid}/address/${address.address_type}"; 
case 'authtokenscope' : return "/account/${account.zaid}/user/${user.zuid}/authtoken/${authtoken.token}/authtokenscope/${authtokenscope.scope_id}"; 
case 'license' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/license/${license.license_attribute_key}"; 
case 'mailsender' : return "/app/${app.app_name}/mailtypes/${mailtypes.mail_type_name}/mailsender"; 
case 'accountkyccontact' : return "/account/${account.zaid}/accountkyc/${accountkyc.zuid}/accountkyccontact/${accountkyccontact.email_id}"; 
case 'passwordhistory' : return "/account/${account.zaid}/user/${user.zuid}/passwordhistory/${passwordhistory.modified_time}"; 
case 'usertpsecretgroup' : return "/account/${account.zaid}/user/${user.zuid}/usertpsecretgroup/${usertpsecretgroup.group_id}"; 
case 'serviceorgmemberrole' : return "/serviceorgtype/${serviceorgtype.org_type}/serviceorg/${serviceorg.zsoid}/serviceorgsubservice/${serviceorgsubservice.sub_org_type}/serviceorgmember/${serviceorgmember.zuid}/serviceorgmemberrole/${serviceorgmemberrole.zarid}"; 
case 'telesignlanguage' : return "/"; 
case 'manageddeviceusers' : return "/account/${account.zaid}/manageddevice/${manageddevice.api_token}/manageddeviceusers/${manageddeviceusers.zid}"; 
case 'usergdprdetails' : return "/account/${account.zaid}/user/${user.zuid}/usergdprdetails"; 
case 'oauthmobileuserdevicesubclients' : return "/oauthmobileuserdevice/${oauthmobileuserdevice.device_id}/oauthmobileuserdeviceclients/${oauthmobileuserdeviceclients.user_zuid}/oauthmobileuserdevicesubclients/${oauthmobileuserdevicesubclients.client_zid}"; 
case 'serviceorgdomain' : return "/serviceorgtype/${serviceorgtype.org_type}/serviceorgdomain/${serviceorgdomain.domain}"; 
case 'oauthmobileuserdeviceclients' : return "/oauthmobileuserdevice/${oauthmobileuserdevice.device_id}/oauthmobileuserdeviceclients/${oauthmobileuserdeviceclients.user_zuid}"; 
case 'serviceorgtype' : return "/"; 
case 'zgid' : return "/zaid/${zaid.zaid}/zgid/${zgid.zgid}"; 
case 'applanguages' : return "/app/${app.app_name}/applanguages/${applanguages.language_code}"; 
case 'userthirdpartysecretkeys' : return "/account/${account.zaid}/user/${user.zuid}/usertpsecretgroup/${usertpsecretgroup.group_id}/userthirdpartysecretkeys/${userthirdpartysecretkeys.app_id}"; 
case 'domainvsauthsecret' : return "/zaid/${zaid.zaid}/accountname/${accountname.account_name}/domainvsauthsecret/${domainvsauthsecret.auth_secret}"; 
case 'acpsecret' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/acp/${acp.acp_id}/acpsecret/${acpsecret.secret_key}"; 
case 'routingpolicyuser' : return "/account/${account.zaid}/routingpolicy/${routingpolicy.policy_id}/routingpolicyuser/${routingpolicyuser.zid}"; 
case 'preference' : return "/account/${account.zaid}/user/${user.zuid}/preference"; 
case 'userverificationcode' : return "/account/${account.zaid}/user/${user.zuid}/userverificationcode/${userverificationcode.vcid}"; 
case 'serviceorgtempaccess' : return "/serviceorgtype/${serviceorgtype.org_type}/serviceorgtempaccess/${serviceorgtempaccess.zsoid}"; 
case 'emailaction' : return "/account/${account.zaid}/automation/${automation.automation_name}/emailaction/${emailaction.email_action_id}"; 
case 'apppassword' : return "/account/${account.zaid}/user/${user.zuid}/apppassword/${apppassword.password_id}"; 
case 'userbasedomaintoken' : return "/account/${account.zaid}/user/${user.zuid}/useralldomainstoken/${useralldomainstoken.token}/userbasedomaintoken/${userbasedomaintoken.base_domain_token}"; 
case 'useragentaudit' : return "/accountaudit/${accountaudit.arid}/useragentaudit"; 
case 'accountname' : return "/zaid/${zaid.zaid}/accountname/${accountname.account_name}"; 
case 'notifyaction' : return "/account/${account.zaid}/automation/${automation.automation_name}/notifyaction/${notifyaction.url_action_id}"; 
case 'appaccountconfiguration' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/appaccountservice/${appaccountservice.sub_service_type}/appaccountconfiguration/${appaccountconfiguration.config_name}"; 
case 'usermobile' : return "/account/${account.zaid}/user/${user.zuid}/usermobile/${usermobile.mobile}"; 
case 'accountupdateaudit' : return "/"; 
case 'zidaudit' : return "/"; 
case 'oauthrefreshtokenkey' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthrefreshtoken/${oauthrefreshtoken.refresh_token}/oauthrefreshtokenkey/${oauthrefreshtokenkey.key_name}"; 
case 'applicense' : return "/app/${app.app_name}/applicense/${applicense.license_attribute_key}"; 
case 'oauthopenid' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthopenid/${oauthopenid.zid}"; 
case 'registrationaudittemplate' : return "/"; 
case 'oauthrefreshtokenscopes' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthrefreshtoken/${oauthrefreshtoken.refresh_token}/oauthrefreshtokenscopes/${oauthrefreshtokenscopes.scope_id}"; 
case 'templateimage' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/template/${template.template_name}/templateimage/${templateimage.image_name_apl}"; 
case 'authdomainpolicy' : return "/account/${account.zaid}/authdomain/${authdomain.domain_name}/authdomainpolicy/${authdomainpolicy.policy_key}"; 
case 'parentgroup' : return "/account/${account.zaid}/group/${group.zgid}/parentgroup/${parentgroup.parent_zgid}"; 
case 'appaccountpreference' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/appaccountpreference"; 
case 'shortenurl' : return "/"; 
case 'usersigninlocation' : return "/account/${account.zaid}/user/${user.zuid}/usersigninlocation/${usersigninlocation.location}"; 
case 'accountoauthaccessgrant' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/appaccountservice/${appaccountservice.sub_service_type}/accountoauthaccessgrant/${accountoauthaccessgrant.client_zid}"; 
case 'websigninfailedaudit' : return "/"; 
case 'userdomain' : return "/account/${account.zaid}/authdomain/${authdomain.domain_name}/userdomain/${userdomain.zuid}"; 
case 'subscopes' : return "/app/${app.app_name}/scope/${scope.scope_id}/subscopes/${subscopes.scope_id}"; 
case 'oauthsessiongrant' : return "/account/${account.zaid}/user/${user.zuid}/useralldomainstoken/${useralldomainstoken.token}/oauthsessiongrant/${oauthsessiongrant.client_zid}"; 
case 'oauthdevicetoken' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthdevicetoken/${oauthdevicetoken.device_token}"; 
case 'cachecluster' : return "/"; 
case 'oauthdcdetails' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthdcdetails/${oauthdcdetails.dc_location}"; 
case 'partner' : return "/"; 
case 'jwtauthentication' : return "/account/${account.zaid}/jwtauthentication/${jwtauthentication.jwt_id}"; 
case 'oauthrefreshtokenorginfo' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthrefreshtoken/${oauthrefreshtoken.refresh_token}/oauthrefreshtokenorginfo/${oauthrefreshtokenorginfo.zid}"; 
case 'userauthorizedip' : return "/account/${account.zaid}/user/${user.zuid}/userauthorizedip/${userauthorizedip.from_ip}"; 
case 'serviceorginvitationtemplate' : return "/serviceorgtype/${serviceorgtype.org_type}/serviceorg/${serviceorg.zsoid}/serviceorgsubservice/${serviceorgsubservice.sub_org_type}/serviceorginvitationtemplate/${serviceorginvitationtemplate.template_id}"; 
case 'oauthgranttokenorginfo' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthgranttoken/${oauthgranttoken.grant_token}/oauthgranttokenorginfo/${oauthgranttokenorginfo.zid}"; 
case 'routingpolicy' : return "/account/${account.zaid}/routingpolicy/${routingpolicy.policy_id}"; 
case 'routingpolicymode' : return "/account/${account.zaid}/routingpolicy/${routingpolicy.policy_id}/routingpolicymode/${routingpolicymode.auth_type}"; 
case 'userdevice' : return "/account/${account.zaid}/user/${user.zuid}/userdevice/${userdevice.device_token_apl}"; 
case 'samlreqparam' : return "/account/${account.zaid}/samlauthentication/${samlauthentication.saml_id}/samlreqparam/${samlreqparam.param_name}"; 
case 'resourceaudittemplate' : return "/"; 
case 'tagitem' : return "/account/${account.zaid}/tag/${tag.tag_name}/tagitem/${tagitem.resource_type}"; 
case 'cachedatastore' : return "/"; 
case 'appaccountmember' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/appaccountmember/${appaccountmember.zid}"; 
case 'samlspappattribute' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/samlspapp/${samlspapp.app_id}/samlspappattribute/${samlspappattribute.attribute_name_apl}"; 
case 'oauthkeys' : return "/"; 
case 'authdomain' : return "/account/${account.zaid}/authdomain/${authdomain.domain_name}"; 
case 'tag' : return "/account/${account.zaid}/tag/${tag.tag_name}"; 
case 'usersecretkey' : return "/account/${account.zaid}/user/${user.zuid}/usersecretkey/${usersecretkey.token_id}"; 
case 'policy' : return "/account/${account.zaid}/policy/${policy.policy_key}"; 
case 'serviceorgconfiguration' : return "/serviceorgtype/${serviceorgtype.org_type}/serviceorg/${serviceorg.zsoid}/serviceorgsubservice/${serviceorgsubservice.sub_org_type}/serviceorgconfiguration/${serviceorgconfiguration.config_name}"; 
case 'conditionalaccess' : return "/account/${account.zaid}/conditionalpolicy/${conditionalpolicy.condition_id}/conditionalaccess/${conditionalaccess.condition_type}"; 
case 'mailtemplateprops' : return "/app/${app.app_name}/apptemplate/${apptemplate.template_name}/mailtemplateprops"; 
case 'systemopenid' : return "/zaid/${zaid.zaid}/zuid/${zuid.zuid}/systemopenid/${systemopenid.open_id_apl}"; 
case 'oauthaccessgrantscopes' : return "/account/${account.zaid}/user/${user.zuid}/oauthaccessgrant/${oauthaccessgrant.client_zid}/oauthaccessgrantscopes/${oauthaccessgrantscopes.scope_id}"; 
case 'zaaid' : return "/zaid/${zaid.zaid}/zaaid/${zaaid.zaaid}"; 
case 'accountkyc' : return "/account/${account.zaid}/accountkyc/${accountkyc.zuid}"; 
case 'tfaaudittemplate' : return "/"; 
case 'template' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/template/${template.template_name}"; 
case 'useroauthapps' : return "/account/${account.zaid}/user/${user.zuid}/useroauthapps/${useroauthapps.app_client_zid}"; 
case 'oauthmobileuserdevice' : return "/"; 
case 'whitelistedclients' : return "/account/${account.zaid}/authdomain/${authdomain.domain_name}/whitelistedclients/${whitelistedclients.client_zid}"; 
case 'userlocation' : return "/account/${account.zaid}/user/${user.zuid}/userlocation/${userlocation.zuid}"; 
case 'uniqueidrange' : return "/"; 
case 'userserviceorgpreference' : return "/serviceorgtype/${serviceorgtype.org_type}/userserviceorgpreference/${userserviceorgpreference.zuid}"; 
case 'oneauthpreference' : return "/account/${account.zaid}/user/${user.zuid}/oneauthpreference"; 
case 'clusternode' : return "/cachecluster/${cachecluster.cluster_name}/clusternode/${clusternode.node_name}"; 
case 'breachedpassword' : return "/"; 
case 'samlspapplogo' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/samlspapp/${samlspapp.app_id}/samlspapplogo"; 
case 'appallowedmethods' : return "/app/${app.app_name}/appallowedmethods/${appallowedmethods.method_id}"; 
case 'grouplogo' : return "/account/${account.zaid}/group/${group.zgid}/grouplogo"; 
case 'serviceorgkyc' : return "/serviceorgtype/${serviceorgtype.org_type}/serviceorg/${serviceorg.zsoid}/serviceorgkyc/${serviceorgkyc.zuid}"; 
case 'oauthredirecturl' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthredirecturl/${oauthredirecturl.redirect_url_apl}"; 
case 'invitation' : return "/account/${account.zaid}/invitation/${invitation.email_id}"; 
case 'invitedorgdetails' : return "/serviceorgtype/${serviceorgtype.org_type}/invitedorgdetails/${invitedorgdetails.org_id}"; 
case 'roleresourcemappings' : return "/roleaccesscheck/${roleaccesscheck.role}/roleresourcemappings/${roleresourcemappings.resource}"; 
case 'mailclientaudittemplate' : return "/"; 
case 'roleaccesscheck' : return "/"; 
case 'customfields' : return "/account/${account.zaid}/customfields/${customfields.custom_field_id}"; 
case 'jwtreqparam' : return "/account/${account.zaid}/jwtauthentication/${jwtauthentication.jwt_id}/jwtreqparam/${jwtreqparam.param_name}"; 
case 'serviceorgsubservice' : return "/serviceorgtype/${serviceorgtype.org_type}/serviceorg/${serviceorg.zsoid}/serviceorgsubservice/${serviceorgsubservice.sub_org_type}"; 
case 'userannouncementstatus' : return "/"; 
case 'accountconfiguration' : return "/account/${account.zaid}/accountconfiguration/${accountconfiguration.config_name}"; 
case 'mobilescreenname' : return "/account/${account.zaid}/user/${user.zuid}/mobilescreenname/${mobilescreenname.mobile_screen_name}"; 
case 'zuid' : return "/zaid/${zaid.zaid}/zuid/${zuid.zuid}"; 
case 'mfaaudittemplate' : return "/"; 
case 'groupproperties' : return "/account/${account.zaid}/group/${group.zgid}/groupproperties/${groupproperties.prop_name}"; 
case 'oauthaccesstokenscopes' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthaccesstoken/${oauthaccesstoken.access_token}/oauthaccesstokenscopes/${oauthaccesstokenscopes.scope_id}"; 
case 'oauthaccesstokenorginfo' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthaccesstoken/${oauthaccesstoken.access_token}/oauthaccesstokenorginfo/${oauthaccesstokenorginfo.zid}"; 
case 'dclocation' : return "/"; 
case 'oauthinternalapitoken' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthapitoken/${oauthapitoken.api_key}/oauthinternalapitoken/${oauthinternalapitoken.token_value}"; 
case 'user' : return "/account/${account.zaid}/user/${user.zuid}"; 
case 'accountmember' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/appaccountservice/${appaccountservice.sub_service_type}/accountmember/${accountmember.zid}"; 
case 'serviceorgkyccontact' : return "/serviceorgtype/${serviceorgtype.org_type}/serviceorg/${serviceorg.zsoid}/serviceorgkyc/${serviceorgkyc.zuid}/serviceorgkyccontact/${serviceorgkyccontact.email_id}"; 
case 'oauthclient' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}"; 
case 'accountupdateaudittemplate' : return "/"; 
case 'samlattribute' : return "/account/${account.zaid}/samlauthentication/${samlauthentication.saml_id}/samlattribute/${samlattribute.app_id}"; 
case 'operation' : return "/"; 
case 'oauthkeypair' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthkeypair/${oauthkeypair.key_id}"; 
case 'appkeystore' : return "/app/${app.app_name}/appkeystore/${appkeystore.label}"; 
case 'iscticket' : return "/zaid/${zaid.zaid}/zuid/${zuid.zuid}/iscticket/${iscticket.isc_ticket}"; 
case 'userphoto' : return "/account/${account.zaid}/user/${user.zuid}/userphoto"; 
case 'oauthzid' : return "/"; 
case 'securityqa' : return "/account/${account.zaid}/user/${user.zuid}/securityqa/${securityqa.question_apl}"; 
case 'maildetails' : return "/app/${app.app_name}/maildetails/${maildetails.connector_name}"; 
case 'mailstatusqueue' : return "/"; 
case 'appaccountlogo' : return "/account/${account.zaid}/appaccount/${appaccount.zaaid}/appaccountlogo"; 
case 'appannouncement' : return "/app/${app.app_name}/appannouncement/${appannouncement.announcement_id}"; 
case 'oauthmobiledevices' : return "/oauthmobileappservice/${oauthmobileappservice.service_name}/oauthmobileappname/${oauthmobileappname.mobile_app_name}/oauthmobiledevices/${oauthmobiledevices.oauth_client_id}"; 
case 'signinfailedaudittemplate' : return "/"; 
case 'jwtparams' : return "/account/${account.zaid}/authdomain/${authdomain.domain_name}/jwtconfiguration/${jwtconfiguration.jwt}/jwtparams/${jwtparams.param_name}"; 
case 'accountscheduledetails' : return "/account/${account.zaid}/accountscheduledetails/${accountscheduledetails.jobid}"; 
case 'digest' : return "/account/${account.zaid}/digest/${digest.digest}"; 
case 'serviceorgzaid' : return "/serviceorgtype/${serviceorgtype.org_type}/serviceorg/${serviceorg.zsoid}/serviceorgzaid/${serviceorgzaid.zaid}"; 
case 'serviceorgdevices' : return "/serviceorgtype/${serviceorgtype.org_type}/serviceorg/${serviceorg.zsoid}/serviceorgdevices/${serviceorgdevices.device_id}"; 
case 'serviceorgoauthaccessgrant' : return "/serviceorgtype/${serviceorgtype.org_type}/serviceorg/${serviceorg.zsoid}/serviceorgsubservice/${serviceorgsubservice.sub_org_type}/serviceorgoauthaccessgrant/${serviceorgoauthaccessgrant.client_zid}"; 
case 'privacycertificateaudit' : return "/"; 
case 'logo' : return "/account/${account.zaid}/logo"; 
case 'userextendedinfo' : return "/account/${account.zaid}/user/${user.zuid}/userextendedinfo"; 
case 'serviceorgproperties' : return "/serviceorgtype/${serviceorgtype.org_type}/serviceorg/${serviceorg.zsoid}/serviceorgproperties/${serviceorgproperties.prop_name}"; 
case 'oauthrefreshtoken' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthrefreshtoken/${oauthrefreshtoken.refresh_token}"; 
case 'partnerzaaid' : return "/serviceorgtype/${serviceorgtype.org_type}/partnerzaaid/${partnerzaaid.child_zid}"; 
case 'oauthjavascriptdomains' : return "/oauthappgroup/${oauthappgroup.oauth_app_group_id}/oauthclient/${oauthclient.client_id}/oauthjavascriptdomains/${oauthjavascriptdomains.domain_apl}"; 
case 'authtokendeletion' : return "/"; 
case 'signinpreference' : return "/account/${account.zaid}/user/${user.zuid}/signinpreference"; 
} };