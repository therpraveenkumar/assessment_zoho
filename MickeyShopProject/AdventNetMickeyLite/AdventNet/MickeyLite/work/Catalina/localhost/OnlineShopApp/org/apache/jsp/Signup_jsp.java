/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.x-dev
 * Generated at: 2024-11-14 04:59:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Signup_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<title>Signup Page</title>\r\n");
      out.write("<link\r\n");
      out.write("	href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\"\r\n");
      out.write("	rel=\"stylesheet\">\r\n");
      out.write("<style>\r\n");
      out.write("body {\r\n");
      out.write("	background-color: #f8f9fa;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".signup-container {\r\n");
      out.write("	max-width: 600px;\r\n");
      out.write("	margin: auto;\r\n");
      out.write("	padding: 30px;\r\n");
      out.write("	background: white;\r\n");
      out.write("	border-radius: 8px;\r\n");
      out.write("	box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"signup-container mt-5\">\r\n");
      out.write("		<h2 class=\"text-center\">Sign Up</h2>\r\n");
      out.write("		<form onsubmit=\"validateInputs(event)\">\r\n");
      out.write("			<div class=\"mb-3\">\r\n");
      out.write("				<label for=\"username\" class=\"form-label\">User Name</label> <input\r\n");
      out.write("					type=\"text\" class=\"form-control\" id=\"username\" required>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"mb-3\">\r\n");
      out.write("				<label for=\"password\" class=\"form-label\">Password (min 8\r\n");
      out.write("					characters, at least one lowercase and one uppercase)</label> <input\r\n");
      out.write("					type=\"password\" class=\"form-control\" id=\"password\" required>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"mb-3\">\r\n");
      out.write("				<label for=\"email\" class=\"form-label\">Email</label> <input\r\n");
      out.write("					type=\"email\" class=\"form-control\" id=\"email\" required>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"mb-3\">\r\n");
      out.write("				<label for=\"phone\" class=\"form-label\">Phone Number</label> <input\r\n");
      out.write("					type=\"tel\" class=\"form-control\" id=\"phone\" required>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"mb-3\">\r\n");
      out.write("				<label for=\"address\" class=\"form-label\">Address</label>\r\n");
      out.write("				<textarea class=\"form-control\" id=\"address\" rows=\"3\" required></textarea>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"mb-3\">\r\n");
      out.write("				<label for=\"city\" class=\"form-label\">City</label> <input type=\"text\"\r\n");
      out.write("					class=\"form-control\" id=\"city\" required>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"mb-3\">\r\n");
      out.write("				<label for=\"state\" class=\"form-label\">State</label> <input\r\n");
      out.write("					type=\"text\" class=\"form-control\" id=\"state\" required>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"mb-3\">\r\n");
      out.write("				<label for=\"pincode\" class=\"form-label\">Pin Code</label> <input\r\n");
      out.write("					type=\"number\" class=\"form-control\" id=\"pincode\" required>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"mb-3\">\r\n");
      out.write("				<label for=\"country\" class=\"form-label\">Country</label> <input\r\n");
      out.write("					type=\"text\" class=\"form-control\" id=\"country\" required>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"mb-3\">\r\n");
      out.write("				<label for=\"hint\" class=\"form-label\">Hint (to remember\r\n");
      out.write("					password) <input type=\"text\" class=\"form-control\" id=\"hint_\"\r\n");
      out.write("					required>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"mb-3\">\r\n");
      out.write("				<label for=\"dob\" class=\"form-label\">Date of Birth</label> <input\r\n");
      out.write("					type=\"date\" class=\"form-control\" id=\"dob\" required>\r\n");
      out.write("			</div>\r\n");
      out.write("			<button type=\"submit\" class=\"btn btn-primary w-100\">Sign Up</button>\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("	<script\r\n");
      out.write("		src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("	<script>\r\n");
      out.write("	/**\r\n");
      out.write("	form the date\r\n");
      out.write("	 */\r\n");
      out.write("	function formatDateToDDMMYYYY(date) {\r\n");
      out.write("	    const day = String(date.getDate()).padStart(2, '0');\r\n");
      out.write("	    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based\r\n");
      out.write("	    const year = date.getFullYear();\r\n");
      out.write("	    return day+\"-\"+month+\"-\"+year;\r\n");
      out.write("	}\r\n");
      out.write("	/**\r\n");
      out.write("	validate signup form and create user\r\n");
      out.write("	 */\r\n");
      out.write("	function validateInputs(event) {\r\n");
      out.write("	    event.preventDefault();\r\n");
      out.write("	\r\n");
      out.write("	    const username = document.getElementById('username').value.trim();\r\n");
      out.write("	    const password = document.getElementById('password').value.trim();\r\n");
      out.write("	    const email = document.getElementById('email').value.trim();\r\n");
      out.write("	    const phone = document.getElementById('phone').value.trim();\r\n");
      out.write("	    const city = document.getElementById('city').value.trim();\r\n");
      out.write("	    const state = document.getElementById('state').value.trim();\r\n");
      out.write("	    const country = document.getElementById('country').value.trim();\r\n");
      out.write("	    const address = document.getElementById('address').value.trim();\r\n");
      out.write("	    const pincode = document.getElementById('pincode').value.trim();\r\n");
      out.write("	    const dob = new Date(document.getElementById('dob').value);\r\n");
      out.write("	    const hint = document.getElementById('hint_').value.trim();\r\n");
      out.write("		\r\n");
      out.write("	    const usernameRegex = /^[A-Za-z][A-Za-z0-9]*$/;\r\n");
      out.write("	    if (!usernameRegex.test(username)) {\r\n");
      out.write("	        alert(\"Username must start with a letter and contain only letters and numbers.\");\r\n");
      out.write("	        return;\r\n");
      out.write("	    }\r\n");
      out.write("	\r\n");
      out.write("	    const phoneRegex = /^\\d{10}$/;\r\n");
      out.write("	    if (!phoneRegex.test(phone)) {\r\n");
      out.write("	        alert(\"Phone number must be exactly 10 digits.\");\r\n");
      out.write("	        return;\r\n");
      out.write("	    }\r\n");
      out.write("	\r\n");
      out.write("	    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z]).{8,}$/;\r\n");
      out.write("	    if (!passwordRegex.test(password)) {\r\n");
      out.write("	        alert(\"Password must be at least 8 characters long, with at least one lowercase and one uppercase letter.\");\r\n");
      out.write("	        return;\r\n");
      out.write("	    }\r\n");
      out.write("	\r\n");
      out.write("	    const alphaRegex = /^[A-Za-z\\s]+$/;\r\n");
      out.write("	    if (!alphaRegex.test(city) || !alphaRegex.test(state) || !alphaRegex.test(country)) {\r\n");
      out.write("	        alert(\"City, State, and Country must contain only letters.\");\r\n");
      out.write("	        return;\r\n");
      out.write("	    }\r\n");
      out.write("	\r\n");
      out.write("	    if (address.length === 0) {\r\n");
      out.write("	        alert(\"Address cannot be empty.\");\r\n");
      out.write("	        return;\r\n");
      out.write("	    }\r\n");
      out.write("	\r\n");
      out.write("	    if (isNaN(pincode) || pincode <= 0) {\r\n");
      out.write("	        alert(\"Pin Code must be a positive number.\");\r\n");
      out.write("	        return;\r\n");
      out.write("	    }\r\n");
      out.write("	\r\n");
      out.write("	    const today = new Date();\r\n");
      out.write("	    let age = today.getFullYear() - dob.getFullYear();\r\n");
      out.write("	    const monthDiff = today.getMonth() - dob.getMonth();\r\n");
      out.write("	    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < dob.getDate())) {\r\n");
      out.write("	        age--;\r\n");
      out.write("	    }\r\n");
      out.write("	    \r\n");
      out.write("	\r\n");
      out.write("	    if (age < 18 || age > 150) {\r\n");
      out.write("	        alert(\"You must be at least 18 years old and less than 150 years old.\");\r\n");
      out.write("	        return;\r\n");
      out.write("	    }\r\n");
      out.write("	    \r\n");
      out.write("	    const xhr = new XMLHttpRequest();\r\n");
      out.write("	    const formattedDob = formatDateToDDMMYYYY(dob);\r\n");
      out.write("	\r\n");
      out.write("	    const params = new URLSearchParams({\r\n");
      out.write("	        action: 'add_user',\r\n");
      out.write("	        userName: username,\r\n");
      out.write("	        password: password,\r\n");
      out.write("	        phone: phone,\r\n");
      out.write("	        city: city,\r\n");
      out.write("	        state: state,\r\n");
      out.write("	        country: country,\r\n");
      out.write("	        address: address,\r\n");
      out.write("	        pincode: pincode,\r\n");
      out.write("	        dob: formattedDob,\r\n");
      out.write("	        hint: hint,\r\n");
      out.write("	        email: email\r\n");
      out.write("	    });\r\n");
      out.write("	    \r\n");
      out.write("	    xhr.open(\"POST\", \"validator?\" + params.toString(), true);\r\n");
      out.write("		xhr.onreadystatechange = function() {\r\n");
      out.write("			if (xhr.readyState === 4 && xhr.status === 200) {\r\n");
      out.write("				alert(xhr.responseText);\r\n");
      out.write("			}\r\n");
      out.write("		};\r\n");
      out.write("		xhr.send();\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
